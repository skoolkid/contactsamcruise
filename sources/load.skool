; Copyright 2010-2013, 2015, 2017-2018, 2021 Richard Dymond
; (rjdymond@gmail.com)

@defb=00259:60,0,124,60,66,120,60,66,62,126,126,0,66,60,124
@defb=00275:60,60,126,60,8,0,0,124,126,66,0,0,16,0,62,126
@defb=00294:254,66,126,66,0,0,0,0,0,0,36,0,60,60,0,60,66,124
@defb=00314:36,0,124,60,66,60,126,0,66,126,66,0,0,20,60,254,0,254,60,124
@defb=00336:36
@defb=00515:70,16,66,66,98,68,66,102,8,4,64,0,66,64,66
@defb=00531:66,66,2,66,24,0,0,66,64,102,0,68,16,0,8,64,0,64
@defb=00550:16,66,64,98,0,0,0,0,0,0,126,0,66,66,0,64,66,66
@defb=00569:60,126,0,66,66,66,64,64,0,98,64,66,0,64,40,66,16
@defb=00587:16,66,66,0,68,126
@defb=00771:74,8,66,66,82,66,66,90,8,8,124,0,66,60,66
@defb=00787:2,12,4,66,40,16,0,66,124,90,0,40,16,0,8,124,0,32
@defb=00806:16,126,124,82,0,0,0,0,0,0,36,0,64,66,0,60,66,124
@defb=00825:68,36,0,66,66,66,60,124,0,82,124,66,0,32,0,66,16
@defb=00843:16,66,124,0,84,36
@defb=01027:82,4,124,126,74,66,66,66,8,16,64,0,66,2,124
@defb=01043:60,2,8,62,72,0,0,124,64,66,0,16,16,0,8,64,0,16
@defb=01062:16,66,64,74,0,0,0,0,0,0,36,0,78,66,0,2,66,66
@defb=01081:68,36,0,124,126,66,2,64,0,74,64,66,0,16,0,126,16
@defb=01099:16,126,66,0,84,36
@defb=01283:98,8,68,66,70,68,66,66,8,32,64,0,66,66,68
@defb=01299:64,66,16,2,126,0,0,68,64,66,0,40,0,0,8,64,0,8
@defb=01318:16,66,64,70,0,0,0,0,0,0,126,0,66,66,0,66,66,66
@defb=01337:60,126,0,64,66,66,66,64,0,70,64,90,0,8,0,66,16
@defb=01355:16,66,66,0,84,126
@defb=01539:60,16,66,66,66,120,60,66,62,126,126,0,60,60,66
@defb=01555:126,60,16,60,8,16,0,66,126,66,0,68,16,0,62,64,0,4
@defb=01574:16,66,126,66,0,0,0,0,0,0,36,0,60,60,0,60,60,124
@defb=01593:4,36,0,64,66,60,60,126,0,66,126,36,0,4,0,66,16
@defb=01611:16,66,124,0,40,36
@defb=01849:56
@defb=04320:255,255
@defb=04576:195,187
@defb=04832:189,183
@defb=05088:251,143
@defb=05344:247,183
@defb=05600:255,187
@defb=05856:247,189
@defb=06112:255,255
@defs=06144:768,56
@defb=06880:184,184
; After the program 'samcruise' has loaded, this is where it all starts...
;
; #UDGTABLE
; { #SCRdf=0,af=6144(loader) | This is the initial loader program for Contact
; Sam Cruise (as it appears after doing 'POKE 23762,0' to change the INK for
; the BASIC listing from white to black). Don't be fooled by the 'RANDOMIZE USR
; 23794': the floating point number stored underneath is actually #w24055. }
; TABLE#
; .
; Entering the code here from BASIC means that #REGc=#b247 (the LSB of
; #w24055); this value is used later on in the routine at #R32815.
c24055 JP 23831      ; Jump to where it really starts
; And this is where it really starts.
*23831 DI            ; Disable interrupts
 23832 LD B,49       ;
 23834 LD DE,65487   ;
 23837 CALL 24047    ;
; And so begins the misdirection.
*24047 POP HL        ; #REGhl=#w23840
 24048 ADD HL,DE     ; #REGhl=#w23791
 24049 PUSH HL       ;
 24050 LD DE,7       ;
 24053 ADD HL,DE     ; #REGhl=#w23798
 24054 RET           ; Jump to #w23791
; Undo some code obfuscation before continuing.
*23791 LD A,(HL)     ; {Do some #S/XOR/-ing on the 49 bytes from #w23798 to
 23792 XOR H         ; #w23846
 23793 XOR L         ;
 23794 LD (HL),A     ;
 23795 INC HL        ;
 23796 DJNZ 23791    ; }
; After the #S/XOR/-ing:
*23798 EXX           ;
 23799 EX (SP),HL    ; #REGhl'=#w11563
 23800 LD A,H        ; #REGa=#b45
 23801 AND L         ; #REGa=#b41
 23802 ADD A,L       ; #REGa=#b84
 23803 ADD A,L       ; #REGa=#b127
 23804 LD H,A        ; #REGh'=#b127
 23805 ADD A,78      ; #REGa=#b205
 23807 LD L,A        ; #REGhl'=#w32717
 23808 EXX           ;
 23809 LD HL,23551   ; {INK 1: PAPER 1
*23812 LD (HL),9     ;
 23814 DEC HL        ;
 23815 BIT 3,H       ;
 23817 JR NZ,23812   ; }
*23819 LD (HL),0     ; {Clear the display file
 23821 DEC HL        ;
 23822 BIT 6,H       ;
 23824 JR NZ,23819   ; }
 23826 INC E         ; {#REGde=#w9
 23827 INC E         ; }
 23828 CALL 24047    ;
; More misdirection.
*24047 POP HL        ; #REGhl=#w23831
 24048 ADD HL,DE     ; #REGhl=#w23840
 24049 PUSH HL       ;
 24050 LD DE,7       ;
 24053 ADD HL,DE     ; #REGhl=#w23847
 24054 RET           ; Jump to #w23840
; Undo some more code obfuscation before continuing.
*23840 LD A,(HL)     ; {Do some #S/XOR/-ing and #S/RLC/-ing on the 217 bytes
 23841 XOR E         ; from #w23847 to #w24063
 23842 RLCA          ;
 23843 LD (HL),A     ;
 23844 INC L         ;
 23845 JR NZ,23840   ; }
; After the #S/XOR/-ing and #S/RLC/-ing:
*23847 PUSH HL       ; #REGhl=#w23808
 23848 EXX           ;
 23849 POP DE        ; #REGde'=#w23808
 23850 EX DE,HL      ; #REGde'=#w32717
 23851 LD BC,255     ; {Copy 255 bytes from #w23808-#w24062 to #w32717-#w32971
 23854 LDIR          ; }
 23856 LD E,A        ; #REGe'=#b47
 23857 EX DE,HL      ; #REGhl'=#w32815
 23858 JP (HL)       ; Jump to #R32815

@start
@expand=#DEF(#S #FORMAT({mode[case]}))
@replace=/#BUG(?![A-Z])/#LINK:Bugs
@replace=/#n\i/#N\1,,,1($)
@replace=/#b\i/#N(\1,,,1)(0x)/ (byte)
@replace=/#w\i/#N(\1,4)/ (word)
; Copyright 1986 Microsphere Computer Services Ltd (Contact Sam Cruise)
; Copyright 2010-2013, 2015, 2017-2019, 2021 Richard Dymond (this disassembly)

@org
; Collect one bit from tape
;
; Used by the routine at #R32815.
@label=EDGE2
c32768 INC SP        ; {Place the address #w0 on the stack above the current
 32769 INC SP        ; return address, so the Spectrum will reset if there's a
 32770 EX (SP),HL    ; loading error
 32771 LD H,0        ;
 32773 LD L,H        ;
 32774 EX (SP),HL    ;
 32775 DEC SP        ;
 32776 DEC SP        ; }
 32777 LD A,6        ; After the fast code block has loaded, this instruction
                     ; is changed to '#S/LD A/,#n17' for the standard speed
                     ; code block
 32779 CALL 32785    ; Listen for one edge
 32782 RET NC        ; Return if no edge was found within the time limit
; This entry point is also used by the routine at #R32815.
@label=EDGE1
*32783 LD A,11       ; {Wait a bit; after the fast code block has loaded, this
@label=DELAY
*32785 DEC A         ; instruction is changed to '#S/LD A/,#n22' for the
 32786 JR NZ,32785   ; standard speed code block}
 32788 AND A         ; Reset the carry flag
@label=SAMPLE
*32789 INC B         ; Have we run out of time to find an edge?
 32790 RET Z         ; Return with the carry flag reset if so
 32791 LD A,127      ; {Collect an EAR port reading in bit 6 of #REGa
 32793 IN A,(254)    ; }
 32795 RRA           ; Move it to bit 5 of #REGa
 32796 AND A         ; In the analogous ROM routine, the instruction here is
                     ; '#S/RET NC/', causing a return if BREAK was pressed;
                     ; that behaviour is disabled when loading the fast code
                     ; block (pressing BREAK does nothing), but after the fast
                     ; code block has loaded, this instruction is changed to
                     ; '#S/RET NC/' for the standard speed code block
 32797 XOR C         ; {Compare this EAR port reading with the previous one
 32798 AND 32        ; }
 32800 JR Z,32789    ; Jump back if they are the same (i.e. no edge was found)
 32802 LD A,C        ; {Alternate the border colour
 32803 CPL           ;
 32804 LD C,A        ;
 32805 AND 7         ;
 32807 OR 8          ;
 32809 OUT (254),A   ; }
 32811 SCF           ; Signal: an edge was found within the time limit
 32812 RET           ; Return with #REGb indicating the time taken to find the
                     ; edge

i32813 DEFS 2

; Load the next code block
;
; Continues from #R24055 (to load the fast code block) and #R33046 (to load the
; standard speed code block).
@label=CSCLOAD
c32815 LD SP,33020   ; Put the stack somewhere safe
 32818 LD IX,33195   ; The fast code block loads backwards from address
                     ; #w33195; after the fast code block has loaded, this
                     ; instruction is changed to '#S/LD IX/,#n16384' for the
                     ; standard speed code block
@nowarn
 32822 LD DE,49152   ; Set #REGde (the byte counter) to a high enough value
                     ; that it won't reach 0 before (a) 241 bytes have been
                     ; loaded from the fast code block, or (b) the first 16572
                     ; bytes (#w16384-#w32955) have been loaded from the
                     ; standard speed code block
 32825 LD A,255      ; We expect the first byte loaded (the flag byte) to be
                     ; #b255
 32827 SCF           ; In the analogous ROM routine, setting the carry flag
                     ; would indicate that we want to LOAD rather than VERIFY;
                     ; here, this flag is not used
 32828 INC D         ; Reset the zero flag, indicating that we haven't loaded
                     ; the first byte of the data block (the flag byte) yet
 32829 EX AF,AF'     ; Save these flags
 32830 DEC D         ; Restore the value of #REGde
 32831 DI            ; Disable interrupts
 32832 LD A,15       ; {BORDER 7
 32834 OUT (254),A   ; }
 32836 IN A,(254)    ; Collect an initial EAR port reading into bit 6 of #REGa
 32838 RRA           ; Move it to bit 5 of #REGa
 32839 AND 32        ; Clear the extraneous bits (0-4 and 6-7)
 32841 OR 2          ; The border will turn red when the first edge is found
 32843 LD C,A        ; #REGc will hold the border colour
 32844 CP A          ; Set the zero flag to avoid returning at the next
                     ; instruction
@label=BREAK
*32845 RET NZ        ; In the analogous ROM routine, this instruction would
                     ; return if the BREAK key is being pressed; here, the zero
                     ; flag is always set
@label=START
*32846 CALL 32783    ; Listen for an edge
 32849 JR NC,32845   ; Jump back to listen again if no edge was found within
                     ; the time limit
; An edge was found. Wait a bit and then listen again.
 32851 LD HL,1045    ; {Wait for about one second
@label=WAIT
*32854 DJNZ 32854    ;
 32856 DEC HL        ;
 32857 LD A,H        ;
 32858 OR L          ;
 32859 JR NZ,32854   ; }
 32861 CALL 32768    ; Are the edges still coming?
 32864 JR NC,32845   ; Jump back if not
; Check whether the signal is a leader tone.
@label=LEADER
*32866 LD B,156      ; {256 double edges arriving within a specific time limit
 32868 CALL 32768    ; constitute a valid leader tone
 32871 JR NC,32845   ;
 32873 LD A,198      ;
 32875 CP B          ;
 32876 JR NC,32846   ;
 32878 INC H         ;
 32879 JR NZ,32866   ; }
; This looks like a leader tone. Now listen for the first edge of the data
; block.
@label=SYNC
*32881 LD B,201      ; {Is the leader tone still there?
 32883 CALL 32783    ; }
 32886 JR NC,32845   ; Jump back if not
 32888 LD A,B        ; {Have we found the first edge of the data block?
 32889 CP 212        ; }
 32891 JR NC,32881   ; Jump back if not
; The first edge of the data block has been detected.
 32893 CALL 32783    ; Look for the second edge of the data block
 32896 RET NC        ; Reset the Spectrum if it can't be found
; Prepare to load the data block.
 32897 LD A,C        ; {The border will alternate between blue and yellow for
 32898 XOR 3         ; the data block
 32900 LD C,A        ; }
 32901 LD H,0        ; Initialise the parity byte to 0
 32903 LD B,225      ; Set the timing constant for the flag byte; after the
                     ; fast code block has loaded, this instruction is changed
                     ; to '#S/LD B/,#n176' for the standard speed code block
 32905 JR 32933      ; Jump forward to load the flag byte
; This is the byte-loading loop. The first byte loaded is the flag byte.
@label=LOOP
*32907 NOP           ;
 32908 NOP           ;
 32909 EX AF,AF'     ; Restore the flags
 32910 JR NZ,32917   ; Jump if the first byte (the flag byte) has just been
                     ; collected
 32912 LD (IX+0),L   ; Load the byte read from tape into memory
 32915 JR 32927      ;
@label=FLAG
*32917 RL C          ; Save the carry flag in bit 0 of #REGc temporarily
 32919 XOR L         ; #REGl=first byte of the data block (the flag byte)
 32920 RET NZ        ; Reset the Spectrum if it wasn't #b255
 32921 LD A,C        ; {Restore the carry flag
 32922 RRA           ; }
 32923 LD C,A        ; Restore #REGc
 32924 INC DE        ; Compensate for the '#S/DEC DE/' below
 32925 JR 32929      ; Jump forward to start loading bytes into memory
@label=NEXT
*32927 DEC IX        ; #REGix=next address to load the byte from tape into;
                     ; after the fast code block has loaded, this instruction
                     ; is changed to '#S/INC IX/' for the standard speed code
                     ; block
@label=DECBCNT
*32929 DEC DE        ; Decrease the byte counter
 32930 EX AF,AF'     ; Save the flags (the zero flag is now set)
@label=INNERLOOP
*32931 LD B,227      ; Set the timing constant; after the fast code block has
                     ; loaded, this instruction is changed to '#S/LD B/,#n178'
                     ; for the standard speed code block
@label=MARKER
*32933 LD L,1        ; Get ready to load eight bits from the tape
@label=EIGHTBITS
*32935 CALL 32768    ; Load one bit from the tape
 32938 RET NC        ; Reset the Spectrum if there was a loading error
 32939 LD A,237      ; {Set the carry flag if a '1' was read from the tape, or
 32941 CP B          ; reset it if a '0' was read; after the fast code block
                     ; has loaded, the '#S/LD A/,#n237' instruction is changed
                     ; to '#S/LD A/,#n203' for the standard speed code block}
 32942 RL L          ; Move the bit into the #REGl register
 32944 LD B,225      ; Set the timing constant for the next bit; after the fast
                     ; code block has loaded, this instruction is changed to
                     ; '#S/LD B/,#n176' for the standard speed code block
 32946 JP NC,32935   ; Jump unless eight bits have been loaded
; A full byte has just been read from the tape.
 32949 LD A,H        ; {Update the (ultimately unused) parity byte against the
 32950 XOR L         ; byte just read from the tape
 32951 LD H,A        ; }
 32952 LD A,D        ; {Set the zero flag if the the byte counter has reached 0
 32953 OR E          ; (which never happens)}
 32954 JR NZ,32907   ; Jump back to load another byte from the tape
@end
; When the bytes from #w33195 downwards to #w32955 have loaded from the fast
; code block, the instruction at #w32954 above becomes:
 32954 JR NZ,32956   ;
; And the code continues at #R32956.
; .
; When the bytes from #w16384 to #w32955 have loaded from the standard speed
; code block, the instruction at #w32954 becomes:
 32954 JR NZ,32890
; At this stage, #w32890 reads as follows:
*32890 LD (IX+20),L  ; Load the byte read from tape into memory
 32893 EXX           ;
 32894 ADD IX,BC     ; Add 247 to #REGix
 32896 EXX           ;
 32897 JR NC,32901   ; Jump unless #REGix was incremented beyond #w65535
 32899 LD IXh,127    ; Reset #REGix to the appropriate range
 32902 JR 32931      ; Jump forward to load the next byte from tape
; Now 32890 more bytes are loaded, the first at #w33223 and the last at #w32902
; (even though there is one more byte, #w33149, left on the tape: see the
; #R33010@save(save routine)). Then #w32902 reads as follows:
 32902 LD SP,23835   ; Point the stack pointer at the game start address that
                     ; was placed at #w23835 by the #R33010@save(save routine)
 32905 LD D,H        ;
 32906 RET           ; To (#n23835)=#R33224@start

; Prepare to load the standard speed code block
;
; This section of code is executed immediately after the fast code block has
; loaded. First of all, it modifies the loading routines at #R32768 and #R32815
; to make them suitable for loading a standard speed block.
c32956 LD B,11       ; {Do the 11 POKEs in the POKE table at #R33024; these
 32958 LD D,128      ; POKEs convert the fast loading routines into standard
 32960 LD HL,33024   ; speed loading routines, ready for the final code block
*32963 LD E,(HL)     ; on the tape
 32964 INC L         ;
 32965 LD A,(HL)     ;
 32966 LD (DE),A     ;
 32967 INC L         ;
 32968 DJNZ 32963    ; }
; Now a checksum of the bytes at addresses #w33024-#w33195 (just loaded from
; tape) is calculated.
 32970 LD L,B        ; #REGhl=#w33024
 32971 LD E,B        ; {#REGde=#w0
 32972 LD D,B        ; }
 32973 LD B,172      ; {Create 'checksums' in #REGa and #REGe of the 172 bytes
*32975 LD A,(HL)     ; at addresses #w33024-#w33195
 32976 ADD A,E       ;
 32977 LD E,A        ;
 32978 LD A,(HL)     ;
 32979 XOR D         ;
 32980 LD D,A        ;
 32981 INC L         ;
 32982 DJNZ 32975    ; }
 32984 LD L,40       ; #REGhl=#w33064
 32986 CP 75         ; Is the checksum in #REGa correct?
 32988 JP NZ,0       ; Reset the Spectrum if not
 32991 LD A,E        ; {Is the checksum in #REGe correct?
 32992 CP 175        ; }
 32994 JP Z,33046    ; Jump if so
 32997 JP 0          ; Otherwise reset the Spectrum

; POKE table
;
; Used by the routine at #R32956 after the fast code block has loaded.
b33024 DEFB 10,17    ; POKE 32778,17 ('#S/LD A/,#n6' becomes '#S/LD A/,#n17')
 33026 DEFB 16,22    ; POKE 32784,22 ('#S/LD A/,#n11' becomes '#S/LD A/,#n22')
 33028 DEFB 52,0     ; {POKE 32820,0: POKE 32821,64 ('#S/LD IX/,#n33195'
 33030 DEFB 53,64    ; becomes '#S/LD IX/,#n16384')}
 33032 DEFB 136,176  ; POKE 32904,176 ('#S/LD B/,#n225' becomes
                     ; '#S/LD B/,#n176')
 33034 DEFB 160,35   ; POKE 32928,35 ('#S/DEC IX/' becomes '#S/INC IX/')
 33036 DEFB 164,178  ; POKE 32932,178 ('#S/LD B/,#n227' becomes
                     ; '#S/LD B/,#n178')
 33038 DEFB 172,203  ; POKE 32940,203 ('#S/LD A/,#n237' becomes
                     ; '#S/LD A/,#n203')
 33040 DEFB 177,176  ; POKE 32945,176 ('#S/LD B/,#n225' becomes
                     ; '#S/LD B/,#n176')
 33042 DEFB 187,207  ; POKE 32955,207 ('#S/JR NZ/,#n32956' becomes
                     ; '#S/JR NZ/,#n32907' again)
 33044 DEFB 28,208   ; POKE 32796,208 ('#S/AND A/' becomes '#S/RET NC/')

; Copy data into addresses #w33149-#w65506 (step 247)
;
; Used by the routine at #R32956. Copies the 132 bytes from the data table at
; #R33064 into addresses #w33149-#w65506 (step 247). This is done before
; loading the standard speed code block because the data for those addresses
; is not present in that code block (except for #w33149, which is present on
; the tape, but is not loaded).
;
; HL #w33064
; BC' #w247
c33046 EXX           ; {Set #REGhl' to the first destination address (minus
 33047 LD HL,32902   ; 247)
 33050 EXX           ; }
 33051 LD B,132      ; There are 132 bytes to copy
*33053 LD A,(HL)     ; Pick up a byte from the data table at #R33064
 33054 EXX           ;
 33055 ADD HL,BC     ; Add 247 to #REGhl'
 33056 LD (HL),A     ; Copy the byte to its destination
 33057 EXX           ;
 33058 INC L         ; Move #REGhl along to the next byte in the data table
 33059 DJNZ 33053    ; Jump back until all 132 bytes have been copied
 33061 JP 32815      ; Load the standard speed code block

; Data for addresses #w33149-#w65506 (step 247)
;
; Used by the routine at #R33046. These bytes are copied into addresses
; #w33149-#w65506 (step 247) after the fast code block has loaded. Note that
; the first entry in this table leads to the value #b134 being copied into
; address #w33149, which corrupts the table entry at that address; this is a
; #BUG#selfModifyingDataTable(bug).
b33064 DEFB 134,0,127,0,0,162,255,143,31,8,216,0,1,127,152,51
 33080 DEFB 84,0,255,25,0,0,84,255,248,255,34,0,23,176,170,240
 33096 DEFB 3,194,0,222,3,194,3,0,80,104,40,72,69,64,128,2
 33112 DEFB 10,3,194,6,27,1,72,68,39,72,255,42,40,0,0,0
 33128 DEFB 255,99,96,46,78,224,152,244,195,0,239,7,129,60,251,112
 33144 DEFB 251,5,223,224,244,124,47,168,235,0,24,192,6,0,0,20
 33160 DEFB 0,0,0,50,0,133,0,55,21,0,10,54,26,231,3,234
 33176 DEFB 64,19,89,127,111,237,24,214,224,61,233,46,4,114,126,126
 33192 DEFB 246,32,6,8
