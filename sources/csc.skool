; Copyright 2010-2023 Richard Dymond (rjdymond@gmail.com)

@start
@defb=20648:8,136,31,252,3,128,1,192,0,12,0,8,144
@defb=20674:100,128,0,0,0,0,69,20,23,116,9,32,10,192,24,8,4,14,240
@defb=20702:60,0,2,112,2,245,68,57,40,92
@defb=20720:96,96,96,96,240,4,0,0,0,0,0,0,0,0,192,128
@defb=20899:16,0,0,0,0,53,86,16,4,12,96,7,176,48,50,0,72,144
@defb=20929:1,83,0,0,0,0,0,71,119,21,84,5,64,9,192,36,6,8,14,128
@defb=20958:34
@defb=20960:5,64,2,148,68,37,40,80,24,24,24,24,24,24,24,24,160,160,160,160
@defb=20980:144,4,0,0,0,0,0,0,0,0,192,64
@defb=21155:32,0,0,0,0,66,33,23,116,16,16,15,112,72,66
@defb=21171:36,148,119,119,112,0,0,0,0,0,0,0,0,0,2,104
@defb=21194:21,80,5,64,8,192,67,193,8,18,135,119,112
@defb=21214:255
@defb=21216:53,64,30,148,67,37,235,222,24,24,24,24,24,24,24,24,224,224,224,224
@defb=21236:149,117,112,0,0,0,0,0,0,0,194,64
@defb=21411:96,0,0,0,0,0,0,21,84,16,16,15,176,76,130
@defb=21427:20,244,68,84,80,0,0,0,0,0,0,0,0,0,6,64
@defb=21448:66,33,21,84,5,64,28,192,66,34,6,20,244,84,80
@defb=21470:126,0,69
@defb=21480:126,126,126,126,126,126,126,126,16,16,16,16,229,69,64
@defb=21502:130,64
@defb=21667:160,0,0,0,0,117,119,21,80,32,8,9,192,35,4
@defb=21683:18,148,116,84,112,0,0,0,0,0,0,0,0,0,10,64
@defb=21704:53,86,23,116,7,192,28,192,132,20,113,36,20,84,112
@defb=21726:102,0,66
@defb=21736:126,126,126,126,126,126,126,126,8,8,8,8,149,70,112
@defb=21758:130,64
@defb=21922:3,32,0,0,0,0,69,68,23,116,32,8,28,192,41,8
@defb=21939:14,148,20,84,64
@defb=21953:18,30,246,195,189,43,222,8,136,16,4,7,224,1,224,152,8,129,72,20
@defb=21973:84,64,0,0,0,0,0,0,0,106,0,72
@defb=21992:24,24,24,24,24,24,24,24,5,5,5,5,149,69,16
@defb=22014:131,64
@defb=22178:4,32
@defb=22184:101,118,16,4,19,144,28,192,8,8,3,6,148,119,116,112
@defb=22209:18,16,150,196,37,42,16,0,0,31,252,7,192,3,240,96
@defb=22226:126,8,247,116,112,0,0,0,0,0,0,0,115,0,48
@defb=22248:24,24,24,24,24,24,24,24,2,2,2,2,247,117,112
@defb=22270:130,64
@defb=22434:4,0,0,0,0,0,69,20,16,4,18,144,12,192,8,112,3,252
@defb=22465:112,28,150,196,37,43,144,0,0,0,0,3,128,3,240
@defb=22494:176,128
@defb=22512:1,1,1,1,0,0,0,0,0,0,0,0,0,1,92,128
@defb=23200:23,23,23,23,23,23,23,23,48,48,48,48,48,48,48,48,48,48,48,48
@defs=23220:9,32
@defb=23232:23,23,23,23,23,23,23,23,48,48,48,48,48,48,48,48,48,48,48,48
@defs=23252:9,32
@defb=23264:23,23,23,23,23,23,23,23,50,50,50,50,50,50,50,50,48,48,48,48
@defs=23284:9,32
@remote=save:33010,33148
@expand=#DEF(#BUG #LINK:Bugs)
@expand=#DEF(#FACT #LINK:Facts)
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#S #FORMAT({mode[case]}))
@expand=#DEF(#AS(s=-1)(t=#N($s,,,1)(0x)) #LINK#(:AnimatoryStates#IF($s>=0)(#$s))($t))
@replace=/#n\i/#N\1,,,1($)
@replace=/#nn\i/#N(\1,4,,1)($)
@replace=/#b\i/#N(\1,,,1)(0x)/ (byte)
@replace=/#w\i/#N(\1,4)/ (word)
@set-handle-unsupported-macros=1
; Contact Sam Cruise disassembly
; https://skoolkit.ca
;
; Copyright 1986 Microsphere Computer Services Ltd (Contact Sam Cruise)
; Copyright 2010-2023 Richard Dymond (this disassembly)
@bfix+begin
;
; This disassembly contains fixes for the following bugs:
;   * The trouble with hiding
;   * Hiding in plain sight
;   * Under the rope
;   * The plight of the non-arresting policeman (2)
;   * Hook v. bird
;   * Post-traumatic teleportation disorder
;   * The conspicuous sniper
;   * No. 19 lockout
;   * Blank tiles behaving badly
;   * Extended earpiece
;   * The missing blue line
; See https://skoolkit.ca/disassemblies/contact_sam_cruise/reference/bugs.html
; for full descriptions of these bugs.
;
; This disassembly also contains fixes for the graphic glitches described at
; https://skoolkit.ca/disassemblies/contact_sam_cruise/graphics/glitches.html
@bfix+end

@isub+begin
@org
c20637 JP 61671

; Graphic data for the bottom 4 lines of the screen
b20640 DEFB 0,0,0,0,0,0,0,0,8,136,31,252,3,128,1,192,0
 20657 DEFB 12,0,8,144
 20661 DEFS 13
 20674 DEFB 100,128,0,0,0,0,69,20,23,116,9,32,10,192
 20688 DEFB 24,8,4,14,240,0,0,0,0,0,0,0,0,0,60,0
 20704 DEFB 2,112,2,245,68,57,40,92
 20712 DEFS 8
 20720 DEFB 96,96,96,96,240,4,0,0,0,0,0,0,0,0,192,128
 20736 DEFS 162
 20898 DEFB 0,16,0,0,0,0,53,86,16,4,12,96,7,176
 20912 DEFB 48,50,0,72,144
 20917 DEFS 12
 20929 DEFB 1,83,0,0,0,0,0,71,119,21,84,5,64,9,192
 20944 DEFB 36,6,8,14,128,0,0,0,0,0,0,0,0,0,34,0
 20960 DEFB 5,64,2,148,68,37,40,80,24,24,24,24,24,24,24,24
 20976 DEFB 160,160,160,160,144,4,0,0,0,0,0,0,0,0,192,64
 20992 DEFS 162
 21154 DEFB 0,32,0,0,0,0,66,33,23,116,16,16,15,112
 21168 DEFB 72,66,0,36,148,119,119,112
 21176 DEFS 9
 21185 DEFB 2,104,0,0,0,0,0,0,0,21,80,5,64,8,192
 21200 DEFB 67,193,8,18,135,119,112,0,0,0,0,0,0,0,255,0
 21216 DEFB 53,64,30,148,67,37,235,222,24,24,24,24,24,24,24,24
 21232 DEFB 224,224,224,224,149,117,112,0,0,0,0,0,0,0,194,64
 21248 DEFS 162
 21410 DEFB 0,96,0,0,0,0,0,0,21,84,16,16,15,176
 21424 DEFB 76,130,0,20,244,68,84,80
 21432 DEFS 9
 21441 DEFB 6,64,0,0,0,0,0,66,33,21,84,5,64,28,192
 21456 DEFB 66,34,6,20,244,84,80,0,0,0,0,0,0,0,126,0
 21472 DEFB 69,0,0,0,0,0,0,0,126,126,126,126,126,126,126,126
 21488 DEFB 16,16,16,16,229,69,64,0,0,0,0,0,0,0,130,64
 21504 DEFS 162
 21666 DEFB 0,160,0,0,0,0,117,119,21,80,32,8,9,192
 21680 DEFB 35,4,0,18,148,116,84,112
 21688 DEFS 9
 21697 DEFB 10,64,0,0,0,0,0,53,86,23,116,7,192,28,192
 21712 DEFB 132,20,113,36,20,84,112,0,0,0,0,0,0,0,102,0
 21728 DEFB 66,0,0,0,0,0,0,0,126,126,126,126,126,126,126,126
 21744 DEFB 8,8,8,8,149,70,112,0,0,0,0,0,0,0,130,64
 21760 DEFS 162
 21922 DEFB 3,32,0,0,0,0,69,68,23,116,32,8,28,192
 21936 DEFB 41,8,0,14,148,20,84,64
 21944 DEFS 9
 21953 DEFB 18,30,246,195,189,43,222,8,136,16,4,7,224,1,224
 21968 DEFB 152,8,129,72,20,84,64,0,0,0,0,0,0,0,106,0
 21984 DEFB 72,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24
 22000 DEFB 5,5,5,5,149,69,16,0,0,0,0,0,0,0,131,64
 22016 DEFS 162
 22178 DEFB 4,32,0,0,0,0,101,118,16,4,19,144,28,192
 22192 DEFB 8,8,3,6,148,119,116,112
 22200 DEFS 9
 22209 DEFB 18,16,150,196,37,42,16,0,0,31,252,7,192,3,240
 22224 DEFB 96,0,126,8,247,116,112,0,0,0,0,0,0,0,115,0
 22240 DEFB 48,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24
 22256 DEFB 2,2,2,2,247,117,112,0,0,0,0,0,0,0,130,64
 22272 DEFS 162
 22434 DEFB 4,0,0,0,0,0,69,20,16,4,18,144,12,192,8,112,3,252
 22452 DEFS 13
 22465 DEFB 112,28,150,196,37,43,144,0,0,0,0,3,128,3,240
 22480 DEFS 14
 22494 DEFB 176,128
 22496 DEFS 16
 22512 DEFB 1,1,1,1,0,0,0,0,0,0,0,0,0,1,92,128

; Attribute file
b22528 DEFS 640
 23168 DEFB 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
 23184 DEFB 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
 23200 DEFB 23,23,23,23,23,23,23,23,48,48,48,48,48,48,48,48
 23216 DEFB 48,48,48,48,32,32,32,32,32,32,32,32,32,87,87,87
 23232 DEFB 23,23,23,23,23,23,23,23,48,48,48,48,48,48,48,48
 23248 DEFB 48,48,48,48,32,32,32,32,32,32,32,32,32,87,87,87
 23264 DEFB 23,23,23,23,23,23,23,23,50,50,50,50,50,50,50,50
 23280 DEFB 48,48,48,48,32,32,32,32,32,32,32,32,32,87,87,87
@isub+end

; Message #b55: 'A VOICE SAID 'ED - TELL THE OIL MAN THAT THE KEY TO#SPACE2THE
; FAT MANS HOUSE IS AT NO 31 AND THAT THE BOSS WANTS TO SEE YOU BOTH AT NO 19''
;
; Appears in the phone message table entry at #R27467.
@label=MSG055
t23296 DEFB 125              ; #R26861(#b125): 'A VOICE SAID ''
 23297 DEFB 108              ; #R26667(#b108): 'ED '
 23298 DEFM "- TELL"
 23304 DEFB 100              ; #R26624(#b100): ' THE '
 23305 DEFM "OIL"
 23308 DEFB 115              ; #R26730(#b115): ' MAN'
 23309 DEFM " "
 23310 DEFB 31               ; #R27857(#b31): 'THAT'
 23311 DEFB 100              ; #R26624(#b100): ' THE '
 23312 DEFB 4                ; #R26374(#b4): 'KEY'
 23313 DEFB 118              ; #R26746(#b118): ' TO '
 23314 DEFB 100              ; #R26624(#b100): ' THE '
 23315 DEFB 129              ; #R27868(#b129): 'FAT'
 23316 DEFB 115              ; #R26730(#b115): ' MAN'
 23317 DEFM "S HOUSE IS AT "
 23331 DEFB 102              ; #R26638(#b102): 'NO '
 23332 DEFM "31"
 23334 DEFB 116              ; #R26735(#b116): ' AND '
 23335 DEFB 31               ; #R27857(#b31): 'THAT'
 23336 DEFB 100              ; #R26624(#b100): ' THE '
 23337 DEFM "BOSS WANTS"
 23347 DEFB 118              ; #R26746(#b118): ' TO '
 23348 DEFM "SEE"
 23351 DEFB 126              ; #R26871(#b126): ' YOU'
 23352 DEFM " BOTH AT "
 23361 DEFB 102              ; #R26638(#b102): 'NO '
 23362 DEFM "19'"
 23365 DEFB 0                ; End marker

; Message #b56: 'DAISY SAID 'LANA RANG - SHE HAD TO GET OUT IN A HURRY - OH AND
; I HEARD NOISES IN THE CEILING''
;
; Appears in the phone message table entry at #R27506.
@label=MSG056
t23366 DEFB 26                ; #R27356(#b26): 'DAISY SAID ''
 23367 DEFB 28                ; #R27381(#b28): 'LANA RANG - '
 23368 DEFM "SHE HAD"
 23375 DEFB 118               ; #R26746(#b118): ' TO '
 23376 DEFM "GET OUT IN"
 23386 DEFB 113               ; #R26719(#b113): ' A '
 23387 DEFM "HURRY - OH"
 23397 DEFB 116               ; #R26735(#b116): ' AND '
 23398 DEFB 103               ; #R26642(#b103): 'I '
 23399 DEFM "HEARD NOISES IN"
 23414 DEFB 100               ; #R26624(#b100): ' THE '
 23415 DEFM "CEIL"
 23419 DEFB 127               ; #R26876(#b127): 'ING'
 23420 DEFM "'"
 23421 DEFB 0                 ; End marker

; Message #b57: 'OK ED - THE FAT MAN HAS THE KEY TO NO 27'
;
; Appears in the phone message table entry at #R27470.
@label=MSG057
t23422 DEFM "OK "
 23425 DEFB 108      ; #R26667(#b108): 'ED '
 23426 DEFM "-"
 23427 DEFB 100      ; #R26624(#b100): ' THE '
 23428 DEFB 129      ; #R27868(#b129): 'FAT'
 23429 DEFB 115      ; #R26730(#b115): ' MAN'
 23430 DEFM " HAS"
 23434 DEFB 100      ; #R26624(#b100): ' THE '
 23435 DEFB 4        ; #R26374(#b4): 'KEY'
 23436 DEFB 118      ; #R26746(#b118): ' TO '
 23437 DEFB 102      ; #R26638(#b102): 'NO '
 23438 DEFM "27"
 23440 DEFB 0        ; End marker

; Message #b58: 'DAISY SAID 'LANA RANG - HER NEW NUMBERS 7162. THE POLICE WERE
; HERE''
;
; Appears in the phone message table entry at #R27509.
@label=MSG058
t23441 DEFB 26                      ; #R27356(#b26): 'DAISY SAID ''
 23442 DEFB 28                      ; #R27381(#b28): 'LANA RANG - '
 23443 DEFM "HER NEW NUMBERS 7162."
 23464 DEFB 100                     ; #R26624(#b100): ' THE '
 23465 DEFM "POLICE WERE HERE'"
 23482 DEFB 0                       ; End marker

; Message #b70: 'SOMEONE BELOW SAID 'CRUISE WAS DRESSED AS THE OIL MAN. DONT
; LET ANYONE PAST''
;
; Appears in the message location table entry at #R32064.
@label=MSG070
t23483 DEFB 128              ; #R27862(#b128): 'SOMEONE '
 23484 DEFM "BELOW "
 23490 DEFB 124              ; #R26855(#b124): 'SAID '
 23491 DEFM "'"
 23492 DEFB 101              ; #R26630(#b101): 'CRUISE '
 23493 DEFB 117              ; #R26741(#b117): 'WAS '
 23494 DEFM "DRESS"
 23499 DEFB 108              ; #R26667(#b108): 'ED '
 23500 DEFM "AS"
 23502 DEFB 100              ; #R26624(#b100): ' THE '
 23503 DEFM "OIL"
 23506 DEFB 115              ; #R26730(#b115): ' MAN'
 23507 DEFM ". DONT LET ANY"
 23521 DEFB 123              ; #R26850(#b123): 'ONE '
 23522 DEFM "PAST'"
 23527 DEFB 0                ; End marker

; Message #b71: 'THERES A SAFE WITH 4 LOCKS'
;
; Appears in the message location table entry at #R32060.
@label=MSG071
t23528 DEFB 122                 ; #R26846(#b122): 'THE'
 23529 DEFM "RES"
 23532 DEFB 113                 ; #R26719(#b113): ' A '
 23533 DEFM "SAFE WITH 4 LOCKS"
 23550 DEFB 0                   ; End marker

@defs=23551:10
i23551 DEFS 10

; System variables REPDEL and REPPER
i23561 DEFB 35       ; Set REPDEL to 35
 23562 DEFB 5        ; Set REPPER to 5

@defs=23563:48
i23563 DEFS 48

; System variable FLAGS
i23611 DEFB 205      ; Bit 3 is set so that the keyboard is read in 'L' mode

@defs=23612:292
i23612 DEFS 292

; Message #b63: 'DAISY SAID 'SAM - A GANGSTER'S WATCHING FOR YOU OUTSIDE THE
; POLICE STATION''
;
; Appears in the phone message table entry at #R27473.
@label=MSG063
t23904 DEFB 26                 ; #R27356(#b26): 'DAISY SAID ''
 23905 DEFB 111                ; #R26676(#b111): 'SAM '
 23906 DEFM "-"
 23907 DEFB 113                ; #R26719(#b113): ' A '
 23908 DEFM "GANGSTER'S WATCH"
 23924 DEFB 30                 ; #R27854(#b30): 'ING '
 23925 DEFM "FOR"
 23928 DEFB 126                ; #R26871(#b126): ' YOU'
 23929 DEFM " OUTSIDE"
 23937 DEFB 100                ; #R26624(#b100): ' THE '
 23938 DEFM "POLICE STATION'"
 23953 DEFB 0                  ; End marker

; Message #b76: 'DAISY SAID 'LANA RANG - THAT FAT MAN HAS TWO KEYS NOT JUST ONE
; ''
;
; Appears in the phone message table entry at #R27518.
@label=MSG076
t23954 DEFB 26            ; #R27356(#b26): 'DAISY SAID ''
 23955 DEFB 28            ; #R27381(#b28): 'LANA RANG - '
 23956 DEFB 31            ; #R27857(#b31): 'THAT'
 23957 DEFM " "
 23958 DEFB 129           ; #R27868(#b129): 'FAT'
 23959 DEFB 115           ; #R26730(#b115): ' MAN'
 23960 DEFM " HAS TWO "
 23969 DEFB 4             ; #R26374(#b4): 'KEY'
 23970 DEFM "S NOT JUST "
 23981 DEFB 123           ; #R26850(#b123): 'ONE '
 23982 DEFM "'"
 23983 DEFB 0             ; End marker

; Message #b64: 'A VOICE SAID 'OK FATS THE HOOK'S AT NO 74 AND ALS GUARDING
; IT''
;
; Appears in the phone message table entry at #R27476.
@label=MSG064
t23984 DEFB 125          ; #R26861(#b125): 'A VOICE SAID ''
 23985 DEFM "OK "
 23988 DEFB 129          ; #R27868(#b129): 'FAT'
 23989 DEFM "S"
 23990 DEFB 100          ; #R26624(#b100): ' THE '
 23991 DEFM "HOOK'S AT "
 24001 DEFB 102          ; #R26638(#b102): 'NO '
 24002 DEFM "74"
 24004 DEFB 116          ; #R26735(#b116): ' AND '
 24005 DEFM "ALS GUARD"
 24014 DEFB 30           ; #R27854(#b30): 'ING '
 24015 DEFM "IT'"
 24018 DEFB 0            ; End marker

; Message #b66: 'A VOICE SAID 'OK LANA THE KEY TO 74'S IN THE ROOM PAST THE
; CATWALK BUT THERE'S A GUARD''
;
; Appears in the phone message table entry at #R27479.
@label=MSG066
t24019 DEFB 125           ; #R26861(#b125): 'A VOICE SAID ''
 24020 DEFM "OK "
 24023 DEFB 29            ; #R27848(#b29): 'LANA'
 24024 DEFB 100           ; #R26624(#b100): ' THE '
 24025 DEFB 4             ; #R26374(#b4): 'KEY'
 24026 DEFB 118           ; #R26746(#b118): ' TO '
 24027 DEFM "74'S IN"
 24034 DEFB 100           ; #R26624(#b100): ' THE '
 24035 DEFM "ROOM PAST"
 24044 DEFB 100           ; #R26624(#b100): ' THE '
 24045 DEFM "CATWALK BUT"
 24056 DEFB 121           ; #R26845(#b121): ' THE'
 24057 DEFM "RE'S"
 24061 DEFB 113           ; #R26719(#b113): ' A '
 24062 DEFM "GUARD'"
 24068 DEFB 0             ; End marker

; Message #b67: 'SOMEONE HIT ME. I PLAYED DEAD. TWO MEN WALKED OFF. ONE SAID
; 'HEY DON AINT YOU SCARED THAT CRUISE WILL GET UP TO YOUR ROOM WHEN ALS ON THE
; PHONE ?''
;
; Appears in Sam's initialisation parameters for game mode 3 at #R58930.
@label=MSG067
t24069 DEFB 128                  ; #R27862(#b128): 'SOMEONE '
 24070 DEFM "HIT ME. "
 24078 DEFB 103                  ; #R26642(#b103): 'I '
 24079 DEFB 5                    ; #R26378(#b5): 'PLAY'
 24080 DEFB 108                  ; #R26667(#b108): 'ED '
 24081 DEFM "DEAD. TWO MEN WALK"
 24099 DEFB 108                  ; #R26667(#b108): 'ED '
 24100 DEFM "OFF. "
 24105 DEFB 123                  ; #R26850(#b123): 'ONE '
 24106 DEFB 124                  ; #R26855(#b124): 'SAID '
 24107 DEFM "'HEY "
 24112 DEFB 107                  ; #R26660(#b107): 'DON '
 24113 DEFM "AINT"
 24117 DEFB 126                  ; #R26871(#b126): ' YOU'
 24118 DEFM " SCAR"
 24123 DEFB 108                  ; #R26667(#b108): 'ED '
 24124 DEFB 31                   ; #R27857(#b31): 'THAT'
 24125 DEFM " "
 24126 DEFB 101                  ; #R26630(#b101): 'CRUISE '
 24127 DEFM "WILL GET UP"
 24138 DEFB 118                  ; #R26746(#b118): ' TO '
 24139 DEFB 126                  ; #R26871(#b126): ' YOU'
 24140 DEFM "R ROOM"
 24146 DEFB 7                    ; #R26391(#b7): ' WHEN'
 24147 DEFM " ALS ON"
 24154 DEFB 100                  ; #R26624(#b100): ' THE '
 24155 DEFM "PH"
 24157 DEFB 123                  ; #R26850(#b123): 'ONE '
 24158 DEFM "?'"
 24160 DEFB 0                    ; End marker

; Message #b68: 'DAISY SAID 'ALS NUMBER'S 6124''
;
; Appears in the phone message table entry at #R27524.
@label=MSG068
t24161 DEFB 26                   ; #R27356(#b26): 'DAISY SAID ''
 24162 DEFM "ALS NUMBER'S 6124'"
 24180 DEFB 0                    ; End marker

; Message #b69: 'TECHNICAL SERVICES HERE. TO USE A HOOK GET TO RIGHT PLACE AND
; PRESS C'
;
; Appears in the phone message table entry at #R27482.
@label=MSG069
t24181 DEFM "TECHNIC"
 24188 DEFB 104              ; #R26645(#b104): 'AL '
 24189 DEFM "SERVICES HERE."
 24203 DEFB 118              ; #R26746(#b118): ' TO '
 24204 DEFM "USE"
 24207 DEFB 113              ; #R26719(#b113): ' A '
 24208 DEFM "HOOK GET TO"
 24219 DEFB 6                ; #R26383(#b6): ' RIGHT '
 24220 DEFM "PLACE"
 24225 DEFB 116              ; #R26735(#b116): ' AND '
 24226 DEFB 3                ; #R26368(#b3): 'PRESS'
 24227 DEFM " C"
 24229 DEFB 0                ; End marker

; Message #b72: 'LANA ANSWERED 'OOH SAM! YOUVE GOT THE BIRD. SEE YOU IN YOUR
; OFFICE''
;
; Appears in the phone message table entry at #R27527.
@label=MSG072
t24230 DEFB 27          ; #R27360(#b27): 'LANA ANSWERED 'OOH SAM! '
 24231 DEFB 126         ; #R26871(#b126): ' YOU'
 24232 DEFM "VE GOT"
 24238 DEFB 100         ; #R26624(#b100): ' THE '
 24239 DEFM "BIRD. SEE"
 24248 DEFB 126         ; #R26871(#b126): ' YOU'
 24249 DEFM " IN"
 24252 DEFB 126         ; #R26871(#b126): ' YOU'
 24253 DEFM "R OFFICE'"
 24262 DEFB 0           ; End marker

; Message #b73: 'I STARED AT THE LOVELY LANA#SPACE2WAS IT THOSE RUBY LIPS OR
; THE SLIM AUTOMATIC THAT TRANSFIXED ME? SHE SAID 'THANK YOU FOR THE BUDGIE SAM
; . ITS PRICELESS. IVE ALREADY KILLED ONCE FOR IT. AND NOW ITS GOODBYE SAM ''
;
; Used by the routine at #R24832.
@label=MSG073
t24263 DEFB 103                     ; #R26642(#b103): 'I '
 24264 DEFM "STAR"
 24268 DEFB 108                     ; #R26667(#b108): 'ED '
 24269 DEFM "AT"
 24271 DEFB 100                     ; #R26624(#b100): ' THE '
 24272 DEFM "LOVELY "
 24279 DEFB 29                      ; #R27848(#b29): 'LANA '
 24280 DEFM " "
 24281 DEFB 117                     ; #R26741(#b117): 'WAS '
 24282 DEFM "IT THOSE RUBY LIPS OR"
 24303 DEFB 100                     ; #R26624(#b100): ' THE '
 24304 DEFM "SLIM AUTOMATIC "
 24319 DEFB 31                      ; #R27857(#b31): 'THAT'
 24320 DEFM " TRANSFIX"
 24329 DEFB 108                     ; #R26667(#b108): 'ED '
 24330 DEFM "ME? SHE "
 24338 DEFB 124                     ; #R26855(#b124): 'SAID '
 24339 DEFM "'THANK"
 24345 DEFB 126                     ; #R26871(#b126): ' YOU'
 24346 DEFM " FOR"
 24350 DEFB 100                     ; #R26624(#b100): ' THE '
 24351 DEFM "BUDGIE "
 24358 DEFB 111                     ; #R26676(#b111): 'SAM '
 24359 DEFM ". ITS PRICELESS. "
 24376 DEFM "IVE ALREADY KILL"
 24392 DEFB 108                     ; #R26667(#b108): 'ED '
 24393 DEFM "ONCE FOR IT."
 24405 DEFB 116                     ; #R26735(#b116): ' AND '
 24406 DEFM "NOW ITS GOODBYE "
 24422 DEFB 111                     ; #R26676(#b111): 'SAM '
 24423 DEFM "'"
 24424 DEFB 0                       ; End marker

; Message #b74: 'SHE'S IN JAIL NOW. ANOTHER CASE SOLVED. BUT NOW THE MOB KNOWS
; IVE GOT THE BUDGIE AND THEYRE AFTER ME . .'
;
; Appears in Sam's initialisation parameters for game mode 4 at #R58936.
@label=MSG074
t24425 DEFM "SHE'S IN JAIL NOW. ANO"
 24447 DEFB 122                      ; #R26846(#b122): 'THE'
 24448 DEFM "R CASE SOLVED. BUT NOW"
 24470 DEFB 100                      ; #R26624(#b100): ' THE '
 24471 DEFM "MOB KNOWS IVE GOT"
 24488 DEFB 100                      ; #R26624(#b100): ' THE '
 24489 DEFM "BUDGIE"
 24495 DEFB 116                      ; #R26735(#b116): ' AND '
 24496 DEFB 122                      ; #R26846(#b122): 'THE'
 24497 DEFM "YRE AFTER ME . ."
 24513 DEFB 0                        ; End marker

; Message #b75: 'SHE FIRED'
;
; Used by the routine at #R24832.
@label=MSG075
t24514 DEFM "SHE FIRED"
 24523 DEFB 0           ; End marker

; Message #b97: 'JOYSTICK?'
;
; Used by the routine at #R24951.
@label=MSG097
t24524 DEFM "JOYSTICK?"
 24533 DEFB 0           ; End marker

; Unused
s24534 DEFS 10

; Event table
;
; Initialised by the routine at #R30017, and processed on every pass through
; the main loop by the routine at #R29952. Each of the 14 entries in this table
; corresponds to a significant event in the game that requires changes to be
; made (such as making a key available, or Daisy having a new message for Sam).
; The bits in the first byte of each entry have the following meanings:
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Meaning if set }
; { 7         | Entry should be inactive initially }
; { 6         | Entry should never be deactivated }
; { 1-5       | Unused }
; { 0         | Entry is inactive }
; TABLE#
; .
; The first entry makes Sam's oil man disguise work with the gangsters at no.
; 19, and makes the policemen roam the entire city (instead of just the
; sidewalk near Sam's office) while on the beat. It is triggered at the start
; of a new game.
@label=EVENT01
b24544 DEFB 0
 24545 DEFB 13       ; 13 bytes until the next entry
 24546 DEFB 1        ; 1 condition follows
 24547 DEFW 32750    ; #R32750 holds the game mode indicator
 24549 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24550 DEFB 1        ; Game mode
 24551 DEFB 2        ; 2 POKEs follow (to do if the game mode is 1)
 24552 DEFW 64844    ; #R64844 holds the disguise ID in the region definition
                     ; table at #R64836
 24554 DEFB 7        ; Disguise ID (oil man)
@ssub=DEFW 29539+1
 24555 DEFW 29540    ; {Set the operand of the '#S/OR/' instruction at #R29539
 24557 DEFB 0        ; to 0 (to make the policemen roam the entire city)}
; The next entry makes Sam's oil man disguise known to the gangsters at no. 19.
; It is triggered when Sam passes the point on the rope above the roof of no.
; 19 where someone below says 'CRUISE WAS DRESSED AS THE OIL MAN. DONT LET
; ANYONE PAST'.
@label=EVENT02
 24558 DEFB 0
 24559 DEFB 10       ; 10 bytes until the next entry
 24560 DEFB 1        ; 1 condition follows
 24561 DEFW 32064    ; The object table entry at #R32064 is for where someone
                     ; below says 'CRUISE WAS DRESSED AS THE OIL MAN...'
 24563 DEFB 32       ; #S/JR NZ/ (for the instruction at #R29986)
 24564 DEFB 32
 24565 DEFB 1        ; 1 POKE follows
 24566 DEFW 64844    ; #R64844 holds the disguise ID in the region definition
                     ; table at #R64836
 24568 DEFB 255      ; Disguise ID (matches none of Sam's)
; The next entry lines up phone messages #R23441(#b58), #R32089(#b59) and
; #R32122(#b60) for Sam. It is triggered as soon as Sam's score hits 50 (about
; 4m10s after the game has started).
@label=EVENT03
 24569 DEFB 0
 24570 DEFB 16       ; 16 bytes until the next entry
 24571 DEFB 1        ; 1 condition follows
 24572 DEFW 32668    ; #R32668 holds the LSB of the score
 24574 DEFB 48       ; #S/JR NC/ (for the instruction at #R29986)
 24575 DEFB 50       ; Score LSB for comparison
 24576 DEFB 3        ; 3 POKEs follow (to do when the score LSB is >= 50)
 24577 DEFW 27509    ; {Initialise phone message #R23441(#b58): 'DAISY SAID
 24579 DEFB 92       ; 'LANA RANG - HER NEW NUMBERS 7162. THE POLICE WERE
                     ; HERE''}
 24580 DEFW 27512    ; {Initialise phone message #R32089(#b59): 'LANA ANSWERED
 24582 DEFB 36       ; 'OOH SAM! THEY KILLED MY FIANCE AND STOLE THE BUDGIE''}
 24583 DEFW 27515    ; {Initialise phone message #R32122(#b60): 'LANA ANSWERED
 24585 DEFB 36       ; 'OOH SAM! THAT CROOK THE FAT MAN'S JUST MOVED INTO NO
                     ; 15''}
; The next entry makes the required changes when Sam enters no. 15 using the
; key in game mode 1.
@label=EVENT04
 24586 DEFB 0
 24587 DEFB 39       ; 39 bytes until the next entry
 24588 DEFB 3        ; 3 conditions follow
@ssub=DEFW 58880+1
 24589 DEFW 58881    ; This address holds Sam's x-coordinate
 24591 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24592 DEFB 249
@ssub=DEFW 58880+2
 24593 DEFW 58882    ; This address holds Sam's y-coordinate
 24595 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24596 DEFB 29
 24597 DEFW 32746    ; #R32746 holds the key inventory
 24599 DEFB 48       ; #S/JR NC/ (for the instruction at #R29986)
 24600 DEFB 64       ; Bit 6 set: Sam has the key to no. 15
 24601 DEFB 8        ; 8 POKEs follow
 24602 DEFW 27473    ; {Initialise phone message #R23904(#b63): 'DAISY SAID
 24604 DEFB 94       ; 'SAM - A GANGSTER'S WATCHING FOR YOU OUTSIDE THE POLICE
                     ; STATION''}
 24605 DEFW 27476    ; {Initialise phone message #R23984(#b64): 'A VOICE SAID
 24607 DEFB 94       ; 'OK FATS THE HOOK'S AT NO 74 AND ALS GUARDING IT''}
 24608 DEFW 27518    ; {Initialise phone message #R23954(#b76): 'DAISY SAID
 24610 DEFB 92       ; 'LANA RANG - THAT FAT MAN HAS TWO KEYS NOT JUST ONE ''}
 24611 DEFW 27521    ; {Initialise phone message #R27569(#b65): 'LANA ANSWERED
 24613 DEFB 36       ; 'OOH SAM! BUD SAID HE'D MEET ME ALONE IN THE HOTELS
                     ; RIGHT HAND GREEN ROOM. I'M SCARED - WILL YOU GO
                     ; INSTEAD?''}
 24614 DEFW 32056    ; {Disable the object table entry at #R32056 (for where
 24616 DEFB 33       ; someone growls 'NO KEY EH!' in no. 15)}
@ssub=DEFW 29963+1
 24617 DEFW 29964    ; {Change the operand of the #S/JP/ instruction at #R29963
@ssub=DEFB 24914%256
 24619 DEFB 82       ; to #R24914 (to display the cutscene before entering game
@ssub=DEFW 29963+2
 24620 DEFW 29965    ; mode 2)
@ssub=DEFB 24914/256
 24622 DEFB 97       ; }
 24623 DEFW 24666    ; {Activate the entry at #R24666 (below)
 24625 DEFB 128      ; }
; The next entry changes the operand of the #S/JP/ instruction at #R29963 to
; #R31236 to send the police after Sam when he finds the dead body on the top
; floor of the hotel.
@label=EVENT05
 24626 DEFB 0
 24627 DEFB 17       ; 17 bytes until the next entry
 24628 DEFB 2        ; 2 conditions follow
@ssub=DEFW 58880+1
 24629 DEFW 58881    ; This address holds Sam's x-coordinate
 24631 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24632 DEFB 64       ; x-coordinate for comparison
@ssub=DEFW 58880+2
 24633 DEFW 58882    ; This address holds Sam's y-coordinate
 24635 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24636 DEFB 7        ; y-coordinate for comparison
 24637 DEFB 2        ; 2 POKEs follow
@ssub=DEFW 29963+1
 24638 DEFW 29964    ; {Change the operand of the #S/JP/ instruction at #R29963
@ssub=DEFB 31236%256
 24640 DEFB 4        ; to #R31236
@ssub=DEFW 29963+2
 24641 DEFW 29965    ;
@ssub=DEFB 31236/256
 24643 DEFB 122      ; }
; The next entry restarts Al's command list when Sam calls 6124, thus giving
; Sam a chance to get past him and collect the hook.
@label=EVENT06
 24644 DEFB 64       ; Bit 6 set: always active
 24645 DEFB 21       ; 21 bytes until the next entry
 24646 DEFB 3        ; 3 conditions follow
 24647 DEFW 32666    ; #R32666 holds the ID of the telephone Sam is calling
 24649 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24650 DEFB 102      ; Telephone ID: 6124 (no. 74, second floor)
 24651 DEFW 32766    ; #R32766 holds X, the x-coordinate of the leftmost column
                     ; of the play area on screen
 24653 DEFB 56       ; #S/JR C/ (for the instruction at #R29986)
 24654 DEFB 56       ; x-coordinate for comparison
@ssub=DEFW 56576+22
 24655 DEFW 56598    ; This is byte #b22 of character #b221's buffer (used by
                     ; Al at no. 74 when X<56)
 24657 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24658 DEFB 12       ; Command list offset for comparison (points at the fourth
                     ; command in the command list at #R64816)
 24659 DEFB 2        ; 2 POKEs follow
@ssub=DEFW 56576+22
 24660 DEFW 56598    ; This is byte #b22 of character #b221's buffer (used by
                     ; Al at no. 74)
 24662 DEFB 0        ; Set this to 0 to restart Al's command list
@ssub=DEFW 56576+9
 24663 DEFW 56585    ; This is byte #b9 of character #b221's buffer (used by Al
                     ; at no. 74)
 24665 DEFB 0        ; Remove the primary command routine address (#R31338)
                     ; from bytes #b8 and #b9 of Al's buffer (so that the first
                     ; command in the command list takes over immediately)
; The next entry (activated by the one above at #R24586) lines up phone message
; #R24019(#b66) ('A VOICE SAID 'OK LANA THE KEY TO 74'S IN THE ROOM PAST THE
; CATWALK BUT THERE'S A GUARD'') and makes the key to no. 74 available when Sam
; enters the hotel's right-hand green room while disguised as a woman.
@label=EVENT07
 24666 DEFB 129
 24667 DEFB 28       ; 28 bytes until the next entry
 24668 DEFB 4        ; 4 conditions follow
 24669 DEFW 32713    ; #R32713 holds the ID of Sam's current disguise
 24671 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24672 DEFB 4        ; Disguise ID (woman)
@ssub=DEFW 58880+2
 24673 DEFW 58882    ; This address holds Sam's y-coordinate
 24675 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24676 DEFB 13       ; y-coordinate for comparison
@ssub=DEFW 58880+1
 24677 DEFW 58881    ; This address holds Sam's x-coordinate
 24679 DEFB 48       ; #S/JR NC/ (for the instruction at #R29986)
 24680 DEFB 94       ; x-coordinate for comparison
@ssub=DEFW 58880+1
 24681 DEFW 58881    ; This address holds Sam's x-coordinate
 24683 DEFB 56       ; #S/JR C/ (for the instruction at #R29986)
 24684 DEFB 101      ; x-coordinate for comparison
 24685 DEFB 3        ; 3 POKEs follow
 24686 DEFW 27479    ; {Line up phone message #R24019(#b66): 'A VOICE SAID 'OK
 24688 DEFB 44       ; LANA THE KEY TO 74'S IN THE ROOM PAST THE CATWALK BUT
                     ; THERE'S A GUARD''}
 24689 DEFW 32036    ; {Make the key to no. 74 available
 24691 DEFB 144      ; }
 24692 DEFW 24695    ; {Activate the next entry at #R24695 (below)
 24694 DEFB 128      ; }
; The next entry (activated by the one above at #R24666) lines up phone message
; #R24161(#b68) ('DAISY SAID 'ALS NUMBER'S 6124''), and displays the cutscene
; before entering game mode 3. It is triggered when Sam reaches the location
; with coordinates (10,8) (on the stairs leading up to the roof of the
; apartment building next to no. 74).
@label=EVENT08
 24695 DEFB 129
 24696 DEFB 20       ; 20 bytes until the next entry
 24697 DEFB 2        ; 2 conditions follow
@ssub=DEFW 58880+2
 24698 DEFW 58882    ; This address holds Sam's y-coordinate
 24700 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24701 DEFB 8        ; y-coordinate for comparison
@ssub=DEFW 58880+1
 24702 DEFW 58881    ; This address holds Sam's x-coordinate
 24704 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24705 DEFB 10       ; x-coordinate for comparison
 24706 DEFB 3        ; 3 POKEs follow
 24707 DEFW 27524    ; {Line up phone message #R24161(#b68): 'DAISY SAID 'ALS
 24709 DEFB 92       ; NUMBER'S 6124''}
@ssub=DEFW 29963+1
 24710 DEFW 29964    ; {Change the operand of the #S/JP/ instruction at #R29963
@ssub=DEFB 24914%256
 24712 DEFB 82       ; to #R24914 (to display the cutscene before entering game
@ssub=DEFW 29963+2
 24713 DEFW 29965    ; mode 3)
@ssub=DEFB 24914/256
 24715 DEFB 97       ; }
; The next entry makes the key to no. 27 available when Sam knocks the Fat Man
; over.
@label=EVENT09
 24716 DEFB 0
 24717 DEFB 10       ; 10 bytes until the next entry
 24718 DEFB 1        ; 1 condition follows
@ssub=DEFW 57600+2
 24719 DEFW 57602    ; This address holds character #b225's y-coordinate
                     ; (character #b225 is the Fat Man in game mode 2)
 24721 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24722 DEFB 37       ; y-coordinate for comparison (lying on the road)
 24723 DEFB 1        ; 1 POKE follows
 24724 DEFW 32044    ; {Make the key to no. 27 available
 24726 DEFB 144      ; }
; The next entry makes the required changes when Sam enters the room above his
; office while in possession of all four keys.
@label=EVENT10
 24727 DEFB 0
 24728 DEFB 24       ; 24 bytes until the next entry
 24729 DEFB 3        ; 3 conditions follow
@ssub=DEFW 58880+2
 24730 DEFW 58882    ; This address holds Sam's y-coordinate
 24732 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24733 DEFB 13       ; y-coordinate for comparison
@ssub=DEFW 58880+1
 24734 DEFW 58881    ; This address holds Sam's x-coordinate
 24736 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24737 DEFB 232      ; x-coordinate for comparison
 24738 DEFW 32746    ; #R32746 holds the key inventory
 24740 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24741 DEFB 120      ; Bits 3-6 set: Sam has all four keys
 24742 DEFB 3        ; 3 POKEs follow
 24743 DEFW 32032    ; {Make the budgie available
 24745 DEFB 192      ; }
 24746 DEFW 32747    ; {Clear all flags at #R32747 so that Sam won't be chased
 24748 DEFB 0        ; by the police}
@ssub=DEFW 29539+1
 24749 DEFW 29540    ; {Set the operand of the '#S/OR/' instruction at #R29539
 24751 DEFB 192      ; to 192 (to make the policemen stay close to Sam's office
                     ; while on the beat)}
; The next entry lines up phone message #R24230(#b72) ('LANA ANSWERED 'OOH SAM!
; YOUVE GOT THE BIRD. SEE YOU IN YOUR OFFICE'') when Sam gets the budgie.
@label=EVENT11
 24752 DEFB 0
 24753 DEFB 10       ; 10 bytes until the next entry
 24754 DEFB 1        ; 1 condition follows
 24755 DEFW 32745    ; #R32745 holds the object inventory
 24757 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24758 DEFB 128      ; Bit 7 set: Sam has the budgie
 24759 DEFB 1        ; 1 POKE follows
 24760 DEFW 27527    ; {Line up phone message #R24230(#b72): 'LANA ANSWERED
 24762 DEFB 36       ; 'OOH SAM! YOUVE GOT THE BIRD. SEE YOU IN YOUR OFFICE''}
; The next entry disables phone message #R24230(#b72) ('LANA ANSWERED 'OOH SAM!
; YOUVE GOT THE BIRD. SEE YOU IN YOUR OFFICE'') if Sam doesn't have the budgie
; (either because he hasn't found it yet, or it's been taken from him).
@label=EVENT12
 24763 DEFB 64       ; Bit 6 set: always active
 24764 DEFB 10       ; 10 bytes until the next entry
 24765 DEFB 1        ; 1 condition follows
 24766 DEFW 32745    ; #R32745 holds the object inventory
@bfix=DEFB 56        ; #S/JR C/ (for the instruction at #R29986)
 24768 DEFB 32       ; #S/JR NZ/ (for the instruction at #R29986)
 24769 DEFB 128      ; Bit 7 set: Sam has the budgie#IF({fix}<2)// (and only
                     ; the budgie; this is a #BUG#hookVBird(bug))//
 24770 DEFB 1        ; 1 POKE follows
 24771 DEFW 27527    ; {Disable phone message #R24230(#b72): 'LANA ANSWERED
 24773 DEFB 0        ; 'OOH SAM! YOUVE GOT THE BIRD. SEE YOU IN YOUR OFFICE''}
; The next entry sends Lana on her way to Sam's office when Sam phones her
; while in possession of the budgie.
@label=EVENT13
 24774 DEFB 0
 24775 DEFB 17       ; 17 bytes until the next entry
 24776 DEFB 2        ; 2 conditions follow
 24777 DEFW 32745    ; #R32745 holds the object inventory
@bfix=DEFB 48        ; #S/JR NC/ (for the instruction at #R29986)
 24779 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24780 DEFB 128      ; Bit 7 set: Sam has the budgie #IF({fix}<2)//(and only
                     ; the budgie; this is a #BUG#hookVBird(bug))//
 24781 DEFW 27527    ; This is the entry for phone message #R24230(#b72) for
                     ; Sam
 24783 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24784 DEFB 0        ; 0 means the phone message has been received by Sam
 24785 DEFB 2        ; 2 POKES follow
 24786 DEFW 24792    ; {Activate the entry at #R24792 (below)
 24788 DEFB 128      ; }
@ssub=DEFW 57600+9
 24789 DEFW 57609    ; {Set byte #b9 of character #b225's buffer to 0
 24791 DEFB 0        ; (character #b225 is Lana in game mode 3), triggering a
                     ; move to the next instruction: go to Sam's office (see
                     ; #R64940)}
; The next entry (activated by the one above at #R24774) immobilises Sam until
; the end of the game when Lana meets him in his office.
@label=EVENT14
 24792 DEFB 129
 24793 DEFB 25       ; 25 bytes until the next entry
 24794 DEFB 4        ; 4 conditions follow
@ssub=DEFW 57600+22
 24795 DEFW 57622    ; This is byte #b22 of character #b225's buffer (character
                     ; #b225 is Lana in game mode 3)
 24797 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24798 DEFB 8        ; This command list offset points past the end of the
                     ; command list
@ssub=DEFW 58880+2
 24799 DEFW 58882    ; This address holds Sam's y-coordinate
 24801 DEFB 40       ; #S/JR Z/ (for the instruction at #R29986)
 24802 DEFB 19       ; y-coordinate for comparison
@ssub=DEFW 58880+1
 24803 DEFW 58881    ; This address holds Sam's x-coordinate
 24805 DEFB 48       ; #S/JR NC/ (for the instruction at #R29986)
 24806 DEFB 222      ; x-coordinate for comparison
@ssub=DEFW 58880+1
 24807 DEFW 58881    ; This address holds Sam's x-coordinate
 24809 DEFB 56       ; #S/JR C/ (for the instruction at #R29986)
 24810 DEFB 231      ; x-coordinate for comparison
 24811 DEFB 2        ; 2 POKEs follow
 24812 DEFW 32764    ; {Set bit 1 of Sam's status flags at #R32764
 24814 DEFB 2        ; }
@ssub=DEFW 58880+13
 24815 DEFW 58893    ; {Set byte #b13 of Sam's buffer to 0 (to indicate that
 24817 DEFB 0        ; Sam has just met Lana; see #R24832)}
; And finally the end marker.
 24818 DEFB 255

; Unused
s24819 DEFS 13

; Deal with Sam while he's transfixed by Lana
;
; Used by the routine at #R29912 when bit 1 at #R32764 is set (by the routine
; at #R29952, using the event entry at #R24792), indicating that Sam has been
; immobilised after meeting Lana in his office.
;
; H #b230 (Sam)
@refs=29912
@label=SAMLANA
c24832 LD L,8        ; {Set Sam's main action timer (in byte #b8 of his buffer)
 24834 LD (HL),L     ; to 8}
 24835 LD L,13       ; {Byte #b13 of Sam's buffer holds 0 if Sam has only just
 24837 LD A,(HL)     ; met Lana, or 1 otherwise}
 24838 AND A         ; Has Sam only just met Lana in his office?
 24839 JR NZ,24850   ; Jump if not
 24841 INC (HL)      ; Increment byte #b13 of Sam's buffer so that we don't
                     ; come here again
 24842 LD A,73       ; Message #R24263(#b73): 'I STARED AT THE LOVELY LANA...'
 24844 LD (32722),A  ; Store the message number at #R32722 (so that we can
                     ; check when it has been displayed)
 24847 JP 30154      ; Queue the message urgently
; While Lana is transfixing Sam, we count the policemen who have shown up at
; Sam's office so far and been immobilised.
*24850 LD BC,512     ; #REGb=2 (2 policemen), #REGc=0 (will count the number of
                     ; immobilised policemen)
@ssub=LD D,56832/256
 24853 LD D,222      ; Character #b222 is the first policeman
*24855 LD E,9        ; Point #REGde at byte #b9 of the policeman's buffer
 24857 INC C         ; Assume that this policeman is already immobilised
 24858 LD A,(DE)     ; #REGa=MSB of the policeman's current primary command
                     ; routine
@ssub=CP 59147/256
 24859 CP 231        ; Is it the MSB of #R59147 (#S/RET/)?
 24861 JR Z,24890    ; Jump if so (this policeman is already immobilised)
 24863 DEC C         ; Decrement #REGc because this policeman is not yet
                     ; immobilised
 24864 LD E,2        ; {#REGa=policeman's y-coordinate
 24866 LD A,(DE)     ; }
 24867 CP 19         ; Is the policeman on the third floor of a building?
 24869 JR NZ,24890   ; Jump to consider the next policeman if not
 24871 DEC E         ; #REGe=#b1
 24872 LD A,(DE)     ; #REGa=policeman's x-coordinate
 24873 CP 239        ; {Consider the next policeman unless this one is in Sam's
 24875 JR NC,24890   ; office
 24877 CP 224        ;
 24879 JR C,24890    ; }
@ssub=LD A,59147/256
 24881 LD A,231      ; {Place #R59147 (#S/RET/) into bytes #b8 and #b9 of the
 24883 LD E,9        ; policeman's buffer, thus immobilising him
 24885 LD (DE),A     ;
@ssub=LD A,59147%256
 24886 LD A,11       ;
 24888 DEC E         ;
 24889 LD (DE),A     ; }
*24890 INC D         ; Point #REGde at the next policeman's buffer
 24891 DJNZ 24855    ; Jump back until both policemen have been checked
; Now #REGc holds the number of policemen that have been immobilised in Sam's
; office.
 24893 PUSH BC       ; Save the number of immobilised policemen briefly
 24894 CALL 30972    ; Check whether message #R24263(#b73) ('I STARED AT THE
                     ; LOVELY LANA...') is still in the message queue
 24897 POP BC        ; Restore the number of immobilised policemen to #REGc
 24898 RET Z         ; Return unless the entire message has been displayed
 24899 LD A,C        ; #REGa=number of immobilised policemen
 24900 AND A         ; Is it at least one?
 24901 JR NZ,24914   ; Jump if so
 24903 LD HL,0       ; {Set the number of bucks (stored at #R32670) to 0
 24906 LD (32670),HL ; }
 24909 LD A,75       ; Message #R24514(#b75): 'SHE FIRED'
 24911 JP 31445      ; Display the cutscene with this message, and then prepare
                     ; to enter demo mode

; Prepare for the next game mode
;
; Used by the routine at #R29952 to prepare for game mode 2 (using the event
; table entry at #R24586) or 3 (using the event table entry at #R24695), and by
; the routine at #R24832 to prepare for game mode 4 (when Sam has called the
; police just in time to take Lana into custody).
@label=PREPMODE
@nowarn
c24914 LD SP,23898   ; Reset the stack to its base location
 24917 NOP           ;
 24918 CALL 63728    ; Display the appropriate cutscene and prepare for game
                     ; mode 2, 3 or 4
 24921 JP 61503      ; Re-enter the main loop

; Unused
s24924 DEFB 0

; Reset a gangster's location and restart the command list
;
; Used by the command list at #R25066. Makes the gangster at no. 15 return to
; no. 15 instantly after dropping Sam off the roof of no. 19, and restarts his
; command list.
;
; H #b224 (Gangster)
@refs=61948
@label=RESETHOOD
c24925 LD DE,6648    ; #REGe=248, #REGd=25 (coordinates of the spot where the
                     ; gangster at no. 15 waits for Sam)
 24928 LD A,1        ; 1=z-coordinate (indoors)
 24930 JR 24937      ;
; This entry point is used by the command list at #R64902; it makes the
; gangster who watches for Sam outside the police station return instantly to
; the police station after dropping Sam off the roof of no. 19, and restarts
; his command list.
 24932 LD DE,8851    ; #REGe=147, #REGd=34 (coordinates of the base location of
                     ; the gangster who watches for Sam outside the police
                     ; station)
 24935 LD A,4        ; 4=z-coordinate (on the sidewalk)
*24937 LD L,4        ; Point #REGhl at byte #b4 of the gangster's buffer
 24939 LD (HL),A     ; {Set the gangster's x-, y- and z-coordinates
 24940 DEC L         ;
 24941 DEC L         ;
 24942 LD (HL),D     ;
 24943 DEC L         ;
 24944 LD (HL),E     ; }
 24945 DEC L         ; {Set the gangster's animatory state to #AS160
 24946 LD (HL),160   ; }
 24948 JP 63198      ; Restart the gangster's command list

; 'J' pressed - joystick
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'J' is
; pressed.
@refs=61483
@label=JOYSTICK
c24951 LD A,96       ; Message #b96: newline
 24953 LD (32722),A  ; Store this message number at #R32722 so that it can be
                     ; watched in the message queue
 24956 CALL 30154    ; Queue the message urgently
 24959 LD A,97       ; Message #R24524(#b97): 'JOYSTICK?'
 24961 CALL 30154    ; Queue this message urgently
*24964 CALL 30972    ; {Wait until message #b96 (newline) has left the queue
 24967 JR Z,24964    ; (and therefore 'JOYSTICK?' is displayed)}
*24969 CALL 60121    ; {Wait for a keypress and collect its ASCII code in #REGa
 24972 JR Z,24969    ; }
 24974 SET 5,A       ; Convert the keypress to lower case
 24976 LD HL,25019   ; Point #REGhl at the keypress offset patch table at
                     ; #R25019
 24979 LD DE,49968   ; Point #REGde at the main #R49968(keypress offset table)
 24982 LD BC,10      ; There will be 10 bytes to copy
 24985 CP 107        ; Was 'k' pressed?
 24987 JR NZ,25001   ; Jump if not
; Now #REGhl points at the appropriate keypress offset patch table (#R25029 if
; 'i' (Int2) was pressed, or #R25019 otherwise), and #REGa holds the input
; device indicator (#b107 if 'k' (Kempston) was pressed, or #b0 otherwise).
*24989 PUSH HL       ; Save the pointer to the keypress offset patch table
                     ; briefly
 24990 LD HL,65530   ; {Set the input device indicator for future games at
 24993 LD (HL),A     ; #R65530}
 24994 LD H,127      ; {Set the input device indicator for the current game at
 24996 LD (HL),A     ; #R32762}
 24997 POP HL        ; Restore the address of the keypress offset patch table
                     ; to #REGhl
 24998 LDIR          ; Update the entries for keys 0-9 in the #R49968(keypress
                     ; offset table)
 25000 RET           ;
; Some key other than 'k' (Kempston) was pressed.
*25001 CP 99         ; Was 'c' (Cursor) pressed?
 25003 JR Z,25013    ; Jump if so
 25005 CP 110        ; Was 'n' (None) pressed?
 25007 JR Z,25013    ; Jump if so
 25009 LD L,197      ; #REGhl=#R25029 (keypress offset patch table for Int2)
 25011 CP 105        ; Set the zero flag if 'i' was pressed
*25013 LD A,0        ; 0 indicates that we're not using the Kempston joystick
 25015 JR Z,24989    ; Jump if 'i' (Int2) was pressed
 25017 JR 24969      ; Otherwise jump back to collect another keypress

; Keypress offset patch table for keys 0-9 (Kempston/Cursor/None)
;
; Used by the routine at #R24951. These 10 bytes are copied over the first 10
; bytes of the keypress offset table at #R49968 (corresponding to keys 0-9) if
; Int2 is not selected.
@label=NOINT2
@ssub=DEFB 60690%256+1
b25019 DEFB 19       ; '0': Knock on or open a door
 25020 DEFB 0        ; '1': Unused
 25021 DEFB 0        ; '2': Unused
 25022 DEFB 0        ; '3': Unused
 25023 DEFB 0        ; '4': Unused
@ssub=DEFB 60678%256+1
 25024 DEFB 7        ; '5': Left (fast)
@ssub=DEFB 60674%256+1
 25025 DEFB 3        ; '6': Down (fast)
@ssub=DEFB 60672%256+1
 25026 DEFB 1        ; '7': Up (fast)
@ssub=DEFB 60676%256+1
 25027 DEFB 5        ; '8': Right (fast)
 25028 DEFB 0        ; '9': Unused

; Keypress offset patch table for keys 0-9 (Int2)
;
; Used by the routine at #R24951. These 10 bytes are copied over the first 10
; bytes of the keypress offset table at #R49968 (corresponding to keys 0-9) if
; Int2 is selected.
@label=INT2
@ssub=DEFB 60690%256+1
b25029 DEFB 19       ; '0': Knock on or open a door
@ssub=DEFB 60678%256+1
 25030 DEFB 7        ; '1': Left (fast)
@ssub=DEFB 60676%256+1
 25031 DEFB 5        ; '2': Right (fast)
@ssub=DEFB 60674%256+1
 25032 DEFB 3        ; '3': Down (fast)
@ssub=DEFB 60672%256+1
 25033 DEFB 1        ; '4': Up (fast)
@ssub=DEFB 60690%256+1
 25034 DEFB 19       ; '5': Knock on or open a door
@ssub=DEFB 60678%256+1
 25035 DEFB 7        ; '6': Left (fast)
@ssub=DEFB 60676%256+1
 25036 DEFB 5        ; '7': Right (fast)
@ssub=DEFB 60674%256+1
 25037 DEFB 3        ; '8': Down (fast)
@ssub=DEFB 60672%256+1
 25038 DEFB 1        ; '9': Up (fast)

; Add a random number of bucks to Sam's total
;
; Used by the routine at #R25539. Adds $1, $5, $10 or $20 to Sam's cash supply,
; and prints the new total.
@label=ADDRBUCKS
c25039 CALL 61823    ; Get a random number in #REGa
 25042 LD E,1        ; {Sam will get $1 if #REGa<=#b127
 25044 CP 128        ;
 25046 JR C,25062    ; }
 25048 LD E,5        ; {Sam will get $5 if #b128<=#REGa<=#b209
 25050 CP 210        ;
 25052 JR C,25062    ; }
 25054 CP 248        ; {Sam will get $10 if #b210<=#REGa<=#b247
 25056 LD E,10       ;
 25058 JR C,25062    ; }
 25060 LD E,20       ; Sam will get $20 if #REGa>=#b248
*25062 LD A,E        ; #REGa=1, 5, 10 or 20
 25063 JP 28306      ; Add this number of bucks to Sam's total and print the
                     ; new total

; Command list: Keep guard at no. 15
;
; Used by the gangster at no. 15 (see #R57382).
@label=CLIST01
w25066 DEFW 25081    ; Lie in wait for Sam
 25068 DEFW 62981    ; Carry Sam to and drop him off...
 25070 DEFB 216,13   ; ...the roof of no. 19
 25072 DEFW 24925    ; Return to the second floor of no. 15 and restart the
                     ; command list

; Check whether a gangster is close enough to Sam to pick him up
;
; Used by the routines at #R25081 and #R31362. Makes the gangster start or
; continue running, and returns with the carry flag set if he is close enough
; to Sam to pick him up.
;
; H Gangster's character number (#b215-#b224)
@label=RUNFORSAM
c25074 LD L,3        ; {Set bit 7 of byte #b3 of the gangster's buffer to make
 25076 SET 7,(HL)    ; him run}
 25078 JP 28942      ; Check whether the gangster is close enough to Sam to
                     ; pick him up

; Make the gangster at no. 15 lie in wait for Sam
;
; Used by the command list at #R25066.
;
; H #b224 (Gangster)
@refs=61948
@label=WAITFORSAM
c25081 CALL 25074    ; Is the gangster close enough to Sam to pick him up?
 25084 RET NC        ; Return if not
 25085 JP 29149      ; Make the gangster pick Sam up

; Make a sound effect
;
; Used by the routines at #R26352 (to make the sound effect of Sam being shot)
; and #R28646 (to make the sound effect of a sniper firing).
;
; A Initial border colour
; D Pitch adjustment
; E Initial pitch
@label=SNDEFFECT1
c25088 ADD A,17      ; Flip bit 4 of #REGa and increment the border colour in
                     ; bits 0-2
 25090 AND 23        ; Retain only bits 0-2 and 4
 25092 OUT (254),A   ; Change the border colour and speaker state
 25094 LD B,E        ; {Perform the pitch delay
*25095 DJNZ 25095    ; }
 25097 LD B,A        ; Save #REGa briefly
 25098 LD A,E        ; {Adjust the pitch delay for the next pass
 25099 ADD A,D       ;
 25100 LD E,A        ; }
 25101 LD A,B        ; Restore #REGa
 25102 JR NZ,25088   ; Jump back unless the pitch delay is now 0
 25104 RET           ;

; Unused
u25105 DEFB 0

; Potential x-coordinates for the sniper
;
; Used by the routine at #R25307.
@label=SNIPERLOCS
b25106 DEFB 39,46    ; Left and right sides of the doorsteps of no. 74
 25108 DEFB 111      ; Left side of the doorsteps of no. 31
 25109 DEFB 153      ; No. 27
 25110 DEFB 207      ; Left side of the doorsteps of no. 19
 25111 DEFB 233      ; No. 17
 25112 DEFB 249      ; No. 15

; Unused
;
; The bytes here look like remnants of the table of potential sniper
; x-coordinates at #R25106.
@bfix=!25113
u25113 DEFB 207,241,233,255,249

@bfix+begin
; Make a sniper start or continue to duck out of sight
;
; Byte #b16 of the sniper's buffer has been decremented to 0, which means that
; the sniper should start or continue to duck out of sight. This routine
; increments byte #b16 of the sniper's buffer so that the routine at #R25118
; will keep returning here until the sniper has finished ducking.
;
; H #b227 (sniper)
@label=SNIPERDUCK
c25113 LD L,16       ; {Increment byte #b16 of the sniper's buffer to 1
 25115 INC (HL)      ; }
 25116 JR 25202      ; Make the sniper start or continue to duck
@bfix+end

; Control the sniper while active
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of the sniper's buffer by the routine at #R25307. It controls
; the sniper from the moment he appears until he hides again.
;
; H #b227 (sniper)
@refs=61948
@label=MVSNIPER2
c25118 LD L,2        ; {#REGa=sniper's y-coordinate
 25120 LD A,(HL)     ; }
 25121 LD L,17       ; Point #REGhl at byte #b17 of the sniper's buffer
 25123 INC (HL)      ; {Is it zero (meaning the sniper has not fired recently)?
 25124 DEC (HL)      ; }
 25125 JR Z,25128    ; Jump if so
 25127 DEC (HL)      ; Otherwise decrement byte #b17
*25128 DEC L         ; #REGl=#b16
 25129 CP 50         ; The sniper's y-coordinate is 50 when he's inactive
 25131 JR NZ,25168   ; Jump if the sniper is currently active
; The sniper is currently inactive.
 25133 DEC (HL)      ; Decrement byte #b16 of the sniper's buffer
 25134 JP Z,62084    ; Terminate this subcommand if byte #b16 is now 0
 25137 CALL 26328    ; Is the sniper on screen at least 8 x-coordinates away
                     ; from Sam?
 25140 NOP           ;
 25141 JP NZ,62084   ; Terminate this subcommand if not
 25144 INC L         ; Point #REGhl at byte #b2 of the sniper's buffer
 25145 LD (HL),37    ; Set the sniper's y-coordinate to 37 (out of sight, but
                     ; ready to emerge)
@ssub=LD A,(58880+1)
 25147 LD A,(58881)  ; #REGa=Sam's x-coordinate
 25150 DEC L         ; #REGl=#b1
 25151 SUB (HL)      ; Subtract the sniper's x-coordinate
 25152 CCF           ; {Compute the appropriate animatory state for the sniper:
 25153 LD A,108      ; #AS54 if he's to the right of Sam, #AS182 if he's to the
 25155 RRA           ; left}
 25156 DEC HL        ; {Set the sniper's animatory state
 25157 LD (HL),A     ; }
; This entry point is used by the routine at #R28646.
*25158 LD L,2        ; {Collect the sniper's x- and y-coordinates in #REGde
 25160 LD D,(HL)     ;
 25161 DEC HL        ;
 25162 LD E,(HL)     ; }
 25163 DEC HL        ; {#REGa=sniper's animatory state
 25164 LD A,(HL)     ; }
 25165 JP 26224      ; Update the sniper's sprite tile references
; The sniper is currently active (his y-coordinate is 34-37).
@nowarn
*25168 LD A,(57014)  ; Collect the sprite tile reference for tile 7 of
                     ; animatory states #AS54(#b54/#b182); this will be #b235
                     ; if the sniper is firing, or #b0, #b110, #b111 or #b113
                     ; otherwise
 25171 CP H          ; Is the sniper firing?
 25172 JP NC,28646   ; If so, make the firing sound effect
 25175 LD A,(32767)  ; #REGa=y-coordinate of the topmost row of the play area
                     ; on screen
 25178 CP 20         ; Is the sidewalk on screen?
 25180 JR NZ,25193   ; If not, deactivate the sniper and terminate this
                     ; subcommand
 25182 DEC (HL)      ; Decrement byte #b16 of the sniper's buffer
 25183 JR NZ,25210   ; Jump unless byte #b16 is now zero
; #IF({fix}<2)//Byte #b16 of the sniper's buffer has been decremented to zero.
; The apparent intention here is to make the sniper duck out of sight and
; terminate this subcommand; however, if the sniper is not already out of
; sight, he will duck briefly but remain in view, and byte #b16 will be
; decremented to #b255 on the next pass through this routine. This is a
; #BUG#conspicuousSniper(bug)./Byte #b16 of the sniper's buffer has been
; decremented to zero, which means he should start or continue to duck out of
; sight.//
 25185 CALL 59848    ; Update the SRB for the sniper's current animatory state
                     ; and location
 25188 LD A,D        ; #REGa=sniper's y-coordinate
 25189 CP 37         ; Is the sniper currently out of sight?
@bfix=JR NZ,25113    ; Jump if not to make him start or continue ducking
 25191 JR NZ,25202   ; Jump if not to make him duck
*25193 LD L,15       ; {Remove the address of this routine from bytes #b14 and
 25195 LD (HL),0     ; #b15 of the sniper's buffer}
*25197 LD L,2        ; {Set the sniper's y-coordinate to 50 (inactive)
 25199 LD (HL),50    ; }
 25201 RET           ;
; The sniper is in the process of ducking.
*25202 INC D         ; #REGd=sniper's next y-coordinate (35-37)
*25203 LD L,0        ; Point #REGhl at byte #b0 of the sniper's buffer
 25205 LD A,(HL)     ; #REGa=sniper's animatory state
*25206 AND A         ; Reset the carry flag to indicate that the sniper is not
                     ; firing
 25207 JP 26224      ; Update the sniper's sprite tile references
; Byte 16 of the sniper's buffer is not zero.
*25210 CALL 26328    ; Compare the sniper's coordinates with Sam's
 25213 JR Z,25227    ; Jump if the sniper is on screen and at least 8
                     ; x-coordinates away from Sam
 25215 JR NC,25193   ; Terminate this subcommand if the sniper if off screen
 25217 CALL 59848    ; Update the SRB for the sniper's current animatory state
                     ; and location
 25220 LD A,D        ; #REGa=sniper's y-coordinate
 25221 CP 37         ; Has the sniper already ducked out of sight?
 25223 JR NZ,25202   ; Jump if not to make the sniper continue ducking
 25225 JR 25197      ; Deactivate the sniper
; The sniper is on screen and at least 8 x-coordinates away from Sam. If he's
; already popped his head out far enough (his y-coordinate is 34 or 35), he can
; consider shooting; otherwise he'll need to emerge a little further first.
*25227 LD L,2        ; Point #REGhl at byte #b2 of the sniper's buffer
 25229 LD A,(HL)     ; #REGa=sniper's y-coordinate
 25230 CP 36         ; Is at least half of the sniper visible?
 25232 JR C,25240    ; Jump if so
 25234 CALL 59848    ; Update the SRB for the sniper's current animatory state
                     ; and location
 25237 DEC D         ; #REGd=sniper's next y-coordinate (35 or 36)
 25238 JR 25206      ; Jump back to update the sniper's sprite tile references
; At least half of the sniper is visible (his y-coordinate is 34 or 35), which
; means he can shoot.
*25240 LD L,16       ; {Collect byte #b16 of the sniper's buffer
 25242 LD A,(HL)     ; }
 25243 AND 3         ; Is bit 0 or bit 1 set?
 25245 JR NZ,25263   ; Jump if so
 25247 CALL 61823    ; Get a random number in #REGa
 25250 CP 160        ; Should the sniper consider shooting?
 25252 JR C,25263    ; Jump if so (5 times out of 8)
 25254 CALL 59848    ; Update the SRB for the sniper's current animatory state
                     ; and location
 25257 LD A,D        ; #REGa=sniper's y-coordinate (34 or 35)
 25258 XOR 1         ; Toggle between 34 and 35
 25260 LD D,A        ; #REGd=sniper's next y-coordinate (35 or 34)
 25261 JR 25203      ; Jump back to update the sniper's sprite tile references
; The sniper will consider shooting.
@ssub=LD A,(58880+4)
*25263 LD A,(58884)  ; #REGa=Sam's z-coordinate
 25266 RRCA          ; Is Sam indoors?
 25267 RET C         ; Return if so
 25268 LD A,(32764)  ; Collect Sam's status flags from #R32764
 25271 AND 129       ; Is Sam falling from a building or being carried?
 25273 RET NZ        ; Return if so
 25274 LD L,17       ; {Collect byte #b17 of the sniper's buffer
 25276 LD A,(HL)     ; }
 25277 AND A         ; Has the sniper fired recently?
 25278 RET NZ        ; Return if so
 25279 CALL 61823    ; Get a random number in #REGa
 25282 CP 84         ; Should the sniper continue to consider shooting?
 25284 RET NC        ; Return if not (21 times out of 64)
@ssub=LD DE,32704+2
@nowarn
 25285 LD DE,32706   ; Point #REGde at the third byte of bullet buffer 1 (at
                     ; #R32704)
 25288 LD A,(DE)     ; Pick this up in #REGa
 25289 AND A         ; Is bullet buffer 1 in use?
 25290 JR Z,25297    ; Jump if not
 25292 LD E,198      ; Point #REGde at the third byte of bullet buffer 2 (at
                     ; #R32708)
 25294 LD A,(DE)     ; Pick this up in #REGa
 25295 AND A         ; Is bullet buffer 2 in use?
 25296 RET NZ        ; Return if so
; The sniper has decided to shoot, and a bullet buffer is available.
*25297 LD (HL),12    ; Place #b12 into byte #b17 of the sniper's buffer
                     ; (indicating that he's just fired)
 25299 CALL 59848    ; Update the SRB for the sniper's current animatory state
                     ; and location
 25302 SCF           ; Set the carry flag to indicate that the sniper is firing
 25303 JP 26224      ; Update the sniper's sprite tile references and
                     ; initialise a bullet

; Unused
s25306 DEFB 0

; Control the sniper
;
; Used by the command list at #R64890. Checks whether conditions are right for
; the sniper to appear, and if they are, hands over control to the
; interruptible subcommand routine at #R25118.
;
; H #b227 (sniper)
@refs=61948
@label=MVSNIPER1
c25307 LD A,(32767)  ; #R32767 holds the y-coordinate of the topmost row of the
                     ; play area on screen
 25310 CP 20         ; Is the sidewalk on screen at the moment?
 25312 RET NZ        ; Return if not
 25313 LD A,(32764)  ; Collect Sam's status flags from #R32764
 25316 AND 129       ; Is Sam being carried or falling from a building at the
                     ; moment?
 25318 RET NZ        ; Return if so
 25319 LD L,3        ; {Set bit 7 of byte #b3 of the sniper's buffer, making
 25321 SET 7,(HL)    ; him move quickly}
 25323 LD L,10       ; {Decrement and then collect byte #b10 of the sniper's
 25325 DEC (HL)      ; buffer
 25326 LD A,(HL)     ; }
 25327 AND 15        ; Are any of bits 0-3 set?
 25329 RET NZ        ; Return if so (15 times out of 16)
; Now we check how many keys Sam has collected. The exact number in Sam's
; possession affects the probability that the sniper will appear.
 25330 LD A,(32746)  ; Collect the key inventory flags from #R32746
 25333 LD B,31       ; {#REGb=#b31 if Sam has no keys or one key, #b63 if he
*25335 ADD A,A       ; has two keys, #b127 if he has three, or #b255 if he has
 25336 JR Z,25344    ; all four
 25338 JR NC,25335   ;
 25340 RL B          ;
 25342 JR 25335      ; }
*25344 CALL 61823    ; Get a random number in #REGa
 25347 CP B          ; Is #REGa>=#REGb?
 25348 RET NC        ; Return if so
; The dice are telling us that the sniper should appear. But can we find a
; suitable spot for him?
 25349 LD DE,25106   ; Point #REGde at the table of potential x-coordinates for
                     ; the sniper at #R25106
 25352 LD L,1        ; Point #REGhl at byte #b1 of the sniper's buffer
 25354 LD B,7        ; There are 7 entries in the table
*25356 LD A,(DE)     ; #REGa=potential x-coordinate for the sniper
 25357 INC E         ; Point #REGde at the next potential x-coordinate
 25358 LD (HL),A     ; Set the sniper's x-coordinate for testing
 25359 CALL 26330    ; Would this bring the sniper on screen no less than 8
                     ; x-coordinates away from Sam?
 25362 JR Z,25367    ; Jump if so
 25364 DJNZ 25356    ; Otherwise consider the next potential x-coordinate
 25366 RET           ;
; We have found a suitable place for the sniper to emerge from.
*25367 LD L,17       ; {Byte #b17 of the sniper's buffer is used to regulate
 25369 LD (HL),A     ; the delay between shots; initialise it to 0}
 25370 DEC L         ; #REGl=#b16
 25371 CALL 61823    ; Get a random number in #REGa
 25374 AND 15        ; {Byte #b16 of the sniper's buffer is used to decide when
 25376 ADD A,10      ; to duck and when to shoot; initialise it to a number
 25378 LD (HL),A     ; between #b10 and #b25}
@nowarn
 25379 LD BC,25118   ; {Copy the address of the interruptible subcommand
 25382 JP 63403      ; routine at #R25118 into bytes #b14 and #b15 of the
                     ; sniper's buffer, and then jump to it}

; Make a gangster chase Sam
;
; Used by the command lists at #R64790, #R64816, #R64846, #R64878 and #R64902.
; Makes a gangster start or continue chasing Sam (unless Sam is already being
; carried or is falling from the roof of a building).
;
; H Gangster's character number (#b215-#b224)
@refs=61948
@label=HOODTOSAM1
c25385 LD A,(32764)  ; Collect Sam's status flags from #R32764
 25388 AND 129       ; Is Sam already being carried, or falling from the roof
                     ; of a building?
 25390 JP Z,31362    ; Jump if not
 25393 RET           ;

; Unused
u25394 DEFB 201

; Banknote animation table
;
; Used by the routine at #R25420. This animation table contains 5 entries of 5
; bytes each, which are used to determine how far up, down or to the right the
; banknote should move next. The algorithm used is as follows:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Step | =h Description }
; { 1       | Determine which entry to use based on the banknote's height above
;             the ground }
; { 2       | Generate a random number, R, between #b0 and #b255 }
; { 3       | Find the index, J, of the first byte in the entry that is greater
;             than R (J=0-4, or 5 if there is no such byte) }
; { 4       | Increment the banknote's x-coordinate if J<=2, or leave it alone
;             if J>2 }
; { 5       | Increment the banknote's y-coordinate if J=0 or 3, decrement it
;             if J=1 or 4, or leave it alone if J=2 or 5 }
; TABLE#
; .
; The first entry is used when the banknote's height above the ground is -1.
; This can only happen when the banknote is below but adjacent to the sidewalk,
; having recently moved right from a spot at a height of 0 above the road. The
; probabilities with which the banknote's x- and y-coordinates will be adjusted
; are as follows:
; .
; #TABLE(default,centre,centre,centre,centre,centre)
; { =h x | =h x+1 | =h y-1  | =h y  | =h y+1 }
; { 1/4  | 3/4    | 255/256 | 1/256 | 0 }
; TABLE#
@label=NOTEANIM
b25395 DEFB 0,192,192,192,255   ; J will be 1 (with probability 3/4), 4
                                ; (63/256) or 5 (1/256)
; The next entry is used when the banknote's height above the ground is 0 (i.e.
; it is on the road or sidewalk).
; .
; #TABLE(default,centre,centre,centre,centre,centre)
; { =h x | =h x+1 | =h y-1  | =h y  | =h y+1 }
; { 3/16 | 13/16  | 7/32    | 25/32 | 0 }
; TABLE#
 25400 DEFB 0,48,208,208,216    ; J will be 1 (with probability 3/16), 2 (5/8),
                                ; 4 (1/32) or 5 (5/32)
; The next entry is used when the banknote's height above the ground is 1.
; .
; #TABLE(default,centre,centre,centre,centre,centre)
; { =h x | =h x+1 | =h y-1  | =h y  | =h y+1 }
; { 3/8  | 5/8    | 1/8     | 15/32 | 13/32 }
; TABLE#
 25405 DEFB 72,88,160,192,208   ; J will be 0 (with probability 9/32), 1
                                ; (1/16), 2 (9/32), 3 (1/8), 4 (1/16) or 5
                                ; (3/16)
; The next entry is used when the banknote's height above the ground is 2.
; .
; #TABLE(default,centre,centre,centre,centre,centre)
; { =h x | =h x+1 | =h y-1  | =h y  | =h y+1 }
; { 3/8  | 5/8    | 0       | 1/4   | 3/4 }
; TABLE#
 25410 DEFB 128,128,160,224,224 ; J will be 0 (with probability 1/2), 2 (1/8),
                                ; 3 (1/4) or 5 (1/8)
; The final entry is used when the banknote's height above the ground is 3.
; This can only happen when the banknote is above the road, having recently
; moved right from a spot at a height of 2 above the sidewalk.
; .
; #TABLE(default,centre,centre,centre,centre,centre)
; { =h x | =h x+1 | =h y-1  | =h y  | =h y+1 }
; { 1/4  | 3/4    | 0       | 1/256 | 255/256 }
; TABLE#
 25415 DEFB 192,192,192,255,255 ; J will be 0 (with probability 3/4), 3
                                ; (63/256) or 5 (1/256)

; Control a banknote
;
; Used by the command list at #R64888. Calculates and sets the banknote's next
; animatory state and location. If the banknote is far enough off-screen to the
; left or right, it will be moved to a location just off-screen to the left.
;
; H #b228 or #b229 (banknote)
@refs=61948
@label=MVBANKNOTE
c25420 LD A,(32745)  ; #R32745 holds Sam's object inventory
 25423 RLCA          ; {Has Sam got the hook (bit 6 set)?
 25424 RLCA          ; }
 25425 JR NC,25434   ; Jump if not
; Sam's got the hook; we bring this banknote out of service so that its
; character buffer is available for use by the hook when it's thrown. However,
; the banknote is not removed from view, which is a #BUG#frozenFiver(bug).
 25427 CALL 59848    ; Update the SRB for the banknote's current animatory
                     ; state and location
 25430 CALL 63409    ; Change the banknote's primary command routine address to
                     ; #R25433 (below)
@label=FREEZENOTE
 25433 RET           ;
; This entry point is used by the command list at #R64886.
*25434 LD L,10       ; {Collect byte #b10 of the banknote's buffer
 25436 LD A,(HL)     ; }
 25437 AND A         ; Reset the zero flag if Sam has just landed on this
                     ; banknote
 25438 LD (HL),0     ; Set byte #b10 to zero
 25440 JR NZ,25461   ; Jump if Sam has just landed on this banknote
; First we check whether the banknote is far off-screen to the left or right.
 25442 LD L,1        ; Point #REGhl at byte #b1 of the banknote's buffer
 25444 LD A,(32766)  ; #REGa=X (the x-coordinate of the leftmost column of the
                     ; play area on screen)
 25447 SUB 12        ; Is X=0 or 8?
 25449 JR C,25454    ; Jump if so
 25451 CP (HL)       ; Is the banknote's x-coordinate greater than X-12?
 25452 JR NC,25461   ; Jump if not
*25454 ADD A,60      ; #REGa=X+48
 25456 JR C,25477    ; Jump if X=0, 8, 208, 216 or 224
 25458 CP (HL)       ; Is the banknote's x-coordinate greater than X+48?
 25459 JR NC,25477   ; Jump if not
; The banknote is off-screen to the left by at least 12 x-coordinates, or it's
; off-screen to the right by at least 17 x-coordinates, or it's just been
; landed on by Sam. Time to reinitialise its animatory state and location.
*25461 CALL 59848    ; Update the SRB for the banknote's current animatory
                     ; state and location
 25464 LD D,34       ; Initialise the banknote's y-coordinate to 34
 25466 LD A,(32766)  ; #REGa=X (the x-coordinate of the leftmost column of the
                     ; play area on screen)
 25469 SUB 11        ; Is X>8?
 25471 JR NC,25474   ; Jump if so
 25473 SBC A,A       ; #REGa=#b255
*25474 LD E,A        ; #REGe=#b255 (if X<=8) or X-11
 25475 JR 25480      ;
; The banknote is on-screen or not far off it. Now we calculate the banknote's
; next animatory state and location.
*25477 CALL 59848    ; Update the SRB for the banknote's current animatory
                     ; state and location
*25480 PUSH AF       ; Save the banknote's current animatory state briefly
 25481 CALL 61823    ; Get a random number in #REGa
 25484 LD C,A        ; Copy it to #REGc
 25485 AND 136       ; Keep only bits 3 and 7
 25487 ADD A,62      ; {#REGb=#AS62, #AS70, #AS190, or #AS198 (banknote
 25489 LD B,A        ; animatory states)}
 25490 POP AF        ; Restore the banknote's current animatory state to #REGa
 25491 CP B          ; Is it equal to #REGb?
 25492 JR Z,25480    ; Jump back to generate another animatory state if so
; At this point #REGb holds the banknote's next animatory state. Now we
; calculate its next location.
 25494 LD A,B        ; #REGa=banknote's next animatory state
 25495 PUSH AF       ; Save this briefly
 25496 CALL 60164    ; Set the carry flag if the banknote is above the road (as
                     ; opposed to the sidewalk)
 25499 ADC A,45      ; {#REGa=45 if the banknote is above the sidewalk, or 46
 25501 SUB E         ; if it's above the road}
 25502 SUB D         ; Subtract the banknote's current y-coordinate (32-35);
                     ; now #REGa=11+G, where G (-1<=G<=3) is the height of the
                     ; banknote above the ground
 25503 LD B,A        ; {Multiply this value by 5 and add 1 (#REGa=51, 56, 61,
 25504 ADD A,A       ; 66, or 71)
 25505 ADD A,A       ;
 25506 ADD A,B       ;
 25507 INC A         ; }
 25508 PUSH HL       ; Save the banknote's character number
 25509 LD L,A        ; {Point #REGhl at the entry in the banknote animation
@ssub=LD H,25395/256
 25510 LD H,99       ; table at #R25395 that corresponds to the banknote's
                     ; height above the ground}
 25512 LD A,C        ; #REGa=random number generated earlier
 25513 LD BC,1283    ; #REGb=5 (number of bytes in the entry), #REGc=3
*25516 CP (HL)       ; {Find the first byte in the entry that is greater than
 25517 JR C,25522    ; #REGa
 25519 INC HL        ;
 25520 DJNZ 25516    ; }
*25522 LD A,B        ; #REGa=0-5
 25523 CP C          ; Is #REGa<3?
 25524 JR C,25528    ; Jump if so
 25526 INC E         ; Otherwise increment the banknote's x-coordinate
 25527 SUB C         ; #REGa=0-2
*25528 ADD A,A       ; #REGa=0, 2 or 4
 25529 JR Z,25532    ; Jump if #REGa=0
 25531 SUB C         ; #REGa=-1 or 1
*25532 ADD A,D       ; {Add -1, 0 or 1 to the banknote's current y-coordinate
 25533 LD D,A        ; }
 25534 POP HL        ; Restore the banknote's character number to #REGh
 25535 POP AF        ; Restore the banknote's next animatory state to #REGa
 25536 JP 59861      ; Update the banknote's animatory state and location and
                     ; update the SRB

; Check whether Sam has somersaulted onto a banknote
;
; Used by the routine at #R25789. Compares Sam's location with those of the two
; banknotes. If there's a match, and Sam has just finished a somersault, the
; banknote is added to Sam's cash supply.
;
@ignoreua
; HL #w58892 (byte #b12 of Sam's buffer)
@label=GOTNOTE
c25539 BIT 5,(HL)    ; Byte #b12 of Sam's buffer holds the LSB of the current
                     ; roll/somersault animation phase table entry
 25541 RET Z         ; Return if Sam was rolling
 25542 LD L,1        ; {Collect Sam's x- and y-coordinates in #REGe and #REGd
 25544 LD E,(HL)     ;
 25545 INC L         ;
 25546 LD D,(HL)     ; }
 25547 LD B,L        ; #REGb=2 (there are 2 banknotes)
*25548 DEC H         ; #REGh=#b228 or #b229
 25549 LD A,D        ; #REGa=Sam's y-coordinate
 25550 CP (HL)       ; Compare it with the banknote's y-coordinate
 25551 DEC HL        ; Point #REGhl at byte #b1 of the banknote's buffer
 25552 JR NZ,25558   ; Jump unless Sam's y-coordinate matches the banknote's
 25554 LD A,E        ; #REGa=Sam's x-coordinate
 25555 CP (HL)       ; Has Sam landed on a banknote?
 25556 JR Z,25562    ; Jump if so
*25558 INC HL        ; Point #REGhl at byte #b2 of the banknote's buffer
 25559 DJNZ 25548    ; Jump back until both banknotes have been checked
 25561 RET           ;
; Sam has landed on something that is using one of the banknote buffers. Here
; we check that the object looks like a banknote. But this check is redundant,
; since no object except a banknote or the hook can use buffer #b228 or #b229,
; and Sam cannot land on the hook.
*25562 DEC L         ; #REGl=#b0
 25563 LD A,(HL)     ; #REGa=banknote's animatory state
 25564 AND 127       ; Discard bit 7
 25566 SUB 62        ; Is the banknote's animatory state #AS62(#b62 or #b190)?
 25568 JR Z,25573    ; Jump if so
 25570 SUB 8         ; Is the banknote's animatory state #AS70(#b70 or #b198)?
 25572 RET NZ        ; Return if not (this never happens)
; Sam has landed on something that looks like a banknote.
*25573 LD L,10       ; {Set byte #b10 of the banknote's buffer to 1 to indicate
 25575 INC (HL)      ; that Sam's just landed on it (see #R25420)}
 25576 CALL 25039    ; Add 1, 5, 10 or 20 bucks to Sam's total
; Finally we make an appropriate sound effect.
; .
; #AUDIO7(banknote.wav)(25579,25599)
@assemble=2
 25579 XOR A         ; {Prepare the sound effect parameters: #REGa=#b0 (initial
 25580 LD DE,1529    ; border colour), #REGd=#b5 (duration), #REGe=#b249
                     ; (initial pitch)}
*25583 INC A         ; Increment the border colour
 25584 XOR 16        ; Flip bit 4 of #REGa
 25586 AND 23        ; Retain only bits 0-2 (border colour) and 4 (speaker
                     ; state)
 25588 OUT (254),A   ; Change the border colour and speaker state
 25590 LD B,E        ; {Perform the pitch delay
*25591 DJNZ 25591    ; }
 25593 DEC E         ; Decrement the pitch delay
 25594 JR NZ,25583   ; Jump back unless it's zero
 25596 DEC D         ; Decrement the duration counter
 25597 JR NZ,25583   ; Jump back unless it's zero
@assemble=1
 25599 RET           ;

; Copy source sprite tiles over target sprite tiles
;
; Used by the routine at #R25618 to prepare sprite tiles #b239-#b247, which are
; used by animatory states #AS9, #AS10, #AS15 and #AS31 (corresponding to the
; sprites of Sam rolling and somersaulting).
;
; C Number of tiles to copy
; E Target sprite tile reference
; L Source sprite tile reference
@label=COPYTILES
c25600 LD H,199      ; This is the base page of the graphic data for the source
                     ; tile
; This entry point is used by the routine at #R25618 with #REGh=#b215.
*25602 LD D,199      ; This is the base page of the graphic data for the target
                     ; tile
 25604 LD B,16       ; {Copy the source sprite tile over the target sprite tile
*25606 LD A,(HL)     ; (8 bytes of graphic data interleaved with 8 bytes of
 25607 LD (DE),A     ; mask data)
 25608 INC H         ;
 25609 INC D         ;
 25610 DJNZ 25606    ; }
 25612 INC L         ; Move to the next source sprite tile reference
 25613 INC E         ; Move to the next target sprite tile reference
 25614 DEC C         ; Have all the sprite tiles been copied yet?
 25615 JR NZ,25600   ; Jump back if not
 25617 RET           ;

; Prepare sprite tiles used by Sam when somersaulting or rolling
;
; Used by the routine at #R25789. Animatory states #AS9, #AS10, #AS15 and #AS31
; - corresponding to the sprites of Sam rolling and somersaulting - use sprite
; tiles #b239-#b247. These sprite tiles are initialised before Sam starts his
; acrobatic manoeuvre, and later rotated as he moves through each phase of
; animation.
@label=PREPTILES
c25618 LD L,2        ; {Copy sprite tiles #b2-#b7 over sprite tiles #b239-#b244
 25620 LD E,239      ;
 25622 LD C,6        ;
 25624 CALL 25600    ; }
 25627 LD E,242      ; {Copy sprite tile #b170 over sprite tile #b242
 25629 LD L,170      ;
 25631 INC C         ;
 25632 CALL 25600    ; }
 25635 LD A,181      ; {Copy sprite tiles #b181, #b189 and #b197 from base page
 25637 LD E,245      ; #b215 over sprite tiles #b245-#b247
*25639 LD L,A        ;
 25640 LD H,215      ;
 25642 INC C         ;
 25643 CALL 25602    ;
 25646 LD A,L        ;
 25647 ADD A,7       ;
 25649 CP 205        ;
 25651 JR NZ,25639   ; }
 25653 LD B,8        ; {Superimpose sprite tile #b205 from base page #b215 over
@nowarn
 25655 LD HL,55245   ; sprite tile #b243 (which is currently a copy of sprite
@nowarn
 25658 LD DE,51187   ; tile #b6, the centre tile of Sam's base animatory
*25661 LD A,(DE)     ; state); this makes Sam appear to bend his arms and hold
 25662 OR (HL)       ; his knees while performing the acrobatic feat, at the
 25663 INC H         ; expense of losing some detail from his current disguise
 25664 AND (HL)      ;
 25665 INC H         ;
 25666 LD (DE),A     ;
 25667 INC D         ;
 25668 LD (DE),A     ;
 25669 INC D         ;
 25670 DJNZ 25661    ; }
; This entry point is used by the routine at #R25789. Here we rotate sprite
; tiles #b239-#b247 and store the results in sprite tile slots #b238-#b246.
*25672 LD L,239      ; Tile #b239 is the first source tile
*25674 LD E,L        ; {#REGe=#b238 (the first target tile)
 25675 DEC E         ; }
 25676 LD D,199      ; The base page for these tiles is #b199
 25678 LD B,8        ; {Rotate the source sprite tile 90 degrees anticlockwise
*25680 LD H,198      ; and copy it over the target sprite tile
 25682 LD C,1        ;
*25684 INC H         ;
 25685 RRC (HL)      ;
 25687 RLA           ;
 25688 INC H         ;
 25689 RRC (HL)      ;
 25691 RL C          ;
 25693 JR NC,25684   ;
 25695 LD (DE),A     ;
 25696 INC D         ;
 25697 LD A,C        ;
 25698 LD (DE),A     ;
 25699 INC D         ;
 25700 DJNZ 25680    ; }
 25702 INC L         ; Move to the next source sprite tile reference
 25703 BIT 3,L       ; Have we rotated sprite tiles #b239-#b247 yet?
 25705 JR Z,25674    ; Jump back if not
; Next we move sprite tiles #b238-#b246 up to #b239-#b247.
 25707 LD A,16       ; There are 16 bytes of graphic and mask data in each tile
*25709 LD E,247      ; {Copy sprite tiles #b238-#b246 into slots #b239-#b247
 25711 LD L,246      ;
 25713 LD C,9        ;
 25715 DEC D         ;
 25716 LD H,D        ;
 25717 LDDR          ;
 25719 DEC A         ;
 25720 JR NZ,25709   ; }
 25722 RET           ; Return with the zero flag set

; Unused
s25723 DEFB 0

; Animation phase table for Sam when rolling
;
; Used by the routine at #R25784. Each entry in this table comprises 4 bytes.
; The first entry corresponds to animation phase 1.
@label=ROLLANIM
b25724 DEFB 0        ; x-coordinate increment (if facing left)
 25725 DEFB 0        ; x-coordinate increment (if facing right)
 25726 DEFB 0        ; y-coordinate increment
 25727 DEFB 6        ; Bits 0-6: base animatory state (#AS6); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 2.
 25728 DEFB 253      ; x-coordinate increment (if facing left)
 25729 DEFB 1        ; x-coordinate increment (if facing right)
 25730 DEFB 2        ; y-coordinate increment
 25731 DEFB 15       ; Bits 0-6: base animatory state (#AS15); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 3.
 25732 DEFB 1        ; x-coordinate increment (if facing left)
 25733 DEFB 1        ; x-coordinate increment (if facing right)
 25734 DEFB 255      ; y-coordinate increment
 25735 DEFB 9        ; Bits 0-6: base animatory state (#AS9); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 4.
 25736 DEFB 254      ; x-coordinate increment (if facing left)
 25737 DEFB 0        ; x-coordinate increment (if facing right)
 25738 DEFB 2        ; y-coordinate increment
 25739 DEFB 31       ; Bits 0-6: base animatory state (#AS31); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 5.
 25740 DEFB 1        ; x-coordinate increment (if facing left)
 25741 DEFB 1        ; x-coordinate increment (if facing right)
 25742 DEFB 252      ; y-coordinate increment
 25743 DEFB 138      ; Bits 0-6: base animatory state (#AS10); bit 7 set: check
                     ; whether Sam has landed on his feet
; The next entry corresponds to animation phase 6.
 25744 DEFB 255      ; x-coordinate increment (if facing left)
 25745 DEFB 1        ; x-coordinate increment (if facing right)
 25746 DEFB 0        ; y-coordinate increment
 25747 DEFB 128      ; Bits 0-6: base animatory state (#AS0); bit 7 set: check
                     ; whether Sam has landed on his feet

; Animation phase table for Sam when somersaulting
;
; Used by the routine at #R25789. Each entry in this table comprises 4 bytes.
; The first entry corresponds to animation phase 1.
@label=SSAULTANIM
b25748 DEFB 0        ; x-coordinate increment (if facing left)
 25749 DEFB 0        ; x-coordinate increment (if facing right)
 25750 DEFB 0        ; y-coordinate increment
 25751 DEFB 6        ; Bits 0-6: base animatory state (#AS6); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 2.
 25752 DEFB 0        ; x-coordinate increment (if facing left)
 25753 DEFB 0        ; x-coordinate increment (if facing right)
 25754 DEFB 0        ; y-coordinate increment
 25755 DEFB 0        ; Bits 0-6: base animatory state (#AS0); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 3.
 25756 DEFB 253      ; x-coordinate increment (if facing left)
 25757 DEFB 1        ; x-coordinate increment (if facing right)
 25758 DEFB 0        ; y-coordinate increment
 25759 DEFB 15       ; Bits 0-6: base animatory state (#AS15); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 4.
 25760 DEFB 1        ; x-coordinate increment (if facing left)
 25761 DEFB 1        ; x-coordinate increment (if facing right)
 25762 DEFB 254      ; y-coordinate increment
 25763 DEFB 9        ; Bits 0-6: base animatory state (#AS9); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 5.
 25764 DEFB 255      ; x-coordinate increment (if facing left)
 25765 DEFB 255      ; x-coordinate increment (if facing right)
 25766 DEFB 3        ; y-coordinate increment
 25767 DEFB 31       ; Bits 0-6: base animatory state (#AS31); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 6.
 25768 DEFB 1        ; x-coordinate increment (if facing left)
 25769 DEFB 1        ; x-coordinate increment (if facing right)
 25770 DEFB 253      ; y-coordinate increment
 25771 DEFB 10       ; Bits 0-6: base animatory state (#AS10); bit 7 reset: Sam
                     ; cannot land on his feet yet
; The next entry corresponds to animation phase 7.
 25772 DEFB 255      ; x-coordinate increment (if facing left)
 25773 DEFB 1        ; x-coordinate increment (if facing right)
 25774 DEFB 0        ; y-coordinate increment
 25775 DEFB 128      ; Bits 0-6: base animatory state (#AS0); bit 7 set: check
                     ; whether Sam has landed on his feet
; The next entry corresponds to animation phase 8.
 25776 DEFB 0        ; x-coordinate increment (if facing left)
 25777 DEFB 0        ; x-coordinate increment (if facing right)
 25778 DEFB 0        ; y-coordinate increment
 25779 DEFB 128      ; Bits 0-6: base animatory state (#AS0); bit 7 set: check
                     ; whether Sam has landed on his feet
; The next entry corresponds to animation phase 9.
 25780 DEFB 0        ; x-coordinate increment (if facing left)
 25781 DEFB 0        ; x-coordinate increment (if facing right)
 25782 DEFB 0        ; y-coordinate increment
 25783 DEFB 128      ; Bits 0-6: base animatory state (#AS0); bit 7 set: check
                     ; whether Sam has landed on his feet

; 'R' pressed - forward roll
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'R' is
; pressed.
@refs=61483
@label=ROLL
c25784 LD HL,25724   ; The animation phase table for Sam when rolling is at
                     ; #R25724
 25787 JR 25792      ;

; 'S' pressed - somersault
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'S' is
; pressed.
@refs=61483
@label=SOMERSAULT
c25789 LD HL,25748   ; The animation phase table for Sam when somersaulting is
                     ; at #R25748
; This entry point is used by the routine at #R25784 with #REGhl=#R25724.
*25792 PUSH HL       ; Save the address of the animation phase table
 25793 CALL 25918    ; Return to the main loop if Sam cannot roll or somersault
                     ; from his current location
 25796 LD A,8        ; {Set bit 3 of Sam's status flags at #R32764
 25798 LD (32764),A  ; }
 25801 POP HL        ; Restore the address of the animation phase table to
                     ; #REGhl
@ssub=LD (58880+12),HL
 25802 LD (58892),HL ; Copy the address of the animation phase table into bytes
                     ; #b12 and #b13 of Sam's buffer
; This entry point is used by the routine at #R29912 when bit 3 at #R32764 is
; set (by this routine - see above).
@refs=29912
@ssub=LD HL,58880+8
*25805 LD HL,58888   ; {Reset Sam's main action timer (in byte #b8 of his
 25808 LD (HL),6     ; buffer) to 6}
 25810 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
@ssub=LD HL,(58880+12)
 25813 LD HL,(58892) ; Point #REGhl at the first byte of the current entry in
                     ; the animation phase table
 25816 AND 128       ; Set the zero flag if Sam is facing left
 25818 LD B,A        ; #REGb=#b0 if Sam is facing left, #b128 if facing right
 25819 LD A,(HL)     ; #REGa=first byte of the animation phase table entry
 25820 INC HL        ; Point #REGhl at the second byte in the entry
 25821 JR Z,25824    ; Jump if Sam is facing left
 25823 LD A,(HL)     ; #REGa=second byte of the animation phase table entry
*25824 ADD A,E       ; Add Sam's current x-coordinate
 25825 LD E,A        ; #REGe=Sam's next x-coordinate
 25826 INC HL        ; {#REGa=third byte of the animation phase table entry
 25827 LD A,(HL)     ; }
 25828 ADD A,D       ; Add Sam's current y-coordinate
 25829 LD D,A        ; #REGd=Sam's next y-coordinate
 25830 INC HL        ; {#REGa=fourth byte of the animation phase table entry
 25831 LD A,(HL)     ; }
 25832 INC HL        ; Point #REGhl at the first byte of the next entry
@ssub=LD (58880+12),HL
 25833 LD (58892),HL ; Store this address in bytes #b12 and #b13 of Sam's
                     ; buffer
 25836 RLCA          ; {#REGc=Sam's next base animatory state (bit 7 reset)
 25837 AND A         ;
 25838 RRA           ;
 25839 LD C,A        ; }
 25840 JR NC,25877   ; Jump unless it's time to check whether Sam has landed
; It's time to check whether Sam has landed on his feet yet.
 25842 PUSH DE       ; Save Sam's new coordinates briefly
 25843 AND A         ; Is Sam's next animatory state #AS0(#b0 or #b128)
                     ; (standing upright)?
 25844 JR Z,25853    ; Jump if so
 25846 DEC E         ; Subtract 1 from Sam's new x-coordinate
 25847 BIT 7,B       ; Is Sam facing left?
 25849 JR Z,25853    ; Jump if so
 25851 INC E         ; {Add 1 to Sam's new x-coordinate
 25852 INC E         ; }
*25853 CALL 60159    ; Has Sam landed on the sidewalk or the road yet?
 25856 JR NC,25866   ; Jump if so
 25858 LD A,E        ; #REGa=Sam's adjusted new x-coordinate
 25859 POP DE        ; Restore Sam's new x-coordinate to #REGe
 25860 INC D         ; Add 1 to Sam's new y-coordinate (move him down a level)
 25861 PUSH DE       ; Save Sam's adjusted new coordinates briefly
 25862 LD E,A        ; #REGe=Sam's adjusted new x-coordinate
 25863 CALL 60159    ; Set the carry flag unless Sam has landed on the sidewalk
                     ; or road
*25866 POP DE        ; Restore Sam's adjusted new y-coordinate to #REGd, and
                     ; his new x-coordinate to #REGe
 25867 JR C,25876    ; Jump if Sam has not landed yet
 25869 LD A,C        ; #REGa=Sam's next base animatory state (bit 7 reset)
 25870 AND A         ; Is it #AS0(#b0 or #b128) (standing upright)?
 25871 JR NZ,25876   ; Jump if not
 25873 LD (32764),A  ; Clear all of Sam's status flags at #R32764 (Sam has
                     ; landed)
*25876 LD A,C        ; #REGa=Sam's next base animatory state (bit 7 reset)
*25877 CP 9          ; Is the new base animatory state < #b9 (meaning Sam has
                     ; just started or is just finishing a roll or somersault)?
 25879 JR C,25893    ; Jump if so
 25881 PUSH BC       ; Save Sam's direction indicator and next base animatory
                     ; state
 25882 PUSH DE       ; Save Sam's next x- and y-coordinates
 25883 CP 15         ; Is the new base animatory state #AS15 (meaning Sam is
                     ; going to rotate 90 degrees for the first part of the
                     ; roll or somersault)?
 25885 CALL Z,25618  ; If so, prepare sprite tiles #b239-#b247 for this
                     ; animatory state
 25888 CALL NZ,25672 ; Otherwise, rotate sprite tiles #b239-#b247 for animatory
                     ; state #AS9, #AS31 or #AS10
 25891 POP DE        ; Restore Sam's next x- and y-coordinates to #REGe and
                     ; #REGd
 25892 POP BC        ; Restore Sam's direction indicator and next base
                     ; animatory state to #REGb and #REGc
@ssub=LD H,58880/256
*25893 LD H,230      ; #b230=Sam
 25895 LD A,B        ; {#REGa=Sam's new animatory state
 25896 OR C          ; }
 25897 CALL 59861    ; Update Sam's animatory state and location and update the
                     ; SRB
 25900 LD A,(32764)  ; Collect Sam's status flags from #R32764
 25903 AND A         ; Has Sam landed yet?
 25904 RET NZ        ; Return if not
 25905 CALL 60521    ; Make a sound effect
 25908 LD L,12       ; Point #REGhl at byte #b12 of Sam's buffer
 25910 CALL 25539    ; Check whether Sam has somersaulted onto a banknote
@ssub=LD H,58880/256
 25913 LD H,230      ; #b230=Sam
 25915 JP 60547      ; Now that Sam has landed, scroll the screen left or right
                     ; if necessary

; Check whether Sam can roll or somersault from his current location
;
; Used by the routine at #R25789. Returns to the caller if Sam can roll or
; somersault from his current location; otherwise returns to the main loop.
@label=CANROLL
@ssub=LD H,58880/256
c25918 LD H,230      ; #b230=Sam
 25920 CALL 60152    ; Is Sam on the sidewalk or the road?
 25923 JR C,25941    ; Jump if not
 25925 LD L,0        ; Point #REGhl at byte #b0 of Sam's buffer
 25927 BIT 7,(HL)    ; Reset the zero flag if Sam is facing right
 25929 INC HL        ; Point #REGhl at byte #b1 of Sam's buffer
 25930 LD A,(HL)     ; #REGa=Sam's x-coordinate
 25931 JR NZ,25938   ; Jump if Sam is facing right
 25933 CP 4          ; {Return if Sam is facing left and his x-coordinate is >=
 25935 RET NC        ; 4}
 25936 JR C,25941    ; Jump if Sam is facing left and his x-coordinate is < 4
*25938 CP 250        ; {Return if Sam is facing right and his x-coordinate is <
 25940 RET C         ; 250}
*25941 POP BC        ; Drop the return address from the stack
 25942 POP BC        ; Drop the address of the animation phase table from the
                     ; stack
 25943 RET           ; Return to the main loop at #R61549

; Determine Sam's location
;
; Used by the routines at #R28942, #R29072 and #R29218. Returns with Sam's x-,
; y- and z-coordinates (adjusted appropriately if Sam is falling, rolling,
; somersaulting or being carried) in #REGe, #REGd and #REGa.
@label=GETSAMXY
@ssub=LD DE,(58880+1)
c25944 LD DE,(58881) ; Collect Sam's x- and y-coordinates in #REGe and #REGd
 25948 LD A,(32764)  ; Pick up Sam's status flags from #R32764
 25951 BIT 3,A       ; Is Sam rolling or somersaulting?
 25953 JR NZ,25967   ; Jump if so
 25955 AND 129       ; Is Sam either being carried by a gangster or policeman,
                     ; or falling from the roof of a building?
@ssub=LD A,(58880+4)
 25957 LD A,(58884)  ; {Return with #REGa holding Sam's z-coordinate if not
 25960 RET Z         ; }
; Sam is either being carried by a policeman, or falling from the roof of a
; building.
 25961 LD A,2        ; 2=behind people on the sidewalk
 25963 LD DE,9896    ; #REGd=38, #REGe=168 (out of reach)
 25966 RET           ;
; Sam is rolling or somersaulting.
*25967 LD A,(58880)  ; #REGa=Sam's animatory state
 25970 AND 127       ; Discard bit 7 (the direction bit)
 25972 CP 15         ; Is Sam horizontal at the moment (animatory state #AS15
                     ; or #AS31)?
 25974 JR C,25978    ; Jump if not
 25976 INC E         ; {Add 2 to Sam's x-coordinate if he's horizontal
 25977 INC E         ; }
*25978 LD A,E        ; #REGa=x+2 if Sam's horizontal, or x otherwise (where x
                     ; is Sam's x-coordinate)
 25979 CALL 60165    ; Reset the carry flag if Sam is on or above the sidewalk,
                     ; or set it if he's on or above the road
 25982 ADC A,34      ; {#REGd=34 if Sam's on or above the sidewalk, 35 if he's
 25984 SUB E         ; on or above the road
 25985 LD D,A        ; }
 25986 LD A,4        ; 4=outside
 25988 RET           ;

; Unused
s25989 DEFB 0

; Sprite tile references susceptible to bullet impact
;
; Used by the routine at #R26002. Sprite tiles with references in the range
; #b16-#b25 are used in areas within Sam's sprite that are susceptible to
; damage if hit by a bullet. The references of other such tiles outside that
; range are listed here.
@label=BULLETREFS
b25990 DEFB 3,6,9,12    ; These are the references of the tiles in the middle
                        ; column of Sam's sprite in animatory states #AS0 and
                        ; #AS2
 25994 DEFB 229,230     ; These are the references of the two leftmost tiles in
                        ; the bottom row of Sam's sprite in animatory state
                        ; #AS6 (Sam bending his knees)
 25996 DEFB 240,243,245 ; These tiles are used in animatory states #AS9, #AS10,
                        ; #AS15 and #AS31 (Sam in the middle of a roll or
                        ; somersault)

; Unused
s25999 DEFS 3

; Check whether Sam has been hit by a bullet
;
; Used by the routine at #R26075. Returns with the carry flag set if Sam has
; been hit by a bullet.
;
; D Bullet's next screen y-coordinate (1-20)
; E Bullet's next screen x-coordinate (0-31)
@label=CHKSHOT
c26002 EXX           ;
 26003 XOR A         ; {Initialise #REGe' to 0; #REGe' may be updated by the
 26004 LD E,A        ; call to #R59648 below}
 26005 EXX           ;
 26006 PUSH HL       ;
 26007 PUSH DE       ; Save the bullet's screen coordinates
 26008 LD HL,(32766) ; Collect the x- and y-coordinates of the top-left tile of
                     ; the play area on screen in #REGl and #REGh
 26011 ADD HL,DE     ; Add the bullet's screen coordinates
 26012 EX DE,HL      ; Now #REGde holds the bullet's play area coordinates
@ssub=LD HL,58880+4
 26013 LD HL,58884   ; Point #REGhl at byte #b4 of Sam's buffer
 26016 LD A,(HL)     ; #REGa=Sam's z-coordinate
 26017 DEC A         ; Set the zero flag if Sam's indoors
 26018 CALL 59648    ; Print the play area tile where the bullet will be next
                     ; (if Sam's not indoors)
 26021 LD A,E        ; #REGa=reference of the sprite tile (of Sam's) that was
                     ; printed, or 0 if none was printed
 26022 AND A         ; Was a sprite tile printed?
 26023 JR Z,26072    ; Jump if not (Sam was not hit)
 26025 CP 16         ; Was the sprite tile reference in the range #b1-#b15?
 26027 JR C,26033    ; Jump if so
 26029 CP 26         ; Was the sprite tile reference in the range #b16-#b25?
 26031 JR C,26047    ; Jump if so (Sam was hit by the bullet)
; The reference of the sprite tile upon which the bullet impinged was in the
; range #b1-#b15 or greater than #b25. Closer examination is required to
; determine whether Sam was hit.
*26033 LD HL,25990   ; Point #REGhl at the table of sprite tile references at
                     ; #R25990
 26036 LD B,9        ; There are 9 sprite tile references in the table
*26038 CP (HL)       ; Compare the reference of the sprite tile that was
                     ; printed with a reference from the table
 26039 JR Z,26047    ; Jump if they match (Sam was hit)
 26041 INC HL        ; Point #REGhl at the next sprite tile reference in the
                     ; table
 26042 DJNZ 26038    ; Jump back to compare it with the sprite tile that was
                     ; printed
 26044 AND A         ; Reset the carry flag: Sam was not hit by the bullet
 26045 JR 26072      ;
; Sam was hit by the bullet.
*26047 CALL 26352    ; Make the sound effect of Sam being hit by a bullet
 26050 LD HL,32751   ; #R32751 holds the number of remaining first aid kits
 26053 LD A,(HL)     ; Pick this up in #REGa
 26054 ADD A,A       ; {Discard a first aid kit
 26055 LD (HL),A     ; }
 26056 JR C,26068    ; Jump if there was a first aid kit left to discard
; Sam has already used all his first aid kits. Game over.
 26058 LD L,158      ; #REGhl=#R32670 (bucks)
 26060 LD (HL),A     ; {Reduce Sam's cash supply to 0
 26061 INC L         ;
 26062 LD (HL),A     ; }
 26063 LD A,99       ; Message #R27339(#b99): 'I HAD TO GO TO HOSPITAL...'
 26065 JP 31445      ; Display the ending cutscene with this message
; Sam had a first aid kit left.
*26068 CALL 29719    ; Display any remaining first aid kits
 26071 SCF           ; Set the carry flag: Sam was hit by the bullet
*26072 POP DE        ; Restore the bullet's screen coordinates to #REGde
 26073 POP HL        ;
 26074 RET           ;

; Move and draw the bullets
;
; Used by the routine at #R61568. For each bullet currently in flight,
; calculates the bullet's next location and draws it there (unless it has hit
; Sam).
@label=MVBULLETS
c26075 LD HL,32743   ; #R32743 holds the bullet timer
 26078 DEC (HL)      ; Is it time to move and redraw the bullets?
 26079 RET NZ        ; Return if not
@ssub=LD A,(32670+1)
 26080 LD A,(32671)  ; Collect the MSB of Sam's cash supply
 26083 LD C,3        ; {Keep only bits 0 and 1 of the MSB
 26085 AND C         ; }
 26086 XOR C         ; {#REGa=6-#REGa
 26087 ADD A,C       ; }
 26088 LD (HL),A     ; Reinitialise the bullet timer at #R32743 to 3, 4, 5 or 6
@ssub=LD L,32704%256
 26089 LD L,192      ; #REGhl=#R32704 (first byte of bullet buffer 1)
; The following loop checks each bullet to see whether it is in flight or has
; flown off the screen.
*26091 LD DE,(32766) ; Collect the x- and y-coordinates of the top-left tile of
                     ; the play area on screen in #REGe and #REGd
 26095 LD A,(HL)     ; #REGa=x-coordinate of the leftmost column of the play
                     ; area that was on screen the last time the bullet was
                     ; drawn
 26096 LD (HL),E     ; Replace that x-coordinate with the current value
 26097 SUB E         ; {#REGa=bullet's current screen x-coordinate
 26098 INC HL        ;
 26099 ADD A,(HL)    ; }
 26100 LD E,A        ; Copy this to #REGe
 26101 LD (HL),A     ; Also store it in the bullet buffer
 26102 INC HL        ; Point #REGhl at the third byte of the bullet buffer
 26103 CP 32         ; Has the bullet flown off screen to the right?
 26105 JR NC,26111   ; Jump if so
 26107 LD A,(HL)     ; #REGa=bullet's current screen y-coordinate (or 0 if the
                     ; bullet is not in flight)
 26108 AND A         ; Is the bullet in flight at the moment?
 26109 JR NZ,26120   ; Jump if so
*26111 LD (HL),0     ; Set the third byte of the bullet's buffer to 0,
                     ; indicating that it is not in flight
 26113 INC L         ; Point #REGhl at the last byte of the bullet buffer
*26114 INC L         ; Point #REGhl at the first byte of the next bullet buffer
 26115 BIT 3,L       ; Have we dealt with both bullets yet?
 26117 JR Z,26091    ; Jump back if not
 26119 RET           ;
; This bullet is currently in flight.
*26120 LD A,D        ; #REGa=y-coordinate of the topmost row of the play area
                     ; on screen
 26121 CP 20         ; Is the sidewalk on screen at the moment?
 26123 JR NZ,26111   ; Terminate the bullet if not
 26125 LD D,(HL)     ; #REGd=bullet's current screen y-coordinate
 26126 PUSH HL       ; Save the pointer to the bullet buffer
 26127 EX DE,HL      ; Transfer the bullet's screen x- and y-coordinates to
                     ; #REGl and #REGh
 26128 CALL 59148    ; Print the play area tile at these coordinates, thus
                     ; erasing the bullet
 26131 POP HL        ; Restore the bullet buffer pointer to #REGhl
 26132 INC HL        ; Point #REGhl at the fourth byte of the bullet buffer
 26133 LD A,32       ; {Flip bit 5 of this byte
 26135 XOR (HL)      ;
 26136 LD (HL),A     ; }
 26137 DEC HL        ; {Point #REGhl at the second byte of the bullet buffer
 26138 DEC HL        ; (which holds the bullet's screen x-coordinate)}
 26139 DEC (HL)      ; Decrement the bullet's screen x-coordinate
 26140 ADD A,A       ; Is the bullet flying leftwards?
 26141 JR NC,26145   ; Jump if so
 26143 INC (HL)      ; {Otherwise increment the bullet's x-coordinate
 26144 INC (HL)      ; }
*26145 LD E,(HL)     ; #REGe=bullet's next screen x-coordinate
 26146 INC HL        ; Point #REGhl at the third byte of the bullet buffer
 26147 BIT 5,E       ; Would the bullet now be off-screen to the left or right?
 26149 JR NZ,26111   ; Terminate the bullet if so
 26151 ADD A,A       ; Is the bullet flying perfectly horizontally?
 26152 JR NC,26188   ; Jump if so
; The bullet is flying at an angle towards the ground or the sky.
 26154 ADD A,A       ; Push what was bit 5 of the fourth byte of the bullet
                     ; buffer into the carry flag (and ignore it)
 26155 NOP           ;
 26156 NOP           ;
 26157 ADD A,A       ; Set the carry flag if the bullet is flying towards the
                     ; sky
 26158 INC HL        ; Point #REGhl at the fourth byte of the bullet buffer
 26159 JR C,26178    ; Jump if the bullet is flying towards the sky
; The bullet is flying at an angle towards the ground.
 26161 RES 3,(HL)    ; Reset bit 3 to prevent overflow (which would affect bits
                     ; 4-7)
 26163 INC (HL)      ; Increment the pixel row counter in bits 0-2
 26164 LD A,(HL)     ; Pick up the fourth byte of the bullet buffer
 26165 AND 7         ; Keep only bits 0-2 (the pixel row counter)
 26167 DEC HL        ; Point #REGhl at the third byte of the bullet buffer
 26168 JR NZ,26188   ; Jump unless the pixel row counter rolled over from 7 to
                     ; 0
 26170 INC (HL)      ; Increment the bullet's screen y-coordinate
 26171 LD A,(HL)     ; #REGa=bullet's next screen y-coordinate
 26172 CP 20         ; Has the bullet flown off the bottom of the screen?
 26174 JR Z,26111    ; Terminate it if so
 26176 JR 26188      ;
; The bullet is flying at an angle towards the sky.
*26178 SET 3,(HL)    ; Set bit 3 to prevent underflow (which would affect bits
                     ; 4-7)
 26180 LD A,(HL)     ; Pick up the fourth byte of the bullet buffer
 26181 DEC (HL)      ; Decrement the pixel row counter in bits 0-2
 26182 AND 7         ; #REGa=previous value of the pixel row counter (0-7)
 26184 DEC HL        ; Point #REGhl at the third byte of the bullet buffer
 26185 JR NZ,26188   ; Jump unless the pixel row counter rolled over from 0 to
                     ; 7
 26187 DEC (HL)      ; Decrement the bullet's screen y-coordinate
*26188 LD D,(HL)     ; #REGd=bullet's next screen y-coordinate
; Having calculated where the bullet is going next, we check whether it would
; hit Sam.
 26189 CALL 26002    ; Would the bullet hit Sam?
 26192 JR C,26111    ; Terminate the bullet if so
; The bullet has not flown off the screen or hit Sam, so now we draw it.
 26194 LD A,D        ; #REGa=bullet's next screen y-coordinate
 26195 AND 7         ; {Point #REGde at the top pixel row of the screen cell in
 26197 RRCA          ; which the bullet will be drawn
 26198 RRCA          ;
 26199 RRCA          ;
 26200 ADD A,E       ;
 26201 LD E,A        ;
 26202 LD A,D        ;
 26203 AND 24        ;
 26205 ADD A,64      ;
 26207 LD D,A        ; }
 26208 INC HL        ; Point #REGhl at the fourth byte of the bullet buffer
 26209 LD A,(HL)     ; {Point #REGde at the exact pixel row of the screen cell
 26210 AND 7         ; in which the bullet will be drawn
 26212 ADD A,D       ;
 26213 LD D,A        ; }
 26214 LD A,(DE)     ; Pick up the current pixel row from the display file
 26215 OR 60         ; Set bits 2-5
 26217 AND 189       ; Reset bits 6 and 1
 26219 LD (DE),A     ; Draw the bullet
 26220 JR 26114      ; Jump back to deal with the next bullet

; Unused
s26222 DEFS 2

; Update the sniper's sprite tile references
;
; Used by the routine at #R25118. Updates the sprite tile references for
; animatory states #AS54(#b54/#b182). On entry, the carry flag is set if the
; sniper is firing, in which case a new bullet will be initialised.
;
; A Sniper's animatory state (#AS54(#b54/#b182))
; D Sniper's next y-coordinate (34-37)
; E Sniper's x-coordinate
; H #b227 (sniper)
@label=UPDSNIPER
c26224 PUSH AF       ; Save the sniper's animatory state
 26225 LD A,D        ; #REGa=sniper's next y-coordinate (34-37)
 26226 EXX           ;
 26227 PUSH AF       ; Save the sniper's next y-coordinate
 26228 LD C,3        ; There are three columns in the sniper's sprite
 26230 SUB 33        ; {#REGe'=1 (sniper is at full height), 2 (sniper is at
 26232 LD E,A        ; half-height), 3 (only the sniper's head is visible), or
                     ; 4 (the sniper has ducked out of sight)}
 26233 CPL           ; {#REGd'=5-#REGe' (number of rows of the sniper's sprite
 26234 ADD A,6       ; that will be filled with non-blank tiles)
 26236 LD D,A        ; }
; The next section of code modifies the sprite tile references for animatory
; states #AS54(#b54/#b182) column by column.
 26237 LD H,215      ; #b215 is the base page for sprite tile references
*26239 LD B,D        ; #REGb=number of non-blank tiles to initialise in this
                     ; column
*26240 LD L,162      ; Animatory state #AS34(#b162) (gangster) will be used as
                     ; a template for the sniper's sprite
 26242 LD A,(HL)     ; Collect a sprite tile reference from the template
 26243 LD L,182      ; {Copy the sprite tile reference into place
 26245 LD (HL),A     ; }
 26246 INC H         ; Move down a row
 26247 DJNZ 26240    ; Jump back until all non-blank rows in this column have
                     ; been done
 26249 LD A,E        ; #REGa=number of blank rows in the sniper's sprite (1-4)
 26250 AND A         ; Are there any?
 26251 JR Z,26259    ; Jump if not (this jump is never made)
 26253 LD B,E        ; {Fill the remaining slots in this column with blank
*26254 LD (HL),0     ; tiles
 26256 INC H         ;
 26257 DJNZ 26254    ; }
*26259 DEC C         ; Have we done all three columns yet?
 26260 JR NZ,26239   ; Jump back if not
 26262 POP AF        ; Restore the sniper's next y-coordinate (34-37) to #REGa
 26263 JR NC,26323   ; Jump unless the sniper is firing
; The sniper is firing, so some further modifications to the sniper's sprite
; are required.
 26265 LD H,217      ; {Set the reference for tile 2 to #b234
 26267 LD (HL),234   ; }
 26269 INC H         ; {Set the reference for tile 3 to #b0 (blank tile)
 26270 LD (HL),0     ; }
 26272 LD H,222      ; {Set the reference for tile 7 to #b235
 26274 LD (HL),235   ; }
; Now we initialise a bullet.
@ssub=LD HL,32704+2
@nowarn
 26276 LD HL,32706   ; Point #REGhl' at the third byte of bullet buffer 1 (at
                     ; #R32704)
 26279 SUB 18        ; {#REGd=16 or 17 (bullet's initial screen y-coordinate)
 26281 LD D,A        ; }
 26282 LD A,(HL)     ; {Is bullet buffer 1 at #R32704 already being used?
 26283 AND A         ; }
 26284 JR Z,26288    ; Jump if not
@ssub=LD L,32708%256+2
 26286 LD L,198      ; Point #REGhl' at the third byte of bullet buffer 2
*26288 LD (HL),D     ; Store the bullet's initial screen y-coordinate
 26289 LD A,(32766)  ; #REGa=x-coordinate of the leftmost column of the play
                     ; area on screen
 26292 LD B,A        ; Copy this to #REGb'
 26293 INC L         ; Point #REGhl' at the fourth byte of the bullet buffer
 26294 CALL 61823    ; Get a random number in #REGa
 26297 AND 112       ; Keep only bits 4-6
 26299 ADD A,4       ; The initial pixel row at which the bullet will be drawn
                     ; inside a cell is 4
 26301 LD (HL),A     ; Initialise bits 0-6 of the fourth byte of the bullet
                     ; buffer
 26302 POP AF        ; Restore the sniper's animatory state to #REGa
 26303 PUSH AF       ; Save the animatory state again
 26304 AND 128       ; Keep only bit 7 (the direction bit)
 26306 OR (HL)       ; {Initialise bit 7 of the fourth byte of the bullet
 26307 LD (HL),A     ; buffer (the bullet's direction bit)}
 26308 DEC L         ; {Store the x-coordinate of the leftmost column of the
 26309 DEC L         ; play area on screen in the first byte of the bullet
 26310 DEC L         ; buffer
 26311 LD (HL),B     ; }
 26312 INC L         ; Point #REGhl' at the second byte of the bullet buffer
 26313 EXX           ;
 26314 RLCA          ; Set the carry flag if the sniper is facing right
 26315 LD A,E        ; #REGa=sniper's x-coordinate
 26316 EXX           ;
 26317 JR NC,26321   ; Jump if the sniper is facing left
 26319 INC A         ; {Add 2 to the sniper's x-coordinate
 26320 INC A         ; }
*26321 SUB B         ; Subtract the x-coordinate of the leftmost column of the
                     ; play area on screen to obtain the bullet's initial
                     ; screen x-coordinate
 26322 LD (HL),A     ; Store this in the second byte of the bullet buffer
*26323 EXX           ;
 26324 POP AF        ; Restore the sniper's animatory state to #REGa
 26325 JP 59861      ; Update the sniper's animatory state and location and
                     ; update the SRB

; Check whether Sam is within firing range of the sniper
;
; Used by the routine at #R25118. Returns with the zero flag set if the sniper
; (who is not visible at this point) has an x-coordinate that would place him
; on screen and at least 8 x-coordinates away from Sam.
;
; H #b227 (sniper)
@label=SAMINRANGE
c26328 LD L,1        ; Point #REGhl at byte #b1 of the sniper's buffer
; This entry point is used by the routine at #R25307 with #REGhl pointing at
; byte #b1 of the sniper's buffer.
@ssub=LD A,(58880+1)
*26330 LD A,(58881)  ; #REGa=Sam's x-coordinate
 26333 SUB (HL)      ; Subtract the sniper's x-coordinate
 26334 JR NC,26338   ; Jump if the result is non-negative
 26336 NEG           ; Negate the (negative) result
*26338 CP 8          ; Is Sam less than 8 x-coordinates away from the sniper?
 26340 RET C         ; Return with the zero flag reset if so
 26341 LD A,(32766)  ; #REGa=x-coordinate of the leftmost column of the play
                     ; area on screen
 26344 SUB 2         ; {Is the sniper off-screen to the left or right?
 26346 SUB (HL)      ;
 26347 ADD A,32      ; }
 26349 RET NC        ; Return with the zero flag reset if so
 26350 XOR A         ; Set the zero flag
 26351 RET           ;

; Make the sound effect of Sam being hit by a bullet
;
; Used by the routine at #R26002.
; .
; #AUDIO3(shot.wav)(#FOR(765,6,-3,1)(n,56+13*(n%256)))
@label=SHOTSOUND
@keep
c26352 LD DE,65021   ; {Prepare the sound effect parameters: #REGe=#b253
 26355 LD A,2        ; (initial pitch), #REGd=#b253 (pitch adjustment),
                     ; #REGa=#b2 (initial border colour)}
 26357 JP 25088      ; Make the sound effect

; Unused
u26360 DEFB 64,0,65,0,66,0,67,0

; Message #b3: 'PRESS'
;
; Used as a submessage of messages #R26880(#b32), #R27089(#b38) and
; #R24181(#b69).
@label=MSG003
t26368 DEFM "PRESS"
 26373 DEFB 0        ; End marker

; Message #b4: 'KEY'
;
; Used as a submessage of messages #R26880(#b32), #R27089(#b38), #R23296(#b55),
; #R23422(#b57), #R32155(#b61), #R32171(#b62), #R24019(#b66) and #R23954(#b76).
@label=MSG004
t26374 DEFM "KEY"
 26377 DEFB 0        ; End marker

; Message #b5: 'PLAY'
;
; Used as a submessage of messages #R26529(#b19), #R26564(#b23), #R26880(#b32),
; #R27089(#b38) and #R24069(#b67).
@label=MSG005
t26378 DEFM "PLAY"
 26382 DEFB 0        ; End marker

; Message #b6: ' RIGHT '
;
; Used as a submessage of messages #R26880(#b32), #R27193(#b45), #R27569(#b65)
; and #R24181(#b69).
@label=MSG006
t26383 DEFM " RIGHT "
 26390 DEFB 0         ; End marker

; Message #b7: ' WHEN'
;
; Used as a submessage of messages #R26576(#b24), #R32171(#b62), #R24069(#b67)
; and #R26836(#b120).
@label=MSG007
t26391 DEFM " WHEN"
 26396 DEFB 0        ; End marker

; Message #b8: 'RATCATCHER'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG008
t26397 DEFM "RATCATCHER"
 26407 DEFB 0            ; End marker

; Message #b9: 'POLICE CHIEF'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG009
t26408 DEFM "POLICE CHIEF"
 26420 DEFB 0              ; End marker

; Message #b10: 'CHICAGO BEARS'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG010
t26421 DEFM "CHICAGO BEARS"
 26434 DEFB 0               ; End marker

; Message #b11: 'REVENUE MAN'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG011
t26435 DEFM "REVENUE"
 26442 DEFB 115       ; #R26730(#b115): ' MAN'
 26443 DEFB 0         ; End marker

; Message #b12: 'VIOLIN CASE MAKER'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG012
t26444 DEFM "VIOLIN CASE MAKER"
 26461 DEFB 0                   ; End marker

; Message #b13: 'GARBAGE MAN'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG013
t26462 DEFM "GARBAGE"
 26469 DEFB 115       ; #R26730(#b115): ' MAN'
 26470 DEFB 0         ; End marker

; Message #b14: 'JAMES GANG'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG014
t26471 DEFM "JAMES GANG"
 26481 DEFB 0            ; End marker

; Message #b15: 'RENT COLLECTOR'
;
; This message replaces submessage #b97 (randomly chosen person or group of
; people) where it appears in message #R26751(#b119).
@label=MSG015
t26482 DEFM "RENT COLLECTOR"
 26496 DEFB 0                ; End marker

; Message #b16: 'MAKE COFFEE'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG016
t26497 DEFM "MAKE COFFEE"
 26508 DEFB 0             ; End marker

; Message #b17: 'TAPDANCE'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG017
t26509 DEFM "TAPDANCE"
 26517 DEFB 0          ; End marker

; Message #b18: 'SCUBA DIVE'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG018
t26518 DEFM "SCUBA DIVE"
 26528 DEFB 0            ; End marker

; Message #b19: 'PLAY POKER'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG019
t26529 DEFB 5        ; #R26378(#b5): 'PLAY'
 26530 DEFM " POKER"
 26536 DEFB 0        ; End marker

; Message #b20: 'TYPE'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG020
t26537 DEFM "TYPE"
 26541 DEFB 0        ; End marker

; Message #b21: 'ICE-SKATE'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG021
t26542 DEFM "ICE-SKATE"
 26551 DEFB 0           ; End marker

; Message #b22: 'WOLFWHISTLE'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG022
t26552 DEFM "WOLFWHISTLE"
 26563 DEFB 0             ; End marker

; Message #b23: 'PLAY THE HARMONICA'
;
; This message replaces submessage #b98 (randomly chosen verb) where it appears
; in message #R26576(#b24).
@label=MSG023
t26564 DEFB 5           ; #R26378(#b5): 'PLAY'
 26565 DEFB 100         ; #R26624(#b100): ' THE '
 26566 DEFM "HARMONICA"
 26575 DEFB 0           ; End marker

; Message #b24: 'JUST ANOTHER DAY AT THE SAM CRUISE DETECTIVE AGENCY/I WAS
; TEACHING THE ROACHES TO {verb} WHEN'
;
; Used as a submessage of message #R26925(#b33).
@label=MSG024
t26576 DEFB 112       ; #R26681(#b112): 'JUST ANOTHER DAY AT THE SAM CRUISE
                      ; DETECTIVE AGENCY'
 26577 DEFB 103       ; #R26642(#b103): 'I '
 26578 DEFB 117       ; #R26741(#b117): 'WAS '
 26579 DEFM "TEACH"
 26584 DEFB 127       ; #R26876(#b127): 'ING'
 26585 DEFB 100       ; #R26624(#b100): ' THE '
 26586 DEFM "ROACHES"
 26593 DEFB 118       ; #R26746(#b118): ' TO '
 26594 DEFB 98        ; #b98: randomly chosen verb (see #R28616)
 26595 DEFB 7         ; #R26391(#b7): ' WHEN'
 26596 DEFB 0         ; End marker

; Message #b25: ' BEGAN '
;
; Used as a submessage of messages #R26925(#b33) and #R27264(#b49).
@label=MSG025
t26597 DEFM " BEGAN "
 26604 DEFB 0         ; End marker

; Unused
s26605 DEFS 19

; Message #b100: ' THE '
;
; Used as a submessage of messages #R26564(#b23), #R26576(#b24), #R26925(#b33),
; #R27129(#b41), #R27214(#b47), #R27236(#b48), #R27304(#b52), #R27315(#b53),
; #R23296(#b55), #R23366(#b56), #R23422(#b57), #R23441(#b58), #R32089(#b59),
; #R32122(#b60), #R32171(#b62), #R23904(#b63), #R23984(#b64), #R27569(#b65),
; #R24019(#b66), #R24069(#b67), #R23483(#b70), #R24230(#b72), #R24263(#b73),
; #R24425(#b74), #R26681(#b112) and #R26751(#b119).
@label=MSG100
t26624 DEFM " THE "
 26629 DEFB 0        ; End marker

; Message #b101: 'CRUISE '
;
; Used as a submessage of messages #R27287(#b51), #R24069(#b67), #R23483(#b70)
; and #R26681(#b112).
@label=MSG101
t26630 DEFM "CRUISE "
 26637 DEFB 0         ; End marker

; Message #b102: 'NO '
;
; Used as a submessage of messages #R27204(#b46), #R27271(#b50), #R23296(#b55),
; #R23422(#b57), #R32122(#b60), #R32155(#b61) and #R23984(#b64).
@label=MSG102
t26638 DEFM "NO "
 26641 DEFB 0        ; End marker

; Message #b103: 'I '
;
; Used as a submessage of messages #R26576(#b24), #R27026(#b34), #R27113(#b39),
; #R27122(#b40), #R27129(#b41), #R27141(#b42), #R27204(#b46), #R23366(#b56),
; #R32171(#b62), #R24069(#b67), #R24263(#b73), #R27339(#b99) and
; #R26836(#b120).
@label=MSG103
t26642 DEFM "I "
 26644 DEFB 0        ; End marker

; Message #b104: 'AL '
;
; Used as a submessage of messages #R32720(#b1), #R24181(#b69) and
; #R27339(#b99).
@label=MSG104
t26645 DEFM "AL "
 26648 DEFB 0        ; End marker

; Message #b105: 'BUD '
;
; Used as a submessage of messages #R32720(#b1) and #R27569(#b65).
@label=MSG105
t26649 DEFM "BUD "
 26653 DEFB 0        ; End marker

; Message #b106: 'CHAD '
;
; Used as a submessage of message #R32720(#b1).
@label=MSG106
t26654 DEFM "CHAD "
 26659 DEFB 0        ; End marker

; Message #b107: 'DON '
;
; Used as a submessage of messages #R32720(#b1) and #R24069(#b67).
@label=MSG107
t26660 DEFM "DON "
 26664 DEFB 0        ; End marker

; Messages #b108 and #b109: 'ED ' and 'FRED '
;
; Message #b109 ('FRED ') is used as a submessage of message #R32720(#b1).
@label=MSG109
t26665 DEFM "FR"
; Message #b108 ('ED ') is used as a submessage of messages #R32720(#b1),
; #R26925(#b33), #R27141(#b42), #R23296(#b55), #R23422(#b57), #R32089(#b59),
; #R32122(#b60), #R32155(#b61), #R32171(#b62), #R27569(#b65), #R24069(#b67),
; #R23483(#b70) and #R24263(#b73).
@label=MSG108
 26667 DEFM "ED "
 26670 DEFB 0        ; End marker

; Message #b110: 'GUS '
;
; Used as a submessage of message #R32720(#b1).
@label=MSG110
t26671 DEFM "GUS "
 26675 DEFB 0        ; End marker

; Message #b111: 'SAM '
;
; Used as a submessage of messages #R32720(#b1), #R27271(#b50), #R23904(#b63),
; #R24263(#b73) and #R26681(#b112).
@label=MSG111
t26676 DEFM "SAM "
 26680 DEFB 0        ; End marker

; Message #b112: 'JUST ANOTHER DAY AT THE SAM CRUISE DETECTIVE AGENCY'
;
; Used as a submessage of messages #R26576(#b24) and #R26880(#b32).
@label=MSG112
t26681 DEFM "JUST ANO"
 26689 DEFB 122                ; #R26846(#b122): 'THE'
 26690 DEFM "R DAY AT"
 26698 DEFB 100                ; #R26624(#b100): ' THE '
 26699 DEFB 111                ; #R26676(#b111): 'SAM '
 26700 DEFB 101                ; #R26630(#b101): 'CRUISE '
 26701 DEFM "DETECTIVE AGENCY"
 26717 DEFB 96                 ; #b96: newline
 26718 DEFB 0                  ; End marker

; Message #b113: ' A '
;
; Used as a submessage of messages #R26880(#b32), #R26925(#b33), #R27089(#b38),
; #R27315(#b53), #R23366(#b56), #R23904(#b63), #R24019(#b66), #R24181(#b69),
; #R23528(#b71), #R26751(#b119) and #R26861(#b125).
@label=MSG113
t26719 DEFM " A "
 26722 DEFB 0        ; End marker

; Message #b114: 'DAISY '
;
; Used as a submessage of messages #R27356(#b26), #R27271(#b50) and
; #R26751(#b119).
@label=MSG114
t26723 DEFM "DAISY "
 26729 DEFB 0        ; End marker

; Message #b115: ' MAN'
;
; Used as a submessage of messages #R26435(#b11), #R26462(#b13), #R27315(#b53),
; #R23296(#b55), #R23422(#b57), #R32122(#b60), #R23483(#b70) and #R23954(#b76).
@label=MSG115
t26730 DEFM " MAN"
 26734 DEFB 0        ; End marker

; Message #b116: ' AND '
;
; Used as a submessage of messages #R23296(#b55), #R23366(#b56), #R32089(#b59),
; #R23984(#b64), #R24181(#b69), #R24263(#b73), #R24425(#b74) and
; #R26751(#b119).
@label=MSG116
t26735 DEFM " AND "
 26740 DEFB 0        ; End marker

; Message #b117: 'WAS '
;
; Used as a submessage of messages #R26576(#b24), #R26925(#b33), #R27026(#b34),
; #R27041(#b35), #R27214(#b47), #R27304(#b52), #R23483(#b70) and #R24263(#b73).
@label=MSG117
t26741 DEFM "WAS "
 26745 DEFB 0        ; End marker

; Message #b118: ' TO '
;
; Used as a submessage of messages #R26576(#b24), #R26880(#b32), #R26925(#b33),
; #R27089(#b38), #R27165(#b44), #R23296(#b55), #R23366(#b56), #R23422(#b57),
; #R24019(#b66), #R24069(#b67), #R24181(#b69), #R27339(#b99) and
; #R26836(#b120).
@label=MSG118
t26746 DEFM " TO "
 26750 DEFB 0        ; End marker

; Message #b119: ' AND DAISY RAN OFF WITH THE {person/people}/TAKE MY ADVICE
; KID/DONT BECOME A PRIVATE EYE/IT'LL ONLY BREAK YOUR HEART'
;
; Used as a submessage of messages #R27026(#b34), #R27041(#b35), #R27236(#b48)
; and #R27339(#b99).
@label=MSG119
t26751 DEFB 116                  ; #R26735(#b116): ' AND '
 26752 DEFB 114                  ; #R26723(#b114): 'DAISY '
 26753 DEFM "RAN OFF WITH"
 26765 DEFB 100                  ; #R26624(#b100): ' THE '
 26766 DEFB 97                   ; #b97: randomly chosen person or group of
                                 ; people (see #R28616)
 26767 DEFB 96                   ; #b96: newline
 26768 DEFM "TAKE MY ADVICE KID"
 26786 DEFB 96                   ; #b96: newline
 26787 DEFM "DONT BECOME"
 26798 DEFB 113                  ; #R26719(#b113): ' A '
 26799 DEFM "PRIVATE EYE"
 26810 DEFB 96                   ; #b96: newline
 26811 DEFM "IT'LL ONLY BREAK"
 26827 DEFB 126                  ; #R26871(#b126): ' YOU'
 26828 DEFM "R HEART"
 26835 DEFB 0                    ; End marker

; Message #b120: ' WHEN I CAME TO '
;
; Used as a submessage of messages #R27041(#b35) and #R27057(#b36).
@label=MSG120
t26836 DEFB 7        ; #R26391(#b7): ' WHEN'
 26837 DEFM " "
 26838 DEFB 103      ; #R26642(#b103): 'I '
 26839 DEFM "CAME"
 26843 DEFB 118      ; #R26746(#b118): ' TO '
 26844 DEFB 0        ; End marker

; Messages #b121 and #b122: ' THE' and 'THE'
;
; Message #b121 (' THE') is used as a submessage of messages #R26880(#b32),
; #R27077(#b37), #R27236(#b48) and #R24019(#b66).
@label=MSG121
t26845 DEFM " "
; Message #b122 ('THE') is used as a submessage of messages #R27150(#b43),
; #R27315(#b53), #R32089(#b59), #R23528(#b71), #R24425(#b74) and
; #R26681(#b112).
@label=MSG122
 26846 DEFM "THE"
 26849 DEFB 0        ; End marker

; Message #b123: 'ONE '
;
; Used as a submessage of messages #R26925(#b33), #R27041(#b35), #R27057(#b36),
; #R27129(#b41), #R27150(#b43), #R27569(#b65), #R24069(#b67), #R23483(#b70),
; #R23954(#b76) and #R27862(#b128).
@label=MSG123
t26850 DEFM "ONE "
 26854 DEFB 0        ; End marker

; Message #b124: 'SAID '
;
; Used as a submessage of messages #R27356(#b26), #R26925(#b33), #R27122(#b40),
; #R27271(#b50), #R27569(#b65), #R24069(#b67), #R23483(#b70), #R24263(#b73) and
; #R26861(#b125).
@label=MSG124
t26855 DEFM "SAID "
 26860 DEFB 0        ; End marker

; Message #b125: ' A VOICE SAID ''
;
; Used as a submessage of messages #R27077(#b37), #R27150(#b43), #R27165(#b44),
; #R27193(#b45), #R27287(#b51), #R23296(#b55), #R23984(#b64) and #R24019(#b66).
@label=MSG125
t26861 DEFB 113      ; #R26719(#b113): ' A '
 26862 DEFM "VOICE "
 26868 DEFB 124      ; #R26855(#b124): 'SAID '
 26869 DEFM "'"
 26870 DEFB 0        ; End marker

; Message #b126: ' YOU'
;
; Used as a submessage of messages #R26880(#b32), #R27193(#b45), #R23296(#b55),
; #R32171(#b62), #R23904(#b63), #R27569(#b65), #R24069(#b67), #R24230(#b72),
; #R24263(#b73) and #R26751(#b119).
@label=MSG126
t26871 DEFM " YOU"
 26875 DEFB 0        ; End marker

; Message #b127: 'ING'
;
; Used as a submessage of messages #R26576(#b24), #R27854(#b30), #R26880(#b32),
; #R27165(#b44), #R27264(#b49), #R27287(#b51), #R23366(#b56) and #R32171(#b62).
@label=MSG127
t26876 DEFM "ING"
 26879 DEFB 0        ; End marker

; Message #b32: 'JUST ANOTHER DAY AT THE SAM CRUISE DETECTIVE AGENCY/I'M
; WORKING ON A CASE RIGHT NOW BUT IF YOU WANT TO PLAY THEN PRESS A KEY.'
;
; Appears in Sam's initialisation parameters for demo mode at #R58912.
@label=MSG032
t26880 DEFB 112          ; #R26681(#b112): 'JUST ANOTHER DAY AT THE SAM CRUISE
                         ; DETECTIVE AGENCY'
 26881 DEFM "I'M WORK"
 26889 DEFB 127          ; #R26876(#b127): 'ING'
 26890 DEFM " ON"
 26893 DEFB 113          ; #R26719(#b113): ' A '
 26894 DEFM "CASE"
 26898 DEFB 6            ; #R26383(#b6): ' RIGHT '
 26899 DEFM "NOW BUT IF"
 26909 DEFB 126          ; #R26871(#b126): ' YOU'
 26910 DEFM " WANT"
 26915 DEFB 118          ; #R26746(#b118): ' TO '
 26916 DEFB 5            ; #R26378(#b5): 'PLAY'
 26917 DEFB 121          ; #R26845(#b121): ' THE'
 26918 DEFM "N "
 26920 DEFB 3            ; #R26368(#b3): 'PRESS'
 26921 DEFB 113          ; #R26719(#b113): ' A '
 26922 DEFB 4            ; #R26374(#b4): 'KEY'
 26923 DEFM "."
 26924 DEFB 0            ; End marker

; Message #b33: 'JUST ANOTHER DAY AT THE SAM CRUISE DETECTIVE AGENCY/I WAS
; TEACHING THE ROACHES TO {verb} WHEN THE PHONE RANG. IT WAS#SPACE(2)A DAME
; NAMED LANA. SHE SAID TO MEET HER ON THE TOP FLOOR OF THE HOTEL ROYALE. SO
; BEGAN / THE CASE OF THE BALI BUDGIE'
;
; Appears in Sam's initialisation parameters for game mode 1 at #R58918.
@label=MSG033
t26925 DEFB 24                 ; #R26576(#b24): 'JUST ANOTHER DAY AT THE SAM
                               ; CRUISE DETECTIVE AGENCY/I WAS TEACHING...'
 26926 DEFB 100                ; #R26624(#b100): ' THE '
 26927 DEFM "PH"
 26929 DEFB 123                ; #R26850(#b123): 'ONE '
 26930 DEFM "RANG. IT "
 26939 DEFB 117                ; #R26741(#b117): 'WAS '
 26940 DEFB 113                ; #R26719(#b113): ' A '
 26941 DEFM "DAME NAM"
 26949 DEFB 108                ; #R26667(#b108): 'ED '
 26950 DEFM "LANA. SHE "
 26960 DEFB 124                ; #R26855(#b124): 'SAID '
 26961 DEFB 118                ; #R26746(#b118): ' TO '
 26962 DEFM "MEET HER ON"
 26973 DEFB 100                ; #R26624(#b100): ' THE '
 26974 DEFM "TOP FLOOR OF"
 26986 DEFB 100                ; #R26624(#b100): ' THE '
 26987 DEFM "HOTEL ROYALE. SO"
 27003 DEFB 25                 ; #R26597(#b25): ' BEGAN '
 27004 DEFB 96                 ; #b96: newline
 27005 DEFB 100                ; #R26624(#b100): ' THE '
 27006 DEFM "CASE OF"
 27013 DEFB 100                ; #R26624(#b100): ' THE '
 27014 DEFM "BALI BUDGIE"
 27025 DEFB 0                  ; End marker

; Message #b34: 'I WAS BROKE AGAIN AND DAISY RAN OFF WITH THE
; {person/people}/TAKE MY ADVICE KID/DONT BECOME A PRIVATE EYE/IT'LL ONLY BREAK
; YOUR HEART'
;
; Used by the routine at #R31414.
@label=MSG034
t27026 DEFB 103           ; #R26642(#b103): 'I '
 27027 DEFB 117           ; #R26741(#b117): 'WAS '
 27028 DEFM "BROKE AGAIN"
 27039 DEFB 119           ; #R26751(#b119): ' AND DAISY RAN OFF WITH THE...'
 27040 DEFB 0             ; End marker

; Message #b35: ' WHEN I CAME TO MY WALLET WAS GONE#SPACE(2)AND DAISY RAN OFF
; WITH THE {person/people}/TAKE MY ADVICE KID/DONT BECOME A PRIVATE EYE/IT'LL
; ONLY BREAK YOUR HEART'
;
; Used by the routine at #R64338.
@label=MSG035
t27041 DEFB 120          ; #R26836(#b120): ' WHEN I CAME TO '
 27042 DEFM "MY WALLET "
 27052 DEFB 117          ; #R26741(#b117): 'WAS '
 27053 DEFM "G"
 27054 DEFB 123          ; #R26850(#b123): 'ONE '
 27055 DEFB 119          ; #R26751(#b119): ' AND DAISY RAN OFF WITH THE...'
 27056 DEFB 0            ; End marker

; Message #b36: ' WHEN I CAME TO SOMEONE HAD TAKEN ${tens digit}0'
;
; Used by the routine at #R64338.
@label=MSG036
t27057 DEFB 120           ; #R26836(#b120): ' WHEN I CAME TO '
 27058 DEFM "SOME"
 27062 DEFB 123           ; #R26850(#b123): 'ONE '
 27063 DEFM "HAD TAKEN $"
 27074 DEFB 1             ; #R32720(#b1): '{tens digit}'
 27075 DEFM "0"
 27076 DEFB 0             ; End marker

; Message #b37: 'A VOICE SAID 'WHO'S THERE?''
;
; Used by the routine at #R30198.
@label=MSG037
t27077 DEFB 125      ; #R26861(#b125): 'A VOICE SAID ''
 27078 DEFM "WHO'S"
 27083 DEFB 121      ; #R26845(#b121): ' THE'
 27084 DEFM "RE?'"
 27088 DEFB 0        ; End marker

; Message #b38: 'PRESS A KEY TO PLAY'
;
; Used by the routine at #R31126.
@label=MSG038
t27089 DEFB 3        ; #R26368(#b3): 'PRESS'
 27090 DEFB 96       ; #b96: newline
 27091 DEFB 3        ; #R26368(#b3): 'PRESS'
 27092 DEFB 113      ; #R26719(#b113): ' A '
 27093 DEFB 96       ; #b96: newline
 27094 DEFB 3        ; #R26368(#b3): 'PRESS'
 27095 DEFB 113      ; #R26719(#b113): ' A '
 27096 DEFB 4        ; #R26374(#b4): 'KEY'
 27097 DEFB 96       ; #b96: newline
 27098 DEFB 3        ; #R26368(#b3): 'PRESS'
 27099 DEFB 113      ; #R26719(#b113): ' A '
 27100 DEFB 4        ; #R26374(#b4): 'KEY'
 27101 DEFB 118      ; #R26746(#b118): ' TO '
 27102 DEFB 96       ; #b96: newline
 27103 DEFB 3        ; #R26368(#b3): 'PRESS'
 27104 DEFB 113      ; #R26719(#b113): ' A '
 27105 DEFB 4        ; #R26374(#b4): 'KEY'
 27106 DEFB 118      ; #R26746(#b118): ' TO '
 27107 DEFB 5        ; #R26378(#b5): 'PLAY'
 27108 DEFB 96       ; #b96: newline
 27109 DEFM " "
 27110 DEFB 96       ; #b96: newline
 27111 DEFM " "
 27112 DEFB 0        ; End marker

; Message #b39: 'I HUNG UP'
;
; Used by the unused routine at #R31284.
@label=MSG039
t27113 DEFB 103       ; #R26642(#b103): 'I '
 27114 DEFM "HUNG UP"
 27121 DEFB 0         ; End marker

; Message #b40: ''{name}' I SAID '
;
; Used by the routine at #R30575.
@label=MSG040
t27122 DEFM "'"
 27123 DEFB 1        ; #R32720(#b1): '{name}'
 27124 DEFM "' "
 27126 DEFB 103      ; #R26642(#b103): 'I '
 27127 DEFB 124      ; #R26855(#b124): 'SAID '
 27128 DEFB 0        ; End marker

; Message #b41: 'I LIFTED THE PHONE '
;
; Used by the routine at #R30458.
@label=MSG041
t27129 DEFB 103      ; #R26642(#b103): 'I '
 27130 DEFM "LIFTED"
 27136 DEFB 100      ; #R26624(#b100): ' THE '
 27137 DEFM "PH"
 27139 DEFB 123      ; #R26850(#b123): 'ONE '
 27140 DEFB 0        ; End marker

; Message #b42: 'I DIALLED {number}'
;
; Used by the routine at #R30675.
@label=MSG042
t27141 DEFB 103      ; #R26642(#b103): 'I '
 27142 DEFM "DIALL"
 27147 DEFB 108      ; #R26667(#b108): 'ED '
 27148 DEFB 2        ; #R32658(#b2): '{number}'
 27149 DEFB 0        ; End marker

; Message #b43: 'A VOICE SAID 'THERES NOONE HERE''
;
; Used by the routine at #R30627.
@label=MSG043
t27150 DEFB 125      ; #R26861(#b125): 'A VOICE SAID ''
 27151 DEFB 122      ; #R26846(#b122): 'THE'
 27152 DEFM "RES NO"
 27158 DEFB 123      ; #R26850(#b123): 'ONE '
 27159 DEFM "HERE'"
 27164 DEFB 0        ; End marker

; Message #b44: 'A VOICE SAID 'GET LOST - I'M TRYING TO SLEEP''
;
; Used by the routine at #R30627.
@label=MSG044
t27165 DEFB 125                  ; #R26861(#b125): 'A VOICE SAID ''
 27166 DEFM "GET LOST - I'M TRY"
 27184 DEFB 127                  ; #R26876(#b127): 'ING'
 27185 DEFB 118                  ; #R26746(#b118): ' TO '
 27186 DEFM "SLEEP'"
 27192 DEFB 0                    ; End marker

; Message #b45: 'A VOICE SAID 'BE RIGHT WITH YOU''
;
; Used by the routine at #R30627.
@label=MSG045
t27193 DEFB 125      ; #R26861(#b125): 'A VOICE SAID''
 27194 DEFM "BE"
 27196 DEFB 6        ; #R26383(#b6): ' RIGHT '
 27197 DEFM "WITH"
 27201 DEFB 126      ; #R26871(#b126): ' YOU'
 27202 DEFM "'"
 27203 DEFB 0        ; End marker

; Message #b46: 'I DUNNO NO {name}'
;
; Used by the routine at #R30575.
@label=MSG046
t27204 DEFM "'"
 27205 DEFB 103      ; #R26642(#b103): 'I '
 27206 DEFM "DUN"
 27209 DEFB 102      ; #R26638(#b102): 'NO '
 27210 DEFB 102      ; #R26638(#b102): 'NO '
 27211 DEFB 1        ; #R32720(#b1): '{name}'
 27212 DEFM "'"
 27213 DEFB 0        ; End marker

; Message #b47: ' THE NUMBER WAS UNOBTAINABLE'
;
; Used by the routine at #R30675.
@label=MSG047
t27214 DEFB 100            ; #R26624(#b100): ' THE '
 27215 DEFM "NUMBER "
 27222 DEFB 117            ; #R26741(#b117): 'WAS '
 27223 DEFM "UNOBTAINABLE"
 27235 DEFB 0              ; End marker

; Message #b48: 'AT THE JAIL THEY THREW THE BOOK AT ME AND DAISY RAN OFF WITH
; THE {person/people}/TAKE MY ADVICE KID/DONT BECOME A PRIVATE EYE/IT'LL ONLY
; BREAK YOUR HEART'
;
; Used by the routine at #R31642.
@label=MSG048
t27236 DEFM "AT"
 27238 DEFB 100          ; #R26624(#b100): ' THE '
 27239 DEFM "JAIL"
 27243 DEFB 121          ; #R26845(#b121): ' THE'
 27244 DEFM "Y THREW"
 27251 DEFB 100          ; #R26624(#b100): ' THE '
 27252 DEFM "BOOK AT ME"
 27262 DEFB 119          ; #R26751(#b119): ' AND DAISY RAN OFF WITH THE...'
 27263 DEFB 0            ; End marker

; Message #b49: 'IT BEGAN RINGING'
;
; Used by the routine at #R31244.
@label=MSG049
t27264 DEFM "IT"
 27266 DEFB 25       ; #R26597(#b25): ' BEGAN '
 27267 DEFM "R"
 27268 DEFB 127      ; #R26876(#b127): 'ING'
 27269 DEFB 127      ; #R26876(#b127): 'ING'
 27270 DEFB 0        ; End marker

; Message #b50: 'DAISY SAID 'NO MESSAGES SAM ''
;
; Used by the routine at #R30627.
@label=MSG050
t27271 DEFB 114         ; #R26723(#b114): 'DAISY '
 27272 DEFB 124         ; #R26855(#b124): 'SAID '
 27273 DEFM "'"
 27274 DEFB 102         ; #R26638(#b102): 'NO '
 27275 DEFM "MESSAGES "
 27284 DEFB 111         ; #R26676(#b111): 'SAM '
 27285 DEFM "'"
 27286 DEFB 0           ; End marker

; Message #b51: 'A VOICE SAID 'OK CRUISE WE'RE COMING''
;
; Used by the routine at #R30627.
@label=MSG051
t27287 DEFB 125         ; #R26861(#b125): 'A VOICE SAID''
 27288 DEFM "OK "
 27291 DEFB 101         ; #R26630(#b101): 'CRUISE '
 27292 DEFM "WE'RE COM"
 27301 DEFB 127         ; #R26876(#b127): 'ING'
 27302 DEFM "'"
 27303 DEFB 0           ; End marker

; Message #b52: ' THE BAIL WAS ${tens digit}0'
;
; Used by the routine at #R31594.
@label=MSG052
t27304 DEFB 100      ; #R26624(#b100): ' THE '
 27305 DEFM "BAIL "
 27310 DEFB 117      ; #R26741(#b117): 'WAS '
 27311 DEFM "$"
 27312 DEFB 1        ; #R32720(#b1): '{tens digit}'
 27313 DEFM "0"
 27314 DEFB 0        ; End marker

; Message #b53: 'THERE'S A MAN'S BODY ON THE FLOOR'
;
; Appears in the message location table entry at #R32052.
@label=MSG053
t27315 DEFB 122          ; #R26846(#b122): 'THE'
 27316 DEFM "RE'S"
 27320 DEFB 113          ; #R26719(#b113): ' A '
 27321 DEFB 115          ; #R26730(#b115): ' MAN'
 27322 DEFM "'S BODY ON"
 27332 DEFB 100          ; #R26624(#b100): ' THE '
 27333 DEFM "FLOOR"
 27338 DEFB 0            ; End marker

; Message #b99: 'I HAD TO GO TO HOSPITAL#SPACE(2)AND DAISY RAN OFF WITH THE
; {person/people}/TAKE MY ADVICE KID/DONT BECOME A PRIVATE EYE/IT'LL ONLY BREAK
; YOUR HEART'
;
; Used by the routine at #R26002.
@label=MSG099
t27339 DEFB 103      ; #R26642(#b103): 'I '
 27340 DEFM "HAD"
 27343 DEFB 118      ; #R26746(#b118): ' TO '
 27344 DEFM "GO"
 27346 DEFB 118      ; #R26746(#b118): ' TO '
 27347 DEFM "HOSPIT"
 27353 DEFB 104      ; #R26645(#b104): 'AL '
 27354 DEFB 119      ; #R26751(#b119): ' AND DAISY RAN OFF WITH THE...'
 27355 DEFB 0        ; End marker

; Message #b26: 'DAISY SAID ''
;
; Used as a submessage of messages #R23366(#b56), #R23441(#b58), #R23904(#b63),
; #R24161(#b68) and #R23954(#b76).
@label=MSG026
t27356 DEFB 114      ; #R26723(#b114): 'DAISY '
 27357 DEFB 124      ; #R26855(#b124): 'SAID '
 27358 DEFM "'"
 27359 DEFB 0        ; End marker

; Message #b27: 'LANA ANSWERED 'OOH SAM! '
;
; Used as a submessage of messages #R32089(#b59), #R32122(#b60), #R27569(#b65)
; and #R24230(#b72).
@label=MSG027
t27360 DEFB 29                    ; #R27848(#b29): 'LANA '
 27361 DEFM "ANSWERED 'OOH SAM! "
 27380 DEFB 0                     ; End marker

; Message #b28: 'LANA RANG - '
;
; Used as a submessage of messages #R23366(#b56), #R23441(#b58) and
; #R23954(#b76).
@label=MSG028
t27381 DEFB 29        ; #R27848(#b29): 'LANA '
 27382 DEFM "RANG - "
 27389 DEFB 0         ; End marker

; Unused
s27390 DEFS 2

; Phone numbers
;
; Used by the routine at #R31255. Each entry here consists of five bytes. The
; first byte is the telephone identifier: bits 5-7 indicate the floor (000=5th,
; 001=4th, 010=3rd, 011=2nd, 100=1st), and bits 0-4 indicate the 8-tile wide
; column of the play area that contains the phone. The last four bytes of each
; entry contain the phone number.
@label=PHONES
b27392 DEFB 7        ; {Hotel Royale (top floor, left-hand room)
 27393 DEFM "8864"   ; }
 27397 DEFB 36       ; {Room to the right of the catwalk
 27398 DEFM "7162"   ; }
 27402 DEFB 44       ; {Hotel Royale (right-hand green room)
 27403 DEFM "9408"   ; }
 27407 DEFB 54       ; {Apartments next to no. 19 (top floor, cyan room)
 27408 DEFM "3183"   ; }
 27412 DEFB 66       ; {Apartments next to no. 74 (third floor, magenta room)
 27413 DEFM "4090"   ; }
 27417 DEFB 68       ; {No. 74 (third floor, left)
 27418 DEFM "1776"   ; }
 27422 DEFB 71       ; {Hotel Royale (left-hand magenta room)
 27423 DEFM "5278"   ; }
 27427 DEFB 91       ; {No. 19 (top floor, right)
 27428 DEFM "6839"   ; }
 27432 DEFB 92       ; {No. 17 (Sam's office)
 27433 DEFM "7337"   ; }
 27437 DEFB 94       ; {No. 15 (third floor, left)
 27438 DEFM "2522"   ; }
 27442 DEFB 102      ; {No. 74 (second floor, right)
 27443 DEFM "6124"   ; }
 27447 DEFB 109      ; {No. 31 (second floor, cyan room)
 27448 DEFM "3979"   ; }
 27452 DEFB 121      ; {Apartments next to no. 19 (second floor, magenta room)
 27453 DEFM "4715"   ; }
 27457 DEFB 132      ; {No. 74 (first floor, left)
 27458 DEFM "7832"   ; }
 27462 DEFB 151      ; {Apartments next to no. 19 (first floor, green room)
 27463 DEFM "1369"   ; }

; Ringing phone messages
;
; Used by the routines at #R30429, #R30675 and #R31458. Each entry here
; consists of three bytes. The first byte is the #R27392(telephone identifier).
; The second byte, if non-zero, is the message number of the name that must be
; given when asked 'WHO'S THERE?'. The third byte is the phone message number.
; .
; The first entry is for the phone on the top floor of the hotel. It is
; activated before a new game starts by the routine at #R31458.
@label=RINGPHONE1
b27467 DEFB 7        ; Hotel Royale (top floor, left-hand room)
 27468 DEFB 0
 27469 DEFB 55       ; Message #R23296(#b55): 'A VOICE SAID 'ED - TELL THE OIL
                     ; MAN THAT THE KEY TO#SPACE2THE FAT MANS HOUSE...''
; The next entry is for the phone on the top floor of no. 19. It is activated
; before a new game starts by the routine at #R31458.
@label=RINGPHONE2
 27470 DEFB 91       ; No. 19 (top floor, right)
 27471 DEFB 108      ; Message #R26667(#b108): 'ED'
 27472 DEFB 57       ; Message #R23422(#b57): 'OK ED - THE FAT MAN HAS THE KEY
                     ; TO NO 27'
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24586).
@label=RINGPHONE3
@defb=0 ; Deactivate phone message
 27473 DEFB 0        ; This becomes 94 (third floor, no. 15) when activated
 27474 DEFB 0
 27475 DEFB 63       ; Message #R23904(#b63): 'DAISY SAID 'SAM - A GANGSTER'S
                     ; WATCHING FOR YOU OUTSIDE THE POLICE STATION''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24586).
@label=RINGPHONE4
@defb=0 ; Deactivate phone message
 27476 DEFB 0        ; This becomes 94 (third floor, no. 15) when activated
 27477 DEFB 0
 27478 DEFB 64       ; Message #R23984(#b64): 'A VOICE SAID 'OK FATS THE HOOK'S
                     ; AT NO 74 AND ALS GUARDING IT''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24666).
@label=RINGPHONE5
@defb=0 ; Deactivate phone message
 27479 DEFB 0        ; This becomes #b44 (hotel's right-hand green room) when
                     ; activated
 27480 DEFB 0
 27481 DEFB 66       ; Message #R24019(#b66): 'A VOICE SAID 'OK LANA THE KEY TO
                     ; 74'S IN THE ROOM PAST THE CATWALK...''
; The next entry is for the phone on the third floor of no. 74. It is activated
; before a new game starts by the routine at #R31458.
@label=RINGPHONE6
 27482 DEFB 68       ; No. 74 (third floor, left)
 27483 DEFB 107      ; Message #R26660(#b107): 'DON'
 27484 DEFB 69       ; Message #R24181(#b69): 'TECHNICAL SERVICES HERE. TO USE
                     ; A HOOK GET TO RIGHT PLACE AND PRESS C'
; The next seven entries are unused. However, the first byte of each is
; initialised to #b255 by the routine at #R31458 before a new game starts.
 27485 DEFB 255,0,0
 27488 DEFB 255,0,0
 27491 DEFB 255,0,0
 27494 DEFB 255,0,0
 27497 DEFB 255,0,0
 27500 DEFB 255,0,0
 27503 DEFB 255,0,0

; Phone messages for Sam
;
; Used by the routines at #R30429 and #R30675. Each entry here consists of
; three bytes. The first byte is the #R27392(telephone identifier). The second
; byte, if non-zero, is the message number of the name that must be given when
; asked 'WHO'S THERE?'. The third byte is the phone message number.
; .
; The first entry is for the first message Daisy has for Sam. It is activated
; before a new game starts by the routine at #R31458.
@label=PHONEMSG1
b27506 DEFB 92       ; Location: Sam's office (7337)
 27507 DEFB 0
 27508 DEFB 56       ; Message #R23366(#b56): 'DAISY SAID 'LANA RANG - SHE HAD
                     ; TO GET OUT IN A HURRY...''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24569).
@label=PHONEMSG2
@defb=0 ; Deactivate phone message
 27509 DEFB 0        ; This becomes #b92 (Sam's office: 7337) when activated
 27510 DEFB 0
 27511 DEFB 58       ; Message #R23441(#b58): 'DAISY SAID 'LANA RANG - HER NEW
                     ; NUMBERS 7162. THE POLICE WERE HERE''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24569).
@label=PHONEMSG3
@defb=0 ; Deactivate phone message
 27512 DEFB 0        ; This becomes #b36 (Lana: 7162) when activated
 27513 DEFB 111      ; Message #R26676(#b111): 'SAM'
 27514 DEFB 59       ; Message #R32089(#b59): 'LANA ANSWERED 'OOH SAM! THEY
                     ; KILLED MY FIANCE AND STOLE THE BUDGIE''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24569).
@label=PHONEMSG4
@defb=0 ; Deactivate phone message
 27515 DEFB 0        ; This becomes #b36 (Lana: 7162) when activated
 27516 DEFB 0
 27517 DEFB 60       ; Message #R32122(#b60): 'LANA ANSWERED 'OOH SAM! THAT
                     ; CROOK THE FAT MAN'S JUST MOVED INTO NO 15''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24586).
@label=PHONEMSG5
@defb=0 ; Deactivate phone message
 27518 DEFB 0        ; This becomes #b92 (Sam's office: 7337) when activated
 27519 DEFB 0
 27520 DEFB 76       ; Message #R23954(#b76): 'DAISY SAID 'LANA RANG - THAT FAT
                     ; MAN HAS TWO KEYS NOT JUST ONE ''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24586).
@label=PHONEMSG6
@defb=0 ; Deactivate phone message
 27521 DEFB 0        ; This becomes #b36 (Lana: 7162) when activated
 27522 DEFB 0
 27523 DEFB 65       ; Message #R27569(#b65): 'LANA ANSWERED 'OOH SAM! BUD SAID
                     ; HE'D MEET ME ALONE...''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24695).
@label=PHONEMSG7
@defb=0 ; Deactivate phone message
 27524 DEFB 0        ; This becomes #b92 (Sam's office: 7337) when activated
 27525 DEFB 0
 27526 DEFB 68       ; Message #R24161(#b68): 'DAISY SAID 'ALS NUMBER'S 6124''
; The next entry is activated by the routine at #R29952 (using the event entry
; at #R24752) when Sam gets the budgie, and deactivated by the routine at
; #R29952 (using the event entry at #R24763) if Sam loses the budgie.
@label=PHONEMSG8
@defb=0 ; Deactivate phone message
 27527 DEFB 0        ; This becomes #b36 (Lana: 7162) when activated
 27528 DEFB 0
 27529 DEFB 72       ; Message #R24230(#b72): 'LANA ANSWERED 'OOH SAM! YOUVE
                     ; GOT THE BIRD. SEE YOU IN YOUR OFFICE''
; The next four entries are unused. However, the first byte of each is
; initialised to #b255 by the routine at #R31458 before a new game starts.
 27530 DEFB 255,0,0
 27533 DEFB 255,0,0
 27536 DEFB 255,0,0
 27539 DEFB 255,0,0

; Unused
;
; These bytes are probably remnants of the phone message table at #R27506.
u27542 DEFB 255,0

; Initial ringing phone locations
;
; The values below are copied into the first bytes of the entries at #R27467 by
; the routine at #R31458.
@label=PHONEINIT1
b27544 DEFB 7,91,0,0,0,68
 27550 DEFB 255,255,255,255,255,255,255

; Initial locations of phones with messages for Sam
;
; The values below are copied into the first bytes of the entries at #R27506 by
; the routine at #R31458.
@label=PHONEINIT2
b27557 DEFB 92,0,0,0,0,0,0,0
 27565 DEFB 255,255,255,255

; Message #b65: 'LANA ANSWERED 'OOH SAM! BUD SAID HE'D MEET ME ALONE IN THE
; HOTELS RIGHT HAND GREEN ROOM. I'M SCARED - WILL YOU GO INSTEAD?''
;
; Appears in the phone message table entry at #R27521.
@label=MSG065
t27569 DEFB 27                          ; #R27360(#b27): 'LANA ANSWERED 'OOH
                                        ; SAM! '
 27570 DEFB 105                         ; #R26649(#b105): 'BUD '
 27571 DEFB 124                         ; #R26855(#b124): 'SAID '
 27572 DEFM "HE'D MEET ME AL"
 27587 DEFB 123                         ; #R26850(#b123): 'ONE '
 27588 DEFM "IN"
 27590 DEFB 100                         ; #R26624(#b100): ' THE '
 27591 DEFM "HOTELS"
 27597 DEFB 6                           ; #R26383(#b6): ' RIGHT '
 27598 DEFM "HAND GREEN ROOM. I'M SCAR"
 27623 DEFB 108                         ; #R26667(#b108): 'ED '
 27624 DEFM "- WILL"
 27630 DEFB 126                         ; #R26871(#b126): ' YOU'
 27631 DEFM " GO INSTEAD?'"
 27644 DEFB 0                           ; End marker

; Unused
u27645 DEFB 0,0,0
; If message #b0 existed, the following byte would be the LSB of its address.
; The corresponding unused MSB can be found at #R27904.
@label=XMSGLSBS1
 27648 DEFB 209

; LSBs of addresses of messages #b1-#b76
;
; The MSBs of the addresses of messages #b1-#b76 can be found at #R27905. The
; LSBs of the addresses of messages #b97-#b129 can be found at #R27745.
@label=MSGLSBS1
@ssub=DEFB 32720%256
b27649 DEFB 208      ; Message #R32720(#b1): '{tens digit}/{name}'
@ssub=DEFB 32658%256
 27650 DEFB 146      ; Message #R32658(#b2): '{number}'
@ssub=DEFB 26368%256
 27651 DEFB 0        ; Message #R26368(#b3): 'PRESS'
@ssub=DEFB 26374%256
 27652 DEFB 6        ; Message #R26374(#b4): 'KEY'
@ssub=DEFB 26378%256
 27653 DEFB 10       ; Message #R26378(#b5): 'PLAY'
@ssub=DEFB 26383%256
 27654 DEFB 15       ; Message #R26383(#b6): ' RIGHT '
@ssub=DEFB 26391%256
 27655 DEFB 23       ; Message #R26391(#b7): ' WHEN'
@ssub=DEFB 26397%256
 27656 DEFB 29       ; Message #R26397(#b8): 'RATCATCHER'
@ssub=DEFB 26408%256
 27657 DEFB 40       ; Message #R26408(#b9): 'POLICE CHIEF'
@ssub=DEFB 26421%256
 27658 DEFB 53       ; Message #R26421(#b10): 'CHICAGO BEARS'
@ssub=DEFB 26435%256
 27659 DEFB 67       ; Message #R26435(#b11): 'REVENUE MAN'
@ssub=DEFB 26444%256
 27660 DEFB 76       ; Message #R26444(#b12): 'VIOLIN CASE MAKER'
@ssub=DEFB 26462%256
 27661 DEFB 94       ; Message #R26462(#b13): 'GARBAGE MAN'
@ssub=DEFB 26471%256
 27662 DEFB 103      ; Message #R26471(#b14): 'JAMES GANG'
@ssub=DEFB 26482%256
 27663 DEFB 114      ; Message #R26482(#b15): 'RENT COLLECTOR'
@ssub=DEFB 26497%256
 27664 DEFB 129      ; Message #R26497(#b16): 'MAKE COFFEE'
@ssub=DEFB 26509%256
 27665 DEFB 141      ; Message #R26509(#b17): 'TAPDANCE'
@ssub=DEFB 26518%256
 27666 DEFB 150      ; Message #R26518(#b18): 'SCUBA DIVE'
@ssub=DEFB 26529%256
 27667 DEFB 161      ; Message #R26529(#b19): 'PLAY POKER'
@ssub=DEFB 26537%256
 27668 DEFB 169      ; Message #R26537(#b20): 'TYPE'
@ssub=DEFB 26542%256
 27669 DEFB 174      ; Message #R26542(#b21): 'ICE-SKATE'
@ssub=DEFB 26552%256
 27670 DEFB 184      ; Message #R26552(#b22): 'WOLFWHISTLE'
@ssub=DEFB 26564%256
 27671 DEFB 196      ; Message #R26564(#b23): 'PLAY THE HARMONICA'
@ssub=DEFB 26576%256
 27672 DEFB 208      ; Message #R26576(#b24): 'JUST ANOTHER DAY AT THE SAM
                     ; CRUISE DETECTIVE AGENCY/I WAS TEACHING...'
@ssub=DEFB 26597%256
 27673 DEFB 229      ; Message #R26597(#b25): ' BEGAN '
@ssub=DEFB 27356%256
 27674 DEFB 220      ; Message #R27356(#b26): 'DAISY SAID ''
@ssub=DEFB 27360%256
 27675 DEFB 224      ; Message #R27360(#b27): 'LANA ANSWERED 'OOH SAM! '
@ssub=DEFB 27381%256
 27676 DEFB 245      ; Message #R27381(#b28): 'LANA RANG - '
@ssub=DEFB 27848%256
 27677 DEFB 200      ; Message #R27848(#b29): 'LANA '
@ssub=DEFB 27854%256
 27678 DEFB 206      ; Message #R27854(#b30): 'ING '
@ssub=DEFB 27857%256
 27679 DEFB 209      ; Message #R27857(#b31): 'THAT'
@ssub=DEFB 26880%256
 27680 DEFB 0        ; Message #R26880(#b32): 'JUST ANOTHER DAY AT THE SAM
                     ; CRUISE DETECTIVE AGENCY/I'M WORKING ON A CASE...'
@ssub=DEFB 26925%256
 27681 DEFB 45       ; Message #R26925(#b33): '...SO BEGAN THE CASE OF THE BALI
                     ; BUDGIE'
@ssub=DEFB 27026%256
 27682 DEFB 146      ; Message #R27026(#b34): 'I WAS BROKE AGAIN...'
@ssub=DEFB 27041%256
 27683 DEFB 161      ; Message #R27041(#b35): ' WHEN I CAME TO MY WALLET WAS
                     ; GONE...'
@ssub=DEFB 27057%256
 27684 DEFB 177      ; Message #R27057(#b36): ' WHEN I CAME TO SOMEONE HAD
                     ; TAKEN ${tens digit}0'
@ssub=DEFB 27077%256
 27685 DEFB 197      ; Message #R27077(#b37): 'A VOICE SAID 'WHO'S THERE?''
@ssub=DEFB 27089%256
 27686 DEFB 209      ; Message #R27089(#b38): 'PRESS A KEY TO PLAY'
@ssub=DEFB 27113%256
 27687 DEFB 233      ; Message #R27113(#b39): 'I HUNG UP'
@ssub=DEFB 27122%256
 27688 DEFB 242      ; Message #R27122(#b40): ''{name}' I SAID '
@ssub=DEFB 27129%256
 27689 DEFB 249      ; Message #R27129(#b41): 'I LIFTED THE PHONE '
@ssub=DEFB 27141%256
 27690 DEFB 5        ; Message #R27141(#b42): 'I DIALLED {number}'
@ssub=DEFB 27150%256
 27691 DEFB 14       ; Message #R27150(#b43): 'A VOICE SAID 'THERES NOONE
                     ; HERE''
@ssub=DEFB 27165%256
 27692 DEFB 29       ; Message #R27165(#b44): 'A VOICE SAID 'GET LOST - I'M
                     ; TRYING TO SLEEP''
@ssub=DEFB 27193%256
 27693 DEFB 57       ; Message #R27193(#b45): 'A VOICE SAID 'BE RIGHT WITH
                     ; YOU''
@ssub=DEFB 27204%256
 27694 DEFB 68       ; Message #R27204(#b46): 'I DUNNO NO {name}'
@ssub=DEFB 27214%256
 27695 DEFB 78       ; Message #R27214(#b47): ' THE NUMBER WAS UNOBTAINABLE'
@ssub=DEFB 27236%256
 27696 DEFB 100      ; Message #R27236(#b48): 'AT THE JAIL THEY THREW THE BOOK
                     ; AT ME...'
@ssub=DEFB 27264%256
 27697 DEFB 128      ; Message #R27264(#b49): 'IT BEGAN RINGING'
@ssub=DEFB 27271%256
 27698 DEFB 135      ; Message #R27271(#b50): 'DAISY SAID 'NO MESSAGES SAM ''
@ssub=DEFB 27287%256
 27699 DEFB 151      ; Message #R27287(#b51): 'A VOICE SAID 'OK CRUISE WE'RE
                     ; COMING''
@ssub=DEFB 27304%256
 27700 DEFB 168      ; Message #R27304(#b52): ' THE BAIL WAS ${tens digit}0'
@ssub=DEFB 27315%256
 27701 DEFB 179      ; Message #R27315(#b53): 'THERE'S A MAN'S BODY ON THE
                     ; FLOOR'
@ssub=DEFB 27339%256
 27702 DEFB 203      ; Message #R27339(#b54): 'I HAD TO GO TO HOSPITAL...'
@ssub=DEFB 23296%256
 27703 DEFB 0        ; Message #R23296(#b55): 'A VOICE SAID 'ED - TELL THE OIL
                     ; MAN THAT THE KEY TO THE FAT MAN'S HOUSE...''
@ssub=DEFB 23366%256
 27704 DEFB 70       ; Message #R23366(#b56): 'DAISY SAID 'LANA RANG - SHE HAD
                     ; TO GET OUT IN A HURRY...''
@ssub=DEFB 23422%256
 27705 DEFB 126      ; Message #R23422(#b57): 'OK ED - THE FAT MAN HAS THE KEY
                     ; TO NO 27'
@ssub=DEFB 23441%256
 27706 DEFB 145      ; Message #R23441(#b58): 'DAISY SAID 'LANA RANG - HER NEW
                     ; NUMBERS 7162. THE POLICE WERE HERE''
@ssub=DEFB 32089%256
 27707 DEFB 89       ; Message #R32089(#b59): 'LANA ANSWERED 'OOH SAM! THEY
                     ; KILLED MY FIANCE AND STOLE THE BUDGIE''
@ssub=DEFB 32122%256
 27708 DEFB 122      ; Message #R32122(#b60): 'LANA ANSWERED 'OOH SAM! THAT
                     ; CROOK THE FAT MAN'S JUST MOVED INTO NO 15''
@ssub=DEFB 32155%256
 27709 DEFB 155      ; Message #R32155(#b61): 'SOMEONE GROWLED 'NO KEY EH!''
@ssub=DEFB 32171%256
 27710 DEFB 171      ; Message #R32171(#b62): 'IT ALL WENT BLACK. AS I FELL
                     ; SOMEONE FAT PUSHED PAST ME...'
@ssub=DEFB 23904%256
 27711 DEFB 96       ; Message #R23904(#b63): 'DAISY SAID 'SAM - A GANGSTER'S
                     ; WATCHING FOR YOU OUTSIDE THE POLICE STATION''
@ssub=DEFB 23984%256
 27712 DEFB 176      ; Message #R23984(#b64): 'A VOICE SAID 'OK FATS THE HOOK'S
                     ; AT NO 74 AND ALS GUARDING IT''
@ssub=DEFB 27569%256
 27713 DEFB 177      ; Message #R27569(#b65): 'LANA ANSWERED 'OOH SAM! BUD SAID
                     ; HE'D MEET ME ALONE...''
@ssub=DEFB 24019%256
 27714 DEFB 211      ; Message #R24019(#b66): 'A VOICE SAID 'OK LANA THE KEY TO
                     ; 74'S IN THE ROOM PAST THE CATWALK...''
@ssub=DEFB 24069%256
 27715 DEFB 5        ; Message #R24069(#b67): 'SOMEONE HIT ME. I PLAYED DEAD.
                     ; TWO MEN WALKED OFF...'
@ssub=DEFB 24161%256
 27716 DEFB 97       ; Message #R24161(#b68): 'DAISY SAID 'ALS NUMBER'S 6124''
@ssub=DEFB 24181%256
 27717 DEFB 117      ; Message #R24181(#b69): 'TECHNICAL SERVICES HERE. TO USE
                     ; A HOOK GET TO RIGHT PLACE AND PRESS C'
@ssub=DEFB 23483%256
 27718 DEFB 187      ; Message #R23483(#b70): 'SOMEONE BELOW SAID 'CRUISE WAS
                     ; DRESSED AS THE OIL MAN. DONT LET ANYONE PAST''
@ssub=DEFB 23528%256
 27719 DEFB 232      ; Message #R23528(#b71): 'THERES A SAFE WITH 4 LOCKS'
@ssub=DEFB 24230%256
 27720 DEFB 166      ; Message #R24230(#b72): 'LANA ANSWERED 'OOH SAM! YOUVE
                     ; GOT THE BIRD. SEE YOU IN YOUR OFFICE''
@ssub=DEFB 24263%256
 27721 DEFB 199      ; Message #R24263(#b73): 'I STARED AT THE LOVELY LANA WAS
                     ; IT THOSE RUBY LIPS OR THE SLIM AUTOMATIC...'
@ssub=DEFB 24425%256
 27722 DEFB 105      ; Message #R24425(#b74): 'SHE'S IN JAIL NOW. ANOTHER CASE
                     ; SOLVED...'
@ssub=DEFB 24514%256
 27723 DEFB 194      ; Message #R24514(#b75): 'SHE FIRED'
@ssub=DEFB 23954%256
 27724 DEFB 146      ; Message #R23954(#b76): 'DAISY SAID 'LANA RANG - THAT FAT
                     ; MAN HAS TWO KEYS NOT JUST ONE ''

; Unused
;
; If messages #b77-#b96 existed, these bytes would be the LSBs of their
; addresses. The corresponding unused MSBs can be found at #R27981.
@label=XMSGLSBS2
u27725 DEFB 248,248,248
 27728 DEFB 248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248
 27744 DEFB 203

; LSBs of addresses of messages #b97-#b129
;
; The MSBs of the addresses of messages #b97-#b129 can be found at #R28001. The
; LSBs of the addresses of messages #b1-#b76 can be found at #R27649.
@label=MSGLSBS2
@ssub=DEFB 24524%256
b27745 DEFB 204      ; Message #R24524(#b97): 'JOYSTICK?'
 27746 DEFB 203      ; Unused
@ssub=DEFB 27339%256
 27747 DEFB 203      ; Message #R27339(#b99): 'I HAD TO GO TO HOSPITAL...'
@ssub=DEFB 26624%256
 27748 DEFB 0        ; Message #R26624(#b100): ' THE '
@ssub=DEFB 26630%256
 27749 DEFB 6        ; Message #R26630(#b101): 'CRUISE '
@ssub=DEFB 26638%256
 27750 DEFB 14       ; Message #R26638(#b102): 'NO '
@ssub=DEFB 26642%256
 27751 DEFB 18       ; Message #R26642(#b103): 'I '
@ssub=DEFB 26645%256
 27752 DEFB 21       ; Message #R26645(#b104): 'AL '
@ssub=DEFB 26649%256
 27753 DEFB 25       ; Message #R26649(#b105): 'BUD '
@ssub=DEFB 26654%256
 27754 DEFB 30       ; Message #R26654(#b106): 'CHAD '
@ssub=DEFB 26660%256
 27755 DEFB 36       ; Message #R26660(#b107): 'DON '
@ssub=DEFB 26667%256
 27756 DEFB 43       ; Message #R26667(#b108): 'ED '
@ssub=DEFB 26665%256
 27757 DEFB 41       ; Message #R26665(#b109): 'FRED '
@ssub=DEFB 26671%256
 27758 DEFB 47       ; Message #R26671(#b110): 'GUS '
@ssub=DEFB 26676%256
 27759 DEFB 52       ; Message #R26676(#b111): 'SAM '
@ssub=DEFB 26681%256
 27760 DEFB 57       ; Message #R26681(#b112): 'JUST ANOTHER DAY AT THE SAM
                     ; CRUISE DETECTIVE AGENCY'
@ssub=DEFB 26719%256
 27761 DEFB 95       ; Message #R26719(#b113): ' A '
@ssub=DEFB 26723%256
 27762 DEFB 99       ; Message #R26723(#b114): 'DAISY '
@ssub=DEFB 26730%256
 27763 DEFB 106      ; Message #R26730(#b115): ' MAN'
@ssub=DEFB 26735%256
 27764 DEFB 111      ; Message #R26735(#b116): ' AND '
@ssub=DEFB 26741%256
 27765 DEFB 117      ; Message #R26741(#b117): 'WAS '
@ssub=DEFB 26746%256
 27766 DEFB 122      ; Message #R26746(#b118): ' TO '
@ssub=DEFB 26751%256
 27767 DEFB 127      ; Message #R26751(#b119): ' AND DAISY RAN OFF WITH THE...'
@ssub=DEFB 26836%256
 27768 DEFB 212      ; Message #R26836(#b120): ' WHEN I CAME TO '
@ssub=DEFB 26845%256
 27769 DEFB 221      ; Message #R26845(#b121): ' THE'
@ssub=DEFB 26846%256
 27770 DEFB 222      ; Message #R26846(#b122): 'THE'
@ssub=DEFB 26850%256
 27771 DEFB 226      ; Message #R26850(#b123): 'ONE '
@ssub=DEFB 26855%256
 27772 DEFB 231      ; Message #R26855(#b124): 'SAID '
@ssub=DEFB 26861%256
 27773 DEFB 237      ; Message #R26861(#b125): ' A VOICE SAID ''
@ssub=DEFB 26871%256
 27774 DEFB 247      ; Message #R26871(#b126): ' YOU'
@ssub=DEFB 26876%256
 27775 DEFB 252      ; Message #R26876(#b127): 'ING'
@ssub=DEFB 27862%256
 27776 DEFB 214      ; Message #R27862(#b128): 'SOMEONE '
@ssub=DEFB 27868%256
 27777 DEFB 220      ; Message #R27868(#b129): 'FAT'

; Unused
;
; If messages #b130-#b199 existed, these bytes would be the LSBs of their
; addresses. The corresponding unused MSBs can be found at #R28034.
@label=XMSGLSBS3
u27778 DEFB 254,254,254,254,254,254
 27784 DEFB 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254
 27800 DEFB 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254
 27816 DEFB 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254
 27832 DEFB 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254

; Message #b29: 'LANA '
;
; Used as a submessage of messages #R27360(#b27), #R27381(#b28), #R24019(#b66)
; and #R24263(#b73).
@label=MSG029
t27848 DEFM "LANA "
 27853 DEFB 0        ; End marker

; Message #b30: 'ING '
;
; Used as a submessage of messages #R32171(#b62), #R23904(#b63) and
; #R23984(#b64).
@label=MSG030
t27854 DEFB 127      ; #R26876(#b127): 'ING'
 27855 DEFM " "
 27856 DEFB 0        ; End marker

; Message #b31: 'THAT'
;
; Used as a submessage of messages #R23296(#b55), #R32122(#b60), #R24069(#b67)
; and #R24263(#b73) and #R23954(#b76).
@label=MSG031
t27857 DEFM "THAT"
 27861 DEFB 0        ; End marker

; Message #b128: 'SOMEONE '
;
; Used as a submessage of messages #R32155(#b61), #R32171(#b62), #R24069(#b67)
; and #R23483(#b70).
@label=MSG128
t27862 DEFM "SOME"
 27866 DEFB 123      ; #R26850(#b123): 'ONE '
 27867 DEFB 0        ; End marker

; Message #b129: 'FAT'
;
; Used as a submessage of messages #R23296(#b55), #R23422(#b57), #R32122(#b60),
; #R32171(#b62), #R23984(#b64) and #R23954(#b76).
@label=MSG129
t27868 DEFM "FAT"
 27871 DEFB 0        ; End marker

; Unused
;
; If messages #b224-#b243 existed, these bytes would be the LSBs of their
; addresses. The corresponding unused MSBs can be found at #R28128.
@label=XMSGLSBS4
u27872 DEFB 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254
 27888 DEFB 254,254,254,254

; Check whether Sam is at the right place to pick up a telephone
;
; Used by the routine at #R29854. Returns with the zero flag reset if the
; x-coordinate of the front column of Sam's sprite is between 1 and 6 mod 8
; (which is where telephones are located in rooms).
;
; H #b230 (Sam)
@label=BYPHONEX
c27892 CALL 63138    ; Calculate the x-coordinate of the front column of Sam's
                     ; sprite (x)
 27895 LD B,A        ; #REGb=x%8
 27896 DEC A         ; {Set the zero flag if x is 0 or 7 mod 8 (telephones are
 27897 CP 6          ; located at x-coordinates between 1 and 6 mod 8)
 27899 SBC A,A       ; }
 27900 LD A,B        ; #REGa=x%8
 27901 LD B,2        ; Bit 1 set: check for the presence of a telephone
 27903 RET           ;

; Unused
;
; If message #b0 existed, this byte would be the MSB of its address. The
; corresponding unused LSB can be found at #R27648.
@label=XMSGMSBS1
u27904 DEFB 127

; MSBs of addresses of messages #b1-#b76
;
; The LSBs of the addresses of messages #b1-#b76 can be found at #R27649. The
; MSBs of the addresses of messages #b97-#b129 can be found at #R28001.
@label=MSGMSBS1
@ssub=DEFB 32720/256
b27905 DEFB 127      ; Message #R32720(#b1): '{tens digit}/{name}'
@ssub=DEFB 32658/256
 27906 DEFB 127      ; Message #R32658(#b2): '{number}'
@ssub=DEFB 26368/256
 27907 DEFB 103      ; Message #R26368(#b3): 'PRESS'
@ssub=DEFB 26374/256
 27908 DEFB 103      ; Message #R26374(#b4): 'KEY'
@ssub=DEFB 26378/256
 27909 DEFB 103      ; Message #R26378(#b5): 'PLAY'
@ssub=DEFB 26383/256
 27910 DEFB 103      ; Message #R26383(#b6): ' RIGHT '
@ssub=DEFB 26391/256
 27911 DEFB 103      ; Message #R26391(#b7): ' WHEN'
@ssub=DEFB 26397/256
 27912 DEFB 103      ; Message #R26397(#b8): 'RATCATCHER'
@ssub=DEFB 26408/256
 27913 DEFB 103      ; Message #R26408(#b9): 'POLICE CHIEF'
@ssub=DEFB 26421/256
 27914 DEFB 103      ; Message #R26421(#b10): 'CHICAGO BEARS'
@ssub=DEFB 26435/256
 27915 DEFB 103      ; Message #R26435(#b11): 'REVENUE MAN'
@ssub=DEFB 26444/256
 27916 DEFB 103      ; Message #R26444(#b12): 'VIOLIN CASE MAKER'
@ssub=DEFB 26462/256
 27917 DEFB 103      ; Message #R26462(#b13): 'GARBAGE MAN'
@ssub=DEFB 26471/256
 27918 DEFB 103      ; Message #R26471(#b14): 'JAMES GANG'
@ssub=DEFB 26482/256
 27919 DEFB 103      ; Message #R26482(#b15): 'RENT COLLECTOR'
@ssub=DEFB 26497/256
 27920 DEFB 103      ; Message #R26497(#b16): 'MAKE COFFEE'
@ssub=DEFB 26509/256
 27921 DEFB 103      ; Message #R26509(#b17): 'TAPDANCE'
@ssub=DEFB 26518/256
 27922 DEFB 103      ; Message #R26518(#b18): 'SCUBA DIVE'
@ssub=DEFB 26529/256
 27923 DEFB 103      ; Message #R26529(#b19): 'PLAY POKER'
@ssub=DEFB 26537/256
 27924 DEFB 103      ; Message #R26537(#b20): 'TYPE'
@ssub=DEFB 26542/256
 27925 DEFB 103      ; Message #R26542(#b21): 'ICE-SKATE'
@ssub=DEFB 26552/256
 27926 DEFB 103      ; Message #R26552(#b22): 'WOLFWHISTLE'
@ssub=DEFB 26564/256
 27927 DEFB 103      ; Message #R26564(#b23): 'PLAY THE HARMONICA'
@ssub=DEFB 26576/256
 27928 DEFB 103      ; Message #R26576(#b24): 'JUST ANOTHER DAY AT THE SAM
                     ; CRUISE DETECTIVE AGENCY/I WAS TEACHING...'
@ssub=DEFB 26597/256
 27929 DEFB 103      ; Message #R26597(#b25): ' BEGAN '
@ssub=DEFB 27356/256
 27930 DEFB 106      ; Message #R27356(#b26): 'DAISY SAID ''
@ssub=DEFB 27360/256
 27931 DEFB 106      ; Message #R27360(#b27): 'LANA ANSWERED 'OOH SAM! '
@ssub=DEFB 27381/256
 27932 DEFB 106      ; Message #R27381(#b28): 'LANA RANG - '
@ssub=DEFB 27848/256
 27933 DEFB 108      ; Message #R27848(#b29): 'LANA '
@ssub=DEFB 27854/256
 27934 DEFB 108      ; Message #R27854(#b30): 'ING '
@ssub=DEFB 27857/256
 27935 DEFB 108      ; Message #R27857(#b31): 'THAT'
@ssub=DEFB 26880/256
 27936 DEFB 105      ; Message #R26880(#b32): 'JUST ANOTHER DAY AT THE SAM
                     ; CRUISE DETECTIVE AGENCY/I'M WORKING ON A CASE...'
@ssub=DEFB 26925/256
 27937 DEFB 105      ; Message #R26925(#b33): '...SO BEGAN THE CASE OF THE BALI
                     ; BUDGIE'
@ssub=DEFB 27026/256
 27938 DEFB 105      ; Message #R27026(#b34): 'I WAS BROKE AGAIN...'
@ssub=DEFB 27041/256
 27939 DEFB 105      ; Message #R27041(#b35): ' WHEN I CAME TO MY WALLET WAS
                     ; GONE...'
@ssub=DEFB 27057/256
 27940 DEFB 105      ; Message #R27057(#b36): ' WHEN I CAME TO SOMEONE HAD
                     ; TAKEN ${tens digit}0'
@ssub=DEFB 27077/256
 27941 DEFB 105      ; Message #R27077(#b37): 'A VOICE SAID 'WHO'S THERE?''
@ssub=DEFB 27089/256
 27942 DEFB 105      ; Message #R27089(#b38): 'PRESS A KEY TO PLAY'
@ssub=DEFB 27113/256
 27943 DEFB 105      ; Message #R27113(#b39): 'I HUNG UP'
@ssub=DEFB 27122/256
 27944 DEFB 105      ; Message #R27122(#b40): ''{name}' I SAID '
@ssub=DEFB 27129/256
 27945 DEFB 105      ; Message #R27129(#b41): 'I LIFTED THE PHONE '
@ssub=DEFB 27141/256
 27946 DEFB 106      ; Message #R27141(#b42): 'I DIALLED {number}'
@ssub=DEFB 27150/256
 27947 DEFB 106      ; Message #R27150(#b43): 'A VOICE SAID 'THERES NOONE
                     ; HERE''
@ssub=DEFB 27165/256
 27948 DEFB 106      ; Message #R27165(#b44): 'A VOICE SAID 'GET LOST - I'M
                     ; TRYING TO SLEEP''
@ssub=DEFB 27193/256
 27949 DEFB 106      ; Message #R27193(#b45): 'A VOICE SAID 'BE RIGHT WITH
                     ; YOU''
@ssub=DEFB 27204/256
 27950 DEFB 106      ; Message #R27204(#b46): 'I DUNNO NO {name}'
@ssub=DEFB 27214/256
 27951 DEFB 106      ; Message #R27214(#b47): ' THE NUMBER WAS UNOBTAINABLE'
@ssub=DEFB 27236/256
 27952 DEFB 106      ; Message #R27236(#b48): 'AT THE JAIL THEY THREW THE BOOK
                     ; AT ME...'
@ssub=DEFB 27264/256
 27953 DEFB 106      ; Message #R27264(#b49): 'IT BEGAN RINGING'
@ssub=DEFB 27271/256
 27954 DEFB 106      ; Message #R27271(#b50): 'DAISY SAID 'NO MESSAGES SAM ''
@ssub=DEFB 27287/256
 27955 DEFB 106      ; Message #R27287(#b51): 'A VOICE SAID 'OK CRUISE WE'RE
                     ; COMING''
@ssub=DEFB 27304/256
 27956 DEFB 106      ; Message #R27304(#b52): ' THE BAIL WAS ${tens digit}0'
@ssub=DEFB 27315/256
 27957 DEFB 106      ; Message #R27315(#b53): 'THERE'S A MAN'S BODY ON THE
                     ; FLOOR'
@ssub=DEFB 27339/256
 27958 DEFB 106      ; Message #R27339(#b54): 'I HAD TO GO TO HOSPITAL...'
@ssub=DEFB 23296/256
 27959 DEFB 91       ; Message #R23296(#b55): 'A VOICE SAID 'ED - TELL THE OIL
                     ; MAN THAT THE KEY TO THE FAT MAN'S HOUSE...''
@ssub=DEFB 23366/256
 27960 DEFB 91       ; Message #R23366(#b56): 'DAISY SAID 'LANA RANG - SHE HAD
                     ; TO GET OUT IN A HURRY...''
@ssub=DEFB 23422/256
 27961 DEFB 91       ; Message #R23422(#b57): 'OK ED - THE FAT MAN HAS THE KEY
                     ; TO NO 27'
@ssub=DEFB 23441/256
 27962 DEFB 91       ; Message #R23441(#b58): 'DAISY SAID 'LANA RANG - HER NEW
                     ; NUMBERS 7162. THE POLICE WERE HERE''
@ssub=DEFB 32089/256
 27963 DEFB 125      ; Message #R32089(#b59): 'LANA ANSWERED 'OOH SAM! THEY
                     ; KILLED MY FIANCE AND STOLE THE BUDGIE''
@ssub=DEFB 32122/256
 27964 DEFB 125      ; Message #R32122(#b60): 'LANA ANSWERED 'OOH SAM! THAT
                     ; CROOK THE FAT MAN'S JUST MOVED INTO NO 15''
@ssub=DEFB 32155/256
 27965 DEFB 125      ; Message #R32155(#b61): 'SOMEONE GROWLED 'NO KEY EH!''
@ssub=DEFB 32171/256
 27966 DEFB 125      ; Message #R32171(#b62): 'IT ALL WENT BLACK. AS I FELL
                     ; SOMEONE FAT PUSHED PAST ME...'
@ssub=DEFB 23904/256
 27967 DEFB 93       ; Message #R23904(#b63): 'DAISY SAID 'SAM - A GANGSTER'S
                     ; WATCHING FOR YOU OUTSIDE THE POLICE STATION''
@ssub=DEFB 23984/256
 27968 DEFB 93       ; Message #R23984(#b64): 'A VOICE SAID 'OK FATS THE HOOK'S
                     ; AT NO 74 AND ALS GUARDING IT''
@ssub=DEFB 27569/256
 27969 DEFB 107      ; Message #R27569(#b65): 'LANA ANSWERED 'OOH SAM! BUD SAID
                     ; HE'D MEET ME ALONE...''
@ssub=DEFB 24019/256
 27970 DEFB 93       ; Message #R24019(#b66): 'A VOICE SAID 'OK LANA THE KEY TO
                     ; 74'S IN THE ROOM PAST THE CATWALK...''
@ssub=DEFB 24069/256
 27971 DEFB 94       ; Message #R24069(#b67): 'SOMEONE HIT ME. I PLAYED DEAD.
                     ; TWO MEN WALKED OFF...'
@ssub=DEFB 24161/256
 27972 DEFB 94       ; Message #R24161(#b68): 'DAISY SAID 'ALS NUMBER'S 6124''
@ssub=DEFB 24181/256
 27973 DEFB 94       ; Message #R24181(#b69): 'TECHNICAL SERVICES HERE. TO USE
                     ; A HOOK GET TO RIGHT PLACE AND PRESS C'
@ssub=DEFB 23483/256
 27974 DEFB 91       ; Message #R23483(#b70): 'SOMEONE BELOW SAID 'CRUISE WAS
                     ; DRESSED AS THE OIL MAN. DONT LET ANYONE PAST''
@ssub=DEFB 23528/256
 27975 DEFB 91       ; Message #R23528(#b71): 'THERES A SAFE WITH 4 LOCKS'
@ssub=DEFB 24230/256
 27976 DEFB 94       ; Message #R24230(#b72): 'LANA ANSWERED 'OOH SAM! YOUVE
                     ; GOT THE BIRD. SEE YOU IN YOUR OFFICE''
@ssub=DEFB 24263/256
 27977 DEFB 94       ; Message #R24263(#b73): 'I STARED AT THE LOVELY LANA WAS
                     ; IT THOSE RUBY LIPS OR THE SLIM AUTOMATIC...'
@ssub=DEFB 24425/256
 27978 DEFB 95       ; Message #R24425(#b74): 'SHE'S IN JAIL NOW. ANOTHER CASE
                     ; SOLVED...'
@ssub=DEFB 24514/256
 27979 DEFB 95       ; Message #R24514(#b75): 'SHE FIRED'
@ssub=DEFB 23954/256
 27980 DEFB 93       ; Message #R23954(#b76): 'DAISY SAID 'LANA RANG - THAT FAT
                     ; MAN HAS TWO KEYS NOT JUST ONE ''

; Unused
;
; If messages #b77-#b96 existed, these bytes would be the MSBs of their
; addresses. The corresponding unused LSBs can be found at #R27725.
@label=XMSGMSBS2
u27981 DEFB 102,102,102
 27984 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28000 DEFB 95

; MSBs of addresses of messages #b97-#b129
;
; The LSBs of the addresses of messages #b97-#b129 can be found at #R27745. The
; MSBs of the addresses of messages #b1-#b76 can be found at #R27905.
@label=MSGMSBS2
@ssub=DEFB 24524/256
b28001 DEFB 95       ; Message #R24524(#b97): 'JOYSTICK?'
 28002 DEFB 106      ; Unused
@ssub=DEFB 27339/256
 28003 DEFB 106      ; Message #R27339(#b99): 'I HAD TO GO TO HOSPITAL...'
@ssub=DEFB 26624/256
 28004 DEFB 104      ; Message #R26624(#b100): ' THE '
@ssub=DEFB 26630/256
 28005 DEFB 104      ; Message #R26630(#b101): 'CRUISE '
@ssub=DEFB 26638/256
 28006 DEFB 104      ; Message #R26638(#b102): 'NO '
@ssub=DEFB 26642/256
 28007 DEFB 104      ; Message #R26642(#b103): 'I '
@ssub=DEFB 26645/256
 28008 DEFB 104      ; Message #R26645(#b104): 'AL '
@ssub=DEFB 26649/256
 28009 DEFB 104      ; Message #R26649(#b105): 'BUD '
@ssub=DEFB 26654/256
 28010 DEFB 104      ; Message #R26654(#b106): 'CHAD '
@ssub=DEFB 26660/256
 28011 DEFB 104      ; Message #R26660(#b107): 'DON '
@ssub=DEFB 26667/256
 28012 DEFB 104      ; Message #R26667(#b108): 'ED '
@ssub=DEFB 26665/256
 28013 DEFB 104      ; Message #R26665(#b109): 'FRED '
@ssub=DEFB 26671/256
 28014 DEFB 104      ; Message #R26671(#b110): 'GUS '
@ssub=DEFB 26676/256
 28015 DEFB 104      ; Message #R26676(#b111): 'SAM '
@ssub=DEFB 26681/256
 28016 DEFB 104      ; Message #R26681(#b112): 'JUST ANOTHER DAY AT THE SAM
                     ; CRUISE DETECTIVE AGENCY'
@ssub=DEFB 26719/256
 28017 DEFB 104      ; Message #R26719(#b113): ' A '
@ssub=DEFB 26723/256
 28018 DEFB 104      ; Message #R26723(#b114): 'DAISY '
@ssub=DEFB 26730/256
 28019 DEFB 104      ; Message #R26730(#b115): ' MAN'
@ssub=DEFB 26735/256
 28020 DEFB 104      ; Message #R26735(#b116): ' AND '
@ssub=DEFB 26741/256
 28021 DEFB 104      ; Message #R26741(#b117): 'WAS '
@ssub=DEFB 26746/256
 28022 DEFB 104      ; Message #R26746(#b118): ' TO '
@ssub=DEFB 26751/256
 28023 DEFB 104      ; Message #R26751(#b119): ' AND DAISY RAN OFF WITH THE...'
@ssub=DEFB 26836/256
 28024 DEFB 104      ; Message #R26836(#b120): ' WHEN I CAME TO '
@ssub=DEFB 26845/256
 28025 DEFB 104      ; Message #R26845(#b121): ' THE'
@ssub=DEFB 26846/256
 28026 DEFB 104      ; Message #R26846(#b122): 'THE'
@ssub=DEFB 26850/256
 28027 DEFB 104      ; Message #R26850(#b123): 'ONE '
@ssub=DEFB 26855/256
 28028 DEFB 104      ; Message #R26855(#b124): 'SAID '
@ssub=DEFB 26861/256
 28029 DEFB 104      ; Message #R26861(#b125): ' A VOICE SAID ''
@ssub=DEFB 26871/256
 28030 DEFB 104      ; Message #R26871(#b126): ' YOU'
@ssub=DEFB 26876/256
 28031 DEFB 104      ; Message #R26876(#b127): 'ING'
@ssub=DEFB 27862/256
 28032 DEFB 108      ; Message #R27862(#b128): 'SOMEONE '
@ssub=DEFB 27868/256
 28033 DEFB 108      ; Message #R27868(#b129): 'FAT'

; Unused
;
; If messages #b130-#b245 existed, these bytes would be the MSBs of their
; addresses. The corresponding unused LSBs for messages #b130-#b199 can be
; found at #R27778; the unused LSBs for messages #b224-#b243 can be found at
; #R27872.
@label=XMSGMSBS3
u28034 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28048 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28064 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28080 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28096 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28112 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
@label=XMSGMSBS4
 28128 DEFB 102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102
 28144 DEFB 102,102,102,102,102,102

; Set #REGa=1
;
; Used by the routine at #R29597. Returns with #REGa=1.
;
; A #b122 (the MSB of the routine at #R31319)
@label=SETA1
c28150 LD L,1        ;
 28152 DEC A         ; This instruction resets the zero flag
 28153 LD A,L        ; #REGa=1
 28154 RET NZ        ; This return always happens
; The following instructions are never executed.
@ssub=LD A,(58880+4)
 28155 LD A,(58884)  ; #REGa=Sam's z-coordinate
 28158 RET           ;

; Unused
;
; If message #b255 existed, this byte would be the MSB of its address.
u28159 DEFB 102

; Print a message
;
; Used by the routines at #R28186 and #R28357.
;
; DE Display file address
; HL Message address
@label=PRINTMSG
c28160 LD A,(HL)     ; Pick up the ASCII code of the next character to print
 28161 ADD A,A       ; Have we reached the end of the message?
 28162 RET Z         ; Return if so
 28163 NOP           ;
 28164 NOP           ;
 28165 INC HL        ; Point #REGhl at the next character in the message
 28166 PUSH HL       ; Save this pointer for now
 28167 PUSH DE       ; Save the display file address
 28168 LD H,15       ; {Point #REGhl at the base address of the graphic data
 28170 LD L,A        ; for the font character (in the ROM)
 28171 ADD HL,HL     ;
 28172 ADD HL,HL     ; }
 28173 LD B,8        ; {Print the character on the screen
*28175 LD A,(HL)     ;
 28176 LD (DE),A     ;
 28177 INC L         ;
 28178 INC D         ;
 28179 DJNZ 28175    ; }
 28181 POP DE        ; Restore the display file address to #REGde
 28182 POP HL        ; Restore the pointer to the next character in the message
 28183 INC E         ; Point #REGde at the next display file location
 28184 JR 28160      ; Jump back to print the next character

; Print a number
;
; Used by the routines at #R28295, #R28337 and #R28760. Computes the ASCII
; codes for the digits of the number in #REGhl, stores them in the buffer at
; #R32714, and then prints them.
;
; DE Display file address
; HL Number to print
@label=PRINTNUM
c28186 PUSH DE       ; Save the display file address
 28187 EX DE,HL      ; Transfer the number to print to #REGde
@ssub=LD HL,32714+5
@nowarn
 28188 LD HL,32719   ; {Fill the number string buffer at #R32714 with space
 28191 LD B,5        ; characters
*28193 DEC L         ;
 28194 LD (HL),32    ;
 28196 DJNZ 28193    ; }
 28198 LD A,48       ; #b48 is the ASCII code for the digit '0'
@keep
 28200 LD BC,55536   ; #REGbc=-10000
 28203 EX DE,HL      ; Transfer the number to print to #REGhl
 28204 ADD HL,BC     ; Is #REGhl>=10000?
 28205 JR C,28235    ; Jump if so to compute and store the 10000s digit
 28207 INC E         ; Point #REGde at the slot for the 1000s digit in the
                     ; number string buffer
 28208 SBC HL,BC     ; Add the 10000 back
@keep
 28210 LD BC,64536   ; #REGbc=-1000
 28213 ADD HL,BC     ; Is #REGhl>=1000?
 28214 JR C,28248    ; Jump if so to compute and store the 1000s digit
 28216 INC E         ; Point #REGde at the slot for the 100s digit in the
                     ; number string buffer
 28217 SBC HL,BC     ; Add the 1000 back
@keep
 28219 LD BC,65436   ; #REGbc=-100
 28222 ADD HL,BC     ; Is #REGhl>=100?
 28223 JR C,28261    ; Jump if so to compute and store the 100s digit
 28225 INC E         ; Point #REGde at the slot for the 10s digit in the number
                     ; string buffer
 28226 SBC HL,BC     ; Add the 100 back
 28228 LD C,246      ; #REGbc=-10
 28230 ADD HL,BC     ; Is #REGhl>=10?
 28231 JR C,28273    ; Jump if so to compute and store the 10s digit
 28233 JR 28280      ; Jump forward to compute and store the units digit
; Compute and store the 10000s digit.
*28235 INC A         ; {Get the ASCII code for the 10000s digit in #REGa
 28236 ADD HL,BC     ;
 28237 JR C,28235    ; }
 28239 LD (DE),A     ; Place the 10000s digit into the number string buffer
 28240 SBC HL,BC     ;
 28242 INC E         ; Point #REGde at the slot for the 1000s digit
 28243 LD A,47       ;
@keep
 28245 LD BC,64536   ; #REGbc=-1000
; Compute and store the 1000s digit.
*28248 INC A         ; {Get the ASCII code for the 1000s digit in #REGa
 28249 ADD HL,BC     ;
 28250 JR C,28248    ; }
 28252 LD (DE),A     ; Place the 1000s digit into the number string buffer
 28253 LD A,47       ;
 28255 SBC HL,BC     ;
@keep
 28257 LD BC,65436   ; #REGbc=-100
 28260 INC E         ; Point #REGde at the slot for the 100s digit
; Compute and store the 100s digit.
*28261 INC A         ; {Get the ASCII code for the 100s digit in #REGa
 28262 ADD HL,BC     ;
 28263 JR C,28261    ; }
 28265 LD (DE),A     ; Place the 100s digit into the number string buffer
 28266 LD A,47       ;
 28268 SBC HL,BC     ;
 28270 LD C,246      ; #REGbc=-10
 28272 INC E         ; Point #REGde at the slot for the 10s digit
; Compute and store the 10s digit.
*28273 INC A         ; {Get the ASCII code for the 10s digit in #REGa
 28274 ADD HL,BC     ;
 28275 JR C,28273    ; }
 28277 LD (DE),A     ; Place the 10s digit into the number string buffer
 28278 LD A,48       ;
; Compute and store the units digit.
*28280 SBC HL,BC     ;
 28282 INC E         ; Point #REGde at the slot for the units digit
 28283 ADD A,L       ; #REGa=ASCII code for the units digit
 28284 LD (DE),A     ; Place it into the number string buffer
; The number string buffer is now ready.
 28285 LD E,202      ; #REGde=#R32714 (start of the number string buffer)
 28287 POP HL        ; Restore the display file address to #REGhl
 28288 EX DE,HL      ; Transfer it to #REGde, and point #REGhl at the number
                     ; string buffer at #R32714
 28289 JP 28160      ; Print the number

; Unused
s28292 DEFS 3

; Adjust Sam's cash supply and print the new amount
;
; Used by the routines at #R31594, #R31642 and #R64338. Returns with the zero
; flag set if Sam has run out of money.
;
; A N/10 (N=number of bucks to subtract)
@label=CHGBUCKS
c28295 LD E,A        ; {#REGa=N
 28296 ADD A,A       ;
 28297 ADD A,A       ;
 28298 ADD A,E       ;
 28299 ADD A,A       ; }
; This entry point is used by the routine at #R30458 with #REGa=2.
*28300 LD D,255      ; Prepare #REGde for subtraction
 28302 NEG           ; #REGa=-N
 28304 JR 28308      ;
; This entry point is used by the routines at #R25039, #R28760 and #R30211 with
; #REGa holding the number of bucks to add to Sam's cash supply.
*28306 LD D,0        ; Prepare #REGde for addition
*28308 LD E,A        ; Now #REGde=number of bucks to add (may be negative)
; This entry point is used by the routine at #R28337 with #REGde=#w65535 (-1).
*28309 LD HL,(32670) ; Collect the current number of bucks from #R32670
 28312 ADD HL,DE     ; Adjust the number
 28313 INC H         ; Is the result negative?
 28314 JR NZ,28319   ; Jump if not
 28316 LD HL,256     ; Set #REGhl up so that the next instruction reduces it to
                     ; 0
*28319 DEC H         ; Restore the value of #REGhl (if it was non-negative), or
                     ; set it to 0 (if it was negative)
 28320 LD A,H        ; {Set the zero flag if the number of bucks is now 0
 28321 OR L          ; }
 28322 PUSH AF       ; Save the zero flag temporarily
 28323 LD (32670),HL ; Store the new amount at #R32670
@nowarn
 28326 LD DE,20728   ; #REGde=display file address
 28329 CALL 28186    ; Print the number of bucks
 28332 POP AF        ; Restore the zero flag
 28333 RET           ;

; Unused
s28334 DEFS 3

; Increment the score and decrement Sam's cash supply
;
; Used by the routine at #R31414.
@label=INCSCORE
c28337 LD HL,(32668) ; Collect the score from #R32668
 28340 INC HL        ; Increment it
 28341 LD (32668),HL ; Store the new score
@nowarn
 28344 LD DE,20696   ; #REGde=display file address
 28347 CALL 28186    ; Print the score
@keep
 28350 LD DE,65535   ; #REGde=-1
 28353 JR 28309      ; Decrement Sam's cash supply and print the new amount

; Unused
s28355 DEFS 2

; Add a message to the message queue
;
; Used by the routines at #R30154, #R30211, #R30989, #R31126, #R31594 and
; #R64338. Adds a message to the message queue, and updates the message line
; (by clearing it or displaying the next message or message portion) if
; necessary.
;
; A Message number
@label=QUEUEMSG
c28357 LD E,A        ; #REGe=number of the message to be queued
 28358 LD HL,32695   ; #R32695 holds the index of the current message in the
                     ; message queue at #R32696
 28361 LD A,(HL)     ; Pick up the index of the current message
 28362 DEC A         ; {#REGa=index of the last message in the queue
 28363 AND 7         ; }
@ssub=ADD A,32696%256
 28365 ADD A,184     ; {Point #REGhl at the corresponding slot in the message
 28367 LD L,A        ; queue at #R32696}
 28368 LD A,(HL)     ; Pick up the message number from this slot
 28369 AND A         ; Is the slot empty?
 28370 JR Z,28386    ; Jump if so
; The message queue is full. To make space for the new message, we remove the
; second message from the queue, and move the following messages up a slot,
; thus leaving the final slot free.
 28372 LD B,7        ; There are six messages to move up a slot, and one to
                     ; remove completely
 28374 LD C,0        ; The final slot will be made empty
*28376 LD A,(HL)     ; Pick up the message number from this slot
 28377 LD (HL),C     ; Replace it with 0 or the message number from the
                     ; previous slot
 28378 LD C,A        ; Save the old contents of this slot
 28379 LD A,L        ; {Point #REGhl at the previous slot in the message queue
 28380 DEC A         ;
 28381 OR 8          ;
 28383 LD L,A        ; }
 28384 DJNZ 28376    ; Jump back to deal with the remaining slots
; The following loop looks for the first empty slot in the message queue, and
; stores the message number there.
@ssub=LD L,32695%256
*28386 LD L,183      ; #REGhl=#R32695 (which holds the index of the current
                     ; message in the message queue at #R32696)
 28388 LD L,(HL)     ; Copy the index to #REGl
*28389 LD A,L        ; {#REGa=index of the next message in the queue
 28390 INC A         ;
 28391 AND 7         ; }
@ssub=ADD A,32696%256
 28393 ADD A,184     ; {Point #REGhl at the corresponding slot in the queue
 28395 LD L,A        ; }
 28396 LD A,(HL)     ; Pick up the message number from this slot
 28397 AND A         ; Is the slot empty?
 28398 JR NZ,28389   ; Jump back if not to check the next slot
 28400 LD (HL),E     ; Store the message number in this slot
 28401 NOP           ; {
 28402 NOP           ;
 28403 NOP           ; }
; This entry point is used by the routines at #R30972, #R30989 and #R61440.
*28404 LD HL,32695   ; #R32695 holds the index of the current message in the
                     ; message queue at #R32696
 28407 LD A,(HL)     ; Pick up the index of the current message (0-7)
 28408 AND 7         ; {Point #REGhl at the corresponding slot in the message
@ssub=ADD A,32696%256
 28410 ADD A,184     ; queue
 28412 LD L,A        ; }
 28413 LD A,(HL)     ; Pick up the number of the current message
 28414 AND A         ; Is there a message being displayed at the moment?
 28415 JR NZ,28426   ; Jump if so
 28417 CALL 64121    ; Check whether there are any messages remaining in the
                     ; message queue
@nowarn
 28420 LD HL,(23672) ; Collect the two least significant bytes of the system
                     ; variable FRAMES in #REGhl
 28423 JR NZ,28454   ; Jump if there is another message waiting in the queue
 28425 RET Z         ; This return always happens
; There is a message being displayed at the moment.
*28426 CALL 30160    ; #REGa=minimum number of subintervals of 0.64s that the
                     ; current message (or message portion) should be displayed
                     ; for before being replaced
 28429 LD HL,0       ; {#REGde=32*#REGa
 28432 LD DE,32      ;
*28435 ADD HL,DE     ;
 28436 DEC A         ;
 28437 JR NZ,28435   ;
 28439 EX DE,HL      ; }
@nowarn
 28440 LD HL,(23672) ; Collect the two least significant bytes of the system
                     ; variable FRAMES in #REGhl
 28443 LD BC,(32672) ; #REGbc=two least significant bytes of the system
                     ; variable FRAMES as they were when the last message was
                     ; displayed
 28447 SBC HL,BC     ; {Is it time to display the next message (or next portion
 28449 SBC HL,DE     ; of the current message) yet?}
 28451 RET C         ; Return if not
 28452 ADD HL,DE     ; {Restore the current value of the two least significant
 28453 ADD HL,BC     ; bytes of the system variable FRAMES to #REGhl}
*28454 LD (32672),HL ; Update the message display timer at #R32672
; This entry point is used by the routine at #R29716.
*28457 EXX           ;
@ssub=LD HL,32608+31
 28458 LD HL,32639   ; {Fill the message buffer at #R32608 with spaces
 28461 LD BC,8224    ;
*28464 LD (HL),C     ;
 28465 DEC L         ;
 28466 DJNZ 28464    ; }
 28468 EXX           ;
 28469 LD HL,32641   ; #R32641 holds the submessage indicator (0, 2, 4, 6 or 8)
 28472 LD A,(HL)     ; Pick it up in #REGa
 28473 AND A         ; Are we in the middle of a message at the moment?
*28474 JR NZ,28512   ; Jump if so
; We've reached the end of the current message. Time to display the next
; message, or clear the message line if there are no messages waiting in the
; queue.
@ssub=LD L,32695%256
 28476 LD L,183      ; #REGhl=#R32695 (which holds the index of the current
                     ; message in the message queue at #R32696)
 28478 LD A,(HL)     ; Pick up this index
 28479 INC (HL)      ; Increment the index
 28480 AND 7         ; {Point #REGhl at the current message in the queue
@ssub=ADD A,32696%256
 28482 ADD A,184     ;
 28484 LD L,A        ; }
 28485 LD (HL),0     ; Set the current message number to 0 (no message)
 28487 SUB 7         ; {Point #REGhl at the next message in the queue
 28489 OR 8          ;
 28491 LD L,A        ; }
 28492 LD A,(HL)     ; Pick up the message number
 28493 AND A         ; Is there another message waiting in the queue?
 28494 JR Z,28534    ; Jump if not to clear the message line
; Here we transition from no message to top-level message, or from one message
; level to a submessage. #REGa holds the (sub)message number.
*28496 LD C,A        ; {Point #REGbc at the LSB of the message address
@ssub=LD B,27649/256
 28497 LD B,108      ; }
@ssub=LD L,32641%256
 28499 LD L,129      ; {Increase the submessage indicator at #R32641 by 2 (to
 28501 INC (HL)      ; 2, 4, 6 or 8)
 28502 INC (HL)      ; }
 28503 LD L,(HL)     ; {Point #REGhl at where the LSB of the message address
 28504 SET 7,L       ; will be stored}
 28506 LD A,(BC)     ; {Copy the LSB of the message address here
 28507 LD (HL),A     ; }
 28508 INC B         ; Point #REGbc at the MSB of the message address
 28509 INC L         ; Point #REGhl at where the MSB of the message address
                     ; will be stored
 28510 LD A,(BC)     ; {Copy the MSB of the message address here
 28511 LD (HL),A     ; }
@ssub=LD L,32641%256
*28512 LD L,129      ; #REGhl=#R32641 (submessage indicator)
 28514 LD L,(HL)     ; {Point #REGhl at the LSB of the address of the next
 28515 SET 7,L       ; character in the message}
 28517 LD E,(HL)     ; Pick up the LSB in #REGe
 28518 INC (HL)      ; Increment the LSB
 28519 INC HL        ; Point #REGhl at the MSB of the address of the next
                     ; character in the message
 28520 LD D,(HL)     ; Pick up the MSB in #REGd
 28521 JR NZ,28524   ; Jump unless the LSB rolled over to 0
 28523 INC (HL)      ; Increment the MSB
*28524 LD A,(DE)     ; #REGa=ASCII code of the next character in the message
 28525 AND A         ; Is it the end marker?
 28526 JR NZ,28543   ; Jump if not
; We've reached the end of the top-level message or a submessage.
@ssub=LD L,32641%256
 28528 LD L,129      ; #REGhl=#R32641 (submessage indicator)
 28530 DEC (HL)      ; {Reduce the submessage indicator by 2
 28531 DEC (HL)      ; }
 28532 JR NZ,28474   ; Jump unless we've reached the end of the top-level
                     ; message
; It's time to print the contents of the message buffer.
*28534 LD HL,32608   ; Point #REGhl at the first byte of the message buffer at
                     ; #R32608
 28537 LD DE,20608   ; #REGde=display file address
 28540 JP 28160      ; Print the contents of the message buffer
; At this point #REGa holds the ASCII code of the next character in the
; message.
*28543 CP 32         ; Is the ASCII code of the character < #b32?
 28545 JR C,28496    ; Jump if so to deal with a submessage
 28547 JR NZ,28560   ; Jump if the ASCII code of the character is > #b32
; The next character in the message is a space. In case there's not enough room
; left in the message buffer for the word that follows, we now save the
; submessage indicator and submessage addresses.
@ignoreua
 28549 LD HL,32641   ; {Copy the submessage indicator and submessage addresses
 28552 LD BC,16      ; from #R32641 to #w32512-#w32527
 28555 LD DE,32512   ;
 28558 LDIR          ; }
*28560 CP 96         ; Is the ASCII code of the character < #b96?
 28562 JR C,28572    ; Jump if so
 28564 JR Z,28534    ; Jump if the ASCII code of the character is #b96
                     ; (newline)
 28566 CP 100        ; Is the ASCII code of the character >= #b100?
 28568 JR NC,28496   ; Jump if so to deal with a submessage
 28570 JR 28604      ; Jump forward to deal with ASCII code #b97 or #b98 (#b99
                     ; is not used)
*28572 EXX           ;
 28573 INC L         ; Point #REGhl' at the next free byte in the message
                     ; buffer at #R32608
 28574 LD (HL),A     ; Store the ASCII code of the message character there
 28575 BIT 7,L       ; Reset the zero flag if we've reached the end of the
                     ; message buffer (#REGhl'=#w32640)
 28577 EXX           ;
 28578 JR Z,28512    ; Jump if there's still space left in the message buffer
; The message buffer at #R32608 is full.
 28580 LD HL,32512   ; {Restore the submessage indicator and message addresses
 28583 LD DE,32641   ; to #R32641
 28586 LD BC,16      ;
 28589 LDIR          ; }
@ssub=LD L,32640%256
 28591 LD L,128      ; #REGhl=#w32640 (message buffer overflow byte)
*28593 LD A,(HL)     ; {Remove all characters from the end of the message
 28594 LD (HL),C     ; buffer back to the last space
 28595 DEC L         ;
 28596 LD C,32       ;
 28598 CP 32         ;
 28600 JR NZ,28593   ; }
 28602 JR 28534      ; Print the contents of the message buffer
; The ASCII code of the next character in the message is #b97 (person or group
; of people) or #b98 (verb).
*28604 ADD A,100     ; #REGa=#b197 or #b198
 28606 CALL 28616    ; Randomly select a message number for either a verb or a
                     ; person or group of people
 28609 JR 28496      ;

; Unused
s28611 DEFB 0

; Message display interval
;
; Updated by the routine at #R28635 and checked by the routine at #R30160. The
; value stored here defines the minimum number of subintervals of 0.64s for
; which a message (or portion of a message) will normally be displayed in the
; message line.
@label=MSGDISPINT
b28612 DEFB 4

; Last used random message numbers
;
; Used by the routine at #R28616. When it appears in a message, ASCII code #b97
; is replaced by a randomly chosen message denoting a person or group of
; people; similarly, ASCII code #b98 is replaced by a randomly chosen message
; containing a verb (see #R28357). The numbers of those randomly chosen
; messages are stored here for future reference.
@label=RANDMSGS
b28613 DEFB 8        ; Last used message number for a person or group of people
                     ; (e.g. message #R26397(#b8): RATCATCHER)
 28614 DEFB 16       ; Last used message number for a verb (e.g. message
                     ; #R26509(#b17): TAPDANCE)

; Unused
u28615 DEFB 248

; Randomly select a message number
;
; Used by the routine at #R28357. Returns with a randomly chosen message number
; (different from the last one used) in #REGa. On entry, #REGa holds #b197 or
; #b198 depending on the type of message required: #b197 for a person or group
; of people, #b198 for a verb.
;
; A #b197 or #b198
@label=GETMSGNUM
c28616 LD C,A        ; {Point #REGbc at the relevant last used message number
@ssub=LD B,28613/256
 28617 LD B,111      ; (see #R28613)}
 28619 LD A,(BC)     ; {#REGe=last used message number (#b8-#b15, #b16-#b23)
 28620 LD E,A        ; }
 28621 AND 248       ; Discard bits 0-2
 28623 LD D,A        ; #REGd=#b8 or #b16
*28624 CALL 61823    ; Get a random number in #REGa
 28627 AND 7         ; {#REGa=message number (#b8-#b15, #b16-#b23)
 28629 ADD A,D       ; }
 28630 CP E          ; Is this the same message number as last time?
 28631 JR Z,28624    ; Jump back to try again if so
 28633 LD (BC),A     ; Store the randomly chosen message number for comparison
                     ; next time
 28634 RET           ;

; 'M' pressed - toggle message speed
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'M' is
; pressed.
@refs=61483
@label=MSGSPEED
c28635 LD A,(28612)  ; {Toggle the message display interval at #R28612 between
 28638 XOR 3         ; 4 (fast) and 7 (slow)
 28640 LD (28612),A  ; }
 28643 JP 60654      ; Make a sound effect

; Make the sound effect of a sniper firing
;
; Used by the routine at #R25118.
; .
; #AUDIO3(sniper.wav)(#FOR(162,254,,1)(n,56+13*n))
@label=FIRESOUND
c28646 LD DE,418     ; Prepare the sound effect parameters: #REGe=#b162
                     ; (initial pitch), #REGd=#b1 (pitch adjustment)
 28649 CALL 25088    ; Make the sound effect
 28652 AND A         ; Clear the carry flag to indicate that the sniper is no
                     ; longer firing
 28653 JP 25158      ; Update the sniper's sprite tile references

; Unused
u28656 NOP
@nowarn
 28657 LD A,(20654)  ; This is the display file address for the byte in the
                     ; top-left corner of the telephone icon; the byte is #b129
                     ; when the phone is ringing, or #b1 otherwise

; Update the telephone icon
;
; Used by the routine at #R29733. The main entry point is used to make the
; telephone appear to vibrate as if ringing.
@label=UPDPHONE
c28660 LD HL,28722   ; Point #REGhl at the graphic data for the telephone when
                     ; ringing (at #R28722)
 28663 NOP           ;
 28664 JR 28669      ;
; This entry point is also used by the routine at #R29733 to make the telephone
; appear still (as between rings, or when not ringing).
*28666 LD HL,28741   ; Point #REGhl at the graphic data for the telephone when
                     ; not ringing (at #R28741)
@nowarn
*28669 LD DE,20654   ; Point #REGde at the display file address of the top
                     ; pixel row of the top-left tile of the telephone icon
 28672 LD A,6        ; {Update the top six pixel rows of the top two tiles of
*28674 LDI           ; the telephone icon
 28676 LDI           ;
 28678 DEC E         ;
 28679 DEC E         ;
 28680 INC D         ;
 28681 DEC A         ;
 28682 JR NZ,28674   ; }
 28684 LD A,(HL)     ; {Update the bottom two pixel rows of the top-left tile
 28685 LD (DE),A     ; of the telephone icon
 28686 INC L         ;
 28687 INC D         ;
 28688 LD A,(HL)     ;
 28689 LD (DE),A     ; }
@bfix=LD B,5         ; There are five more pixel rows to update
 28690 LD B,3        ; There are three more pixel rows to update
@nowarn
 28692 LD DE,20686   ; Point #REGde at the display file address of the top
                     ; pixel row of the bottom-left tile of the telephone icon
*28695 INC L         ; {Update the top three pixel rows of the bottom-left tile
 28696 LD A,(HL)     ; of the telephone icon
 28697 LD (DE),A     ;
 28698 INC D         ;
 28699 DJNZ 28695    ; }
 28701 RET           ;

; Unused
s28702 DEFB 0

; Show or hide an icon in the icon panel
;
; Used by the routine at #R29668.
;
; E Attribute file address LSB
;
; The main entry point is used to show an icon in the icon panel.
@label=UPDICONS
c28703 LD A,48       ; #b48=PAPER 6: INK 0
 28705 JR 28709      ;
; This entry point is used by the routine at #R29668 to hide an icon in the
; icon panel.
*28707 LD A,54       ; #b54=PAPER 6: INK 6
; This entry point is used by the routine at #R30339 with #REGa=6 (PAPER 0: INK
; 6) to show an icon for an object that can be picked up (by pressing 'G').
*28709 LD D,90       ; Point #REGde at the attribute file address for the
                     ; top-left tile of the icon
 28711 LD (DE),A     ; {Set the attributes for the top two tiles of the icon
 28712 INC E         ;
 28713 LD (DE),A     ; }
 28714 SET 6,E       ; {Point #REGde at the attribute file address for the
 28716 RES 5,E       ; bottom-right tile of the icon}
 28718 LD (DE),A     ; {Set the attributes for the bottom two tiles of the icon
 28719 DEC E         ;
 28720 LD (DE),A     ; }
 28721 RET           ;

; Graphic data for the telephone when ringing
;
; Used by the routine at #R28660.
@label=PHONERING
b28722 DEFB 129,194  ; {Top six pixel rows of the top two tiles of the
 28724 DEFB 71,180   ; telephone icon
 28726 DEFB 11,112   ;
 28728 DEFB 11,176   ;
 28730 DEFB 93,196   ;
 28732 DEFB 156,194  ; }
 28734 DEFB 8        ; {Bottom two pixel rows of the top-left tile
 28735 DEFB 12       ; }
@bfix=               ; {Top five pixel rows of the bottom-left tile
 28736 DEFB 10       ; {Top three pixel rows of the bottom-left tile
 28737 DEFB 9        ;
@bfix=               ;
@bfix=DEFB 28
@bfix=DEFB 0         ; }
 28738 DEFB 28       ; }

; Unused
;
; These bytes are probably remnants of the graphic data for the telephone when
; ringing (see #R28722). That these bytes are unused may be a
; #BUG#extendedEarpiece(bug).
@bfix=!28739
u28739 DEFB 28,0

; Graphic data for the telephone when not ringing
;
; Used by the routine at #R28660.
@label=PHONEQUIET
b28741 DEFB 1,192    ; {Top six pixel rows of the top two tiles of the
 28743 DEFB 7,176    ; telephone icon
 28745 DEFB 11,112   ;
 28747 DEFB 11,176   ;
 28749 DEFB 9,192    ;
 28751 DEFB 28,192   ; }
 28753 DEFB 28       ; {Bottom two pixel rows of the top-left tile
 28754 DEFB 12       ; }
@bfix=               ; {Top five pixel rows of the bottom-left tile
 28755 DEFB 10       ; {Top three pixel rows of the bottom-left tile
 28756 DEFB 9        ;
@bfix=               ;
@bfix=DEFB 28
@bfix=DEFB 28        ; }
 28757 DEFB 8        ; }

; Unused
;
; These bytes are probably remnants of the graphic data for the telephone when
; not ringing (see #R28741). That these bytes are unused may be a
; #BUG#extendedEarpiece(bug).
@bfix=!28758
u28758 DEFB 28,28

; Initialise the icon panel, score box and message line
;
; Used by the routine at #R63662.
@label=INITSTATUS
@nowarn
c28760 LD HL,23208   ; {Set the attribute bytes of the icon panel to #b54 (INK
 28763 LD E,3        ; 6: PAPER 6), thus hiding every icon
*28765 LD BC,3092    ;
*28768 LD (HL),54    ;
 28770 INC L         ;
 28771 DJNZ 28768    ;
 28773 ADD HL,BC     ;
 28774 DEC E         ;
 28775 JR NZ,28765   ; }
 28777 LD HL,(65516) ; Collect the high score from #R65516
@nowarn
 28780 LD DE,20664   ; #REGde=display file address
 28783 CALL 28186    ; Print the high score
 28786 LD HL,0       ; The score starts at 0
@nowarn
 28789 LD DE,20696   ; #REGde=display file address
 28792 CALL 28186    ; Print the score
 28795 LD A,50       ; Sam's cash supply starts at $50
 28797 CALL 28306    ; Set and print the number of bucks
 28800 JP 29716      ; Clear the message line and display 8 first aid kits

; Check whether a character is on a roof with edges on each side
;
; Used by the routine at #R60812. Returns to the caller of that routine with
; #REGa holding 1 (go right), 2 (go left) or 3 (go up) if the character is on
; the roof of the police station or the apartment building next to no. 19 and
; is heading for the edge of that roof. Otherwise returns with the zero flag
; set if the character is standing outside the entrance to a shop or other
; building.
;
; A Identifier for the character's current location (see #R60726)
; H Character number (#b215-#b230)
; L #b12
@label=ROOFEDGES
c28803 CP 252        ; Is the character on the roof of the apartment building
                     ; next to no. 19?
 28805 JR Z,28811    ; Jump if so
 28807 CP 108        ; Is the character on the roof of the police station?
 28809 JR NZ,28816   ; Jump if not
*28811 INC A         ; #REGa=#b109 (police station) or #b253 (apartment
                     ; building next to no. 19)
 28812 CP (HL)       ; Is the character's destination on the edge of the roof
                     ; of either the police station or the apartment building
                     ; next to no. 19?
 28813 JR Z,28821    ; Jump if so
 28815 DEC A         ; #REGa=#b108 or #b252
*28816 AND 15        ; Keep only bits 0-3 of the location identifier
 28818 CP 2          ; Set the zero flag if the character is standing outside
                     ; the entrance to a shop or other building
 28820 RET           ;
; The character is on the roof of the apartment building next to no. 19 or on
; the roof of the police station, and his destination is on the edge of that
; roof.
*28821 POP BC        ; Drop the return address from the stack
 28822 LD L,10       ; Point #REGhl at byte #b10 of the character's buffer
 28824 LD A,(HL)     ; #REGa=character's destination x-coordinate
 28825 LD L,1        ; {Compare this with the character's current x-coordinate
 28827 CP (HL)       ; }
 28828 DEC HL        ; Point #REGhl at byte #b0 of the character's buffer
 28829 BIT 7,(HL)    ; Set the zero flag if the character is facing left
 28831 LD A,3        ; #REGa=3 (go up)
 28833 JR C,28838    ; Jump if the character is to the right of his destination
 28835 RET NZ        ; Return to the caller of #R60812 with #REGa=3 (go up) if
                     ; the character is to the left of his destination and
                     ; facing right
 28836 LD A,1        ; #REGa=1 (go right)
*28838 RET Z         ; Return to the caller of #R60812 with #REGa=1 (go right)
                     ; if the character is to the left of his destination and
                     ; facing left, or with #REGa=3 (go up) if the character is
                     ; to the right of his destination and facing left
 28839 DEC A         ; {Return to the caller of #R60812 with #REGa=2 (go left)
 28840 RET           ; if the character is to the right of his destination and
                     ; facing right}

; Unused
s28841 DEFB 0

; Check whether a policeman can spot Sam
;
; Used by the routine at #R29218. Compares the policeman's coordinates with
; Sam's, and returns with the carry flag set if they are close enough that the
; policeman has a chance of spotting Sam (if other conditions are favourable).
;
; H #b222 or #b223 (policeman)
@label=COPSEESAM
c28842 LD L,1        ; Point #REGhl at byte #b1 of the policeman's buffer
@ssub=LD A,(58880+1)
 28844 LD A,(58881)  ; #REGa=Sam's x-coordinate
 28847 SUB (HL)      ; Subtract the policeman's x-coordinate
 28848 DEC HL        ; Point #REGhl at byte #b0 of the policeman's buffer
 28849 JR NC,28859   ; Jump if the policeman's x-coordinate is less than or
                     ; equal to Sam's
 28851 NEG           ; #REGa=horizontal distance between Sam and the policeman
 28853 BIT 7,(HL)    ; Is the policeman facing left (and thus facing Sam)?
 28855 JR Z,28866    ; Jump if so
 28857 JR 28863      ;
*28859 BIT 7,(HL)    ; Is the policeman facing right (and thus facing Sam)?
 28861 JR NZ,28866   ; Jump if so
*28863 CP 3          ; Is the policeman (who is not facing Sam) at least 3
                     ; x-coordinates away from Sam?
 28865 RET NC        ; Return with the carry flag reset if so
*28866 CP 16         ; Is the policeman at least 16 x-coordinates away from
                     ; Sam?
 28868 RET NC        ; Return with the carry flag reset if so
; At this point, the policeman is either facing Sam and located less than 16
; x-coordinates away from him, or facing away from Sam and located less than 3
; x-coordinates away from him. Now we check the vertical distance between the
; two characters.
 28869 LD E,A        ; #REGe=horizontal distance between Sam and the policeman
 28870 LD L,2        ; Point #REGhl at byte #b2 of the policeman's buffer
@ssub=LD A,(58880+2)
 28872 LD A,(58882)  ; #REGa=Sam's y-coordinate
 28875 SUB (HL)      ; Subtract the policeman's y-coordinate
 28876 JR NC,28880   ; Jump if the policeman's y-coordinate is less than or
                     ; equal to Sam's
 28878 NEG           ;
*28880 LD D,A        ; #REGd=vertical distance between Sam and the policeman
 28881 ADD A,E       ; Add the horizontal distance between Sam and the
                     ; policeman
 28882 CP 33         ; Set the carry flag if the result is less than 33
 28884 RET           ;

; Unused
s28885 DEFB 0

; Check whether a character is visible to passers-by
;
; Used by the routine at #R29218. Returns with the zero flag set if the
; character is not inside any building, or is in the stairwell of the police
; station or one of the apartment buildings, or is on the catwalk, or is on the
; roof of a building.
;
; H Character number (#b215-#b230)
@label=CHRVISIBLE
c28886 LD L,4        ; Point #REGhl at byte #b4 of the character's buffer
 28888 BIT 0,(HL)    ; Is the character indoors?
 28890 RET Z         ; Return with the zero flag set if not
; The character is indoors, so examine his location more precisely.
 28891 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 28893 LD A,(HL)     ; #REGa=x (character's x-coordinate)
 28894 INC A         ; {#REGa=INT((x+1)/8)
 28895 AND 248       ; }
 28897 CP 8          ; {Return if 7<=x<=14 (the character is in the stairwell
 28899 RET Z         ; of the apartment building at the far left of town)}
 28900 CP 136        ; {Return if 135<=x<=142 (the character is in the
 28902 RET Z         ; stairwell of the police station)}
 28903 CP 192        ; {Return if 191<=x<=198 (the character is in the
 28905 RET Z         ; stairwell of the apartment building next to no. 19)}
 28906 CP 24         ; {Return if 23<=x<=30 (the character is on the catwalk)
 28908 RET Z         ; }
; The character is neither on the catwalk, nor in a stairwell that is visible
; from outside.
 28909 LD A,(HL)     ; #REGa=x (the character's x-coordinate)
@bfix=/INC L         ; #REGl=#b2
 28910 DEC L         ; #REGl=#b0 (this should be '#S/INC L/', so that #REGhl
                     ; points at the character's y-coordinate)
 28911 CP 56         ; {Jump if x<56 (the character is in no. 74 or the
 28913 JR C,28930    ; apartment building next to it)}
 28915 CP 104        ; {Return with the zero flag reset if 56<=x<=103 (the
 28917 RET C         ; character is in the hotel, whose roof is inaccessible)}
 28918 CP 123        ; {Jump if 104<=x<=122 (the character is in no. 31)
 28920 JR C,28934    ; }
 28922 CP 207        ; {Jump if 123<=x<=206 (the character is in the police
 28924 JR C,28930    ; station, no. 27 or the apartment building next to no.
                     ; 19)}
 28926 CP 222        ; {Jump if 207<=x<=221 (the character is in no. 19)
 28928 JR C,28934    ; }
; If we get here, then the character is in the apartment building at the far
; left of town, no. 74, the police station, no. 27, the apartment building next
; to no. 19, no. 17, or no. 15.
*28930 LD A,8        ; If the character's y-coordinate is greater than this,
                     ; he's inside (as opposed to on the roof)
 28932 JR 28936      ;
; If we get here, then the character is in no. 31 or no. 19.
*28934 LD A,14       ; If the character's y-coordinate is greater than this,
                     ; he's inside (as opposed to on the roof)
; #IF({fix}<2)||The next instruction is supposed to compare #REGa with the
; character's y-coordinate to see whether he's on the roof of a building (as
; opposed to inside it), but because of the erroneous '#S/DEC L/' instruction
; above, it instead compares #REGa with the character's animatory state. This
; is a #BUG#troubleHiding(bug).||
@bfix=               ; Compare #REGa (8 or 14) with the character's
@bfix=               ; y-coordinate
*28936 CP (HL)       ; Compare #REGa (8 or 14) with the character's animatory
                     ; state
 28937 RET C         ; Return with the zero flag reset if #REGa is smaller
 28938 XOR A         ; Set the zero flag (the character is visible)
 28939 RET           ;

; Unused
s28940 DEFS 2

; Check whether a character is close enough to Sam to pick him up
;
; Used by the routines at #R25074 and #R29361. Returns with the carry flag set
; if the character is facing Sam and close enough to him to pick him up, and
; Sam is not already being carried.
;
; H Character number (#b215-#b229)
@label=CHKNEARSAM
c28942 LD A,(32764)  ; Collect Sam's status flags from #R32764
 28945 DEC A         ; Now #REGa=0 if Sam's being carried at the moment
 28946 AND A         ; Clear the carry flag, and set the zero flag if Sam's
                     ; being carried
 28947 RET Z         ; Return with the carry flag reset if Sam's being carried
; Sam is not being carried at the moment. Compare his x- and y-coordinates with
; those of the character chasing him.
 28948 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 28950 CALL 25944    ; Collect Sam's x- and y-coordinates in #REGe and #REGd
 28953 NOP           ;
 28954 LD A,(HL)     ; #REGa=character's y-coordinate
 28955 INC A         ; {Is the character more than one y-coordinate above or
 28956 SUB D         ; below Sam?
 28957 CP 3          ; }
 28959 RET NC        ; Return if so
 28960 DEC L         ; #REGl=#b1
 28961 LD A,(HL)     ; #REGa=character's x-coordinate
 28962 DEC L         ; #REGl=#b0
 28963 BIT 7,(HL)    ; Is the character facing left?
 28965 JR Z,28969    ; Jump if so
 28967 ADD A,2       ; #REGa=2+character's x-coordinate
*28969 SUB E         ; {Is the character facing Sam and no more than two
 28970 CP 3          ; x-coordinates away from him?}
 28972 RET NC        ; Return if not
; The character is facing Sam, no more than one y-coordinate above or below
; him, and no more than two x-coordinates to the left or right of him. Now we
; compare the z-coordinates.
@ssub=LD A,(58880+4)
 28973 LD A,(58884)  ; #REGa=Sam's z-coordinate
 28976 LD L,4        ; {Set the zero flag if the character's z-coordinate
 28978 CP (HL)       ; matches Sam's}
*28979 SCF           ; {Return with the carry flag set if the character can
 28980 RET Z         ; pick up Sam at his current location}
; The z-coordinates don't match. However, the character will still be able to
; pick up Sam if they are both standing at or near the open entrance to a
; building (one inside and the other outside).
 28981 PUSH HL       ; Save the character number briefly
@ssub=LD H,58880/256
 28982 LD H,230      ; #b230=Sam
 28984 CALL 60179    ; Obtain descriptors for Sam's current location
 28987 POP HL        ; Restore the character number to #REGh
 28988 CP 3          ; Is Sam standing at the open entrance to a building?
 28990 JR Z,28979    ; Jump if so (Sam can be picked up here)
 28992 PUSH HL       ; Save the character number briefly
 28993 CALL 60179    ; Obtain descriptors for the character's current location
 28996 POP HL        ; Restore the character number to #REGh
 28997 CP 3          ; Is the character standing at the open entrance to a
                     ; building?
 28999 JR Z,28979    ; Jump if so (the character can pick Sam up here)
 29001 AND A         ; Clear the carry flag (Sam cannot be picked up)
 29002 RET           ;

; Unused
s29003 DEFB 0

; Check whether a character is immobilised by a blown fuse
;
; Used by the routine at #R61948. Returns with the carry flag set if the
; character is in an area affected by a blown fuse.
;
; H Character number (#b215-#b229)
@label=FROZEN
c29004 LD L,4        ; Point #REGhl at byte #b4 of the character's buffer
 29006 BIT 0,(HL)    ; Is the character indoors?
 29008 RET Z         ; Return if not
 29009 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 29011 LD A,(HL)     ; #REGa=character's x-coordinate
 29012 INC A         ; {Point #REGde at the entry in the table at #R65472 that
 29013 AND 248       ; corresponds to the 8-tile wide column of the play area
 29015 RRA           ; containing the character
 29016 RRA           ;
 29017 RRA           ;
@ssub=ADD A,65472%256
 29018 ADD A,192     ;
 29020 LD E,A        ;
@ssub=LD D,65472/256
 29021 LD D,255      ; }
 29023 LD A,(DE)     ; {Point #REGde at the delay counter for the fuse that is
 29024 LD E,A        ; in the same building as the character (see #R32674)
@ssub=LD D,32674/256
 29025 LD D,127      ; }
 29027 LD A,(DE)     ; Pick up the blown fuse delay counter in #REGa
 29028 AND A         ; {Return with the carry flag reset if there is no fuse
 29029 RET Z         ; here, or the fuse is not currently blown}
 29030 INC L         ; #REGl=#b2
 29031 LD A,E        ; #REGa=#b162-#b167
 29032 LD E,0        ; For no. 74 or the hotel, use this y-coordinate for
                     ; comparison (the roofs of these buildings are
                     ; inaccessible)
 29034 CP 164        ; Is it the fuse at no. 74 or the hotel?
 29036 JR C,29046    ; Jump if so
 29038 LD E,16       ; For no. 31 or no. 19, use this y-coordinate for
                     ; comparison (any character on the roof will be unaffected
                     ; by a blown fuse)
 29040 CP 166        ; Is it the fuse at no. 31 or no. 19?
 29042 JR C,29046    ; Jump if so
 29044 LD E,10       ; For no. 17 or no. 15, use this y-coordinate for
                     ; comparison (any character on the roof will be unaffected
                     ; by a blown fuse)
*29046 LD A,E        ; #REGa=0 (no. 74 or the hotel), 16 (no. 31 or no. 19), or
                     ; 10 (no. 17 or no. 15)
 29047 CP (HL)       ; Compare this value with the character's y-coordinate
 29048 RET C         ; Return with the carry flag set if the character is
                     ; inside the building (as opposed to on the roof)
 29049 XOR A         ; Clear the carry flag
 29050 RET           ;

; Unused
s29051 DEFB 0

; Make a policeman switch a light on if possible
;
; Used by the routine at #R29361.
;
; H #b222 or #b223 (policeman)
@label=COPLIGHT
c29052 CALL 62518    ; Is the policeman standing next to a light switch?
 29055 RET Z         ; Return if not
 29056 BIT 5,A       ; Set the zero flag if the light switch affects the light
                     ; in only one window or window-pair
 29058 LD A,(BC)     ; #REGa=window flags for the policeman's location
 29059 JP NZ,62627   ; Jump if the light switch affects the light in more than
                     ; one window or window-pair
 29062 BIT 5,A       ; Is the light switch here in the 'on' position?
 29064 RET Z         ; Return if so
 29065 JP 62615      ; Switch the light on

; Unused
s29068 DEFS 4

; Set a character's destination to Sam's current location
;
; Used by the routines at #R29088 and #R31362. Copies Sam's coordinates and
; location identifier into bytes #b10, #b11 and #b12 of the character's buffer.
;
; H Character number (#b215-#b229)
@label=DESTTOSAM
c29072 CALL 25944    ; Get Sam's x-, y- and z-coordinates in #REGe, #REGd and
                     ; #REGa
 29075 LD C,A        ; #REGc=Sam's z-coordinate
; This entry point is used by the routines at #R29100 and #R29361 with
; #REGh=#b222 or #b223 (a policeman) and #REGe, #REGd and #REGc holding the
; destination x-, y- and z-coordinates.
*29076 LD L,10       ; {Copy the coordinates into bytes #b10 and #b11 of the
 29078 LD (HL),E     ; character's buffer, thus making it his destination
 29079 INC L         ;
 29080 LD (HL),D     ; }
; This entry point is used by the routine at #R31944 with #REGde holding the
; character's destination y- and x-coordinates (copied from his command list)
; and #REGc=1.
*29081 CALL 60734    ; Obtain an identifier for the location whose coordinates
                     ; are in #REGd, #REGe and #REGc
 29084 LD L,12       ; {Copy the location identifier into byte #b12 of the
 29086 LD (HL),A     ; character's buffer}
 29087 RET           ;

; Set a policeman's destination to Sam's current location
;
; Used by the routines at #R29218 and #R31236. Copies Sam's coordinates and
; location identifier into bytes #b10, #b11 and #b12 of the policeman's buffer,
; and also to #R32731 (where they can be checked by the other policeman).
;
; H #b222 or #b223 (policeman), or #b127 (when coming from #R31236)
@label=COPTOSCL
c29088 CALL 29072    ; Set the policeman's destination to Sam's current
                     ; location (when coming from #R29218)
; This entry point is used by the routine at #R29100 with #REGhl pointing at
; byte #b12 of a policeman's buffer.
@ssub=LD DE,32731+2
@ignoreua
*29091 LD DE,32733   ; {Copy either (a) bytes #b10, #b11 and #b12 of the
 29094 LD BC,3       ; policeman's buffer (which hold his destination
 29097 LDDR          ; coordinates and location identifier), or (b) Sam's
                     ; coordinates and location identifier (just copied into
                     ; #w32522-#w32524 when coming from #R31236) to #R32731}
 29099 RET           ;

; Send a policeman to Sam's last known whereabouts
;
; Continues from the routine at #R29559. The policeman recently spotted Sam
; while he was wearing a disguise unknown to the police; this routine sends
; that policeman back to where he first spotted Sam when the disguise becomes
; known.
;
; H #b222 or #b223 (policeman)
@label=COPTOSLKW
c29100 LD L,31       ; {Pick up byte #b31 of the policeman's buffer
 29102 LD A,(HL)     ; }
 29103 AND 63        ; {#REGd=Sam's y-coordinate when he was spotted by the
 29105 LD D,A        ; policeman while wearing a disguise unknown to the police
                     ; }
 29106 LD A,(HL)     ; Pick up byte #b31 again
 29107 LD C,4        ; Initialise the destination z-coordinate to 4
 29109 AND 192       ; Was Sam's z-coordinate 4 (on the sidewalk or road) when
                     ; he was spotted?
 29111 JR Z,29116    ; Jump if so
 29113 RLCA          ; {Move bits 6 and 7 of #REGa into bits 0 and 1
 29114 RLCA          ; }
 29115 LD C,A        ; #REGc=Sam's z-coordinate when he was spotted
*29116 DEC L         ; #REGl=#b30
 29117 LD E,(HL)     ; #REGe=Sam's x-coordinate when he was spotted
 29118 CALL 29076    ; Set the policeman's destination coordinates to
                     ; (#REGe,#REGd)
 29121 CALL 29091    ; Copy the destination coordinates and location identifier
                     ; to #R32731
 29124 LD L,29       ; Point #REGhl at byte #b29 of the policeman's buffer
; This entry point is used by the routine at #R29218.
*29126 LD A,(HL)     ; Pick up byte #b29 of the policeman's buffer
 29127 LD (HL),0     ; Set byte #b29 of the policeman's buffer to 0 now that
                     ; the disguise Sam was wearing is known to the police
 29129 RLCA          ; {Move bits 5-7 of #REGa (which hold the ID of the
 29130 RLCA          ; disguise that Sam was wearing) into bits 0-2
 29131 RLCA          ; }
 29132 AND 7         ; Keep only bits 0-2
@ssub=ADD A,40981/256
 29134 ADD A,160     ; {Now #REGa=#b64, #b32, #b16, #b8, #b4, #b2, or #b1, with
 29136 LD D,A        ; the set bit corresponding to the disguise that Sam was
@ssub=LD E,40981%256
 29137 LD E,21       ; wearing
 29139 LD A,(DE)     ; }
 29140 LD DE,32744   ; #R32744 holds the disguise status flags
 29143 EX DE,HL      ; {Set the appropriate bit at #R32744, making the disguise
 29144 OR (HL)       ; known to the police
 29145 LD (HL),A     ; }
 29146 JP 32009      ; Set the attribute bytes for Sam's current disguise in
                     ; the bottom right corner of the screen

; Make a gangster or policeman pick Sam up
;
; Used by the routines at #R25081, #R31362 and #R31642.
;
; H Character number (#b215-#b229)
@label=LIFTSAM
c29149 XOR A         ; {#R32666 holds the ID of the telephone that Sam is
 29150 LD (32666),A  ; calling; set this to 0, effectively making Sam hang up}
 29153 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 29155 LD A,(HL)     ; #REGa=character's animatory state
 29156 AND 112       ; Discard bits 0-3 and 7
 29158 SUB 16        ; #AS16: Is this character a policeman?
 29160 JR NZ,29165   ; Jump if not
 29162 LD (32747),A  ; Clear all flags at #R32747 (Sam is no longer wanted by
                     ; the police, because he's just been arrested)
*29165 LD A,1        ; {Set bit 0 of Sam's status flags at #R32764, indicating
 29167 LD (32764),A  ; that he's being carried}
 29170 BIT 0,(HL)    ; Is the character midstride?
 29172 CALL NZ,60506 ; If so, move the character from the midstride position
                     ; and update the SRB
 29175 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 29178 ADD A,8       ; #REGa=animatory state of the character while carrying
                     ; Sam
 29180 CALL 59861    ; Update the character's animatory state and location and
                     ; update the SRB
 29183 LD L,9        ; {Remove the address of the primary command routine from
 29185 LD (HL),0     ; bytes #b8 and #b9 of the character's buffer, thus moving
                     ; to the next command in the command list}
 29187 LD HL,1       ; {Set Sam's main action timer (in byte #b8 of his buffer)
@ssub=LD (58880+8),HL
 29190 LD (58888),HL ; to 1, and his midstride/mid-action timer (in byte #b9)
                     ; to 0}
 29193 RET           ;

; Vertical and horizontal ranges within which Sam can be spotted by a policeman
;
; Used by the routine at #R29218. This data table consists of eight entries of
; three bytes each. The exact entry used depends on Sam's and the policeman's
; locations, and whether Sam's disguise is known to the police. A policeman
; will be able to spot Sam if the vertical distance between them is no greater
; than the first byte, the horizontal distance between them is no greater than
; the second byte, and the sum of the horizontal and vertical distances between
; them is no greater than the third byte.
; .
; One of the first two entries is used when Sam is neither visible to
; passers-by (according to the routine at #R28886) nor standing next to a light
; switch in the 'on' position, and the policeman is not visible to passers-by.
@label=VISRANGES
b29194 DEFB 1,7,7    ; This entry is used when Sam's disguise is unknown to the
                     ; police
 29197 DEFB 3,14,14  ; This entry is used when Sam's disguise is known to the
                     ; police
; One of the next two entries is used when Sam is neither visible to passers-by
; nor standing next to a light switch in the 'on' position, and the policeman
; is visible to passers-by.
 29200 DEFB 2,2,2    ; This entry is used when Sam's disguise is unknown to the
                     ; police
 29203 DEFB 3,9,9    ; This entry is used when Sam's disguise is known to the
                     ; police
; One of the next two entries is used when Sam is standing next to a light
; switch in the 'on' position.
 29206 DEFB 4,12,12  ; This entry is used when Sam's disguise is unknown to the
                     ; police
 29209 DEFB 4,20,20  ; This entry is used when Sam's disguise is known to the
                     ; police
; One of the next two entries is used when either (a) Sam is visible to
; passers-by, or (b) Sam is standing next to a light switch in the 'on'
; position and the policeman is visible to passers-by.
 29212 DEFB 9,9,9    ; This entry is used when Sam's disguise is unknown to the
                     ; police
 29215 DEFB 32,24,32 ; This entry is used when Sam's disguise is known to the
                     ; police

; Make a policeman start chasing Sam if appropriate
;
; Used by the routine at #R29559. Returns with the carry flag reset if the
; policeman spots, recognises and starts chasing Sam.
;
; H #b222 or #b223 (policeman)
@label=COPTOSAM
c29218 CALL 28842    ; Is Sam close enough that the policeman has a chance of
                     ; spotting him?
 29221 CCF           ; {Return with the carry flag set if not
 29222 RET C         ; }
 29223 PUSH DE       ; #REGe and #REGd hold the horizontal and vertical
                     ; distances between Sam and the policeman; save these
                     ; briefly
 29224 PUSH HL       ; Save the policeman's character number briefly
@ssub=LD H,58880/256
 29225 LD H,230      ; #b230=Sam
 29227 CALL 28886    ; Check whether Sam is visible to passers-by
 29230 LD B,6        ; Prepare #REGb for the case where Sam is visible to
                     ; passers-by
 29232 JR Z,29248    ; Jump if Sam is visible to passers-by
 29234 CALL 62518    ; Is Sam standing next to a light switch?
 29237 JR Z,29247    ; Jump if not
 29239 LD A,(BC)     ; #REGa=window flags for Sam's location
 29240 AND 32        ; Set the zero flag if the light switch for this window is
                     ; in the 'on' position
 29242 LD A,4        ; Prepare #REGa for the case where Sam is standing next to
                     ; a light switch in the 'on' position
 29244 JR Z,29247    ; Jump if the light switch for this window is in the 'on'
                     ; position
 29246 XOR A         ; Prepare #REGa for the case where Sam is neither visible
                     ; to passers-by nor standing next to a light switch in the
                     ; 'on' position
*29247 LD B,A        ; #REGb=0, 4 or 6
; Now #REGb=6 (if Sam is visible to passers-by), or 4 (if Sam is standing next
; to a light switch that is in the 'on' position), or 0 otherwise.
*29248 CALL 29332    ; Check whether Sam's disguise is known to the police
 29251 POP HL        ; Restore the policeman's character number to #REGh
 29252 POP DE        ; Restore the horizontal and vertical distances between
                     ; Sam and the policeman to #REGe and #REGd
 29253 LD A,B        ; #REGa=0, 1, 4, 5, 6 or 7
 29254 CP 6          ; Is Sam visible to passers-by?
 29256 JR NC,29265   ; Jump if so
 29258 CALL 28886    ; Is the policeman visible to passers-by?
 29261 JR NZ,29265   ; Jump if not
 29263 INC B         ; {#REGb=2, 3, 6 or 7
 29264 INC B         ; }
*29265 LD A,B        ; #REGa=0-7
 29266 LD L,A        ; Save this value in #REGl
 29267 ADD A,A       ; {Point #REGbc at an entry in the table at #R29194
 29268 ADD A,B       ;
 29269 ADD A,10      ;
 29271 LD C,A        ;
@ssub=LD B,29194/256
 29272 LD B,114      ; }
 29274 LD A,(BC)     ; Pick up the first byte of the entry
 29275 CP D          ; Compare it with the vertical distance between Sam and
                     ; the policeman
 29276 RET C         ; Return (with the carry flag set) if the vertical
                     ; distance is greater
 29277 INC C         ; {Pick up the second byte of the entry
 29278 LD A,(BC)     ; }
 29279 CP E          ; Compare it with the horizontal distance between Sam and
                     ; the policeman
 29280 RET C         ; Return (with the carry flag set) if the horizontal
                     ; distance is greater
 29281 INC C         ; {Pick up the third byte of the entry
 29282 LD A,(BC)     ; }
 29283 SUB D         ; {Subtract both the horizontal and vertical distances
 29284 SUB E         ; between Sam and the policeman}
 29285 RET C         ; Return (with the carry flag set) if the result is
                     ; negative
 29286 BIT 0,L       ; Bit 0 of #REGl is set if Sam's current disguise (if any)
                     ; is known to the police
 29288 LD L,29       ; Point #REGhl at byte #b29 of the policeman's buffer
 29290 JR NZ,29322   ; Jump if Sam's current disguise is known to the police
; Sam has been spotted by the policeman, but he's wearing a disguise that is
; not (yet) known to the police.
 29292 LD A,(32713)  ; Collect Sam's current disguise ID (1-7) from #R32713
 29295 RRCA          ; {Move bits 0-2 into bits 5-7
 29296 RRCA          ;
 29297 RRCA          ; }
 29298 LD C,A        ; Copy these disguise identifier bits into #REGc
 29299 LD A,(HL)     ; Pick up byte #b29 of the policeman's buffer
 29300 AND 31        ; Keep only bits 0-4 (the disguise timeout counter)
 29302 JR NZ,29306   ; Jump unless they are all 0
 29304 LD A,16       ; The disguise timeout counter will be initialised to #b16
*29306 OR C          ; Copy the disguise identifier bits from #REGc into bits
                     ; 5-7 of #REGa
 29307 LD (HL),A     ; Copy the disguise identifier bits and the timeout
                     ; counter into byte #b29 of the policeman's buffer
 29308 INC L         ; #REGl=#b30
 29309 CALL 25944    ; Determine Sam's location
 29312 LD (HL),E     ; Copy Sam's x-coordinate into byte #b30 of the
                     ; policeman's buffer
 29313 INC L         ; #REGl=#b31
 29314 AND 3         ; #REGa=0 if z (Sam's z-coordinate) is 4, 2 if z is 2, or
                     ; 1 if z is 1
 29316 RRCA          ; {#REGa=#b0 if z=4, #b128 (bit 7 set) if z=2, or #b64
 29317 RRCA          ; (bit 6 set) if z=1}
 29318 OR D          ; Copy Sam's y-coordinate into bits 0-5 of #REGa
 29319 LD (HL),A     ; Copy this value into byte #b31 of the policeman's buffer
 29320 SCF           ; Set the carry flag: the policeman is not chasing Sam
 29321 RET           ;
; Sam has been spotted by the policeman, and his current disguise (if any) is
; known to the police.
*29322 LD A,(HL)     ; Collect byte #b29 of the policeman's buffer
 29323 AND A         ; Is there a disguise ID in bits 5-7?
 29324 CALL NZ,29126 ; If so, make that disguise known to the police (if it
                     ; isn't already)
 29327 CALL 29088    ; Set the policeman's destination to Sam's current
                     ; location
 29330 AND A         ; Clear the carry flag to indicate that the policeman is
                     ; now chasing Sam
 29331 RET           ;

; Check whether Sam's disguise is known to the police
;
; Used by the routines at #R29218 and #R32009. Returns with the appropriate
; attribute byte to use for Sam's current disguise in #REGa. Also sets bit 0 of
; #REGb if Sam's disguise is known to the police.
;
; B 0, 4 or 6 (when called from #R29218)
@label=CHKGUISE
c29332 LD A,(32713)  ; #REGa=Sam's current disguise ID (0-7)
@ssub=ADD A,40981/256
 29335 ADD A,160     ; {Byte #b21 of pages #b160-#b167 holds the values #b128,
 29337 LD H,A        ; #b64, #b32, #b16, #b8, #b4, #b2 and #b1
@ssub=LD L,40981%256
 29338 LD L,21       ; }
 29340 LD A,(32744)  ; Collect the disguise status flags from #R32744
 29343 AND (HL)      ; Set the zero flag if this disguise is unknown to the
                     ; police
@nowarn
 29344 LD HL,23229   ; #w23229 holds the attribute byte for the top-left tile
                     ; of Sam's disguise in the bottom right of the screen
 29347 LD A,79       ; #b79=INK 7: PAPER 1: BRIGHT 1
 29349 RET Z         ; Return if this disguise is unknown to the police
 29350 INC B         ; Set bit 0 of #REGb to indicate that Sam's disguise is
                     ; known to the police
 29351 LD A,87       ; #b87=INK 7: PAPER 2: BRIGHT 1
 29353 RET           ;

; Control a policeman (1)
;
; Used by the command list at #R64756. Makes the policeman begin patrol duty,
; and chase and pick up Sam when appropriate.
;
; H #b222 or #b223 (policeman)
@refs=61948
@label=MVCOP1
c29354 LD L,8        ; {Change the address of the primary command routine in
@ssub=LD (HL),29361%256
 29356 LD (HL),177   ; bytes #b8 and #b9 of the policeman's buffer to #R29361}
 29358 JP 29536      ; Send the policeman to a randomly chosen spot on the
                     ; sidewalk or road

; Control a policeman (2)
;
; The address of this primary command routine is placed into bytes #b8 and #b9
; of a policeman's buffer by the routine at #R29354. It makes the policeman
; continue patrol duty, and chase and pick up Sam when appropriate.
;
; H #b222 or #b223 (policeman)
@refs=61948
@label=MVCOP2
c29361 CALL 63128    ; Exit now if the policeman is midstride
 29364 CALL 31998    ; {Is Sam wanted by the police at the moment?
 29367 RRA           ; }
 29368 JR NC,29476   ; Jump if not
 29370 LD L,8        ; {Change the address of the primary command routine in
@ssub=LD (HL),29374%256
 29372 LD (HL),190   ; bytes #b8 and #b9 of the policeman's buffer to #R29374
                     ; (below)}
; This entry point is used when the policeman is not chasing Sam.
*29374 CALL 63128    ; Exit now if the policeman is midstride
 29377 CALL 31998    ; {Is Sam wanted by the police at the moment?
 29380 RRA           ; }
 29381 JR C,29397    ; Jump if so
 29383 LD L,29       ; {Clear any disguise identifier and timeout counter in
 29385 LD (HL),0     ; byte #b29 of the policeman's buffer}
 29387 LD L,3        ; {Reset bit 7 of byte #b3 of the policeman's buffer (no
 29389 RES 7,(HL)    ; need to run if Sam's not wanted by the police)}
 29391 LD L,8        ; {Change the address of the primary command routine in
@ssub=LD (HL),29361%256
 29393 LD (HL),177   ; bytes #b8 and #b9 of the policeman's buffer to #R29361}
 29395 JR 29476      ; Determine the policeman's next move
; Sam is wanted by the police.
*29397 CALL 29559    ; Make the policeman start chasing Sam if he spots him, or
                     ; go to Sam's last known whereabouts if Sam's disguise has
                     ; become known to the police
 29400 JR NC,29419   ; Jump if the policeman is now doing either of those
                     ; things
 29402 LD DE,32732   ; #R32732 holds the y-coordinate of the location the
                     ; police should be heading for to get Sam
 29405 LD A,(DE)     ; Pick it up in #REGa
 29406 AND A         ; Do the police know where they should be heading to get
                     ; Sam?
 29407 JR Z,29476    ; Jump if not to make the policeman continue to go about
                     ; his normal business
 29409 DEC E         ; #REGde=#R32731
 29410 LD BC,3       ; {Copy the coordinates and location identifier of the
 29413 LD L,10       ; spot to which the police should be heading to get Sam
 29415 EX DE,HL      ; into byte #b10-#b12 of the policeman's buffer, thus
 29416 LDIR          ; making it his destination
 29418 EX DE,HL      ; }
*29419 LD L,3        ; {Set bit 7 of byte #b3 of the policeman's buffer (to
 29421 SET 7,(HL)    ; make him run)}
 29423 LD L,8        ; {Change the address of the primary command routine in
@ssub=LD (HL),29429%256
 29425 LD (HL),245   ; bytes #b8 and #b9 of the policeman's buffer to #R29429
                     ; (below)}
 29427 JR 29476      ;
; This entry point is used when the policeman is chasing Sam or heading to his
; last known whereabouts.
@label=CHASINGSAM
 29429 CALL 31998    ; {Should the police be chasing Sam at the moment?
 29432 RRA           ; }
 29433 JR NC,29374   ; Jump if not
 29435 LD A,(32713)  ; Collect the ID of Sam's current disguise from #R32713
@ssub=ADD A,40981/256
 29438 ADD A,160     ; {#REGb=#b160-#b167
 29440 LD B,A        ; }
 29441 EX DE,HL      ; Transfer the policeman's character number to #REGd
                     ; briefly
@ssub=LD C,40981%256
 29442 LD C,21       ; Point #REGbc at byte #b21 of one of the pages
                     ; #b160-#b167, which hold the values #b128, #b64, #b32,
                     ; #b16, #b8, #b4, #b2 and #b1
 29444 LD HL,32744   ; The disguise status flags are stored at #R32744
 29447 LD A,(BC)     ; {Set the zero flag if Sam's disguise is unknown to the
 29448 AND (HL)      ; police}
 29449 EX DE,HL      ; Transfer the policeman's character number back to #REGh
 29450 JR Z,29467    ; Jump if Sam's disguise is unknown to the police
 29452 CALL 28942    ; Is the policeman close enough to Sam to pick him up?
 29455 JR NC,29467   ; Jump if not
 29457 XOR A         ; {Clear the y-coordinate of the spot to which the police
 29458 LD (32732),A  ; should run to get Sam at #R32732 (Sam has been caught)}
 29461 LD L,29       ; {Clear any disguise ID and timeout counter in byte #b29
 29463 LD (HL),A     ; of the policeman's buffer}
 29464 JP 31642      ; End the game if Sam has less than $46, or make the
                     ; policeman pick Sam up
; Sam's disguise is unknown to the police, or the policeman is not close enough
; to Sam to pick him up.
*29467 CALL 63128    ; Exit now if the policeman is midstride
 29470 CALL 29559    ; Make the policeman start chasing Sam if his disguise
                     ; becomes known
 29473 CALL 29052    ; Make the policeman switch a light on if possible
*29476 CALL 60812    ; Determine the next move the policeman should make to
                     ; reach his destination
; This entry point is used by the routine at #R62976 with #REGa=1-6.
*29479 CP 5          ; Is the character standing behind or in front of a closed
                     ; door?
 29481 JP NC,63100   ; Jump if so
 29484 AND A         ; Is the character already at his destination?
 29485 JP NZ,63036   ; Jump if not
; The policeman has reached his destination.
 29488 LD L,8        ; {Collect the LSB of the primary command routine address
 29490 LD A,(HL)     ; from byte #b8 of the policeman's buffer}
 29491 CP 245        ; Is the primary command routine address #R29429 (which is
                     ; true if the policeman was either chasing Sam or heading
                     ; towards his last known whereabouts)?
 29493 JR C,29536    ; If not, send the policeman to a randomly chosen spot on
                     ; the sidewalk or road
 29495 LD DE,32732   ; {Collect the y-coordinate of the location to which the
 29498 LD A,(DE)     ; police should run to get Sam from #R32732}
 29499 AND A         ; Do the police know where to run to get Sam?
 29500 JR Z,29515    ; Jump if not
 29502 LD L,2        ; Point #REGhl at byte #b2 of the policeman's buffer
 29504 CP (HL)       ; Compare the policeman's y-coordinate with that of the
                     ; spot to which the police should run to get Sam
 29505 DEC DE        ; #REGde=#w32731
 29506 JR NZ,29525   ; Jump unless the policeman's y-coordinate matches
 29508 DEC L         ; #REGl=#b1
 29509 LD A,(DE)     ; #REGa=x-coordinate of the spot to which the police
                     ; should run to get Sam
 29510 SUB (HL)      ; Does it match the policeman's x-coordinate?
 29511 JR NZ,29525   ; Jump if not
 29513 INC E         ; {Set #R32732 to 0 now that a policeman has made it to
 29514 LD (DE),A     ; the spot to which the police should run to get Sam}
*29515 LD L,3        ; {Reset bit 7 of byte #b3 of the policeman's buffer (to
 29517 RES 7,(HL)    ; make him stop running)}
 29519 LD L,8        ; {Change the address of the primary command routine in
@ssub=LD (HL),29374%256
 29521 LD (HL),190   ; bytes #b8 and #b9 of the policeman's buffer to #R29374
                     ; (above)}
 29523 JR 29536      ; Send the policeman to a randomly chosen spot on the
                     ; sidewalk or road
*29525 LD L,10       ; {Copy the coordinates and location identifier of the
 29527 LD BC,3       ; spot to which the police should run to get Sam from
 29530 EX DE,HL      ; #R32731 into bytes #b10-#b12 of the policeman's buffer,
 29531 LDIR          ; thus making it his destination}
 29533 EX DE,HL      ; Point #REGhl back at the policeman's buffer
 29534 JR 29476      ; Determine the policeman's next move
; This entry point is used by the routine at #R29354. It sets the policeman's
; destination to a randomly chosen spot on the sidewalk or road.
*29536 CALL 61823    ; Get a random number in #REGa
@label=COPDESTOR
 29539 OR 0          ; The operand of this #S/OR/ instruction is changed by the
                     ; routine at #R29952: to #b0 (using the event entry at
                     ; #R24544), or to #b192 (using the event entry at #R24727)
                     ; to keep the policeman close to Sam's office
 29541 AND 253       ; Discard bit 1
 29543 LD E,A        ; Copy this x-coordinate to #REGe
 29544 CALL 60165    ; Set the carry flag if there is no sidewalk at this
                     ; x-coordinate
 29547 ADC A,34      ; {#REGa=34 (if there is sidewalk) or 35 (if there is no
 29549 SUB E         ; sidewalk)}
 29550 LD D,A        ; Copy this y-coordinate to #REGd
 29551 LD C,0        ; Clear bit 0 of #REGc to indicate that the destination is
                     ; not indoors
 29553 CALL 29076    ; Set the policeman's destination to the coordinates in
                     ; #REGe, #REGd and #REGc
 29556 JR 29476      ; Determine the policeman's next move

; Unused
s29558 DEFB 0

; Make a policeman chase Sam or go to his last known whereabouts if appropriate
;
; Used by the routine at #R29361. Returns with the carry flag reset if the
; policeman starts either chasing Sam, or returning to where he first spotted
; Sam wearing a disguise that has just become known to the police.
;
; H #b222 or #b223 (policeman)
@label=CHASESAM
c29559 CALL 29218    ; Make the policeman start chasing Sam if appropriate
 29562 RET NC        ; Return if the policeman is now chasing Sam
 29563 LD L,29       ; {Pick up byte #b29 of the policeman's buffer
 29565 LD A,(HL)     ; }
 29566 AND A         ; Was Sam recently spotted by the policeman while wearing
                     ; a disguise that is unknown to the police?
 29567 SCF           ; {Return with the carry flag set if not
 29568 RET Z         ; }
 29569 DEC (HL)      ; Decrement the disguise timeout counter in bits 0-4 of
                     ; byte #b29 of the policeman's buffer
 29570 LD A,(HL)     ; Pick up the result
 29571 AND 31        ; Has the disguise timeout counter reached 0 (meaning that
                     ; the disguise should now become known to the police)?
 29573 SCF           ; {Return with the carry flag set if not
 29574 RET NZ        ; }
 29575 JP 29100      ; Make the disguise known to the police, and send the
                     ; policeman back to where he first spotted Sam wearing the
                     ; disguise

; Check whether Sam or a gangster is inside a region
;
; Used by the routines at #R29597 and #R31362. On entry, #REGhl points at the
; first or second entry in a table of region definitions (at #R64780, #R64806,
; #R64836, #R64868 or #R64892) used by a gangster who is on the lookout for
; Sam. On exit, the carry flag is set if Sam or the gangster is outside the
; region.
;
; D Gangster's character number (#b215-#b224), or #b230 (Sam)
; HL Address of a region definition
@label=CHKREGION
c29578 LD E,1        ; {#REGa=Sam's or the gangster's x-coordinate
 29580 LD A,(DE)     ; }
 29581 CP (HL)       ; Is Sam or the gangster to the left of the region?
 29582 RET C         ; Return with the carry flag set if so
 29583 INC HL        ; Point #REGhl at the upper x-coordinate
 29584 CP (HL)       ; Is Sam or the gangster to the right of the region?
 29585 CCF           ; {Return with the carry flag set if so
 29586 RET C         ; }
 29587 INC HL        ; Point #REGhl at the lower y-coordinate
 29588 INC E         ; {#REGa=Sam's or the gangster's y-coordinate
 29589 LD A,(DE)     ; }
 29590 CP (HL)       ; Is Sam or the gangster above the region?
 29591 RET C         ; Return with the carry flag set if so
 29592 INC HL        ; Point #REGhl at the upper y-coordinate
 29593 CP (HL)       ; Compare it with Sam's or the gangster's y-coordinate
 29594 INC HL        ; Point #REGhl at either the disguise ID, or the first
                     ; byte of the second entry in the table of region
                     ; definitions
 29595 CCF           ; Set the carry flag if Sam or the gangster is below the
                     ; region
 29596 RET           ;

; Check whether a gangster should start chasing Sam
;
; Used by the routine at #R31319. Returns with the carry flag reset if Sam is
; close enough (and not disguised well enough) that the gangster should start
; chasing him, and the appropriate command list offset in #REGa.
;
; H Gangster's character number (#b215-#b224)
@label=CHKCHASE
c29597 CALL 28150    ; Set #REGa=1
 29600 DEC A         ; Set the zero flag
 29601 SCF           ; Set the carry flag
 29602 RET NZ        ; This return never happens
 29603 LD L,23       ; Point #REGhl at byte #b23 of the gangster's buffer
 29605 LD E,(HL)     ; {Collect the command list start address in #REGde
 29606 INC L         ;
 29607 LD D,(HL)     ; }
 29608 LD B,H        ; #REGb=gangster's character number
@keep
 29609 LD HL,65530   ; {Point #REGhl at the second entry in the relevant table
 29612 ADD HL,DE     ; of region definitions at #R64780, #R64806, #R64836,
                     ; #R64868 or #R64892}
@ssub=LD D,58880/256
 29613 LD D,230      ; #b230=Sam
 29615 CALL 29578    ; Is Sam inside the region?
 29618 JR C,29630    ; Jump if not
 29620 LD A,(32713)  ; Collect the ID of Sam's current disguise (0-7) from
                     ; #R32713
 29623 CP (HL)       ; Compare it with the disguise ID in the region definition
                     ; table
 29624 SCF           ; Set the carry flag
 29625 JR Z,29630    ; Jump if Sam's current disguise matches (the gangster
                     ; will let Sam pass)
 29627 INC HL        ; {Collect the command list offset from the region
 29628 LD A,(HL)     ; definition table}
 29629 AND A         ; Clear the carry flag
*29630 LD H,B        ; #REGh=gangster's character number
 29631 RET           ;

; Unused
s29632 DEFS 3

; Locations of fuses
;
; Used by the routine at #R30116. The locations are stored as (y,x) coordinate
; pairs.
@label=FUSELOCS
b29635 DEFB 19,33    ; No. 74 (third floor)
 29637 DEFB 7,66     ; Hotel (top floor)
 29639 DEFB 19,105   ; No. 31 (top floor)
 29641 DEFB 13,208   ; No. 19 (roof)
 29643 DEFB 25,224   ; No. 17 (second floor)
 29645 DEFB 13,241   ; No. 15 (top floor)

; x-coordinates of doors
;
; Used by the routine at #R29733. The first data table contains the
; x-coordinates of the front doors of the houses.
@label=HOUSEDOORX
b29647 DEFB 42,43    ; No. 74
 29649 DEFB 114,115  ; No. 31
 29651 DEFB 155,156  ; No. 27
 29653 DEFB 210,211  ; No. 19
 29655 DEFB 235,236  ; No. 17
 29657 DEFB 251,252  ; No. 15
 29659 DEFB 255      ; End marker
; The next data table contains the x-coordinates of the doors to the shops.
@label=SHOPDOORX
 29660 DEFB 0        ; Left-hand shop under the apartments next to no. 74
 29661 DEFB 15,16    ; Right-hand shop under the apartments next to no. 74
 29663 DEFB 223,224  ; Shop under no. 17
 29665 DEFB 239,240  ; Shop under no. 15
 29667 DEFB 255      ; End marker

; Show or hide the fuse, door, light bulb or phone in the icon panel (1)
;
; Used by the routines at #R30989 and #R61568. Shows or hides the fuse, door,
; light bulb or phone in the icon panel depending on Sam's current location and
; activity.
@label=ICONPANEL1
c29668 LD HL,58880   ; Point #REGhl at byte #b0 of Sam's buffer
 29671 BIT 0,(HL)    ; Is Sam midstride?
 29673 RET NZ        ; Return if so
 29674 LD A,(32764)  ; Collect Sam's status flags from #R32764
 29677 AND A         ; Is Sam engaged in an action at the moment?
 29678 JR Z,29706    ; Jump if not
; This entry point is used by the routine at #R29733. Now that the relevant
; bits at #R32680 have been set or reset, it's time to show or hide the fuse,
; door, light bulb or phone in the icon panel.
*29680 LD B,4        ; There are four icons to show or hide
 29682 LD A,(32680)  ; Collect the icon panel status flags from #R32680
 29685 LD E,166      ; #REGe will hold the LSB of the attribute file address
                     ; for the icon; initialise it to 166
*29687 INC E         ; {Set #REGe to the LSB of the attribute file address for
 29688 INC E         ; the next icon in the panel}
 29689 ADD A,A       ; Set the carry flag if this icon should be shown
 29690 PUSH AF       ; Save the icon status flags
 29691 PUSH DE       ; Save the LSB of the attribute file address
 29692 CALL C,28703  ; Reveal the icon if necessary
 29695 CALL NC,28707 ; Or hide it if necessary
 29698 POP DE        ; Restore the LSB of the attribute file address to #REGe
 29699 POP AF        ; Restore the icon status flags to #REGa
 29700 DJNZ 29687    ; Jump back until the fuse, door, light bulb and phone
                     ; icons have been revealed or hidden
 29702 LD (32680),A  ; Clear all the icon panel status flags at #R32680
 29705 RET           ;
; Sam is not engaged in any action at the moment (no status flags at #R32764
; are set).
*29706 LD A,(32747)  ; Collect the police flags from #R32747
 29709 RLCA          ; Is Sam in jail?
 29710 JR C,29757    ; Jump if so
 29712 LD L,2        ; Point #REGhl at byte #b2 of Sam's buffer
 29714 JR 29733      ; Check whether Sam is standing next to a fuse, door,
                     ; light switch or telephone, and return here to update the
                     ; icon panel as appropriate

; Clear the message line and display the first aid kits
;
; Used by the routine at #R28760.
@label=INITMSGFA
c29716 CALL 28457    ; Clear the message line
; This entry point is used by the routine at #R26002 to display the remaining
; first aid kits.
*29719 LD A,(32751)  ; #R32751 holds the number of first aid kits
@nowarn
 29722 LD HL,23272   ; Point #REGhl at the attribute byte for the leftmost
                     ; first aid kit in the icon panel
 29725 LD BC,2098    ; #REGb=#b8, #REGc=#b50 (INK 2: PAPER 6)
 29728 JP 30386      ; Set the attribute bytes for the first aid kits

; Unused
s29731 DEFS 2

; Show or hide the fuse, door, light bulb or phone in the icon panel (2)
;
; Continues from the routine at #R29668. Checks whether Sam is standing next to
; a fuse, door, light switch or telephone, and updates the icon panel as
; appropriate.
;
@ignoreua
; HL #w58882 (byte #b2 of Sam's buffer)
@label=ICONPANEL2
c29733 LD A,(HL)     ; #REGa=Sam's y-coordinate
 29734 LD DE,29647   ; Point #REGde at the list of x-coordinates of the house
                     ; doors (at #R29647)
 29737 CP 31         ; 31 is the y-coordinate of the house doors
 29739 JR Z,29747    ; Jump if Sam's y-coordinate is 31
 29741 CP 33         ; 33 is the y-coordinate of the shop doors
 29743 JR NZ,29765   ; Jump unless Sam's y-coordinate is 33
 29745 LD E,220      ; #REGde=#R29660 (list of x-coordinates of shop doors)
*29747 DEC L         ; #REGl=#b1
*29748 LD A,(DE)     ; #REGa=x-coordinate of a door (or #b255)
 29749 INC E         ; Point #REGde at the next x-coordinate in the list
 29750 INC A         ; Have we reached the end of the list?
 29751 JR Z,29765    ; Jump if so (Sam's not standing next to a door)
 29753 DEC A         ; #REGa=x-coordinate of the door
 29754 CP (HL)       ; Is Sam's x-coordinate the same?
 29755 JR NZ,29748   ; Jump back if not to check the next door
; This entry point is used by the routine at #R29668.
*29757 LD A,(32680)  ; {Set bit 6 at #R32680: door icon
 29760 SET 6,A       ;
 29762 LD (32680),A  ; }
*29765 LD L,4        ; Point #REGhl at byte #b4 of Sam's buffer
 29767 BIT 0,(HL)    ; Is Sam indoors?
 29769 JP Z,29680    ; Update the icon panel now if not
 29772 LD L,2        ; {#REGa=Sam's y-coordinate
 29774 LD A,(HL)     ; }
 29775 CP 33         ; Is Sam inside a shop?
 29777 JR Z,29800    ; Jump if so
*29779 SUB 6         ; {Keep subtracting 6 (the height of a floor) from Sam's
 29781 JR NC,29779   ; y-coordinate until it's negative}
 29783 CP 251        ; Is Sam's y-coordinate 1, 7, 13, 19, 25 or 31?
 29785 JP NZ,29680   ; Update the icon panel now if not (Sam's on a staircase)
 29788 CALL 30116    ; Is Sam standing next to a fuse that has not been blown
                     ; yet?
 29791 JR NZ,29800   ; Jump if not
 29793 LD HL,32680   ; {Set bit 7 at #R32680: fuse icon
 29796 SET 7,(HL)    ; }
@ssub=LD H,58880/256
 29798 LD H,230      ; #b230=Sam
*29800 CALL 62518    ; Is Sam standing next to a light switch?
 29803 JR Z,29812    ; Jump if not
 29805 LD HL,32680   ; {Set bit 5 at #R32680: light bulb icon
 29808 SET 5,(HL)    ; }
@ssub=LD H,58880/256
 29810 LD H,230      ; #b230=Sam
*29812 CALL 29854    ; Is Sam standing next to a telephone?
 29815 JP Z,29680    ; Update the icon panel now if not
; Sam is standing next to a telephone. Before showing the telephone icon, we
; need to update the icon graphic depending on whether the phone is ringing.
 29818 LD HL,32680   ; {Set bit 4 at #R32680: telephone icon
 29821 SET 4,(HL)    ; }
 29823 JR C,29841    ; Jump if the telephone is not ringing
@nowarn
 29825 LD A,(23672)  ; Collect the value of the system variable FRAMES, which
                     ; is incremented every 20ms
 29828 BIT 5,A       ; Bit 5 of FRAMES alternates every 0.64s
 29830 JR Z,29841    ; Jump if it's zero now
@nowarn
 29832 LD A,(20654)  ; This is the display file address for the byte in the
                     ; top-left corner of the telephone icon
 29835 DEC A         ; Is the telephone icon in the ringing phase at the
                     ; moment?
 29836 CALL Z,28660  ; If not, make it so
 29839 JR 29848      ;
@nowarn
*29841 LD A,(20654)  ; This is the display file address for the byte in the
                     ; top-left corner of the telephone icon
 29844 DEC A         ; Is the telephone icon in the ringing phase at the
                     ; moment?
 29845 CALL NZ,28666 ; If so, make it appear still (as when between rings)
*29848 JP 29680      ; Update the icon panel

; Unused
s29851 DEFS 3

; Check whether Sam is standing next to a telephone
;
; Used by the routines at #R29733 and #R30458. Returns with the zero flag reset
; if Sam is standing next to a telephone, and the carry flag reset as well if
; the telephone is ringing.
;
; H #b230 (Sam)
@label=BYPHONE
c29854 CALL 27892    ; Is the x-coordinate of the front column of Sam's sprite
                     ; between 1 and 6 mod 8 (where phones can be picked up)?
 29857 RET Z         ; Return if not
 29858 NOP           ;
 29859 CALL 62548    ; Is Sam standing next to a telephone?
 29862 RET Z         ; Return if not
 29863 JP 30429      ; Check whether the phone is ringing

; 'F' pressed - fuse
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'F' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=FUSE
c29866 CALL 30116    ; Is Sam standing next to a fuse that has not yet been
                     ; blown?
 29869 JR NZ,29891   ; Jump if not
 29871 LD HL,32694   ; #R32694 holds the fuse flags
 29874 LD A,(HL)     ; {Indicate that this fuse has been blown by setting the
 29875 OR C          ; relevant flag
 29876 LD (HL),A     ; }
@ssub=LD L,32674%256-1
 29877 LD L,161      ; {Point #REGhl at the relevant blown fuse delay counter
*29879 INC L         ; in the table at #R32674
 29880 RRC C         ;
 29882 JR NC,29879   ; }
 29884 LD (HL),96    ; Initialise the delay counter
 29886 CALL 62484    ; Switch off all the lights affected by the fuse
@ssub=LD H,58880/256
 29889 LD H,230      ; #b230=Sam
*29891 JP 62212      ; Raise Sam's arm and make a sound effect

; Unused
s29894 DEFS 2

; Addresses of Sam-handling routines
;
; Used by the routine at #R29912.
@label=SAMHR
b29896 DEFW 64403    ; Used when bit 7 is set at #R32764 (Sam is falling from
                     ; the roof of a building)
 29898 DEFW 62216    ; Used when bit 6 is set at #R32764 (Sam is knocking on or
                     ; opening a door)
 29900 DEFW 30146    ; Used when bit 5 is set at #R32764 (Sam's arm is raised
                     ; or his knees are bent)
 29902 DEFW 30675    ; Used when bit 4 is set at #R32764 (Sam is on the phone)
 29904 DEFW 25805    ; Used when bit 3 is set at #R32764 (Sam is rolling or
                     ; somersaulting)
 29906 DEFW 0        ; Unused
 29908 DEFW 24832    ; Used when bit 1 is set at #R32764 (Sam is transfixed by
                     ; Lana)
 29910 DEFW 31476    ; Used when bit 0 is set at #R32764 (Sam is being carried)

; Deal with Sam
;
; Called from the main loop at #R61483 when one of Sam's status flags at
; #R32764 is set, indicating that he is in the middle of an action. Returns
; with the zero flag set if Sam has finished the action by the end of the
; routine.
@label=HANDLESAM
@ssub=LD HL,58880+8
c29912 LD HL,58888   ; {Decrement Sam's main action timer in byte #b8 of his
 29915 DEC (HL)      ; buffer}
 29916 RET NZ        ; Return unless it's time to deal with Sam
@nowarn
 29917 LD HL,29939   ; {We will continue at #R29939 (below) after calling the
 29920 PUSH HL       ; routine to handle Sam}
@ssub=LD L,29896%256-2
 29921 LD L,198      ; #REGhl=#w29894
 29923 LD A,(32764)  ; Pick up Sam's status flags from #R32764
*29926 INC L         ; {Point #REGhl at one of the entries in the table of
 29927 INC L         ; Sam-handling routine addresses at #R29896
 29928 RLCA          ;
 29929 JR NC,29926   ; }
 29931 LD C,(HL)     ; {Collect the routine address into #REGbc
 29932 INC L         ;
 29933 LD B,(HL)     ; }
 29934 PUSH BC       ; Push it onto the stack, ready for an indirect jump
 29935 LD HL,58880   ; Point #REGhl at byte #b0 of Sam's buffer
 29938 RET           ; Make an indirect jump to the Sam-handling routine
; We come here after the Sam-handling routine has returned.
@label=*
*29939 LD HL,32764   ; #R32764 holds Sam's status flags
 29942 LD A,(HL)     ; Pick them up in #REGa
 29943 AND A         ; Has Sam finished the action yet?
 29944 RET Z         ; Return with the zero flag set if so
@ssub=LD A,(58880+8)
 29945 LD A,(58888)  ; Collect Sam's main action timer from byte #b8 of his
                     ; buffer
 29948 AND A         ; Did the Sam-handling routine set the action timer to a
                     ; non-zero value (meaning that the action is still in
                     ; progress)?
 29949 RET NZ        ; Return with the zero flag reset if so
 29950 LD (HL),A     ; Otherwise clear all of Sam's status flags at #R32764
 29951 RET           ; Return with the zero flag set

; Process the event table
;
; Used by the routine at #R61568. Scans the event table at #R24544 and
; processes every active entry.
@label=EVENTS
@nowarn
c29952 LD HL,30051   ; {Set the operand of the #S/JP/ instruction at #R29963
@ssub=LD (29963+1),HL
 29955 LD (29964),HL ; (below) to #R30051 (#S/RET/)}
 29958 LD HL,24544   ; Point #REGhl at the event table at #R24544
*29961 LD A,(HL)     ; Collect the first byte of an entry
 29962 INC A         ; Set the zero flag if it's #b255
; The operand of the #S/JP/ instruction that follows is changed (by this
; routine) using entries in the event table at #R24544 during the game as
; follows:
; .
; #TABLE(default,centre,centre,:w)<wrapalign>
; { =h Operand | =h Entry | =h Occasion }
; { #R31236    | #R24626  | Sam finds the dead body in the hotel }
; { #R24914    | #R24586  | Sam enters no. 15 using the key (in game mode 1) }
; { #R24914    | #R24695  | Sam climbs the stairs up to the roof of the
;                           apartment building next to no. 74 (in game mode 2,
;                           after he has entered the hotel's right-hand green
;                           room while disguised as a woman) }
; TABLE#
@label=EVENTJP
 29963 JP Z,30051    ; Jump if we've reached the end of the event table
 29966 AND 2         ; Is this event active?
 29968 JR NZ,29989   ; Jump if not
 29970 PUSH HL       ; Save the event table entry pointer
 29971 INC HL        ; {Point #REGhl at the third byte of the entry
 29972 INC HL        ; }
 29973 LD B,(HL)     ; #REGb=number of conditions to check
*29974 INC HL        ; {#REGde=address to check
 29975 LD E,(HL)     ;
 29976 INC HL        ;
 29977 LD D,(HL)     ; }
 29978 INC HL        ; {#REGa=opcode of the '#S/JR/' instruction to place at
 29979 LD A,(HL)     ; #R29986 (below)}
 29980 INC HL        ; Point #REGhl at the value to compare with (#REGde)
@nowarn
 29981 LD (29986),A  ; Set the instruction at #R29986 (below) to '#S/JR Z/',
                     ; '#S/JR NZ/', '#S/JR C/' or '#S/JR NC/' as appropriate
 29984 LD A,(DE)     ; {Check the condition
 29985 CP (HL)       ; }
@label=EVENTJR
 29986 JR 29996      ; This instruction is set to '#S/JR Z/', '#S/JR NZ/',
                     ; '#S/JR C/' or '#S/JR NC/' above
 29988 POP HL        ; Restore the event table entry pointer to #REGhl
*29989 INC HL        ; Point #REGhl at the second byte of the entry
 29990 LD E,(HL)     ; {Move #REGhl along to the first byte of the next entry
 29991 LD D,0        ;
 29993 ADD HL,DE     ; }
 29994 JR 29961      ; Jump back to examine the next entry
*29996 DJNZ 29974    ; Jump back to check the next condition in the entry
; If we get here, then every condition in the entry was satisfied.
 29998 INC HL        ; {#REGb=number of POKEs in the entry
 29999 LD B,(HL)     ; }
*30000 INC HL        ; {#REGde=address to POKE
 30001 LD E,(HL)     ;
 30002 INC HL        ;
 30003 LD D,(HL)     ; }
 30004 INC HL        ; {#REGa=byte to POKE
 30005 LD A,(HL)     ; }
 30006 LD (DE),A     ; Do the POKE
 30007 DJNZ 30000    ; Jump back until every POKE has been done
; The entry has been processed.
 30009 POP HL        ; Restore the event table entry pointer to #REGhl
 30010 BIT 6,(HL)    ; Should this entry be deactivated now?
 30012 JR NZ,29989   ; Move along to the next entry if not
 30014 INC (HL)      ; Otherwise deactivate the entry by setting bit 0 of the
                     ; first byte
 30015 JR 29989      ; Move along to the next entry

; Initialise the events and objects for a new game
;
; Continues from the routine at #R31458. First we initialise the entries in the
; event table at #R24544.
@label=INITOBJS
c30017 LD HL,24544   ; The event table starts at #R24544
 30020 LD DE,0       ; #REGde will be used to move #REGhl from one entry to the
                     ; next; initialise it to 0
*30023 ADD HL,DE     ; Point #REGhl at the next entry in the table
 30024 CALL 30043    ; Initialise the entry
 30027 INC HL        ; {Prepare #REGde to point #REGhl at the next event entry
 30028 LD E,(HL)     ; }
 30029 JR NZ,30023   ; Jump back until every entry has been processed
; Now we initialise the entries in the object location table at #R32028.
 30031 LD E,4        ; Each entry is 4 bytes long
 30033 LD HL,32028   ; The object location table starts at #R32028
*30036 CALL 30043    ; Initialise the entry
 30039 RET Z         ; Return if we've reached the end of the table
 30040 ADD HL,DE     ; Point #REGhl at the next entry
 30041 JR 30036      ; Jump back to process the next entry

; Initialise an event or object for a new game
;
; Used by the routine at #R30017. Activates or deactivates an entry in the
; event table at #R24544 or the object location table at #R32028 as appropriate
; for a new game.
;
; HL Address of the first byte of the event/object entry
@label=INITOBJ
c30043 LD A,(HL)     ; Pick up the first byte of the entry
 30044 INC A         ; Have we reached the end of the table?
 30045 RET Z         ; Return with the zero flag set if so
 30046 RES 0,(HL)    ; Reset bit 0 of the first byte of the entry, thus
                     ; activating it
 30048 ADD A,A       ; Should this entry be active at the start of the game?
 30049 RET NC        ; Return if so
 30050 INC (HL)      ; Otherwise set bit 0 of the first byte of the entry, thus
                     ; deactivating it
; This entry point is used by the routine at #R29952.
*30051 RET           ;

; Unused
u30052 DEFB 244

; Make the cash bonus/key sound effect
;
; Used by the routine at #R30211.
; .
; #AUDIO2(bonus.wav)(#INCLUDE(Bonus))
;
; A #b2 (initial border colour)
; C #b144 (pitch)
; DE #w509 (duration)
; H #b20 (repetitions)
; L #b6 (border #S/XOR/ value)
@label=CASHKEYSND
c30053 PUSH DE       ; Save the duration
 30054 XOR L         ; Toggle the border colour between 2 (red) and 4 (green)
 30055 CALL 64740    ; Make a mini-sound effect
 30058 LD B,A        ; Save the border colour in #REGb briefly
 30059 LD A,C        ; {Modify the pitch for the next mini-sound effect (it is
 30060 CPL           ; #b144 for the first, and then toggles between #b111 and
 30061 AND 127       ; #b16 for the remainder)
 30063 LD C,A        ; }
 30064 LD A,B        ; Restore the border colour to #REGa
 30065 POP DE        ; Restore the duration to #REGde
 30066 DEC H         ; Have we played 20 mini-sound effects yet?
 30067 JR NZ,30053   ; Jump back if not
 30069 RET           ;

; 'L' pressed - light on/off
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'L' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=LIGHT
c30070 CALL 62518    ; Is Sam standing next to a light switch?
 30073 JR Z,30089    ; Jump if not
 30075 BIT 5,A       ; Does the light switch affect the light in only one
                     ; window or window-pair?
 30077 JR Z,30084    ; Jump if so
 30079 CALL 62630    ; Switch the lights on or off
 30082 JR 30087      ;
*30084 CALL 62615    ; Switch the light on or off
@ssub=LD H,58880/256
*30087 LD H,230      ; #b230=Sam
*30089 JP 62212      ; Raise Sam's arm and make a sound effect

; 'B' pressed - raise/lower blind
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'B' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=BLIND
c30092 CALL 63152    ; Is Sam standing next to a light switch or a window
                     ; blind?
 30095 JR Z,30112    ; Jump if not
 30097 AND 28        ; Is Sam standing next to a window blind?
 30099 JR Z,30112    ; Jump if not
 30101 CP 8          ; Set the zero flag if Sam is standing next to the
                     ; right-hand window of a pair
 30103 LD A,1        ; Bit 0 set: right-hand window blind toggle
 30105 JR Z,30109    ; Jump if Sam is standing next to the right-hand window of
                     ; a pair
 30107 LD A,64       ; Bit 6 set: left-hand window blind toggle
*30109 CALL 62617    ; Raise or lower the window blind
*30112 JP 62212      ; Raise Sam's arm and make a sound effect

; Unused
s30115 DEFB 0

; Check whether Sam is standing next to a fuse that has not been blown yet
;
; Used by the routines at #R29733 and #R29866. Returns with the zero flag set
; if Sam is standing next to a fuse that has not been blown yet.
;
; H #b230 (Sam)
@label=BYFUSE
c30116 LD DE,29635   ; Point #REGde at the fuse location table at #R29635
 30119 LD L,2        ; Point #REGhl at byte #b2 of Sam's buffer
 30121 LD BC,1537    ; #REGb=6 (there are six fuses), #REGc=1 (fuse identifier)
*30124 LD A,(DE)     ; #REGa=y-coordinate of a fuse
 30125 INC DE        ; Point #REGde at the x-coordinate of the fuse
 30126 CP (HL)       ; Does the fuse's y-coordinate match Sam's y-coordinate?
 30127 JR NZ,30140   ; Jump if not
 30129 DEC L         ; Point #REGhl at byte #b1 of Sam's buffer
 30130 LD A,(DE)     ; #REGa=x-coordinate of the fuse
 30131 CP (HL)       ; Compare it with Sam's x-coordinate
 30132 INC HL        ; Point #REGhl back at byte #b2 of Sam's buffer
 30133 JR NZ,30140   ; Jump unless Sam is standing next to the fuse
 30135 LD A,(32694)  ; Collect the fuse flags from #R32694
 30138 AND C         ; Set the zero flag if the fuse has not been blown yet
 30139 RET           ;
*30140 RLC C         ; Move the fuse identifier bit in #REGc leftwards
 30142 INC DE        ; Point #REGde at the next entry in the fuse location
                     ; table
 30143 DJNZ 30124    ; Jump back until all fuse locations have been checked
 30145 RET           ;

; Deal with Sam when his arm is raised or his knees are bent
;
; Used by the routine at #R29912 when bit 5 at #R32764 is set (by the routine
; at #R29866, #R30070, #R30092, #R31204 or #R31713), indicating that Sam is
; blowing a fuse, switching a light on or off, raising or lowering a blind, or
; throwing the hook (and therefore has his arm raised), or is picking up an
; object (and therefore has his knees bent).
@refs=29912
@label=ARMDOWN
c30146 XOR A         ; {Clear all of Sam's status flags at #R32764
 30147 LD (32764),A  ; }
 30150 JP 60539      ; Make a sound effect and lower Sam's arm or unbend his
                     ; knees

; Urgent message number
;
; Used by the routines at #R30154 and #R30160.
@label=URGENTMSG
b30153 DEFB 0

; Add an urgent message to the message queue
;
; Used by the routines at #R24832, #R24951, #R30198, #R30458, #R30575, #R30675
; and #R31244. When an urgent message is queued, it will be brought to the
; front of the queue and displayed as soon as possible (see #R30160).
;
; A Message number
@label=QUEUEMSGU
c30154 LD (30153),A  ; Store the message number at #R30153
 30157 JP 28357      ; Add the message to the queue

; Determine the interval between the last message and the next
;
; Used by the routine at #R28357. Returns with the interval in #REGa, which
; indicates the minimum number of subintervals of 0.64s that the current
; message should be displayed for.
@label=MSGDELAY
c30160 LD A,(30153)  ; Collect the urgent message number from #R30153
 30163 AND A         ; Is it 0 (no message)?
 30164 JR Z,30194    ; Jump if so
 30166 LD HL,32695   ; {Collect the index of the current message in the queue
 30169 LD A,(HL)     ; from #R32695}
 30170 INC A         ; {#REGa=index of the next message in the queue
 30171 AND 7         ; }
 30173 ADD A,184     ; {Point #REGhl at the slot for the next message in the
 30175 LD L,A        ; queue}
 30176 LD B,7        ; There are up to 7 messages ahead in the queue
 30178 LD A,(30153)  ; #REGa=urgent message number
*30181 CP (HL)       ; Set the zero flag if the urgent message is in this slot
                     ; in the queue
 30182 INC HL        ; Move #REGhl along to the next slot in the message queue
                     ; (or past the end of the queue and into the bullet
                     ; buffers at #R32704 and #R32708, which is a
                     ; #BUG#anUrgentMessageDelayed(bug))
 30183 JR NZ,30188   ; Jump unless the urgent message is at this position in
                     ; the queue
 30185 LD A,1        ; Set #REGa=1 so that the next message is displayed as
                     ; soon as possible
 30187 RET           ;
*30188 DJNZ 30181    ; Jump back until all messages in the queue have been
                     ; checked
 30190 XOR A         ; {Clear the urgent message number at #R30153: it was not
 30191 LD (30153),A  ; in the queue}
*30194 LD A,(28612)  ; Collect the normal message display interval from #R28612
 30197 RET           ;

; Ask Sam 'WHO'S THERE?' when he takes or makes a phone call
;
; Used by the routine at #R30627.
@label=WHOSTHERE
c30198 PUSH HL       ;
 30199 LD A,37       ; Message #R27077(#b37): 'A VOICE SAID 'WHO'S THERE?''
 30201 CALL 30154    ; Queue this message urgently
 30204 LD HL,32667   ; {Set bit 6 of the telephone call status flags at
 30207 SET 6,(HL)    ; #R32667, indicating that Sam must give a name}
 30209 POP HL        ;
 30210 RET           ;

; Check whether Sam has found something and update the icon panel
;
; Used by the routines at #R31204 and #R61568. Scans the object location table
; at #R32028 to check whether Sam has found the hook, the budgie, a key, some
; money, or a location that requires a message to be displayed, and then
; updates the icon panel appropriately.
@label=FOUNDOBJ
@ssub=LD HL,58880+1
c30211 LD HL,58881   ; Point #REGhl at byte #b1 of Sam's buffer
 30214 LD C,(HL)     ; #REGc=Sam's x-coordinate
 30215 INC L         ; #REGl=#b2
 30216 LD B,(HL)     ; #REGb=Sam's y-coordinate
 30217 LD HL,32028   ; Point #REGhl at the object location table at #R32028
*30220 LD A,(HL)     ; Collect the first byte of an entry
 30221 INC A         ; Have we reached the end of the table?
 30222 JR Z,30268    ; Jump if so
 30224 INC HL        ; Move #REGhl to the second byte of the entry
 30225 AND 2         ; Is this entry active?
 30227 JR NZ,30239   ; Proceed to the next entry if not
 30229 LD A,(HL)     ; #REGa=x-coordinate of the object
 30230 CP C          ; Is Sam's x-coordinate the same?
 30231 JR NZ,30239   ; Jump if not
 30233 INC HL        ; Move #REGhl to the third byte of the entry
 30234 LD A,(HL)     ; #REGa=y-coordinate of the object
 30235 CP B          ; Set the zero flag if Sam's y-coordinate is the same
 30236 DEC HL        ; Move #REGhl back to the second byte of the entry
 30237 JR Z,30244    ; Jump if Sam's coordinates match the object's
*30239 INC HL        ; {Point #REGhl at the first byte of the next entry
 30240 INC HL        ;
 30241 INC HL        ; }
 30242 JR 30220      ; Jump back to check the next entry
; Sam's coordinates match those of the object. Is it the hook or the budgie?
*30244 DEC HL        ; Move #REGhl back to the first byte of the entry
 30245 BIT 6,(HL)    ; Is this entry for an object that can be picked up (i.e.
                     ; the hook or the budgie)?
 30247 JR Z,30271    ; Jump if not
 30249 LD A,(58880)  ; #REGa=Sam's animatory state
 30252 AND 127       ; Discard bit 7 (the direction bit)
 30254 CP 6          ; #AS6: Is Sam bending his knees?
 30256 JR NZ,30270   ; Jump if not
 30258 INC (HL)      ; Increment the first byte of the entry (thus deactivating
                     ; it)
 30259 INC HL        ; {Point #REGhl at the fourth byte of the entry
 30260 INC HL        ;
 30261 INC HL        ; }
 30262 LD A,(HL)     ; Pick up the fourth byte of the entry
 30263 LD HL,32745   ; {Set the appropriate bit at #R32745 to give Sam the
 30266 OR (HL)       ; object
 30267 LD (HL),A     ; }
*30268 JR 30339      ; Jump forward to update the icon panel
*30270 DEC (HL)      ; Decrement the first byte of the entry
*30271 INC (HL)      ; Increment the first byte of the entry (thus deactivating
                     ; it if it's not the hook or the budgie)
 30272 LD A,(HL)     ; #REGa=first byte of the entry
 30273 INC HL        ; {Point #REGhl at the fourth byte of the entry
 30274 INC HL        ;
 30275 INC HL        ; }
 30276 PUSH HL       ; Save the object table entry pointer
 30277 PUSH BC       ; Save Sam's coordinates
 30278 BIT 6,A       ; Is this entry for an object that can be picked up (i.e.
                     ; the hook or the budgie)?
 30280 JR Z,30292    ; Jump if not
 30282 LD A,(HL)     ; #REGa=fourth byte of the entry
 30283 LD HL,32680   ; {Store the object ID at #R32680 for now
 30286 LD (HL),A     ; }
*30287 POP BC        ; Restore Sam's coordinates to #REGbc
 30288 POP HL        ; Restore the object table entry pointer to #REGhl
 30289 INC HL        ; Point #REGhl at the first byte of the next entry
 30290 JR 30220      ; Jump back to check the next entry
; It's not the hook or the budgie. Does a message need to be displayed?
*30292 BIT 5,A       ; Is this entry for a message that needs to be displayed?
 30294 JR Z,30302    ; Jump if not
 30296 LD A,(HL)     ; #REGa=message number
 30297 CALL 28357    ; Queue the message
 30300 JR 30287      ; Jump back to check the next entry
; It's not the hook, the budgie or a message. Is it a key?
*30302 BIT 4,A       ; Is this entry for a key?
 30304 JR Z,30321    ; Jump if not
 30306 LD A,(HL)     ; #REGa=key identifier (#b8, #b16, #b32 or #b64)
 30307 LD HL,32746   ; {Set the appropriate bit at #R32746, thus giving Sam the
 30310 OR (HL)       ; key
 30311 LD (HL),A     ; }
 30312 LD A,100      ; $100 to add to Sam's cash supply
 30314 JR 30322      ;
 30316 INC D         ; {This block of code is never executed
 30317 LD D,2        ;
 30319 JR 30332      ; }
; If it's not the hook, the budgie, a message or a key, it must be cash.
*30321 LD A,(HL)     ; #REGa=number of bucks
*30322 CALL 28306    ; Add this to Sam's total
 30325 LD HL,5126    ; {Prepare the cash bonus sound effect parameters
 30328 LD C,144      ;
 30330 LD D,1        ; }
*30332 LD A,2        ;
 30334 CALL 30053    ; Make a sound effect
 30337 JR 30287      ; Jump back to check the next entry
; Now we set the attribute bytes for the budgie and hook in the icon panel.
*30339 LD HL,32680   ; #R32680 holds the ID of the object Sam is standing next
                     ; to (if any)
 30342 LD A,(HL)     ; #REGa=object ID
 30343 LD (HL),0     ; Reset #R32680 to 0
 30345 LD L,233      ; #REGhl=#R32745 (object inventory)
 30347 LD H,(HL)     ; #REGh=object inventory flags
 30348 LD L,A        ; #REGl=ID of the object Sam is standing next to (if any)
 30349 LD E,176      ; #b176 is the LSB of #w23216 (the attribute file address
                     ; for the top-left tile of the budgie icon)
 30351 LD BC,1538    ; #REGb=6, #REGc=2 (2 objects: budgie and hook)
*30354 RL L          ; {Move an object ID bit (if any) into bit 0 of #REGh, and
 30356 RL H          ; an object inventory flag into the carry flag}
 30358 LD A,48       ; #b48=PAPER 6: INK 0
 30360 JR C,30368    ; Jump if Sam already has this object
 30362 ADD A,B       ; #REGa=#b56 (INK 6: PAPER 6)
 30363 BIT 0,H       ; Is Sam standing next to this object?
 30365 JR Z,30368    ; Jump if not
 30367 LD A,B        ; #REGa=#b6 (INK 6: PAPER 0)
*30368 CALL 28709    ; Set the attribute bytes for the object in the icon panel
 30371 LD E,178      ; #b178 is the LSB of #w23218 (the attribute file address
                     ; for the top-left tile of the hook icon)
 30373 DEC C         ; Have we dealt with both objects yet?
 30374 JR NZ,30354   ; Jump back to deal with the second object if not
; Now we display the keys Sam has found.
 30376 LD A,(32746)  ; Pick up the key inventory flags from #R32746
 30379 ADD A,A       ; Move bits 3-6 into bits 4-7 (thus discarding bit 7,
                     ; which corresponds to the key to no. 19)
 30380 LD BC,1072    ; #REGb=4 (there are 4 keys), #REGc=#b48 (INK 6: PAPER 0)
@nowarn
 30383 LD HL,23280   ; Point #REGhl at the attribute byte for the leftmost key
                     ; in the icon panel
; This entry point is used by the routine at #R29716 with #REGhl=#w23272
; (attribute byte for the leftmost first aid kit in the icon panel) and
; #REGc=#b50 (INK 2: PAPER 6).
*30386 LD (HL),54    ; Set the attribute byte to #b54 (INK 6: PAPER 6) by
                     ; default
 30388 ADD A,A       ; Should there be a first aid kit or key displayed here?
 30389 JR NC,30392   ; Jump if not
 30391 LD (HL),C     ; Otherwise reveal the first aid kit or key by setting the
                     ; attribute byte to #b50 (INK 2: PAPER 6) or #b48 (INK 6:
                     ; PAPER 0)
*30392 INC L         ; Move #REGhl to the attribute byte for the next first aid
                     ; kit or key
 30393 DJNZ 30386    ; Jump back until all the first aid kits or keys have been
                     ; done
 30395 RET           ;

; Deal with a character who is at the entrance to a building
;
; Used by the routine at #R60347. On entry, the bit set in #REGa indicates the
; direction in which the character is going to move next:
; .
; #TABLE(default,centre)
; { =h Bit | =h Direction }
; { 7      | Left }
; { 6      | Right }
; { 5      | Up and to the left }
; { 4      | Up and to the right }
; { 3      | Down and to the left }
; { 2      | Down and to the right }
; TABLE#
; .
; Also on entry, the zero flag is set if the character is indoors. If the
; character is Sam, we also check whether he's entering a house other than no.
; 19 without a key.
;
; A Direction indicator (#b128, #b64, #b32, #b16, #b8 or #b4)
; B Third byte of the character's location descriptor (see #R60179)
; H Character number (#b215-#b230)
; L 4
@label=BYDOOR
c30396 JR NZ,30402   ; Jump unless the character is indoors
 30398 AND B         ; Is the character going to leave the building?
 30399 RET NZ        ; Return if not
*30400 INC (HL)      ; Set the character's z-coordinate to 2
 30401 RET           ;
*30402 AND B         ; Is the character going to enter the building?
 30403 JR Z,30400    ; Jump if not
 30405 LD A,H        ; #REGa=character number
@ssub=CP 58880/256
 30406 CP 230        ; Is this Sam?
 30408 RET NZ        ; Return if not
 30409 BIT 0,B       ; Does the entrance have a door?
 30411 RET Z         ; Return if not
 30412 CALL 62099    ; Point #REGhl at the status flags for the door that Sam
                     ; is standing next to (see #R32752)
 30415 LD A,L        ; #REGa=LSB of the address of the door status flags
                     ; (#b240-#b249)
@ssub=CP 32752%256+5
 30416 CP 245        ; Is Sam standing in the doorway of no. 19?
 30418 JR Z,30423    ; Jump if so
 30420 LD A,(HL)     ; Pick up the door status flags for the doorway Sam is
                     ; standing in
 30421 AND 248       ; Set the zero flag if the door requires no key to unlock
                     ; it
@ssub=LD H,58880/256
*30423 LD H,230      ; #b230=Sam
 30425 RET Z         ; Return if the door requires no key to unlock it
 30426 JP 31289      ; Check whether Sam has entered a house through the front
                     ; door without a key

; Check whether Sam is standing next to a ringing telephone
;
; Continues from the routine at #R29854. On entry, #REGe holds the
; #R27392(identifier) of the telephone that Sam is standing next to. Returns
; with the zero flag always reset, and the carry flag reset if the telephone is
; ringing.
;
; E Telephone identifier
@label=RINGING
@nowarn
c30429 LD A,(23673)  ; Collect the second byte of the FRAMES system variable,
                     ; which is incremented every 5.12s
 30432 LD HL,32665   ; #R32665 holds the value of the second byte of the FRAMES
                     ; system variable as it was the last time Sam lifted a
                     ; ringing telephone
 30435 SUB (HL)      ; Subtract the current value
 30436 CP 3          ; Has less than 10.24s passed since Sam last lifted a
                     ; ringing telephone?
 30438 RET C         ; Return with the carry flag set if so
 30439 LD HL,27467   ; Point #REGhl at the ringing phone location table at
                     ; #R27467
; This entry point is used by the routine at #R30627 (with #REGhl=#R27467 or
; #R27506).
*30442 LD A,E        ; #REGa=telephone identifier
 30443 CP (HL)       ; Does it match the first byte of the phone entry?
 30444 JR Z,30455    ; Jump if so
 30446 LD A,(HL)     ; {Have we reached the end of the phone table?
 30447 ADD A,2       ; }
 30449 RET C         ; Return with the carry flag set if so
 30450 INC HL        ; {Point #REGhl at the first byte of the next entry in the
 30451 INC HL        ; phone table
 30452 INC HL        ; }
 30453 JR 30442      ; Check the next entry
*30455 AND A         ; Reset the carry and zero flags
 30456 RET           ;

; Unused
s30457 DEFB 0

; 'T' pressed - telephone
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'T' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=PHONE
c30458 CALL 29854    ; Is Sam standing next to a telephone?
 30461 RET Z         ; Return if not
 30462 LD HL,32658   ; The buffer at #R32658 will hold the digits dialled by
                     ; Sam
 30465 LD BC,1280    ; #REGb=5, #REGc=0
*30468 LD (HL),C     ; {Initialise the digit buffer at #R32658 by filling it
 30469 INC L         ; with zeroes
 30470 DJNZ 30468    ; }
@ssub=LD L,32667%256
 30472 LD L,155      ; #REGhl=#R32667 (telephone call status flags)
 30474 CCF           ; {#REGa=#b128 if the phone is ringing, #b0 otherwise
 30475 SBC A,A       ;
 30476 AND 128       ; }
 30478 LD (HL),A     ; Set bit 7 at #R32667 if Sam has picked up a ringing
                     ; telephone
@ssub=LD L,32764%256
 30479 LD L,252      ; #REGhl=#R32764 (Sam's status flags)
 30481 LD (HL),16    ; Set bit 4: Sam is on the phone
@ssub=LD L,32723%256
 30483 LD L,211      ; {Store the phone's identifier at #R32723
 30485 LD (HL),E     ; }
 30486 JR NZ,30495   ; Jump if the phone is ringing
 30488 LD A,2        ; {Subtract $2 from Sam's cash supply
 30490 CALL 28300    ; }
 30493 JR 30501      ;
; Sam has picked up a telephone that is ringing.
@nowarn
*30495 LD A,(23673)  ; Collect the second byte of the FRAMES system variable,
                     ; which is incremented every 5.12s
@ssub=LD L,32665%256
 30498 LD L,153      ; {Copy this byte to #R32665
 30500 LD (HL),A     ; }
*30501 LD A,41       ; Message #R27129(#b41): 'I LIFTED THE PHONE '
; This entry point is used by the unused routine at #R31284 with
; #REGa=#R27113(#b39): 'I HUNG UP'.
*30503 CALL 30154    ; Queue the message urgently
; This entry point is used by the routine at #R61923.
@ssub=LD H,58880/256
*30506 LD H,230      ; #b230=Sam
 30508 JP 60654      ; Make a sound effect

; Check whether a character can answer the telephone that Sam is calling
;
; Used by the routine at #R30675. Returns with the carry flag set if the
; telephone that Sam is calling is both off-screen and not his own, or if there
; is a character close enough to the telephone to pick it up.
@label=CHKANSWER
c30511 LD HL,32666   ; #R32666 holds the identifier of the telephone that Sam
                     ; is calling
 30514 LD A,(HL)     ; Pick this up in #REGa
 30515 AND 31        ; {#REGe=x-coordinate of the leftmost column of the
 30517 ADD A,A       ; 8-tile-wide segment of the play area that contains the
 30518 ADD A,A       ; telephone (0, 8, 16,...248)
 30519 ADD A,A       ;
 30520 LD E,A        ; }
 30521 LD A,(HL)     ; #REGa=telephone identifier
 30522 CP 92         ; Is Sam calling his office?
 30524 JR Z,30538    ; Jump if so
 30526 LD A,E        ; #REGa=telephone's x-coordinate (0, 8, 16,...248)
@ssub=LD L,32766%256
 30527 LD L,254      ; #REGhl=#R32766, which holds the leftmost column of the
                     ; play area on screen
 30529 CP (HL)       ; Is the telephone that Sam is calling off screen to the
                     ; left?
 30530 RET C         ; Return with the carry flag set if so
 30531 SUB 32        ; Does the telephone that Sam is calling have an
                     ; x-coordinate that is less than 32?
 30533 JR C,30538    ; Jump if so (it's on screen)
 30535 CP (HL)       ; Is the telephone that Sam is calling off screen to the
                     ; right?
 30536 CCF           ; {Return with the carry flag set if so
 30537 RET C         ; }
; Sam has called his office, or a telephone that is on screen. In this case,
; Sam will get an answer only if another character is close to the telephone.
@ssub=LD L,32666%256
*30538 LD L,154      ; {Collect the telephone identifier from #R32666
 30540 LD A,(HL)     ; }
 30541 AND 224       ; {#REGd=y-coordinate of the telephone (7, 13, 19, 25 or
 30543 RRCA          ; 31)
 30544 RRCA          ;
 30545 RRCA          ;
 30546 LD D,A        ;
 30547 RRCA          ;
 30548 ADD A,D       ;
 30549 ADD A,7       ;
 30551 LD D,A        ; }
@ssub=LD HL,55040+2
 30552 LD HL,55042   ; Point #REGhl at byte #b2 of character buffer #b215
 30555 LD B,15       ; We will check the locations of characters #b215-#b229
*30557 LD A,(HL)     ; #REGa=character's y-coordinate
 30558 CP D          ; Does it match that of the telephone?
 30559 JR NZ,30569   ; Jump to consider the next character if not
 30561 DEC L         ; #REGl=#b1
 30562 LD A,(HL)     ; #REGa=character's x-coordinate
 30563 INC L         ; #REGl=#b2
 30564 AND 248       ; {Set the zero flag if the character is in the same
 30566 CP E          ; 8-tile-wide segment of the play area as the telephone}
 30567 SCF           ; Set the carry flag
 30568 RET Z         ; Return with the carry flag set if the character is close
                     ; to the telephone
*30569 INC H         ; Next character
 30570 DJNZ 30557    ; Jump back until every character has been checked
 30572 AND A         ; Reset the carry flag (there is no one close to the
                     ; telephone)
 30573 RET           ;

; Unused
s30574 DEFB 0

; Deal with Sam when he's on the phone and has been asked 'WHO'S THERE?'
;
; Used by the routine at #R30675. Waits for a keypress, and then queues message
; #R27122(#b40) (''{name}' I SAID ') followed by either message #R27204(#b46)
; ('I DUNNO NO {name}') or the message Sam is supposed to receive upon giving
; the correct name.
@label=GIVENAME
c30575 CALL 61923    ; Check for keypresses or hang up the phone
 30578 RET Z         ; Return if no key with an ASCII code in the range
                     ; #b48-#b127 was pressed
 30579 CP 97         ; Is the ASCII code of the keypress less than #b97 ('a')?
 30581 RET C         ; Return if so
 30582 CP 104        ; Is the ASCII code of the keypress less than #b104 ('h')?
 30584 JR C,30591    ; Jump if so
 30586 CP 115        ; Was 's' pressed?
 30588 RET NZ        ; Return if not
 30589 SUB 11        ; #REGa=#b104
*30591 ADD A,7       ; #REGa=#b104-#b111 (message number of a name)
 30593 LD (32720),A  ; Store this at #R32720
 30596 PUSH AF       ; Save the name message number briefly
 30597 LD A,40       ; Message #R27122(#b40): ''{name}' I SAID '
 30599 CALL 30154    ; Queue this message urgently
 30602 LD HL,(32663) ; Collect from #R32663 the address of either the second
                     ; byte of the relevant phone table entry (if the phone was
                     ; ringing, or the person Sam's calling has a message for
                     ; him), or the final byte of the phone message table at
                     ; #R27506 (if the person Sam's calling has no message for
                     ; him); the final byte of the phone message table is
                     ; #b255, which does not match the message number of any
                     ; name
 30605 POP AF        ; Restore the name message number to #REGa
 30606 CP (HL)       ; Set the zero flag if Sam has used the correct name
 30607 LD A,46       ; Message #R27204(#b46): 'I DUNNO NO {name}'
 30609 JR NZ,30617   ; Jump unless Sam has used the correct name
; This entry point is used by the routine at #R30627.
*30611 DEC HL        ; Point #REGhl at the first byte of the phone entry
 30612 LD (HL),0     ; Mark the phone entry inactive
 30614 INC HL        ; {Point #REGhl at the third byte of the phone entry
 30615 INC HL        ; }
 30616 LD A,(HL)     ; #REGa=telephone message number
; This entry point is used by the routines at #R30627 (with
; #REGa=#R27150(#b43), #R27165(#b44), #R27193(#b45) or #R27271(#b50)) and
; #R30675 (with #REGa=#R27214(#b47)).
*30617 LD HL,512     ; {Clear #R32666 and set bit 1 of the telephone call
 30620 LD (32666),HL ; status flags at #R32667 (to disconnect the call)}
 30623 JP 30154      ; Queue the telephone message urgently

; Unused
s30626 DEFB 0

; Check whether there is a telephone message for Sam
;
; Used by the routine at #R30675. On entry, #REGa holds the identifier of
; either the telephone that Sam is holding (which was ringing when he picked it
; up), or the telephone that Sam is calling. If there is a message for Sam, it
; will be queued unless Sam needs to identify himself first, in which case
; message #R27077(#b37) ('A VOICE SAID 'WHO'S THERE?'') will be queued instead.
; If there is no message for Sam, the message that is queued will depend on who
; Sam is calling (Daisy, the police, or someone else).
;
; A Telephone identifier (see #R27392)
; HL #R27467 or #R27506
@label=PHONEMSG
c30627 LD E,A        ; #REGe=telephone identifier
 30628 CALL 30442    ; Is the telephone ringing, or does the person on the
                     ; other end have a message for Sam?
 30631 JR C,30638    ; Jump if not
 30633 INC HL        ; Point #REGhl at the second byte of the entry in the
                     ; phone table
 30634 LD A,(HL)     ; Pick this up in #REGa
 30635 AND A         ; Does Sam need to identify himself in order to receive
                     ; the message?
 30636 JR Z,30611    ; Jump if not to queue the message
*30638 LD (32663),HL ; Store at #R32663 the address of either the second byte
                     ; of the relevant phone table entry (if the phone was
                     ; ringing, or the person Sam's calling has a message for
                     ; him), or the final byte of the phone message table at
                     ; #R27506 (if the person Sam's calling has no message for
                     ; him)
*30641 JP NC,30198   ; Jump if Sam must be asked to identify himself
 30644 LD A,E        ; #REGa=telephone identifier
 30645 CP 92         ; #b92 is the identifier of Sam's telephone
 30647 LD A,50       ; Message #R27271(#b50): 'DAISY SAID 'NO MESSAGES SAM ''
 30649 JR Z,30672    ; Jump if Sam called his office
 30651 LD A,E        ; #REGa=telephone identifier
 30652 CP 112        ; #b112 is the identifier of the telephone in the police
                     ; station
 30654 JR NZ,30663   ; Jump unless Sam called the police
 30656 CALL 31236    ; Send the police after Sam
 30659 LD A,51       ; Message #R27287(#b51): 'A VOICE SAID 'OK CRUISE WE'RE
                     ; COMING''
 30661 JR 30672      ; Queue this message
*30663 CALL 61823    ; Get a random number in #REGa
 30666 AND 3         ; Keep only bits 0 and 1
 30668 JR Z,30641    ; Jump if the result is 0 (25% of the time): ask Sam
                     ; 'WHO'S THERE?'
 30670 ADD A,42      ; #REGa=#R27150(#b43) (A VOICE SAID 'THERES NOONE HERE'),
                     ; #R27165(#b44) (A VOICE SAID 'GET LOST - I'M TRYING TO
                     ; SLEEP') or #R27193(#b45) (A VOICE SAID 'BE RIGHT WITH
                     ; YOU')
*30672 JP 30617      ; Queue this message

; Deal with Sam when he's on the phone
;
; Used by the routine at #R29912 when bit 4 at #R32764 is set (by the routine
; at #R30458), indicating that Sam is on the phone.
@refs=29912
@label=ONPHONE
c30675 LD HL,32667   ; The telephone call status flags are stored at #R32667
 30678 BIT 6,(HL)    ; Has someone asked Sam 'WHO'S THERE?'
 30680 JP NZ,30575   ; Jump if so
 30683 BIT 1,(HL)    ; Is the telephone call still in progress?
 30685 JR Z,30691    ; Jump if so
 30687 CALL 61923    ; Hang up if 'h' was pressed
 30690 RET           ;
; The telephone call is still in progress.
*30691 BIT 7,(HL)    ; Has Sam picked up a telephone that was ringing?
 30693 JR Z,30707    ; Jump if not
 30695 CALL 61923    ; Hang up if 'h' was pressed
 30698 LD A,(32723)  ; #REGa=ID of the telephone that Sam is holding
 30701 LD HL,27467   ; The ringing phone location table is at #R27467
*30704 JP 30627      ; Check whether there is a message for Sam
*30707 BIT 5,(HL)    ; Is the destination telephone ringing?
 30709 JR Z,30726    ; Jump if not
 30711 CALL 61923    ; Hang up if 'h' was pressed
 30714 CALL 30511    ; Is the telephone that Sam is calling either off-screen
                     ; or close enough to a character that can pick it up?
 30717 RET NC        ; Return if not
 30718 LD A,(32666)  ; #REGa=ID of the telephone that Sam is calling
 30721 LD HL,27506   ; The phone message table is at #R27506
 30724 JR 30704      ; Check whether Sam has called someone who has a message
                     ; for him
; Sam is still dialling the telephone number.
*30726 BIT 4,(HL)    ; Are we currently making the sound effect of a digit
                     ; being dialled?
 30728 JR NZ,30768   ; Jump if so
 30730 CALL 61923    ; Check for keypresses and hang up if 'h' was pressed
 30733 RET Z         ; Return if no key with an ASCII code in the range
                     ; #b48-#b127 was pressed
 30734 CP 58         ; Was the ASCII code of the keypress greater than #b57
                     ; ('9')?
 30736 RET NC        ; Return if so
 30737 CP 48         ; Was the ASCII code less than #b48 ('0')?
 30739 RET C         ; Return if so
@ssub=LD HL,32658-1
@nowarn
 30740 LD HL,32657   ; {Store the ASCII code of the digit in the first
*30743 INC L         ; available space at #R32658
 30744 BIT 5,(HL)    ;
 30746 JR NZ,30743   ;
 30748 LD (HL),A     ; }
 30749 SUB 48        ; #REGa=digit that was dialled (0-9)
 30751 JR NZ,30755   ; Jump unless '0' was dialled
 30753 LD A,10       ; The digit '0' will give 10 clicks
*30755 INC A         ; #REGa=1-11
@ssub=LD (58880+20),A
 30756 LD (58900),A  ; Store this in byte #b20 of Sam's buffer
@ssub=LD L,32667%256
 30759 LD L,155      ; #REGhl=#R32667 (telephone call status flags)
 30761 LD (HL),16    ; Set bit 4
 30763 LD A,42       ; Message #R27141(#b42): 'I DIALLED {number}'
 30765 JP 30154      ; Queue this message urgently
; The sound effect of a digit being dialled is currently in progress.
@ssub=LD HL,58880+8
*30768 LD HL,58888   ; {Set Sam's main action timer (in byte #b8 of his buffer)
 30771 LD (HL),3     ; to 3}
 30773 LD L,20       ; Point #REGhl at byte #b20 of Sam's buffer
 30775 DEC (HL)      ; Are there any more clicks to make?
 30776 JP NZ,60521   ; Make a click if so
; Sam has finished dialling a digit of the telephone number. Check whether the
; number dialled so far is valid.
 30779 LD HL,32667   ; {Clear all the telephone call status flags at #R32667
 30782 LD (HL),0     ; }
@ssub=LD L,32658%256
 30784 LD L,146      ; {Collect the ASCII code of the first digit that was
 30786 LD A,(HL)     ; dialled from #R32658}
 30787 CP 48         ; Was it '0'?
 30789 JR Z,30817    ; Jump if so (no telephone numbers start with 0)
 30791 INC L         ; {Add the ASCII codes of the second and third digits to
 30792 ADD A,(HL)    ; the first
 30793 INC L         ;
 30794 ADD A,(HL)    ; }
 30795 INC L         ; Point #REGhl at the fourth digit
 30796 CP 171        ; Set the zero flag if '999' was dialled
 30798 LD A,112      ; #b112 is the ID of the telephone in the police station
 30800 JR Z,30810    ; Jump if Sam has dialled the police
 30802 BIT 5,(HL)    ; Has Sam dialled four digits yet?
 30804 RET Z         ; Return if not
 30805 CALL 31255    ; Has Sam dialled a valid telephone number?
 30808 JR NZ,30817   ; Jump if not
*30810 LD HL,32723   ; #R32723 holds the ID of the telephone Sam is holding
 30813 CP (HL)       ; Does it match the ID of the telephone Sam is calling?
 30814 JP NZ,31244   ; Jump if not to place the call
*30817 LD A,47       ; Message #R27214(#b47): ' THE NUMBER WAS UNOBTAINABLE'
 30819 JP 30617      ; Disconnect the call and queue this message urgently

; Prepare for a cutscene
;
; Used by the routine at #R31414. On entry, #REGa holds the LSB of the address
; of the #R32512(screen refresh buffer) byte that corresponds to the top row of
; the portion of the play area to be displayed during the cutscene.
;
; A Screen refresh buffer address LSB
; D New y-coordinate for the topmost row of the play area on screen
; E New x-coordinate for the leftmost column of the play area on screen
@label=PREPCSCENE
c30822 PUSH DE       ; Save the play area coordinates briefly
 30823 PUSH AF       ; Save the screen refresh buffer address LSB briefly
 30824 CALL 64599    ; Hide the play area
 30827 POP AF        ; Restore the screen refresh buffer address LSB to #REGa
 30828 LD L,A        ; Point #REGhl at the first #R32512(screen refresh buffer)
                     ; (SRB) byte that will need updating later
 30829 POP DE        ; Restore the play area coordinates to #REGde
 30830 PUSH HL       ; Save the SRB address for now
 30831 AND 3         ; {Compute Sam's new x-coordinate (x+5, where x is the
 30833 ADD A,A       ; x-coordinate of the leftmost column of the portion of
 30834 ADD A,A       ; the play area to be displayed)
 30835 ADD A,A       ;
 30836 ADD A,5       ;
 30838 ADD A,E       ; }
 30839 LD C,A        ; #REGc=Sam's new x-coordinate
 30840 LD A,D        ; {Set the new y-coordinate of the topmost row of the play
 30841 LD (32767),A  ; area on screen}
 30844 LD A,L        ; #REGa=screen refresh buffer address LSB
 30845 SUB 12        ; {Compute Sam's new y-coordinate
 30847 AND 252       ;
 30849 RRCA          ;
 30850 RRCA          ;
 30851 ADD A,D       ; }
 30852 LD HL,58880   ; Point #REGhl at byte #b0 of Sam's character buffer
 30855 LD (HL),0     ; Set Sam's animatory state to #AS0 (standing/walking
                     ; phase 1)
 30857 INC L         ; #REGl=#b1
 30858 LD (HL),C     ; Set Sam's x-coordinate
 30859 INC L         ; #REGl=#b2
 30860 LD (HL),A     ; Set Sam's y-coordinate
 30861 INC L         ; {#REGl=#b4
 30862 INC L         ; }
 30863 LD (HL),1     ; Set Sam's z-coordinate
; Next we cycle character buffer groups forwards or backwards as appropriate to
; correspond with the portion of the play area that will be on screen.
@nowarn
 30865 LD HL,61879   ; {Place a #S/RET/ instruction at #R61879 so that the
 30868 LD (HL),201   ; screen will not scroll right}
 30870 LD L,224      ; {Place a #S/RET/ instruction at #R61920 so that the
 30872 LD (HL),201   ; screen will not scroll left}
 30874 PUSH HL       ;
 30875 LD HL,32766   ; {Collect X (the x-coordinate of the leftmost column of
 30878 LD A,(HL)     ; the play area on screen) from #R32766}
*30879 CP E          ; Does X match the target x-coordinate (in #REGe)?
 30880 JR Z,30905    ; Jump if so
 30882 PUSH DE       ; Save the target x-coordinate briefly
 30883 JR C,30892    ; Jump if X<#REGe
 30885 CALL 61838    ; Cycle a character buffer group forwards (but without
                     ; scrolling the screen)
 30888 LD A,248      ; #REGa=-8
 30890 JR 30897      ;
*30892 CALL 61882    ; Cycle a character buffer group backwards (but without
                     ; scrolling the screen)
 30895 LD A,8        ;
*30897 POP DE        ; Restore the target x-coordinate to #REGe
 30898 LD HL,32766   ; {Add 8 to or subtract 8 from X (the x-coordinate of the
 30901 ADD A,(HL)    ; leftmost column of the play area on screen, stored at
 30902 LD (HL),A     ; #R32766)}
 30903 JR 30879      ; Jump back to check whether we need to cycle any more
                     ; character buffers backwards or forwards
*30905 POP HL        ;
 30906 LD (HL),195   ; Restore the #S/JP/ instruction at #R61920
@ssub=LD L,61879%256
 30908 LD L,183      ; {Restore the #S/JP/ instruction at #R61879
 30910 LD (HL),195   ; }
; Next we determine whether any lights near Sam need to be switched on and any
; window blinds need to be raised.
@ssub=LD H,58880/256
 30912 LD H,230      ; #b230=Sam
 30914 CALL 63138    ; Collect in #REGc the x-coordinate of the front column of
                     ; Sam's sprite
 30917 LD B,192      ; {Is there a light switch next to Sam?
 30919 CALL 62548    ; }
 30922 JR Z,30955    ; Jump if not (we can reveal the play area now)
 30924 BIT 5,A       ; Set the zero flag if the light switch affects the light
                     ; in only one window or window-pair
 30926 LD A,(BC)     ; #REGa=window flags for Sam's location
 30927 JR Z,30936    ; Jump if the light switch affects the light in only one
                     ; window or window-pair
 30929 BIT 5,A       ; Is the light switch in the 'on' position?
 30931 CALL NZ,62630 ; If not, switch the light on
 30934 JR 30955      ; Jump forward to reveal the play area
*30936 BIT 1,A       ; Is there a right-hand window here with a blind?
 30938 JR Z,30942    ; Jump if not
 30940 RES 0,A       ; Reset bit 0: blind raised in the right-hand window
*30942 BIT 7,A       ; Is there a left-land or single window here with a blind?
 30944 JR Z,30948    ; Jump if not
 30946 RES 6,A       ; Reset bit 6: blind raised in the left-hand or only
                     ; window
*30948 RES 5,A       ; Reset bit 5: light switch on
 30950 LD (BC),A     ; Save the new window flags (blinds raised, light switch
                     ; on)
 30951 XOR A         ; Clear #REGa to prevent the following call from changing
                     ; the window flags (we've already updated them)
 30952 CALL 62617    ; Update the SRB for the window
; Finally we can reveal the portion of the play area in which Sam will walk up
; and down until the cutscene message has been displayed and the game resumes.
*30955 POP HL        ; Restore the SRB address to #REGhl
 30956 LD B,6        ; The portion is 6 rows high
 30958 LD A,L        ; Initialise #REGa for the loop that follows
*30959 LD L,A        ; {Set all bits in the relevant SRB bytes
 30960 LD (HL),255   ;
 30962 ADD A,4       ;
 30964 DJNZ 30959    ; }
 30966 JP 60032      ; Update the display

; Unused
s30969 DEFS 3

; Check whether a message is in the message queue
;
; Used by the routines at #R24832, #R24951 and #R30989. Returns with the zero
; flag set if the message whose number is stored at #R32722 is present in the
; message queue (meaning it is currently being displayed or has yet to be
; displayed).
@label=MSGINQUEUE
c30972 CALL 28404    ; Update the message line and process the message queue as
                     ; appropriate
; This entry point is used by the routine at #R31126.
*30975 LD HL,32722   ; {Collect the message number stored at #R32722
 30978 LD A,(HL)     ; }
 30979 LD B,8        ; There are 8 slots in the message queue
@ssub=LD L,32696%256
 30981 LD L,184      ; #REGhl=#R32696 (the first byte in the message queue)
*30983 CP (HL)       ; Set the zero flag if the message number is in the queue
 30984 INC HL        ; Point #REGhl at the next byte in the message queue
 30985 RET Z         ; Return if the message whose number is stored at #R32722
                     ; is in the message queue
 30986 DJNZ 30983    ; Jump back until all 8 bytes of the message queue have
                     ; been checked
 30988 RET           ;

; Display a cutscene
;
; Used by the routine at #R31414. Displays a cutscene, and then enters demo
; mode or resumes the game in the next mode.
;
; A Cutscene message number
@label=CUTSCENE
c30989 LD (32722),A  ; Store the cutscene message number at #R32722 so that it
                     ; can be monitored
 30992 CALL 28357    ; Add the message to the message queue
 30995 XOR A         ; #REGa=0
 30996 LD (32713),A  ; Set Sam's disguise ID (stored at #R32713) to 0 (none)
 30999 LD (32666),A  ; Disconnect any phone call Sam may be making by setting
                     ; #R32666 to 0
 31002 LD (32764),A  ; Clear all of Sam's status flags at #R32764
 31005 CALL 63849    ; Update Sam's sprite and the disguise icon now that Sam's
                     ; wearing no disguise
; The loop that follows makes Sam pace up and down until the cutscene is over.
@ssub=LD HL,58880+9
*31008 LD HL,58889   ; {Reset the midstride/mid-action timer in byte #b9 of
 31011 XOR A         ; Sam's buffer
 31012 LD (HL),A     ; }
 31013 LD L,A        ; #REGl=#b0
 31014 BIT 0,(HL)    ; Is Sam midstride?
 31016 JR Z,31058    ; Jump if not
 31018 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 31021 DEC E         ; {Set #REGe to Sam's next x-coordinate (immediately in
 31022 BIT 7,A       ; front of him)
 31024 JR Z,31028    ;
 31026 INC E         ;
 31027 INC E         ; }
*31028 INC A         ; {Set #REGa to Sam's new animatory state
 31029 AND 251       ; }
*31031 CALL 59861    ; Update Sam's animatory state and location and update the
                     ; SRB
 31034 CALL 60521    ; Make a walking sound effect
 31037 CALL 60032    ; Update the display
 31040 CALL 28404    ; Update the message line
 31043 LD HL,32712   ; #R32712 holds the value of the LSB of the system
                     ; variable FRAMES as it was at the end of the last pass
                     ; through the main loop (or this routine)
@nowarn
*31046 LD A,(23672)  ; {Wait about 240ms
 31049 SUB (HL)      ;
 31050 CP 12         ;
 31052 JR C,31046    ; }
 31054 ADD A,(HL)    ; {Store the current value of the LSB of the system
 31055 LD (HL),A     ; variable FRAMES at #R32712 for comparison next time}
 31056 JR 31008      ; Jump back to the beginning of this loop
; Sam is not midstride at the moment.
*31058 CALL 29668    ; Show or hide the fuse, door, light bulb or phone in the
                     ; icon panel
 31061 CALL 30972    ; Has the entire cutscene message been displayed yet?
 31064 JP NZ,61630   ; Jump if so to end the cutscene
; The cutscene is not over yet. Check whether Sam should turn round before
; pacing up or down again.
@ssub=LD HL,58880+1
 31067 LD HL,58881   ; Point #REGhl at byte #b1 of Sam's buffer
 31070 LD A,(HL)     ; #REGa=Sam's x-coordinate
 31071 DEC L         ; #REGl=#b0
 31072 AND 7         ; Is Sam's x-coordinate exactly divisible by 8?
 31074 JR NZ,31087   ; Jump if not
 31076 BIT 7,(HL)    ; Is Sam facing right?
 31078 JR NZ,31095   ; Jump if so
*31080 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 31083 XOR 128       ; Flip bit 7 of Sam's animatory state, thus turning him
                     ; round
 31085 JR 31031      ; Jump back to update Sam's animatory state and the SRB
*31087 CP 5          ; Is Sam's x-coordinate congruent to 5 mod 8?
 31089 JR NZ,31095   ; Jump if not
 31091 BIT 7,(HL)    ; Is Sam facing right?
 31093 JR NZ,31080   ; Jump back to turn Sam round if so
*31095 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 31098 JR 31028      ;

; Unused
u31100 DEFS 4

; Keypress offsets to use for Sam in demo mode
;
; Used by the routine at #R31126. The return value from the routine at #R60812
; (#REGa=1-6) maps to one of the keypress offsets in this table.
@label=DEMOKEYS
b31104 DEFB 13       ; Right
 31105 DEFB 15       ; Left
 31106 DEFB 9        ; Up
 31107 DEFB 11       ; Down
 31108 DEFB 19       ; Open a door from the inside
 31109 DEFB 19       ; Open a door from the outside

; Locations for Sam to visit in demo mode
;
; Used by the routine at #R31126.
@label=DEMODESTS
b31110 DEFB 5,33     ; Shop at the far left of town
 31112 DEFB 225,19   ; Sam's office
 31114 DEFB 243,13   ; Top floor of no. 15
 31116 DEFB 58,7     ; Left-hand room on the top floor of the hotel
 31118 DEFB 100,13   ; Right-hand green room in the hotel
 31120 DEFB 154,7    ; Roof of no. 27
 31122 DEFB 126,7    ; Roof of the police station
 31124 DEFB 200,7    ; Roof of the apartment building next to no. 19

; Collect a keypress during the game (or simulate one in demo mode)
;
; Called from the main loop at #R61483.
@label=GETINPUT
c31126 LD A,(32750)  ; #REGa=current game mode (0-4)
 31129 AND A         ; Is it demo mode?
 31130 JP NZ,60082   ; Jump if not
; It's demo mode.
 31133 CALL 60121    ; Collect the ASCII code of the last key pressed in #REGa
 31136 JP NZ,61674   ; Start a new game if a game key was pressed
 31139 LD A,38       ; Message #R27089(#b38): 'PRESS A KEY TO PLAY'
 31141 LD (32722),A  ; Store this message number at #R32722 so that it can be
                     ; monitored
 31144 CALL 30975    ; Is this message in the message queue?
 31147 CALL NZ,28357 ; If not, add it to the message queue (again)
 31150 LD A,248      ; {Set bits 3-7 at #R32746, effectively giving Sam the
 31152 LD (32746),A  ; keys to all the houses}
@ssub=LD A,(58880+11)
 31155 LD A,(58891)  ; Pick up byte #b11 of Sam's buffer (which holds his
                     ; destination y-coordinate)
 31158 AND A         ; Has a destination been set for Sam yet?
 31159 JR NZ,31188   ; Jump if so
; We need to set a new destination for Sam.
*31161 CALL 61823    ; {Get an even random number between #b134 and #b148 in
 31164 AND 14        ; #REGa
@ssub=ADD A,31110%256
 31166 ADD A,134     ; }
 31168 LD L,A        ; {Point #REGhl at an entry in the table of locations at
@ssub=LD H,31110/256
 31169 LD H,121      ; #R31110}
 31171 LD E,(HL)     ; {Collect the location coordinates in #REGde
 31172 INC L         ;
 31173 LD D,(HL)     ; }
@ssub=LD HL,58880+10
 31174 LD HL,58890   ; {Copy the location coordinates into bytes #b10 and #b11
 31177 LD (HL),E     ; of Sam's buffer
 31178 INC L         ;
 31179 LD (HL),D     ; }
 31180 LD C,1        ; Assume a z-coordinate of 1 (indoors)
 31182 CALL 60743    ; Obtain an identifier for the location
 31185 LD L,12       ; {Copy the destination location identifier into byte #b12
 31187 LD (HL),A     ; of Sam's buffer}
@ssub=LD H,58880/256
*31188 LD H,230      ; #b230=Sam
 31190 CALL 60812    ; Determine the next move Sam should make to reach his
                     ; destination
 31193 AND A         ; Is Sam already at his destination?
 31194 JR Z,31161    ; Jump back to set a new destination if so
; Sam's destination has been set. Now to simulate a keypress that will make him
; take the next step towards it.
@ssub=ADD A,31104%256-1
 31196 ADD A,127     ; {Point #REGhl at the offset of the appropriate keypress
 31198 LD L,A        ; to simulate in the table at #R31104
@ssub=LD H,31104/256
 31199 LD H,121      ; }
 31201 LD A,(HL)     ; Pick up the keypress offset
 31202 AND A         ; Make sure the zero flag is reset to indicate that a
                     ; simulated keypress was made (this instruction is
                     ; redundant)
 31203 RET           ;

; 'G' pressed - get object
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'G' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=GETOBJECT
c31204 LD A,32       ; {Set bit 5 of Sam's status flags at #R32764
 31206 LD (32764),A  ; }
 31209 LD BC,3       ; {Copy bytes #b0-#b2 of Sam's buffer (which hold his
@ssub=LD DE,58880+5
 31212 LD DE,58885   ; animatory state and coordinates) into bytes #b5-#b7 for
 31215 LD L,B        ; later retrieval
 31216 LDIR          ; }
 31218 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 31221 AND 128       ; {#REGa=#AS6(#b6 or #b134): Sam bending his knees
 31223 ADD A,6       ; }
 31225 CALL 59861    ; Update Sam's animatory state and location and update the
                     ; SRB
 31228 CALL 30211    ; Check whether Sam has picked up the hook or the budgie
                     ; and update the icon panel accordingly
@ssub=LD H,58880/256
 31231 LD H,230      ; #b230=Sam
 31233 JP 60654      ; Make a sound effect

; Send the police after Sam
;
; Used by the routines at #R29952 (when Sam finds the dead body in the hotel)
; and #R30627 (when Sam has called the police).
@label=SAMWANTED
c31236 LD HL,32747   ; The police flags are stored at #R32747
 31239 LD (HL),1     ; Set bit 0: Sam is wanted by the police
 31241 JP 29088      ; Copy Sam's coordinates and location identifier to
                     ; #R32731, thus informing the police where they should
                     ; head for to get Sam

; Place a telephone call
;
; Used by the routine at #R30675. On entry, #REGa holds the #R27392(identifier)
; of the telephone that Sam is calling.
;
; A Telephone identifier
; H #b127
@label=PLACECALL
@ssub=LD L,32666%256
c31244 LD L,154      ; {Store the identifier of the telephone that Sam is
 31246 LD (HL),A     ; calling at #R32666}
 31247 INC L         ; {Set bit 5 of the telephone status flags at #R32667
 31248 LD (HL),32    ; }
 31250 LD A,49       ; Message #R27264(#b49): 'IT BEGAN RINGING'
 31252 JP 30154      ; Queue this message urgently

; Check whether Sam has dialled a valid telephone number
;
; Used by the routine at #R30675. Returns with the zero flag set if Sam has
; dialled a valid telephone number, and with the telephone identifier in #REGa.
@label=TELNOVALID
@ssub=LD HL,27392+74
c31255 LD HL,27466   ; Point #REGhl at the end of the phone number and location
                     ; table at #R27392
 31258 LD C,15       ; There are 15 entries to check
@ssub=LD DE,32658+3
*31260 LD DE,32661   ; Point #REGde at the last digit of the phone number
                     ; dialled by Sam (stored at #R32658)
 31263 LD B,4        ; There are 4 digits in a phone number
*31265 LD A,(DE)     ; #REGa=digit of the phone number dialled by Sam
 31266 CP (HL)       ; Compare it with that of a phone number in the table
 31267 DEC HL        ; Point #REGhl at the previous digit of the phone number
 31268 DEC DE        ; Point #REGde at the previous digit dialled by Sam
 31269 JR NZ,31276   ; Jump if there's no match
 31271 DJNZ 31265    ; Jump back until all 4 digits have been compared
 31273 LD A,(HL)     ; #REGa=identifier of the matching telephone
 31274 RET           ; Return with the zero flag set
*31275 DEC HL        ; {Point #REGhl at the first byte of the phone number
*31276 DJNZ 31275    ; entry (the telephone identifier)}
 31278 DEC HL        ; Point #REGhl at the last digit of the previous phone
                     ; number in the table
 31279 DEC C         ; Are there any more phone numbers to check?
 31280 JR NZ,31260   ; Jump back if so
 31282 AND A         ; Reset the zero flag
 31283 RET           ;

; Queue the message 'I HUNG UP' (unused)
@label=XHANGUP
c31284 LD A,39       ; Message #R27113(#b39): 'I HUNG UP'
 31286 JP 30503      ; Queue this message urgently and make a sound effect

; Check whether Sam has entered a house through the front door without a key
;
; Continues from the routine at #R30396. Sends the police after Sam if he has
; entered a house through the front door without a key.
;
; A Door status flags for the doorway Sam is standing in (see #R32752)
; H #b230 (Sam)
@label=ENTRYNOKEY
c31289 LD C,A        ; #REGc=door status flags
 31290 LD A,(32746)  ; Collect the key inventory flags from #R32746
 31293 AND C         ; Does Sam have the key to the door?
 31294 RET NZ        ; Return if so
; Sam is entering a house through the front door without a key. The police will
; need to be alerted.
 31295 PUSH DE       ;
@ssub=LD DE,(58880+1)
 31296 LD DE,(58881) ; {Copy Sam's coordinates to #R32731
 31300 LD (32731),DE ; }
 31304 LD C,1        ; Assume a z-coordinate of 1 (indoors)
 31306 CALL 60743    ; Obtain an identifier for Sam's current location
 31309 LD (32733),A  ; Store it at #R32733
 31312 LD A,1        ; {Set bit 0 at #R32747: Sam is wanted by the police
 31314 LD (32747),A  ; }
 31317 POP DE        ;
 31318 RET           ;

; Make a gangster walk up or down until Sam arrives
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a gangster's buffer by the primary command routine at
; #R31338. It makes the gangster start or continue walking up or down a few
; paces unless he spots Sam, in which case the subcommand and current primary
; command are terminated.
;
; H Gangster's character number (#b215-#b224)
@refs=61948
@label=HOODWALK
c31319 CALL 63118    ; Abort now if the gangster is midstride or has his arm up
 31322 CALL 29597    ; Is Sam nearby, and should the gangster go after him?
 31325 JP C,63217    ; Jump if not
 31328 LD L,22       ; {Copy the command list offset (from the gangster's
 31330 LD (HL),A     ; region definition table) into byte #b22 of the
                     ; gangster's buffer}
 31331 LD L,15       ; {Remove the address of this interruptible subcommand
 31333 LD (HL),0     ; routine from bytes #b14 and #b15 of the gangster's
                     ; buffer}
 31335 JP 62080      ; Terminate the current primary command, and move to the
                     ; portion of the command list that deals with catching Sam

; Make a gangster walk up and down while watching for Sam
;
; Used by the command lists at #R64790, #R64816, #R64846 and #R64902.
;
; H Gangster's character number (#b215-#b224)
@refs=61948
@label=AWAITSAM
c31338 LD L,11       ; {Copy the door identifier (#b168 or #b175) and walkabout
 31340 CALL 61809    ; duration indicator (always 0) from the command list into
                     ; bytes #b11 and #b12 of the gangster's buffer}
 31343 LD L,13       ; {Set byte #b13 of the gangster's buffer to a non-zero
 31345 LD (HL),63    ; value to ensure that he walks up and down indefinitely}
 31347 LD L,1        ; {#REGa=gangster's x-coordinate
 31349 LD A,(HL)     ; }
 31350 LD L,10       ; {Copy this to byte #b10 of the gangster's buffer, thus
 31352 LD (HL),A     ; making it his walkabout origin x-coordinate}
 31353 CALL 63409    ; Change the gangster's primary command routine address to
                     ; #R31356 (below)
@label=AWAITLOOP
@nowarn
 31356 LD BC,31319   ; The routine at #R31319 makes the gangster walk up or
                     ; down until Sam arrives
 31359 JP 63331      ;

; Make a gangster chase and pick up Sam
;
; Used by the routine at #R25385. Makes a gangster start or continue chasing
; Sam if appropriate. Whether the gangster continues to chase Sam depends on
; Sam's and the gangster's locations relative to the two regions defined in the
; gangster's region definition table. If Sam has left the first region, the
; gangster gives up the chase and restarts his command list; if the gangster
; has already chased Sam to the boundary of the second region, he will stand on
; guard there; and if the gangster is close enough to Sam to pick him up, he
; will do so and move to the next command in the command list.
;
; H Gangster's character number (#b215-#b224)
@label=HOODTOSAM2
c31362 CALL 25074    ; Is the gangster close enough to Sam to pick him up?
 31365 JP C,29149    ; Jump if so
 31368 CALL 63128    ; Exit now if the gangster is midstride
 31371 LD L,23       ; Point #REGhl at byte #b23 of the gangster's buffer
 31373 LD E,(HL)     ; {Collect the command list start address in #REGde
 31374 INC L         ;
 31375 LD D,(HL)     ; }
 31376 LD B,H        ; #REGb=gangster's character number
@keep
 31377 LD HL,65526   ; {Point #REGhl at the relevant table of region
 31380 ADD HL,DE     ; definitions (#R64780, #R64806, #R64836, #R64868 or
                     ; #R64892)}
@ssub=LD D,58880/256
 31381 LD D,230      ; #b230=Sam
 31383 CALL 29578    ; Check whether Sam is inside the first region
 31386 LD D,B        ; #REGd=gangster's character number
 31387 EX DE,HL      ; #REGh=gangster's character number
 31388 JP C,63198    ; Restart the command list if Sam is outside the first
                     ; region
 31391 EX DE,HL      ; #REGd=gangster's character number
 31392 CALL 29578    ; Check whether the gangster is inside the second region
 31395 RET C         ; Return if he's outside the second region
; Sam is inside the first region, and the gangster hasn't reached the boundary
; of the second region, so the chase is still on.
 31396 LD H,B        ; #REGh=gangster's character number
 31397 CALL 29072    ; Set the gangster's destination to Sam's current location
 31400 CALL 60812    ; Determine the next move the gangster should make to
                     ; reach Sam
 31403 CP 5          ; Is the gangster standing next to a closed door?
 31405 JP NC,63100   ; Jump if so
 31408 AND A         ; Has the gangster reached his destination?
 31409 RET Z         ; Return if so
 31410 JP 63036      ; Move the gangster one step closer to Sam

; Unused
s31413 DEFB 0

; Increment the score and decrement Sam's cash supply at regular intervals
;
; Used by the routine at #R61440. Increments the score and decrements Sam's
; cash supply every 5.12s. Displays the endgame cutscene and enters demo mode
; if Sam runs out of money.
@label=SCORECASH
c31414 LD A,(32750)  ; Collect the current game mode (0-4) from #R32750
 31417 AND A         ; Is it demo mode?
 31418 RET Z         ; Return if so
@nowarn
 31419 LD HL,(23672) ; Collect the two least significant bytes of the system
                     ; variable FRAMES in #REGhl
 31422 LD DE,(32724) ; #REGde=two least significant bytes of the system
                     ; variable FRAMES as they were the last time the score was
                     ; incremented
@keep
 31426 LD BC,65280   ; #REGbc=-256
 31429 SBC HL,DE     ; {Was the score last incremented at least 5.12s ago?
 31431 ADD HL,BC     ; }
 31432 RET NC        ; Return if not
@nowarn
 31433 LD HL,(23672) ; Collect the two least significant bytes of the system
                     ; variable FRAMES in #REGhl
 31436 LD (32724),HL ; Store these bytes at #R32724 for comparison next time
 31439 CALL 28337    ; Increment the score and decrement Sam's cash supply
 31442 RET NZ        ; Return unless Sam has no money left
 31443 LD A,34       ; Message #R27026(#b34): 'I WAS BROKE AGAIN...'
; This entry point is used by the routines at #R24832, #R26002 and #R64338.
*31445 PUSH AF       ; Save the message number briefly
 31446 LD A,57       ; {#REGa=57, #REGd=8, #REGe=216: the top-left corner of
 31448 LD DE,2264    ; the cutscene window will be at (224,19), with Sam at
                     ; (229,19) (in his office)}
; This entry point is used by the routines at #R31642 and #R63662.
*31451 CALL 30822    ; Prepare for the cutscene
 31454 POP AF        ; Restore the cutscene message number to #REGa
 31455 JP 30989      ; Display the cutscene

; Prepare the phone messages, events and objects for a new game
;
; Used by the routine at #R63662.
@label=PREPOBJS
c31458 LD HL,27544   ; The phone initialisation data is at #R27544 and #R27557
 31461 LD DE,27467   ; The phone message entries begin at #R27467
 31464 LD BC,6655    ; #REGb=#b25, #REGc=#b255
*31467 LDI           ; Initialise the first byte of a phone message entry
 31469 INC E         ; {Point #REGde at the first byte of the next entry
 31470 INC E         ; }
 31471 DJNZ 31467    ; Jump back until all the entries have been initialised
 31473 JP 30017      ; Initialise the event table at #R24544 and the object
                     ; location table at #R32028

; Deal with Sam when he's being carried by a gangster or policeman
;
; Used by the routine at #R29912 when bit 0 at #R32764 is set (by the routine
; at #R29149), indicating that Sam is being carried by a gangster or policeman.
@refs=29912
@label=CARRIED
c31476 LD HL,1       ; {Set Sam's main action timer to 1 (so that we come here
@ssub=LD (58880+8),HL
 31479 LD (58888),HL ; on the next pass through the main loop) and his
                     ; midstride/mid-action timer to 0}
; First we need to determine who is carrying Sam.
 31482 LD HL,55040   ; Point #REGhl at byte #b0 of character #b215's buffer
 31485 LD B,15       ; We will check characters #b215-#b229
*31487 LD A,(HL)     ; #REGa=character's animatory state
 31488 AND 120       ; #REGa=character's base animatory state (bits 0-2 and 7
                     ; reset)
 31490 CP 24         ; #AS24: Is this character a policeman carrying Sam?
 31492 JR Z,31528    ; Jump if so
 31494 CP 40         ; #AS40: Is this character a gangster carrying Sam?
 31496 JR Z,31528    ; Jump if so
 31498 INC H         ; Next character
 31499 DJNZ 31487    ; Jump back until we find who's carrying Sam
; No one is carrying Sam at the moment. Whoever was carrying him must have just
; dropped him.
 31501 LD L,2        ; Point #REGhl at byte #b2 of Sam's buffer
 31503 LD A,(HL)     ; #REGa=Sam's y-coordinate
 31504 CP 19         ; Set the carry flag if it's less than 19
 31506 LD B,1        ; #REGb=1 indicates that Sam is being dropped off the roof
                     ; of a building
 31508 JP C,64341    ; Jump if Sam's being dropped off the roof of a building
; Sam is being dropped by a policeman onto the floor of the jail cell.
 31511 XOR A         ; {Clear all of Sam's status flags at #R32764
 31512 LD (32764),A  ; }
 31515 LD L,8        ; {Set Sam's main action timer to 8
 31517 LD (HL),8     ; }
 31519 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 31522 AND 128       ; Sam's new animatory state is #AS0 (bit 7 of #REGa is
                     ; reset, because Sam's always facing left when he's
                     ; dropped here)
 31524 INC D         ; Drop him one level (to the floor)
 31525 JP 59861      ; Update Sam's animatory state and location and update the
                     ; SRB
; Sam is still being carried by a gangster or policeman. Calculate Sam's new
; animatory state and location (which depend on those of his carrier).
*31528 LD L,4        ; Point #REGhl at byte #b4 of Sam's carrier's buffer
 31530 LD A,(HL)     ; #REGa=carrier's z-coordinate
@ssub=LD (58880+4),A
 31531 LD (58884),A  ; Set Sam's z-coordinate to the same value
 31534 LD L,0        ; Point #REGhl at byte #b0 of Sam's carrier's buffer
 31536 LD C,5        ; Animatory state #AS5: Sam being carried (facing left)
 31538 LD E,255      ; #REGe=-1
 31540 BIT 0,(HL)    ; Is Sam's carrier midstride?
 31542 JR Z,31547    ; Jump if not
 31544 DEC E         ; #REGe=-2
 31545 LD C,2        ; Animatory state #AS2: Sam standing (facing left)
*31547 LD A,E        ; #REGa=-2 if Sam's carrier is midstride, -1 otherwise
 31548 BIT 7,(HL)    ; Is Sam's carrier facing left?
 31550 JR Z,31556    ; Jump if so
 31552 SET 7,C       ; #REGc=#AS2(#b130) or #AS5(#b133) (animatory states of
                     ; Sam being carried, facing right)
 31554 NEG           ; #REGa=2 if Sam's carrier is midstride, 1 otherwise
*31556 INC L         ; {Add Sam's carrier's x-coordinate to obtain Sam's
 31557 ADD A,(HL)    ; x-coordinate}
 31558 LD E,A        ; Copy this to #REGe
 31559 INC L         ; {#REGd=Sam's carrier's y-coordinate
 31560 LD D,(HL)     ; }
 31561 DEC D         ; Decrement it to obtain Sam's y-coordinate
 31562 LD A,C        ; #REGa=Sam's animatory state
 31563 PUSH AF       ; Save Sam's animatory state briefly
 31564 PUSH DE       ; Save Sam's new coordinates
@ssub=LD H,58880/256
 31565 LD H,230      ; #b230=Sam
 31567 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 31570 POP DE        ; Restore Sam's new coordinates to #REGde
 31571 POP AF        ; Restore Sam's animatory state to #REGa
 31572 CALL 59861    ; Update Sam's animatory state and location and update the
                     ; SRB
 31575 JP 60547      ; Scroll the screen left, right, up or down if necessary

; Unused
s31578 DEFS 2

; Deal with a character who is standing next to the jail cell door
;
; Used by the routine at #R60347. Deals with a character who is standing just
; behind the jail cell door and trying to move right. If the character is Sam,
; this routine prevents him from escaping from the jail cell while he's
; imprisoned there.
;
; H Character number (#b215-#b230)
@refs=60347
@label=BYJAILDOOR
c31580 LD A,H        ; #REGa=character number
@ssub=CP 58880/256
 31581 CP 230        ; Are we dealing with Sam?
 31583 JP NZ,60423   ; Jump back into the calling routine if not (and allow the
                     ; character to move right)
 31586 LD A,(32747)  ; Collect the police flags from #R32747
 31589 RLCA          ; Is Sam in jail?
 31590 JP NC,60423   ; Jump back into the calling routine if not (and allow Sam
                     ; to move right)
 31593 RET           ;

; Let Sam out of jail if necessary
;
; Used by the command list at #R64764. Does nothing if Sam is not in jail;
; otherwise sets Sam's bail to some amount that he can afford, and lets him out
; of jail.
;
; H #b219 (Jailer)
@refs=61948
@label=FREESAM
c31594 XOR A         ; {Remove the address of this primary command routine from
 31595 LD L,9        ; bytes #b8 and #b9 of the jailer's buffer, triggering a
 31597 LD (HL),A     ; move to the next command in the command list after we
                     ; are finished here}
 31598 LD HL,32747   ; The police flags are stored at #R32747
 31601 BIT 7,(HL)    ; Is Sam in jail?
 31603 RET Z         ; Return if not
 31604 LD (HL),A     ; Clear the police flags
 31605 LD H,A        ; #REGh=0
 31606 LD DE,(32670) ; Collect the number of bucks from #R32670
*31610 CALL 61823    ; Get a random number in #REGa
 31613 AND 7         ; {Now #REGhl holds a randomly chosen multiple of 10
 31615 ADD A,2       ; between 20 and 90
 31617 LD C,A        ;
 31618 ADD A,A       ;
 31619 ADD A,A       ;
 31620 ADD A,C       ;
 31621 ADD A,A       ;
 31622 LD L,A        ; }
 31623 SBC HL,DE     ; Subtract Sam's cash supply from this number
 31625 JR NC,31610   ; Jump back to generate another bail amount if Sam's cash
                     ; supply is too small (which could lead to an
                     ; #BUG#lifeSentence(infinite loop))
 31627 LD A,C        ; {#REGa=ASCII code for the tens digit of the bail amount
 31628 ADD A,48      ; }
 31630 LD (32720),A  ; Store this at #R32720
 31633 LD A,C        ; {Subtract the bail amount from Sam's cash supply
 31634 CALL 28295    ; }
 31637 LD A,52       ; Message #R27304(#b52): ' THE BAIL WAS ${tens digit}0'
 31639 JP 28357      ; Queue this message

; Make a policeman arrest Sam, and end the game if he cannot pay his bail
;
; Used by the routine at #R29361. Sam has been caught by a policeman; this
; routine makes the policeman pick Sam up if he has at least $46 on him, and
; ends the game otherwise.
;
; H #b222 or #b223 (policeman)
@label=ARRESTSAM
c31642 PUSH HL       ; Save the policeman's character number
 31643 LD HL,(32670) ; #REGhl=number of bucks (stored at #R32670)
@keep
 31646 LD DE,65490   ; #REGde=-46
 31649 ADD HL,DE     ; Set the carry flag if Sam has at least $46
 31650 POP HL        ; Restore the policeman's character number to #REGh
 31651 JP C,29149    ; Jump if Sam has at least $46 (to make the policeman pick
                     ; him up)
; Sam has less than $46. Game over.
 31654 LD A,9        ; {Reduce Sam's cash supply to 0
 31656 CALL 28295    ; }
 31659 LD A,48       ; Message #R27236(#b48): 'AT THE JAIL THEY THREW THE BOOK
                     ; AT ME...'
 31661 LD DE,5232    ; #REGd=20, #REGe=112
 31664 PUSH AF       ; Save the message number
 31665 LD A,58       ; Combined with (#REGe,#REGd)=(112,20), this places the
                     ; top-left corner of the cutscene window at (128,31) and
                     ; Sam at (133,31) (in the jail cell)
 31667 JP 31451      ; Display the cutscene and end the game

; Control the hook while it's flying
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b18 and #b19 of the hook's buffer by the routine at #R31713. It controls the
; hook until the end of its flight, at which point it places a rope above the
; roof of no. 19 if necessary, or else restores the hook to its original
; location on the top floor of no. 74.
;
; H #b229 (hook)
@refs=61948
@label=MVHOOK
c31670 CALL 59848    ; Update the SRB for the hook's current animatory state
                     ; and location
 31673 LD L,20       ; Byte #b20 of the hook's buffer holds the distance
                     ; remaining in the hook's flight
 31675 DEC (HL)      ; Decrease this by 1
 31676 JR Z,31688    ; Jump if the hook's flight has ended
 31678 RLCA          ; {Set the carry flag if the hook is flying rightwards
 31679 RRCA          ; }
 31680 DEC E         ; Decrement the hook's x-coordinate
 31681 JR NC,31685   ; Jump if the hook is flying leftwards
 31683 INC E         ; {Otherwise increment the hook's x-coordinate
 31684 INC E         ; }
*31685 JP NZ,59861   ; Update the hook's animatory state and location and
                     ; update the SRB (unless the hook has flown off the edge
                     ; of the play area)
; The hook's flight has ended (either naturally or by escaping the play area).
; Check whether it reached the roof of no. 17.
*31688 DEC L         ; #REGl=#b19
 31689 XOR A         ; {Remove the address of this routine from bytes #b18 and
 31690 LD (HL),A     ; #b19 of the hook's buffer}
 31691 LD L,3        ; {Clear all flags in byte #b3 of the hook's buffer
 31693 LD (HL),A     ; }
 31694 DEC L         ; {Set the hook's y-coordinate to 50 (out of sight)
 31695 LD (HL),50    ; }
 31697 LD A,D        ; #REGa=hook's y-coordinate while it was flying
 31698 CP 9          ; Was it greater than 9?
 31700 JR NC,31708   ; Jump if so
 31702 LD A,E        ; #REGa=x-coordinate of the hook at the end of its flight
 31703 CP 223        ; Did the hook reach the roof of no. 17?
 31705 JP NC,64549   ; Jump if so
*31708 LD HL,32028   ; {Reactivate the entry for the hook in the object table
 31711 DEC (HL)      ; at #R32028}
 31712 RET           ;

; 'C' pressed - use hook
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'C' is
; pressed.
@refs=61483
@label=USEHOOK
c31713 LD A,(32745)  ; Collect the object inventory flags from #R32745
 31716 BIT 6,A       ; Has Sam got the hook?
 31718 RET Z         ; Return if not
@ssub=LD A,(58880+4)
 31719 LD A,(58884)  ; #REGa=Sam's z-coordinate
@ssub=LD HL,(58880+1)
 31722 LD HL,(58881) ; Collect Sam's x- and y-coordinates in #REGl and #REGh
 31725 RRCA          ; Is Sam's z-coordinate 1 (indoors)?
 31726 JR NC,31755   ; Jump if not
 31728 LD A,L        ; #REGa=x (Sam's x-coordinate)
 31729 CP 222        ; Is Sam in no. 17 or no. 15 (x>=222)?
 31731 RET NC        ; Return if so
 31732 CP 207        ; Is Sam in no. 19 (207<=x<222)?
 31734 JR NC,31751   ; Jump if so
 31736 CP 122        ; Is Sam in the police station, no. 27, or the apartments
                     ; next to no. 19 (122<=x<207)?
 31738 JR NC,31747   ; Jump if so
 31740 CP 103        ; Is Sam in no. 31 (103<=x<122)?
 31742 JR NC,31751   ; Jump if so
 31744 CP 25         ; Is Sam in no. 74 or the hotel (25<=x<103)?
 31746 RET NC        ; Return if so
*31747 LD A,7        ; 7 is the y-coordinate of the roof of the police station,
                     ; no. 27, and the apartment building next to no. 19
 31749 JR 31753      ;
*31751 LD A,13       ; 13 is the y-coordinate of the roofs of no. 19 and no. 31
*31753 CP H          ; Is Sam on the roof of a building?
 31754 RET C         ; Return if not
; Sam is in a location that is amenable to hook-throwing.
*31755 INC H         ; #REGh=1+Sam's y-coordinate
 31756 LD A,(58880)  ; #REGa=Sam's animatory state
 31759 AND 128       ; Keep only the direction bit (bit 7)
 31761 JR Z,31764    ; Jump if Sam is facing left
 31763 INC L         ; #REGl=1+Sam's x-coordinate
*31764 ADD A,121     ; #REGa=#AS121(#b121/#b249) (hook)
 31766 EX DE,HL      ; #REGde=hook's initial coordinates
@ssub=LD HL,58624+19
 31767 LD HL,58643   ; Point #REGhl at byte #b19 of character buffer #b229
 31770 INC (HL)      ; {Is the current owner of character buffer #b229 (the
 31771 DEC (HL)      ; hook or a banknote) under the control of an
                     ; uninterruptible subcommand routine?}
 31772 RET NZ        ; Return if so (the hook must currently be in flight,
                     ; which is unlikely)
; The hook will be thrown. Prepare it for launch now.
 31773 INC L         ; {Initialise the distance remaining for the hook to fly
 31774 LD (HL),20    ; (stored in byte #b20 of the hook's buffer)}
 31776 DEC L         ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),31670/256
 31777 LD (HL),123   ; routine at #R31670 into bytes #b18 and #b19 of the
 31779 DEC L         ; hook's buffer
@ssub=LD (HL),31670%256
 31780 LD (HL),182   ; }
 31782 LD L,4        ; {Set the hook's z-coordinate to 4
 31784 LD (HL),L     ; }
 31785 DEC L         ; {Set bit 7 of byte #b3 of the hook's buffer, thus making
 31786 LD (HL),128   ; the hook fly as fast as possible}
 31788 DEC L         ; {Initialise the hook's x- and y-coordinates
 31789 LD (HL),D     ;
 31790 DEC L         ;
 31791 LD (HL),E     ; }
 31792 DEC L         ; {Initialise the hook's animatory state
 31793 LD (HL),A     ; }
 31794 CALL 59861    ; Update the hook's animatory state and location and
                     ; update the SRB
 31797 LD HL,32745   ; The object inventory flags are stored at #R32745
 31800 RES 6,(HL)    ; Clear bit 6, thus removing the hook from Sam's
                     ; possession
@ssub=LD H,58880/256
 31802 LD H,230      ; #b230=Sam
 31804 JP 62212      ; Raise Sam's arm and make a sound effect

; Unused
s31807 DEFB 0

; Check whether a character will soon be entering or leaving the hotel
;
; Used by the routine at #R60812. Checks whether a character will soon be
; entering or leaving the hotel, and if so, determines where he should start
; climbing the front steps (depending on his current location), or through
; which door he should leave (left or right, depending on his destination).
;
; H Character number (#b215-#b230)
@label=BYHOTEL
c31808 CALL 60726    ; Obtain an identifier for the character's current
                     ; location
 31811 PUSH AF       ; Save the identifier
 31812 AND A         ; Is the character on the sidewalk or the road?
 31813 JR NZ,31856   ; Jump if not
; The character is on the sidewalk or the road.
 31815 LD L,12       ; {Collect the character's destination location identifier
 31817 LD A,(HL)     ; from byte #b12 of his buffer}
 31818 AND 240       ; Keep only the region identifier bits (bits 4-7)
 31820 CP 144        ; Is the character going to the hotel?
 31822 JR NZ,31854   ; Jump if not
; The character is on the sidewalk or road, and destined for somewhere inside
; or outside the hotel. Figure out which entrance (left or right) the character
; should use, based on his current location and his destination.
 31824 LD A,(HL)     ; #REGa=destination location identifier
 31825 CP 149        ; Set the carry flag if the destination is on the first
                     ; floor or the front steps of the hotel
 31827 LD L,10       ; Point #REGhl at byte #b10 of the character's buffer
 31829 LD A,(HL)     ; #REGa=x' (the character's destination x-coordinate)
 31830 JR C,31834    ; Jump if the destination is on the first floor or the
                     ; front steps of the hotel (in which case 75<=x'<=82)
 31832 LD A,79       ; Assume x'=79 (the x-coordinate of the middle of the
                     ; doorsteps of the hotel)
*31834 LD L,1        ; {Add x (the character's current x-coordinate)
 31836 ADD A,(HL)    ; }
 31837 SUB 158       ; {Reset the carry flag if 158-x'<=x<=285-x'
 31839 RLCA          ; }
 31840 LD A,88       ; This is the x-coordinate of the rightmost front doorstep
                     ; of the hotel
 31842 JR NC,31846   ; Jump if x>=158-x' (the character will enter the hotel
                     ; from the right)
 31844 LD A,67       ; This is the x-coordinate of the leftmost front doorstep
                     ; of the hotel
@ssub=LD BC,65432+16
@nowarn
*31846 LD BC,65448   ; Point #REGbc at the first byte of the entry that
                     ; corresponds to the hotel in the data table of building
                     ; entrance x-coordinates at #R65432
 31849 LD (BC),A     ; Set the first byte to #b67 or #b88
 31850 ADD A,2       ; {Set the second byte of the entry to #b69 or #b90
 31852 INC C         ;
 31853 LD (BC),A     ; }
*31854 POP AF        ; Restore the identifier for the character's current
                     ; location to #REGa
 31855 RET           ;
; The character is not on the sidewalk or the road.
*31856 CP 149        ; If the character's location identifier is at least
                     ; #b149, then he's not on the first floor or the front
                     ; steps of the hotel
 31858 JR NC,31854   ; Jump if this is the case
 31860 CP 145        ; Is the character on the front steps of the hotel (below
                     ; the level of the first floor)?
 31862 JR Z,31887    ; Jump if so
 31864 AND 240       ; Keep only the region identifier bits (bits 4-7)
 31866 CP 144        ; Is the character on the first floor of the hotel?
 31868 JR NZ,31854   ; Jump if not
; The character is on the first floor of the hotel.
 31870 LD L,10       ; Point #REGhl at byte #b10 of the character's buffer
 31872 LD A,(HL)     ; #REGa=x' (character's destination x-coordinate)
 31873 LD L,1        ; {Add x (the character's current x-coordinate; 75<=x<=82)
 31875 ADD A,(HL)    ; }
 31876 SUB 158       ; {Reset the carry flag if 158-x<=x'<=285-x
 31878 RLCA          ; }
 31879 LD D,76       ; Set #REGd (which holds the x-coordinate of the top of
                     ; the steps going down to the sidewalk below) to 76
                     ; (x-coordinate of the left-hand entrance of the hotel)
 31881 JR C,31854    ; Jump if x'<158-x (the character will exit the hotel on
                     ; the left)
 31883 LD D,81       ; This is the x-coordinate of the right-hand entrance of
                     ; the hotel
 31885 JR 31854      ; Return to the caller with #REGd adjusted depending on
                     ; the character's destination x-coordinate
; The character is on the front steps of the hotel (below the level of the
; first floor).
*31887 LD L,13       ; {Set the location/destination indicator in byte #b13 of
 31889 LD (HL),0     ; the character's buffer to 0 (the front steps of the
                     ; hotel count as part of the sidewalk if the character is
                     ; going somewhere other than the hotel)}
 31891 DEC L         ; #REGl=#b12
 31892 LD A,(HL)     ; #REGa=destination location identifier
 31893 AND 240       ; Keep only the region identifier bits (bits 4-7)
 31895 CP 144        ; Is the character going to the hotel?
 31897 JR NZ,31854   ; Jump if not
; The character is on the front steps of the hotel (below the level of the
; first floor), and his destination is somewhere inside or outside the hotel.
 31899 INC L         ; {Set byte #b13 of the character's buffer to 1
 31900 INC (HL)      ; (indicating that the character is not on the sidewalk or
                     ; the road, and is in the same region as his destination)}
 31901 DEC L         ; #REGl=#b12
 31902 LD A,(HL)     ; #REGa=destination location identifier
 31903 CP 149        ; Is the destination on or below the first floor of the
                     ; hotel?
 31905 JR C,31938    ; Jump if so
; The character is on the front steps of the hotel (below the level of the
; first floor), and his destination is somewhere inside the hotel, above the
; first floor.
 31907 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 31909 LD B,L        ; #REGb=1 (go right)
 31910 LD A,(HL)     ; #REGa=x (the character's x-coordinate)
 31911 CP 79         ; Set the carry flag if x<79
 31913 LD A,76       ; This is the x-coordinate of the left edge of the front
                     ; door of the hotel
 31915 JR C,31919    ; Jump if x<79
 31917 LD A,82       ; This is the x-coordinate of the right edge of the front
                     ; door of the hotel
*31919 CP (HL)       ; Compare #REGa (76 or 82) with x (the character's
                     ; x-coordinate)
 31920 DEC HL        ; Point #REGhl at byte #b0 of the character's buffer
 31921 JR C,31931    ; Jump if x is 77 or 78, or greater than 82 (meaning the
                     ; character should go left to reach the hotel entrance)
 31923 BIT 7,(HL)    ; Is the character facing right?
 31925 JR NZ,31854   ; Jump if so
 31927 POP AF        ; Restore the identifier for the character's current
                     ; location to #REGa (though it is ignored)
*31928 LD A,B        ; #REGa=1 (go right) or 2 (go left)
 31929 POP BC        ; Drop the return address from the stack
 31930 RET           ; Return to the caller of #R60812
*31931 BIT 7,(HL)    ; Is the character facing left?
 31933 JR Z,31854    ; Jump if so
 31935 INC B         ; #REGb=2 (go left)
 31936 JR 31928      ;
; The character is on the front steps of the hotel (below the level of the
; first floor), and his destination is on or below the first floor of the
; hotel.
*31938 POP AF        ; Restore the identifier for the character's current
                     ; location to #REGa (though it is ignored)
 31939 POP BC        ; Drop the return address from the stack
 31940 JP 60827      ; Re-enter the calling routine at #R60827

; Unused
s31943 DEFB 0

; Collect a character's destination coordinates from a command list
;
; Used by the routine at #R62976. Copies the destination coordinates from the
; command list into bytes #b10 and #b11 of the character's buffer, and inserts
; the location identifier for the destination into byte #b12.
;
; H Character number (#b215-#b229)
@label=GETDEST
c31944 LD L,10       ; {Copy the destination coordinates from the command list
 31946 CALL 61809    ; into bytes #b10 and #b11 of the character's buffer}
 31949 LD D,(HL)     ; {Transfer the destination coordinates to #REGde
 31950 DEC L         ;
 31951 LD E,(HL)     ; }
 31952 LD C,1        ; Assume a destination z-coordinate of 1 (indoors)
 31954 CALL 29081    ; Obtain an identifier for the destination location and
                     ; copy it into byte #b12 of the character's buffer
 31957 LD L,8        ; Point #REGhl at byte #b8 of the character's buffer
 31959 RET           ;

; Take the hook and budgie from Sam
;
; Used by the routine at #R64338. Removes the hook and the budgie from Sam's
; possession if he has either one.
@label=RMOBJS
c31960 LD HL,32028   ; Point #REGhl at the object location table at #R32028
*31963 LD A,(HL)     ; Pick up the first byte of an entry
 31964 INC A         ; Have we reached the end of the table?
 31965 RET Z         ; Return if so
 31966 INC HL        ; {Point #REGhl at the last byte of the entry
 31967 INC HL        ;
 31968 INC HL        ; }
 31969 RRCA          ; Is the entry active?
 31970 JR C,31995    ; Jump to the next entry if not
 31972 AND 32        ; Is the entry for the hook or budgie?
 31974 JR Z,31995    ; Jump to the next entry if not
 31976 LD A,(32745)  ; Collect the object inventory flags from #R32745
 31979 AND (HL)      ; Does Sam have this object?
 31980 JR Z,31995    ; Jump if not
 31982 LD A,(32745)  ; {Take the object from Sam by resetting the appropriate
 31985 XOR (HL)      ; bit at #R32745
 31986 LD (32745),A  ; }
 31989 DEC HL        ; {Point #REGhl at the first byte of the entry
 31990 DEC HL        ;
 31991 DEC HL        ; }
 31992 DEC (HL)      ; Activate the entry by resetting bit 0 of the first byte
 31993 JR 31963      ; Jump back to scan the remaining entries
*31995 INC HL        ; Move #REGhl along to the first byte of the next entry
 31996 JR 31963      ; Jump back to scan this entry

; Check whether Sam should be chased by the police
;
; Used by the routine at #R29361. Returns with the #R32747(police flags) in
; #REGa if Sam is neither falling from the roof of a building nor being carried
; by a gangster or policeman; otherwise returns with #REGa=0.
@label=CHKWANTED
c31998 LD A,(32764)  ; Collect Sam's status flags from #R32764
 32001 AND 129       ; Keep only bits 0 and 7
 32003 LD A,(32747)  ; Collect the police flags from #R32747
 32006 RET Z         ; Return unless Sam is being carried by a gangster or
                     ; policeman, or is falling from a building
 32007 XOR A         ; #REGa=0
 32008 RET           ;

; Set the attribute bytes for Sam's current disguise
;
; Used by the routine at #R29100. Sets the attribute bytes for Sam's disguise
; in the bottom right corner of the screen.
@label=GUISEATTR
c32009 EX DE,HL      ;
; This entry point is used by the routine at #R63838.
*32010 PUSH HL       ;
 32011 CALL 29332    ; Get the attribute byte to use for Sam's disguise
*32014 LD BC,797     ; #REGb=3, #REGc=29
*32017 LD (HL),A     ; {Set a row of attribute bytes for Sam's disguise in the
 32018 INC L         ; bottom right of the screen
 32019 DJNZ 32017    ; }
 32021 JR Z,32026    ; Jump if we've done all 3 rows
 32023 ADD HL,BC     ; Point #REGhl at the attribute byte for the first tile in
                     ; the next row down
 32024 JR 32014      ; Jump back to set the attribute bytes in this row
*32026 POP HL        ;
 32027 RET           ;

; Object/key/cash/message location table
;
; Used by the routines at #R30017, #R30211 and #R31960. Each entry here
; consists of 4 bytes. The bits in the first byte have the following meanings:
; .
; #TABLE(default,centre,:w)
; { =h Bit(s) | =h Meaning }
; { 7         | If set, the entry is initially inactive }
; { =r4 4-6   | 000: entry corresponds to a cash bonus }
; {             001: entry corresponds to a key }
; {             010: entry corresponds to a message }
; {             100: entry corresponds to an object that must be picked up
; (hook or budgie) }
; { 1-3       | Unused }
; { 0         | If set, the entry is inactive }
; TABLE#
; .
; The second and third bytes contain the coordinates of the object. The
; contents of the fourth byte depend on the type of object; see the individual
; entry for details.
; .
; The first entry in this table is for the hook. It is active from the
; beginning of the game, deactivated (by the routine at #R30211) when the hook
; is picked up, and reactivated (by the routine at #R31670) after the hook has
; been thrown and finished flying.
@label=HOOK
b32028 DEFB 64       ; Bit 6 set: object that must be picked up
 32029 DEFB 51,13    ; Location (top floor of no. 74)
 32031 DEFB 64       ; Bit 6 set (see #R32745)
; The next entry is for the budgie. It is activated by the routine at #R29952
; (using the event entry at #R24727), and deactivated (by the routine at
; #R30211) when the budgie is picked up.
@label=BUDGIE
@defb=193 ; Deactivate budgie
 32032 DEFB 193      ; Bit 6 set: object that must be picked up
 32033 DEFB 225,13   ; Location (room above Sam's office)
 32035 DEFB 128      ; Bit 7 set (see #R32745)
; The next entry is for the key to no. 74. It is activated by the routine at
; #R29952 (using the event entry at #R24666), and deactivated (by the routine
; at #R30211) when the key is found.
@label=KEY74
@defb=145 ; Deactivate key
 32036 DEFB 145      ; Bit 4 set: key
 32037 DEFB 34,13    ; Location (in the room past the catwalk)
 32039 DEFB 8        ; Bit 3 set (see #R32746)
; The next entry is for the key to no. 31. It is active from the beginning of
; the game, and deactivated (by the routine at #R30211) when the key is found.
@label=KEY31
 32040 DEFB 16       ; Bit 4 set: key
 32041 DEFB 252,13   ; Location (top floor of no. 15)
 32043 DEFB 16       ; Bit 4 set (see #R32746)
; The next entry is for the key to no. 27. It is activated by the routine at
; #R29952 (using the event entry at #R24716), and deactivated (by the routine
; at #R30211) when the key is found.
@label=KEY27
@defb=145 ; Deactivate key
 32044 DEFB 145      ; Bit 4 set: key
 32045 DEFB 170,35   ; Location (middle of the road next to no. 27)
 32047 DEFB 32       ; Bit 5 set (see #R32746)
; The next entry is for the key to no. 15. It is active from the beginning of
; the game, and deactivated (by the routine at #R30211) when the key is found.
@label=KEY15
 32048 DEFB 16       ; Bit 4 set: key
 32049 DEFB 106,25   ; Location (second floor of no. 31)
 32051 DEFB 64       ; Bit 6 set (see #R32746)
; The next entry is for the dead man's body on the top floor of the hotel. It
; is active from the beginning of the game, and deactivated (by the routine at
; #R30211) when Sam finds the body.
@label=CORPSE
 32052 DEFB 32       ; Bit 5 set: message
 32053 DEFB 64,7     ; Location (top floor of the hotel)
 32055 DEFB 53       ; Message #R27315(#b53): 'THERE'S A MAN'S BODY ON THE
                     ; FLOOR'
; The next entry is for where someone growls 'NO KEY EH!'. It is active from
; the beginning of the game, and deactivated by the routine at #R29952 (using
; the event entry at #R24586).
@label=NOKEYEH
 32056 DEFB 32       ; Bit 5 set: message
 32057 DEFB 249,27   ; Location (stairs up to the second floor of no. 15)
 32059 DEFB 61       ; Message #R32155(#b61): 'SOMEONE GROWLED 'NO KEY EH!''
; The next entry is for where there's a safe with four locks. It is active from
; the beginning of the game, and deactivated (by the routine at #R30211) when
; Sam finds the safe.
@label=SAFE
 32060 DEFB 32       ; Bit 5 set: message
 32061 DEFB 228,13   ; Location (room above Sam's office)
 32063 DEFB 71       ; Message #R23528(#b71): 'THERES A SAFE WITH 4 LOCKS'
; The next entry is for where someone below says 'CRUISE WAS DRESSED AS THE OIL
; MAN...'. It is deactivated (by the routine at #R30211) when Sam is halfway
; across the rope, and checked by the routine at #R29952 (using the event entry
; at #R24558).
@label=ROPEMSG
 32064 DEFB 32       ; Bit 5 set: message
 32065 DEFB 214,6    ; Location (on the rope above no. 19)
 32067 DEFB 70       ; Message #R23483(#b70): 'SOMEONE BELOW SAID 'CRUISE WAS
                     ; DRESSED AS THE OIL MAN. DONT LET ANYONE PAST''
; The next entry is for the cash bonus on the top floor of the hotel. It is
; deactivated (by the routine at #R30211) when Sam finds the money.
@label=CASH1
 32068 DEFB 0        ; Bits 4-6 reset: cash
 32069 DEFB 58,7     ; Location
 32071 DEFB 100      ; $100
; The next entry is for the cash bonus on the first floor of no. 19. It is
; deactivated (by the routine at #R30211) when Sam finds the money.
@label=CASH2
 32072 DEFB 0        ; Bits 4-6 reset: cash
 32073 DEFB 220,31   ; Location
 32075 DEFB 50       ; $50
; The next entry is for the cash bonus on the second floor of no. 15. It is
; deactivated (by the routine at #R30211) when Sam finds the money.
@label=CASH3
 32076 DEFB 0        ; Bits 4-6 reset: cash
 32077 DEFB 242,25   ; Location
 32079 DEFB 100      ; $100
; The next entry is for the cash bonus on the top floor of no. 74. It is
; deactivated (by the routine at #R30211) when Sam finds the money.
@label=CASH4
 32080 DEFB 0        ; Bits 4-6 reset: cash
 32081 DEFB 40,13    ; Location
 32083 DEFB 100      ; $100
; The last entry is for the cash bonus in the room above Sam's office. It is
; deactivated (by the routine at #R30211) when Sam finds the money.
@label=CASH5
 32084 DEFB 0        ; Bits 4-6 reset: cash
 32085 DEFB 226,13   ; Location
 32087 DEFB 200      ; $200
; And finally the end marker.
 32088 DEFB 255

; Message #b59: 'LANA ANSWERED 'OOH SAM! THEY KILLED MY FIANCE AND STOLE THE
; BUDGIE''
;
; Appears in the phone message table entry at #R27512.
@label=MSG059
t32089 DEFB 27          ; #R27360(#b27): 'LANA ANSWERED 'OOH SAM! '
 32090 DEFB 122         ; #R26846(#b122): 'THE'
 32091 DEFM "Y KILL"
 32097 DEFB 108         ; #R26667(#b108): 'ED '
 32098 DEFM "MY FIANCE"
 32107 DEFB 116         ; #R26735(#b116): ' AND '
 32108 DEFM "STOLE"
 32113 DEFB 100         ; #R26624(#b100): ' THE '
 32114 DEFM "BUDGIE'"
 32121 DEFB 0           ; End marker

; Message #b60: 'LANA ANSWERED 'OOH SAM! THAT CROOK THE FAT MAN'S JUST MOVED
; INTO NO 15''
;
; Appears in the phone message table entry at #R27515.
@label=MSG060
t32122 DEFB 27            ; #R27360(#b27): 'LANA ANSWERED 'OOH SAM! '
 32123 DEFB 31            ; #R27857(#b31): 'THAT'
 32124 DEFM " CROOK"
 32130 DEFB 100           ; #R26624(#b100): ' THE '
 32131 DEFB 129           ; #R27868(#b129): 'FAT'
 32132 DEFB 115           ; #R26730(#b115): ' MAN'
 32133 DEFM "'S JUST MOV"
 32144 DEFB 108           ; #R26667(#b108): 'ED '
 32145 DEFM "INTO "
 32150 DEFB 102           ; #R26638(#b102): 'NO '
 32151 DEFM "15'"
 32154 DEFB 0             ; End marker

; Message #b61: 'SOMEONE GROWLED 'NO KEY EH!''
;
; Appears in the message location table entry at #R32056.
@label=MSG061
t32155 DEFB 128      ; #R27862(#b128): 'SOMEONE '
 32156 DEFM "GROWL"
 32161 DEFB 108      ; #R26667(#b108): 'ED '
 32162 DEFM "'"
 32163 DEFB 102      ; #R26638(#b102): 'NO '
 32164 DEFB 4        ; #R26374(#b4): 'KEY'
 32165 DEFM " EH!'"
 32170 DEFB 0        ; End marker

; Message #b62: 'IT ALL WENT BLACK. AS I FELL SOMEONE FAT PUSHED PAST ME
; SHOUTING ' YOULL NOT GET THE KEY WHEN I'M STILL STANDING''
;
; Appears in Sam's initialisation parameters for game mode 2 at #R58924.
@label=MSG062
t32171 DEFM "IT ALL WENT BLACK. AS "
 32193 DEFB 103                      ; #R26642(#b103): 'I '
 32194 DEFM "FELL "
 32199 DEFB 128                      ; #R27862(#b128): 'SOMEONE '
 32200 DEFB 129                      ; #R27868(#b129): 'FAT'
 32201 DEFM " PUSH"
 32206 DEFB 108                      ; #R26667(#b108): 'ED '
 32207 DEFM "PAST ME SHOUT"
 32220 DEFB 30                       ; #R27854(#b30): 'ING '
 32221 DEFM "'"
 32222 DEFB 126                      ; #R26871(#b126): ' YOU'
 32223 DEFM "LL NOT GET"
 32233 DEFB 100                      ; #R26624(#b100): ' THE '
 32234 DEFB 4                        ; #R26374(#b4): 'KEY'
 32235 DEFB 7                        ; #R26391(#b7): ' WHEN'
 32236 DEFM " I'M STILL STAND"
 32252 DEFB 127                      ; #R26876(#b127): 'ING'
 32253 DEFM "'"
 32254 DEFB 0                        ; End marker

; Unused
s32255 DEFB 0

; Mirrored values of #b0-#b255
;
; The contents of this table are generated by the routine at #R64582 and used
; by the routine at #R59635 to flip sprite tiles. This page of memory is also
; used as a temporary store for the top 8 rows of pixels on the screen by the
; routine at #R64618 when scrolling the screen up and down.
@label=MIRROR
b32256 DEFB 0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240
 32272 DEFB 8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248
 32288 DEFB 4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244
 32304 DEFB 12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252
 32320 DEFB 2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242
 32336 DEFB 10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250
 32352 DEFB 6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246
 32368 DEFB 14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254
 32384 DEFB 1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241
 32400 DEFB 9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249
 32416 DEFB 5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245
 32432 DEFB 13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253
 32448 DEFB 3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243
 32464 DEFB 11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251
 32480 DEFB 7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247
 32496 DEFB 15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255

; Screen refresh buffer
;
@ignoreua
; Used by the routines at #R59861, #R60032, #R61630, #R61696, #R62368 and
; #R64599. Each byte of the screen refresh buffer (SRB) corresponds to a
; segment of 8 character squares on the screen, the leftmost of which will be
; at x=0, x=8, x=16 or x=24. Each bit set in an SRB byte corresponds to a
; character square in the segment that needs refreshing. Bit 7 corresponds to
; the leftmost character square in the segment, bit 0 to the rightmost
; character square.
; .
; Note that, owing to a quirk in the way the SRB-updating routine at #R59861
; works, the first 16 bytes of the screen refresh buffer correspond not to any
; part of the screen, but to the four rows of the play area that are
; immediately above the currently visible portion of the play area. Therefore,
; the screen-updating routine at #R60032 ignores those bytes and starts
; inspecting SRB bytes at #w32528 instead.
; .
; Note also that the routine at #R28357 uses the first 16 bytes of the SRB as a
; temporary backup store for the submessage indicator and submessage addresses
; at #R32641, and the routine at #R64618 uses the first 32 bytes of the SRB as
; a temporary store for the top row of attribute bytes when scrolling the
; screen up and down.
@label=SRB
g32512 DEFS 96

; Message buffer
;
; Used by the routine at #R28357 to prepare a message before displaying it.
; Also used by the routines at #R61838 and #R61882 as temporary storage for one
; of the character buffers in groups #b215-#b221.
@label=MSGBUFFER
g32608 DEFS 32       ; The message is placed here
@label=MSGBUFOF
 32640 DEFB 0        ; Overflow byte

; Submessage indicator and message addresses
;
; Used by the routine at #R28357.
@label=SUBMSGS
g32641 DEFB 0        ; 0 (end of top-level message has been reached), 2
                     ; (top-level message), 4 (submessage), 6 (sub-submessage)
                     ; or 8 (sub-sub-submessage)
 32642 DEFW 0        ; Address of the next character in the top-level message
 32644 DEFW 0        ; Address of the next character in the submessage
 32646 DEFW 0        ; Address of the next character in the sub-submessage
 32648 DEFW 0        ; Address of the next character in the sub-sub-submessage
 32650 DEFW 0        ; {Unused (no message has more than 3 levels of
 32652 DEFW 0        ; submessages)
 32654 DEFW 0        ; }
 32656 DEFB 0        ; Unused

; Unused
g32657 DEFB 0

; Message #b2: '{number}'
;
; Used as a submessage of message #R27141(#b42). This message is cleared by the
; routine at #R30458 when Sam picks up a phone, and updated by the routine at
; #R30675 as Sam dials.
@label=MSG002
t32658 DEFS 4        ; The message is placed here
 32662 DEFB 0        ; End marker

; Phone table entry address
;
; Used by the routines at #R30575 and #R30627. Holds either the address of the
; second byte of the entry in the phone message table at #R27467 or #R27506
; that corresponds to the phone that Sam is calling (if the person on the other
; end has a message for him) or picking up a call from, or the address of the
; final byte of the phone table at #R27506 (if the person Sam's calling has no
; message to give); this address contains the number of the message
; corresponding to the name that Sam must give in order to receive the
; telephone message, or #b0 if no name is required to receive the message, or
; #b255 if the person Sam's calling will respond with message #R27204(#b46) (I
; DUNNO NO {name}).
@label=PTABLEADDR
g32663 DEFW 0

; Time that Sam last lifted a ringing telephone
;
; Checked by the routine at #R30429 and set by the routine at #R30458 (to the
; value of the second byte of the the system variable FRAMES, which is
; incremented every 5.12s).
@label=RPHONETIME
g32665 DEFB 0

; ID of the telephone that Sam is calling
;
; Checked by the routines at #R29952 (using the event entry at #R24644) and
; #R30511, and updated by the routines at #R29149, #R30575, #R31244 and
; #R61923.
@label=OPHONEID
g32666 DEFB 0

; Telephone call status flags
;
; Used by the routines at #R30198, #R30458, #R30575, #R30675 and #R31244.
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Meaning if set }
; { 0         | Unused }
; { 1         | The telephone call is finished (disconnected) }
; { 2,3       | Unused }
; { 4         | A digit is being dialled }
; { 5         | The destination telephone is ringing }
; { 6         | Sam must give a name in response to 'WHO'S THERE?' }
; { 7         | Sam has picked up a ringing telephone }
; TABLE#
@label=CALLFLAGS
g32667 DEFB 0

; Score
;
; Checked by the routine at #R61630, and updated by the routine at #R28337.
@label=SCORE
g32668 DEFW 0

@defw=50
; Bucks
;
; Checked by the routines at #R31594, #R31642 and #R61630, and updated by the
; routines at #R24832 and #R28295.
@label=BUCKS
g32670 DEFW 50

; Time the last message was displayed
;
; Used by the routine at #R28357. Holds the two least significant bytes of the
; system variable FRAMES as they were when the last message was displayed.
@label=MSGTIME
g32672 DEFW 0

; Blown fuse delay counters
;
; When a fuse is blown, the corresponding delay counter here is initialised by
; the routine at #R29866. The delay counters are checked and decremented by the
; routine at #R62468.
@label=FUSECTRS
g32674 DEFB 0        ; No. 74
 32675 DEFB 0        ; Hotel
 32676 DEFB 0        ; No. 31
 32677 DEFB 0        ; No. 19
 32678 DEFB 0        ; No. 17
 32679 DEFB 0        ; No. 15

; Icon panel status flags
;
; Used as a temporary buffer by the routines at #R29668, #R29733 and #R30211.
; Each bit set here (by the routine at #R29733 or #R30211) corresponds to an
; icon that should be displayed in the panel.
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Icon }
; { 7         | Fuse/Budgie }
; { 6         | Door/Hook }
; { 5         | Light bulb }
; { 4         | Telephone }
; { 0-3       | Unused }
; TABLE#
@label=IPFLAGS
g32680 DEFB 0

; Main loop task timer
;
; Decremented and checked on every pass through the main loop by the routine at
; #R61440, and also checked by the routine at #R61764.
@label=TASKTIMER
g32681 DEFB 0

; Door knock status flags
;
; Used by the routines at #R62120, #R63304 and #R63437. The bits in each byte
; here are used as follows:
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Meaning if set }
; { 7         | Somebody has just knocked on the door }
; { 6         | Somebody is going to answer the door }
; { 0-5       | Unused }
; TABLE#
@label=KNOCKFLAGS
g32682 DEFB 0        ; Shop at the far left of town (unused)
 32683 DEFB 0        ; Right-hand shop under the apartments next to no. 74
                     ; (unused)
 32684 DEFB 0        ; No. 74
 32685 DEFB 0        ; No. 31
 32686 DEFB 0        ; No. 27
 32687 DEFB 0        ; No. 19
 32688 DEFB 0        ; Shop under no. 17 (unused)
 32689 DEFB 0        ; No. 17
 32690 DEFB 0        ; Shop under no. 15 (unused)
 32691 DEFB 0        ; No. 15

; Blown fuse indicator
;
; Used by the routine at #R61948, which stores a non-zero value here if any
; fuses are currently blown.
@label=BLOWNFUSE
g32692 DEFB 0

; Unused
g32693 DEFB 0

; Fuse flags
;
; Used by the routines at #R29866 and #R30116. A bit set here indicates that
; the corresponding fuse has already been blown once. Bits 6 and 7 are unused.
; .
; #TABLE(default,centre)
; { =h Bit | =h Fuse }
; { 0      | No. 74 }
; { 1      | Hotel }
; { 2      | No. 31 }
; { 3      | No. 19 }
; { 4      | No. 17 }
; { 5      | No. 15 }
; TABLE#
@label=FUSEFLAGS
g32694 DEFB 0

; Index of the current message in the message queue
;
; Used by the routines at #R28357 and #R30160.
@label=MSGINDEX
g32695 DEFB 0

; Message queue
;
; Used by the routines at #R28357, #R30160 and #R64121.
@label=MSGQUEUE
g32696 DEFS 8

; Bullet buffer 1
;
; Used by the routines at #R25118, #R26075 and #R26224.
@label=BULLET1
g32704 DEFB 0        ; x-coordinate of the leftmost column of the play area on
                     ; screen the last time the bullet was drawn
 32705 DEFB 0        ; Bullet's screen x-coordinate: x
 32706 DEFB 0        ; Bullet's screen y-coordinate: y (0 if the bullet is not
                     ; in flight)
; The bits in the fourth byte of the bullet buffer have the following
; significance:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit(s) | =h Description }
; { 7         | Reset if the bullet is flying leftwards, set otherwise }
; { 6         | Reset if the bullet is flying perfectly horizontally, set
;               otherwise (in which case bit 4 is also used) }
; { 5         | Unused }
; { 4         | Reset if the bullet is flying towards the ground, set if it's
;               flying towards the sky }
; { 3         | Unused }
; { 0-2       | Pixel row at which the bullet should be drawn in the screen
;               cell at (x,y) }
; TABLE#
 32707 DEFB 0

; Bullet buffer 2
;
; Used by the routines at #R25118, #R26075 and #R26224.
@label=BULLET2
g32708 DEFB 0        ; x-coordinate of the leftmost column of the play area on
                     ; screen the last time the bullet was drawn
 32709 DEFB 0        ; Bullet's screen x-coordinate: x
 32710 DEFB 0        ; Bullet's screen y-coordinate: y (0 if the bullet is not
                     ; in flight)
; The bits in the fourth byte of the bullet buffer have the following
; significance:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit(s) | =h Description }
; { 7         | Reset if the bullet is flying leftwards, set otherwise }
; { 6         | Reset if the bullet is flying perfectly horizontally, set
;               otherwise (in which case bit 4 is also used) }
; { 5         | Unused }
; { 4         | Reset if the bullet is flying towards the ground, set if it's
;               flying towards the sky }
; { 3         | Unused }
; { 0-2       | Pixel row at which the bullet should be drawn in the screen
;               cell at (x,y) }
; TABLE#
 32711 DEFB 0

; Last value seen in the system variable FRAMES
;
; Stores the value of the LSB of the system variable FRAMES as it stood at the
; end of the last pass through the main loop at #R61483 or the routine at
; #R30989.
@label=LFRAMES
g32712 DEFB 0

; Current disguise
;
; Checked by the routines at #R29218, #R29597 and #R29952 (using the event
; entry at #R24666), and changed by the routine at #R63838. Holds the ID of
; Sam's current disguise.
; .
; #UDGTABLE(default,centre,centre)
; { =h ID | =h Disguise }
; { 0     | #DISGUISE0(disguise0x1) }
; { 1     | #DISGUISE1(disguise1x1) }
; { 2     | #DISGUISE2(disguise2x1) }
; { 3     | #DISGUISE3(disguise3x1) }
; { 4     | #DISGUISE4(disguise4x1) }
; { 5     | #DISGUISE5(disguise5x1) }
; { 6     | #DISGUISE6(disguise6x1) }
; { 7     | #DISGUISE7(disguise7x1) }
; TABLE#
@label=DISGUISEID
g32713 DEFB 0

; Number string buffer
;
; Used by the routine at #R28186.
@label=NUMSTRBUF
g32714 DEFS 5        ; The number string is placed here
 32719 DEFB 0        ; End marker

; Message #b1: '{tens digit}/{name}'
;
; Used as a submessage of messages #R27057(#b36), #R27122(#b40), #R27204(#b46)
; and #R27304(#b52). The message number of the name is inserted by the routine
; at #R30575; the tens digit of the number of bucks is inserted by the routine
; at #R31594 or #R64338.
@label=MSG001
t32720 DEFB 0        ; The tens digit of the number of bucks or the message
                     ; number of the name is inserted here
 32721 DEFB 0        ; End marker

; Message number to watch in the message queue
;
; Set by the routines at #R24832, #R30989 and #R31126, and checked by the
; routine at #R30972.
@label=MSGNUM
g32722 DEFB 0

; ID of the telephone Sam is holding
;
; Set by the routine at #R30458 and checked by the routine at #R30675.
@label=PHONEID
g32723 DEFB 0

; Time when the score was last incremented
;
; Checked and set by the routine at #R31414. Holds the value of the two least
; significant bytes of the system variable FRAMES as they were when the score
; was last incremented.
@label=SCOREINCTS
g32724 DEFW 0

; Unused
g32726 DEFS 5

; Location the police should head for when looking for Sam
;
; Set by the routines at #R29088 and #R31289, and checked by the routine at
; #R29361.
@label=SAMLOCX
g32731 DEFB 0        ; x-coordinate
@label=SAMLOCY
 32732 DEFB 0        ; y-coordinate
@label=SAMLOCID
 32733 DEFB 0        ; Location identifier (see #R60726)

@defw=65041
; Random number seed
;
; Used by the routine at #R61823.
@label=RANDSEED
@keep
g32734 DEFW 65041    ; This is the initial value of the seed

@defs=7
; Unused
;
; Data is copied here from the game status buffer template at #R65504, but is
; never used.
@label=XUNKNOWN
g32736 DEFS 7

@defb=0
; Bullet timer
;
; Used by the routine at #R26075.
@label=BTIMER
g32743 DEFB 0

@defb=0
; Disguise status flags
;
; Modified by the routine at #R29100, and checked by the routine at #R29332.
; Each bit set here corresponds to a disguise that is known by the police. Bit
; 7 (corresponding to no disguise) is always set.
; .
; #UDGTABLE(default,centre,centre)
; { =h Bit | =h Disguise }
; { 7      | #DISGUISE0(disguise0x1) }
; { 6      | #DISGUISE1(disguise1x1) }
; { 5      | #DISGUISE2(disguise2x1) }
; { 4      | #DISGUISE3(disguise3x1) }
; { 3      | #DISGUISE4(disguise4x1) }
; { 2      | #DISGUISE5(disguise5x1) }
; { 1      | #DISGUISE6(disguise6x1) }
; { 0      | #DISGUISE7(disguise7x1) }
; TABLE#
@label=GUISEFLAGS
g32744 DEFB 0

@defb=0
; Object inventory
;
; Changed by the routine at #R30211, and checked by the routines at #R25420,
; #R29952 (using the event entries at #R24752 and #R24774) and #R31713. Each
; bit set here corresponds to an object in Sam's possession.
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Object }
; { 0-5       | Unused }
; { 6         | Hook }
; { 7         | Budgie }
; TABLE#
@label=OBJINV
g32745 DEFB 0

; Key inventory
;
; Changed by the routines at #R30211 and #R31126, and checked by the routines
; at #R29952 (using the event entries at #R24586 and #R24727) and #R31289. Each
; bit set here corresponds to a key in Sam's possession.
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Key }
; { 0-2       | Unused }
; { 3         | No. 74 }
; { 4         | No. 31 }
; { 5         | No. 27 }
; { 6         | No. 15 }
; { 7         | No. 19 }
; TABLE#
@label=KEYINV
g32746 DEFB 0

; Police flags
;
; Changed by the routines at #R29149, #R29952 (using the event entry at
; #R24727), #R31236, #R31289 and #R63281; checked by the routines at #R29668,
; #R31580, #R31594 and #R31998. The bits set here have the following meaning:
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Meaning if set }
; { 0         | Sam is wanted by the police }
; { 1-6       | Unused }
; { 7         | Sam is in jail }
; TABLE#
@label=COPFLAGS
g32747 DEFB 0

; High score
;
; The high score is copied here from the game status buffer template at #R65504
; by the routine at #R63662, but never used afterwards.
@label=XHISCORE
g32748 DEFW 0

; Game mode indicator
;
; Holds the current game mode (0-4). Checked by the routines at #R29952 (using
; the event entry at #R24544), #R31126, #R31414 and #R61568, and updated by the
; routine at #R63662.
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Mode | =h Meaning }
; { 0       | Demo mode }
; { 1       | The game has just started }
; { 2       | Sam has entered no. 15 with the key }
; { 3       | Sam has had the phone call about the key to no. 74 and gone to
;             the top of the apartment building }
; { 4       | The mob is after Sam }
; TABLE#
@label=GAMEMODE
g32750 DEFB 0

@defb=0
; Lives (first aid kits)
;
; Used by the routines at #R26002 and #R29716. A first aid kit will be
; displayed in the icon panel for every bit that is set.
@label=LIVES
g32751 DEFB 0

; Door status flags
;
; Used by the routines at #R30396, #R61764, #R62099 and #R62120. In each flag
; byte here, bits 0-2 hold the door close delay timer (0 if the door is shut),
; and the set bit (if any) in bits 3-7 indicates the key that is required to
; unlock the door:
; .
; #TABLE(default,centre)
; { =h Bit | =h Key }
; { 3      | Key to no. 74 }
; { 4      | Key to no. 31 }
; { 5      | Key to no. 27 }
; { 6      | Key to no. 15 }
; { 7      | Key to no. 19 }
; TABLE#
@label=DOORFLAGS
g32752 DEFB 0        ; Shop at the far left of town
 32753 DEFB 0        ; Right-hand shop under the apartments next to no. 74
@defb=8
 32754 DEFB 8        ; No. 74
@defb=16
 32755 DEFB 16       ; No. 31
@defb=32
 32756 DEFB 32       ; No. 27
@defb=128
 32757 DEFB 128      ; No. 19
 32758 DEFB 0        ; Shop under no. 17
 32759 DEFB 0        ; No. 17
 32760 DEFB 0        ; Shop under no. 15
@defb=64
 32761 DEFB 64       ; No. 15

; Input device indicator
;
; Set by the routine at #R24951, and used by the routine at #R60082. Holds
; #b107 ('k') if the Kempston joystick is being used, or #b0 otherwise.
@label=KEMPSTON
g32762 DEFB 0

@defb=0
; Number of the character just moved (#b215-#b229)
;
; Used by the routine at #R61948.
@label=LASTCHAR
g32763 DEFB 0

; Sam's status flags
;
; Used by the routine at #R29912 to decide how to deal with Sam.
; .
; #TABLE(default,centre,:w,centre)
; { =h Bit | =h Meaning if set                               | =h Routine }
; { 0      | Sam is being carried by a gangster or policeman | #R31476 }
; { 1      | Sam is immobilised (after meeting Lana)         | #R24832 }
; { 2      | Unused                                          | }
; { 3      | Sam is rolling or somersaulting                 | #R25805 }
; { 4      | Sam is on the phone                             | #R30675 }
; { =r5 5  | Sam is blowing a fuse                           | =r5 #R30146 }
; {          Sam is switching a light on or off }
; {          Sam is raising or lowering a blind }
; {          Sam is throwing the hook }
; {          Sam is picking up an object }
; { 6      | Sam is knocking on or opening a door            | #R62216 }
; { 7      | Sam is falling from the roof of a building      | #R64403 }
; TABLE#
@label=STATUS
g32764 DEFB 0

; Last key pressed
;
; Set by the main loop at #R61483, and checked by the routine at #R60641. Holds
; the value from the #R49968(keypress offset table) corresponding to the last
; key pressed.
@label=KEYCODE
g32765 DEFB 0

; x-coordinate of the leftmost column of the play area on screen
;
; Checked by many routines, and modified by the routines at #R59406 and
; #R59461.
@label=LEFTCOL
g32766 DEFB 0

@defb=0
; y-coordinate of the topmost row of the play area on screen
;
; Checked by many routines, and modified by the routines at #R59516 and
; #R59575.
@label=TOPROW
g32767 DEFB 0

; Play area graphic data (tiles #b0-#b255, base page #b128)
;
; Used by the routine at #R59148. Tiles #b184, #b185, #b215, #b216 and #b229
; are unused: tiles #b184 and #b185 are blank (all 0s); tiles #b215, #b216 and
; #b229 would be used at play area locations (83,0), (83,1) and (98,0) (above
; the roof of the hotel), but the two rows of tiles at y-coordinates 0 and 1
; are #FACT#hiddenSky(never displayed).
; .
; #UDGTABLE(gallery)
; { #UDG32983,43,,256(tile0xD7) | #UDG32984,43,,256(tile0xD8) |
; #UDG32997,43,,256(tile0xE5) }
; { #b215 | #b216 | #b229 }
; TABLE#
b32768 DEFB 128,128,0,128,0,0,0,128,168,0,20,128,153,153,153,153
 32784 DEFB 153,128,0,11,184,255,176,176,191,176,255,255,0,255,5,5
 32800 DEFB 253,5,255,165,165,191,165,255,69,69,127,69,255,69,69,125
 32816 DEFB 69,255,176,176,191,255,0,0,255,255,29,13,253,191,255,64
 32832 DEFB 176,191,191,191,0,255,255,255,13,13,253,253,253,13,196,255
 32848 DEFB 196,67,227,67,84,255,84,79,207,187,255,187,255,255,255,251
 32864 DEFB 191,191,255,253,253,255,191,191,255,127,127,127,255,125,125,125
 32880 DEFB 243,243,207,207,0,0,0,0,0,0,0,64,64,0,68,68
 32896 DEFB 255,31,31,0,255,0,255,224,160,0,224,254,239,0,7,16
 32912 DEFB 240,240,68,180,69,186,170,173,0,18,0,74,0,170,255,0
 32928 DEFB 0,0,64,64,64,0,3,13,21,85,85,87,16,24,208,80
 32944 DEFB 80,112,0,34,0,36,0,34,0,0,0,0,255,0,255,255
 32960 DEFB 0,68,0,204,68,253,255,196,0,0,1,240,68,68,28,97
 32976 DEFB 135,1,0,85,255,255,248,125,127,127,127,255,255,255,68,191
 32992 DEFB 127,0,184,7,0,85,255,128,255,255,255,160,0,255,255,255
 33008 DEFB 255,255,255,255,0,248,3,128,204,204,34,30,240,204,34,16
 33024 DEFB 255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255
 33040 DEFB 255,255,255,251,184,255,191,191,191,191,255,255,255,255,253,253
 33056 DEFB 253,253,255,191,191,191,191,255,127,127,127,127,255,125,125,125
 33072 DEFB 125,255,191,191,191,255,255,255,255,255,253,253,253,191,255,95
 33088 DEFB 191,191,191,191,255,255,255,255,253,253,253,253,253,253,255,255
 33104 DEFB 255,243,243,243,255,255,255,207,207,255,255,255,255,255,255,251
 33120 DEFB 191,191,255,253,253,255,191,191,255,127,127,127,255,125,125,125
 33136 DEFB 243,243,207,207,7,0,3,0,187,187,0,251,251,0,255,255
 33152 DEFB 255,31,30,255,0,255,0,224,160,224,0,0,0,255,7,16
 33168 DEFB 80,80,255,191,253,191,255,253,0,18,0,74,0,255,255,0
 33184 DEFB 224,0,224,127,255,254,251,239,223,127,255,255,208,152,240,240
 33200 DEFB 240,240,0,34,0,36,0,34,0,0,0,191,255,253,255,255
 33216 DEFB 0,68,0,102,17,255,0,208,255,255,248,15,17,17,3,24
 33232 DEFB 112,254,0,102,17,255,224,126,126,127,223,249,255,255,17,254
 33248 DEFB 127,0,248,7,255,102,127,128,31,255,1,224,0,0,0,0
 33264 DEFB 31,255,128,1,0,32,3,192,230,100,34,60,240,230,28,31
 33280 DEFB 128,128,255,128,0,0,0,128,145,0,200,128,204,204,204,204
 33296 DEFB 204,129,1,23,113,128,176,176,176,191,0,0,255,1,5,5
 33312 DEFB 5,253,129,177,177,177,191,65,81,81,81,127,65,85,85,85
 33328 DEFB 125,128,191,176,191,0,255,0,255,1,253,13,253,191,64,64
 33344 DEFB 191,191,191,176,255,255,255,0,253,253,253,253,13,253,145,145
 33360 DEFB 145,19,19,19,102,204,102,207,79,238,238,238,255,255,255,247
 33376 DEFB 191,191,255,253,253,129,191,191,65,127,127,127,65,125,125,125
 33392 DEFB 243,243,207,207,0,0,0,255,0,0,255,64,64,255,68,68
 33408 DEFB 255,31,31,255,240,255,0,224,160,224,0,0,0,0,255,208
 33424 DEFB 80,80,34,178,37,180,68,69,114,18,228,79,0,68,255,0
 33440 DEFB 0,224,64,192,64,1,5,13,53,85,85,87,16,80,80,80
 33456 DEFB 80,112,46,34,46,36,46,34,0,0,0,0,0,0,0,0
 33472 DEFB 222,132,0,153,136,248,0,200,0,0,7,192,200,136,0,198
 33488 DEFB 12,255,255,170,136,255,192,190,190,255,159,249,232,136,136,126
 33504 DEFB 63,0,120,3,255,172,127,128,137,255,1,116,0,0,0,0
 33520 DEFB 32,0,128,1,0,32,7,192,153,24,34,120,240,152,0,0
 33536 DEFB 255,255,255,255,255,255,255,255,245,255,255,255,255,255,255,255
 33552 DEFB 255,255,255,247,113,128,191,191,191,191,0,255,255,1,253,253
 33568 DEFB 253,253,129,191,191,191,191,65,127,127,127,127,65,125,125,125
 33584 DEFB 125,128,191,191,191,0,255,255,255,1,253,253,253,191,95,95
 33600 DEFB 191,191,191,191,255,255,255,255,253,253,253,253,253,253,255,255
 33616 DEFB 255,243,243,243,255,255,255,207,207,255,255,255,255,255,255,247
 33632 DEFB 191,191,255,253,253,129,191,191,65,127,127,127,65,125,125,125
 33648 DEFB 243,243,207,207,7,7,3,255,187,187,255,251,251,255,255,255
 33664 DEFB 255,31,31,128,255,0,255,224,160,0,224,251,223,0,31,16
 33680 DEFB 240,240,255,191,253,191,255,253,114,18,228,79,0,255,255,0
 33696 DEFB 224,224,224,255,255,253,247,239,191,255,255,255,208,112,240,240
 33712 DEFB 240,240,46,34,46,36,46,34,0,0,0,191,0,253,0,0
 33728 DEFB 222,132,0,51,34,226,0,226,255,255,224,62,50,34,0,49
 33744 DEFB 195,0,0,153,34,0,128,189,191,255,159,249,34,34,34,220
 33760 DEFB 63,0,208,3,0,144,127,128,34,127,1,220,0,255,255,255
 33776 DEFB 223,255,255,255,0,224,7,240,179,48,34,240,112,176,0,0
 33792 DEFB 128,128,255,255,0,0,255,133,128,192,0,0,179,179,255,51
 33808 DEFB 51,254,2,46,227,191,176,191,176,128,255,0,0,253,5,253
 33824 DEFB 5,1,191,169,191,169,129,127,73,127,73,65,125,77,125,77
 33840 DEFB 65,191,176,191,191,255,0,255,255,253,13,253,253,255,64,0
 33856 DEFB 191,191,176,191,255,255,0,255,13,253,253,13,253,1,0,136
 33872 DEFB 136,0,131,131,0,170,170,0,207,0,119,119,255,254,254,238
 33888 DEFB 191,128,0,253,1,191,191,129,127,127,127,65,125,125,125,65
 33904 DEFB 0,243,0,207,0,0,0,0,0,0,64,64,64,68,68,68
 33920 DEFB 255,31,28,255,0,128,0,224,160,0,0,0,0,255,255,48
 33936 DEFB 80,112,136,184,141,186,170,173,22,103,36,66,0,170,255,0
 33952 DEFB 0,64,64,64,64,3,5,21,53,85,85,95,16,80,80,80
 33968 DEFB 80,112,104,108,98,100,106,108,0,0,255,0,0,0,0,0
 33984 DEFB 34,228,0,204,68,196,0,196,0,0,31,1,140,68,0,12
 34000 DEFB 63,0,0,85,68,0,128,125,127,127,159,249,68,68,68,188
 34016 DEFB 31,0,176,1,0,96,127,128,68,127,1,187,160,0,0,0
 34032 DEFB 184,0,128,1,0,64,7,240,204,192,35,224,112,192,0,0
 34048 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34064 DEFB 255,254,254,238,227,191,191,191,191,128,255,255,0,253,253,253
 34080 DEFB 253,1,191,191,191,191,129,127,127,127,127,65,125,125,125,125
 34096 DEFB 65,191,191,191,191,255,255,255,255,253,253,253,253,255,95,191
 34112 DEFB 191,191,191,191,255,255,255,255,253,253,253,253,253,1,0,255
 34128 DEFB 255,0,243,243,0,255,255,0,207,0,255,255,255,254,254,238
 34144 DEFB 191,128,0,253,1,191,191,129,127,127,127,65,125,125,125,65
 34160 DEFB 0,243,0,207,7,3,3,187,187,187,251,251,251,255,255,255
 34176 DEFB 255,31,31,255,128,255,0,224,160,224,0,0,0,0,255,112
 34192 DEFB 80,112,255,191,253,191,255,253,22,103,36,66,0,255,255,0
 34208 DEFB 224,224,224,255,255,251,247,223,191,255,255,255,208,112,240,240
 34224 DEFB 240,240,104,108,98,100,106,108,0,0,255,191,255,253,191,253
 34240 DEFB 34,228,0,102,17,208,0,208,127,255,192,240,99,17,0,3
 34256 DEFB 128,0,0,204,17,0,128,252,254,255,159,249,17,17,17,252
 34272 DEFB 31,0,240,1,0,128,127,128,17,127,1,238,224,0,0,1
 34288 DEFB 113,255,128,1,1,64,15,252,230,64,35,192,112,224,0,0
 34304 DEFB 128,255,255,0,0,255,0,150,255,168,255,255,230,255,0,102
 34320 DEFB 255,4,5,92,198,176,176,128,176,255,0,0,255,5,5,1
 34336 DEFB 5,255,163,163,129,163,255,99,99,65,99,255,101,101,65,101
 34352 DEFB 255,191,191,191,128,255,255,255,0,253,253,253,1,0,64,0
 34368 DEFB 128,176,191,191,0,0,255,255,253,1,13,253,253,255,255,162
 34384 DEFB 162,227,35,35,255,51,51,207,79,255,221,221,255,2,253,220
 34400 DEFB 191,255,255,253,255,191,129,255,127,127,65,255,125,125,65,125
 34416 DEFB 243,243,207,207,0,0,0,0,0,68,64,64,68,68,68,68
 34432 DEFB 255,31,255,0,255,0,255,160,160,0,224,247,63,0,255,80
 34448 DEFB 240,240,17,177,21,176,0,5,34,0,40,0,0,17,255,0
 34464 DEFB 0,64,64,64,64,3,5,21,117,85,87,95,16,208,80,80
 34480 DEFB 112,112,44,0,34,0,46,0,0,0,0,0,0,0,0,0
 34496 DEFB 36,0,0,153,136,200,0,200,0,0,62,14,24,192,0,0
 34512 DEFB 120,0,0,170,136,0,128,190,254,255,159,249,136,136,8,124
 34528 DEFB 15,0,96,1,0,128,127,128,136,127,1,119,116,255,255,254
 34544 DEFB 227,255,255,255,1,64,15,252,153,128,35,128,48,128,0,0
 34560 DEFB 255,255,255,0,255,255,0,255,255,255,255,255,255,255,0,255
 34576 DEFB 255,4,253,220,198,191,191,128,191,255,255,255,255,253,253,1
 34592 DEFB 253,255,191,191,129,191,255,127,127,65,127,255,125,125,65,125
 34608 DEFB 255,191,191,191,128,255,255,255,0,253,253,253,1,0,95,255
 34624 DEFB 128,191,191,191,0,255,255,255,253,1,253,253,253,255,255,255
 34640 DEFB 255,243,243,243,255,255,255,207,207,255,255,255,255,2,253,220
 34656 DEFB 191,255,255,253,255,191,129,255,127,127,65,255,125,125,65,125
 34672 DEFB 243,243,207,207,7,3,3,187,187,68,251,251,68,255,255,68
 34688 DEFB 255,31,68,255,255,0,255,160,224,0,224,0,0,255,255,208
 34704 DEFB 80,112,255,191,253,191,255,253,34,0,40,0,0,255,165,0
 34720 DEFB 224,224,224,255,255,251,247,223,127,255,255,255,208,240,240,240
 34736 DEFB 240,240,44,0,34,0,46,0,0,0,0,191,255,253,191,253
 34752 DEFB 36,0,0,51,34,226,0,226,0,0,1,225,134,56,0,0
 34768 DEFB 7,0,0,51,34,0,128,63,127,127,159,249,34,34,34,216
 34784 DEFB 15,255,192,0,0,128,127,128,34,127,1,221,221,128,0,5
 34800 DEFB 199,249,0,0,3,128,15,254,179,0,35,0,63,128,0,0

; Play area graphic data (tiles #b0-#b255, base page #b136)
;
; Used by the routine at #R59148.
b34816 DEFB 0,85,14,12,10,7,63,248,191,1,240,1,7,7,255,255
 34832 DEFB 15,253,1,15,255,1,0,0,0,0,0,187,187,255,0,0
 34848 DEFB 11,216,8,24,11,216,15,255,248,255,255,255,68,0,39,255
 34864 DEFB 0,32,128,0,11,143,252,139,216,143,248,254,136,27,143,255
 34880 DEFB 255,255,139,143,255,224,252,31,191,251,255,255,255,255,255,143
 34896 DEFB 255,255,255,255,251,143,219,251,248,27,255,248,15,255,255,255
 34912 DEFB 255,128,7,255,224,247,187,187,255,224,255,187,255,255,0,128
 34928 DEFB 15,0,0,5,15,0,128,28,31,255,252,48,0,255,190,64
 34944 DEFB 240,208,129,16,225,1,8,24,0,32,15,0,12,143,223,119
 34960 DEFB 123,241,128,0,0,16,255,0,24,80,243,2,3,255,255,16
 34976 DEFB 0,68,68,68,252,68,68,0,0,128,128,0,131,255,224,0
 34992 DEFB 231,255,116,15,248,255,143,143,248,216,251,255,255,255,15,190
 35008 DEFB 63,128,222,59,31,248,0,255,255,128,255,255,255,255,255,0
 35024 DEFB 241,255,252,240,0,129,252,15,239,132,143,0,0,4,124,0
 35040 DEFB 34,128,255,255,252,123,255,63,128,124,254,96,96,190,231,255
 35056 DEFB 116,84,86,227,255,6,44,226,234,255,0,44,0,254,84,204
 35072 DEFB 255,102,14,12,250,4,127,248,255,3,240,3,7,7,0,0
 35088 DEFB 15,225,1,15,255,1,0,0,0,0,0,238,238,208,15,248
 35104 DEFB 11,216,11,216,11,216,32,0,2,255,255,145,17,0,32,63
 35120 DEFB 0,32,143,0,23,31,254,139,216,31,252,127,139,215,31,255
 35136 DEFB 255,255,139,31,247,240,126,15,160,7,240,0,0,0,23,135
 35152 DEFB 255,255,255,255,247,31,111,123,251,139,48,2,32,0,255,255
 35168 DEFB 255,192,0,0,0,251,238,239,255,224,251,239,255,255,255,128
 35184 DEFB 31,2,0,9,8,0,32,99,223,255,253,204,0,255,221,32
 35200 DEFB 16,208,129,16,33,3,15,24,0,32,15,0,12,63,239,142
 35216 DEFB 247,252,192,255,255,240,3,0,24,80,243,2,3,255,255,16
 35232 DEFB 0,16,17,17,249,61,16,0,0,129,128,0,251,255,244,0
 35248 DEFB 231,255,102,255,255,255,199,31,252,220,119,255,7,255,15,255
 35264 DEFB 255,207,223,27,223,251,0,128,128,128,128,128,112,15,254,0
 35280 DEFB 224,63,248,240,1,3,196,31,207,132,143,0,0,4,244,0
 35296 DEFB 37,128,255,255,252,110,255,63,128,110,254,255,255,254,227,255
 35312 DEFB 230,102,22,227,255,255,36,226,245,127,128,38,0,255,102,100
 35328 DEFB 0,170,10,255,6,7,127,248,127,7,240,3,7,7,0,0
 35344 DEFB 15,1,1,15,255,1,0,0,0,0,0,119,119,80,8,24
 35360 DEFB 11,216,11,216,11,216,32,0,2,255,254,136,8,0,32,3
 35376 DEFB 128,32,136,0,46,63,255,139,216,63,254,63,139,206,63,255
 35392 DEFB 255,255,139,63,227,248,63,7,191,254,224,0,0,0,46,131
 35408 DEFB 254,63,227,63,238,63,56,187,251,203,48,2,32,0,239,190
 35424 DEFB 15,224,0,0,0,255,247,119,31,224,255,247,199,255,0,128
 35440 DEFB 31,2,0,11,11,0,32,159,239,255,251,242,0,255,235,160
 35456 DEFB 208,208,129,16,33,2,0,31,0,48,15,15,252,127,247,117
 35472 DEFB 239,254,64,0,0,0,3,255,248,80,243,2,3,255,255,31
 35488 DEFB 224,136,8,136,255,188,136,0,0,129,192,0,243,255,232,0
 35504 DEFB 199,255,234,0,0,31,227,63,254,222,46,255,14,243,8,0
 35520 DEFB 31,232,223,139,223,251,0,128,128,128,128,144,112,15,252,1
 35536 DEFB 224,63,248,240,1,3,196,31,143,133,143,0,0,2,110,0
 35552 DEFB 27,0,252,0,252,127,254,63,128,106,254,128,128,118,227,255
 35568 DEFB 170,170,158,227,255,1,56,226,234,255,128,57,24,254,170,152
 35584 DEFB 0,153,10,12,6,2,95,248,223,15,240,3,7,7,0,0
 35600 DEFB 15,1,1,15,255,1,0,0,0,0,0,221,221,144,11,216
 35616 DEFB 11,216,11,216,11,216,32,0,2,254,34,34,34,0,32,0
 35632 DEFB 128,32,139,0,92,127,223,139,216,127,255,31,139,220,127,255
 35648 DEFB 255,255,139,127,241,252,31,131,160,0,192,0,0,0,92,129
 35664 DEFB 255,31,241,31,220,127,155,219,251,235,48,3,32,0,247,223
 35680 DEFB 7,240,0,0,0,251,253,221,31,224,251,253,255,255,0,128
 35696 DEFB 31,2,1,11,11,0,48,63,247,255,247,249,0,255,227,160
 35712 DEFB 208,208,129,16,49,6,31,28,255,240,12,12,12,255,251,117
 35728 DEFB 223,255,96,255,255,248,3,80,24,80,3,2,3,255,255,16
 35744 DEFB 48,32,226,34,255,254,32,0,128,129,192,0,251,255,244,0
 35760 DEFB 231,255,249,255,255,223,241,127,223,223,92,255,28,241,11,255
 35776 DEFB 223,251,223,203,223,251,0,64,129,0,128,160,112,15,252,1
 35792 DEFB 224,63,248,240,1,3,196,63,143,133,143,0,0,1,255,0
 35808 DEFB 14,0,240,0,252,125,254,63,255,121,254,255,255,222,227,255
 35824 DEFB 185,153,54,226,255,255,51,226,245,127,128,51,16,255,153,48
 35840 DEFB 0,85,11,12,6,254,63,248,191,31,240,3,7,7,0,0
 35856 DEFB 15,1,1,15,255,1,0,0,0,0,0,187,187,144,11,216
 35872 DEFB 11,216,11,216,11,216,63,255,254,68,68,68,68,0,32,0
 35888 DEFB 128,32,139,0,184,255,239,139,216,255,255,143,139,184,255,255
 35904 DEFB 255,255,139,223,248,254,15,193,191,255,255,128,0,0,184,128
 35920 DEFB 255,143,248,143,184,255,203,235,251,251,63,255,63,255,251,239
 35936 DEFB 131,248,0,0,0,255,251,187,31,224,255,251,255,255,255,128
 35952 DEFB 31,3,2,8,11,255,240,127,251,255,239,252,128,0,0,32
 35968 DEFB 208,208,129,16,241,4,24,28,255,240,12,12,12,255,253,141
 35984 DEFB 191,255,32,0,0,24,3,80,24,80,3,3,2,68,15,16
 36000 DEFB 16,68,228,68,255,252,68,0,128,129,223,224,235,255,232,0
 36016 DEFB 231,253,117,255,255,223,248,255,239,223,184,255,56,248,139,255
 36032 DEFB 219,251,219,235,223,251,63,192,129,254,128,192,112,15,248,3
 36048 DEFB 192,127,248,240,3,7,196,63,143,133,143,0,0,0,34,128
 36064 DEFB 0,0,199,255,252,123,254,63,255,125,254,0,0,190,227,213
 36080 DEFB 245,85,86,226,127,0,44,226,234,255,128,44,12,254,85,204
 36096 DEFB 0,204,11,4,3,3,127,248,255,63,240,7,7,7,0,0
 36112 DEFB 15,1,1,15,255,1,0,0,255,0,0,238,238,144,11,216
 36128 DEFB 11,216,11,216,11,216,0,0,0,17,17,17,17,0,32,0
 36144 DEFB 128,32,139,1,113,255,247,139,217,255,127,199,139,113,255,255
 36160 DEFB 255,255,139,223,252,127,7,224,191,255,255,255,255,255,113,128
 36176 DEFB 127,199,252,199,113,255,235,251,251,251,255,255,31,255,125,247
 36192 DEFB 193,252,0,0,0,251,254,239,31,224,251,255,192,7,255,128
 36208 DEFB 63,1,2,15,11,255,240,255,253,255,223,254,128,255,255,224
 36224 DEFB 208,208,129,16,241,5,25,28,255,240,12,14,12,255,254,255
 36240 DEFB 127,255,160,255,240,24,3,80,24,80,3,1,2,17,7,16
 36256 DEFB 16,16,241,17,255,255,208,0,128,131,255,224,235,255,244,0
 36272 DEFB 231,255,236,255,255,223,253,255,247,223,113,255,113,252,203,255
 36288 DEFB 217,251,217,251,223,251,32,64,129,2,128,128,112,15,248,7
 36304 DEFB 192,255,248,241,3,7,196,127,143,135,143,1,128,0,37,128
 36320 DEFB 0,0,207,215,252,110,254,63,255,108,254,0,0,254,227,245
 36336 DEFB 236,204,22,226,127,0,38,226,255,127,128,38,68,255,204,100
 36352 DEFB 0,170,11,4,0,2,127,248,127,127,240,7,7,7,0,0
 36368 DEFB 15,1,1,15,255,1,0,63,0,252,0,119,119,16,11,216
 36384 DEFB 11,216,11,216,11,216,0,0,0,136,136,136,8,0,32,0
 36400 DEFB 128,32,139,2,227,255,251,139,218,254,63,227,139,227,255,131
 36416 DEFB 240,124,139,222,254,63,131,240,191,255,255,255,255,254,227,128
 36432 DEFB 63,227,254,226,227,254,251,251,123,123,255,255,15,255,62,251
 36448 DEFB 224,254,7,255,224,255,255,119,31,224,255,255,255,255,255,128
 36464 DEFB 63,0,5,0,11,255,240,255,254,255,191,254,64,0,0,0
 36480 DEFB 208,208,129,16,241,13,25,31,0,0,12,14,12,255,255,126
 36496 DEFB 255,255,176,255,240,24,243,80,24,80,3,0,2,136,3,16
 36512 DEFB 16,136,255,248,255,255,248,0,128,131,255,224,235,251,232,0
 36528 DEFB 231,255,234,255,255,219,254,255,251,222,227,125,227,254,235,255
 36544 DEFB 216,251,216,251,216,11,16,96,131,4,128,128,112,15,240,7
 36560 DEFB 128,255,248,243,7,7,196,127,143,135,143,2,64,0,127,192
 36576 DEFB 0,0,159,167,252,127,254,63,255,106,254,0,0,118,227,255
 36592 DEFB 234,170,158,226,127,0,57,226,254,255,128,57,152,254,170,152
 36608 DEFB 0,179,251,4,0,254,95,248,223,255,240,7,7,0,15,255
 36624 DEFB 15,1,1,0,0,0,3,192,255,3,192,221,0,16,11,216
 36640 DEFB 11,216,11,216,8,24,0,0,0,34,34,34,34,248,32,0
 36656 DEFB 128,32,139,5,199,249,253,139,221,255,31,241,139,199,255,193
 36672 DEFB 248,62,136,28,127,31,193,248,159,255,255,255,255,253,199,128
 36688 DEFB 31,241,255,245,199,252,251,251,59,248,255,0,0,0,31,125
 36704 DEFB 240,127,7,255,224,251,255,221,31,224,251,255,255,255,0,255
 36720 DEFB 255,0,5,0,11,0,0,255,255,127,127,255,64,0,0,0
 36736 DEFB 208,208,129,16,1,9,24,31,0,0,12,14,12,255,255,189
 36752 DEFB 255,255,144,0,0,24,243,80,24,80,3,0,2,34,1,16
 36768 DEFB 16,32,255,250,255,255,240,127,128,131,255,224,235,255,244,254
 36784 DEFB 231,119,115,255,255,217,253,253,253,221,199,62,199,255,251,255
 36800 DEFB 220,123,220,123,216,11,16,32,130,4,128,0,112,15,240,15
 36816 DEFB 129,255,248,247,7,15,196,127,143,135,143,4,32,0,63,128
 36832 DEFB 0,0,31,255,252,125,254,63,255,111,254,127,0,222,227,213
 36848 DEFB 115,51,246,226,127,254,51,226,255,127,128,51,48,255,179,48

; Play area graphic data (tiles #b0-#b255, base page #b144)
;
; Used by the routine at #R59148.
b36864 DEFB 127,254,255,6,204,121,255,248,32,130,15,251,223,248,31,251
 36880 DEFB 223,255,255,0,1,128,135,143,248,31,47,128,159,255,128,192
 36896 DEFB 31,248,255,213,68,127,252,15,243,240,252,112,192,255,240,0
 36912 DEFB 0,0,0,243,248,14,227,11,224,208,0,0,0,0,0,15
 36928 DEFB 255,255,255,240,192,0,0,2,63,187,187,254,255,191,224,30
 36944 DEFB 254,124,175,215,222,127,176,23,254,59,255,130,59,192,3,255
 36960 DEFB 230,73,255,255,230,255,86,230,255,86,44,204,255,249,255,224
 36976 DEFB 96,15,255,143,248,143,252,126,0,11,255,0,15,143,253,143
 36992 DEFB 128,222,255,254,255,192,0,255,7,127,255,255,255,187,224,4
 37008 DEFB 32,4,170,179,207,187,32,5,85,88,63,80,213,68,254,70
 37024 DEFB 47,36,124,31,68,31,85,68,68,0,127,240,0,255,255,170
 37040 DEFB 169,255,255,170,192,255,87,170,0,31,85,170,175,243,255,255
 37056 DEFB 0,124,63,124,62,15,124,63,31,15,227,255,255,255,255,255
 37072 DEFB 94,170,42,169,94,170,170,89,42,169,7,143,7,192,255,192
 37088 DEFB 126,3,247,254,255,224,255,255,255,255,255,199,149,84,85,122
 37104 DEFB 85,85,122,149,84,154,128,255,149,85,255,3,85,85,248,0
 37120 DEFB 123,255,127,255,100,121,175,15,255,255,248,11,216,11,216,11
 37136 DEFB 216,32,2,128,0,128,128,143,255,31,47,128,159,255,128,223
 37152 DEFB 223,248,255,238,170,127,254,31,249,248,248,248,192,255,240,255
 37168 DEFB 255,255,254,243,248,14,227,11,32,208,0,0,0,0,0,0
 37184 DEFB 0,0,0,0,191,255,251,255,63,238,238,254,254,224,31,254
 37200 DEFB 222,110,255,150,254,127,240,22,254,59,255,131,234,63,192,0
 37216 DEFB 242,73,255,156,242,223,22,243,136,22,38,103,195,192,0,3
 37232 DEFB 128,7,127,31,252,31,254,63,0,23,247,1,255,199,127,199
 37248 DEFB 223,223,224,252,255,255,255,0,4,0,0,0,31,238,224,4
 37264 DEFB 32,4,255,243,207,255,32,2,102,96,62,96,238,170,254,18
 37280 DEFB 47,49,57,31,16,31,102,17,17,0,224,0,0,255,254,102
 37296 DEFB 120,128,127,102,192,127,103,102,0,31,103,102,103,243,255,255
 37312 DEFB 31,255,255,255,255,255,0,0,0,0,129,70,128,0,0,1
 37328 DEFB 94,166,38,97,94,166,102,81,38,97,255,255,255,255,255,192
 37344 DEFB 0,0,0,0,0,0,128,0,0,1,98,129,134,100,101,122
 37360 DEFB 102,101,122,134,100,138,120,1,30,102,254,3,102,103,248,0
 37376 DEFB 123,254,255,1,153,121,255,8,0,0,24,11,216,11,216,11
 37392 DEFB 216,32,2,192,0,128,128,140,0,159,47,128,159,255,128,223
 37408 DEFB 223,248,255,213,17,127,255,63,252,252,240,248,192,255,240,255
 37424 DEFB 255,192,14,227,248,14,227,11,48,208,9,198,66,103,128,0
 37440 DEFB 3,255,192,0,162,34,42,35,63,119,119,254,254,96,127,126
 37456 DEFB 142,106,127,23,254,127,112,23,254,59,255,130,42,0,63,224
 37472 DEFB 234,73,255,255,234,255,158,234,255,158,57,158,28,0,3,252
 37488 DEFB 0,3,63,63,254,63,255,31,2,174,227,0,255,227,63,227
 37504 DEFB 232,223,224,248,195,255,255,240,7,255,243,255,255,255,224,4
 37520 DEFB 32,4,0,0,0,0,32,0,170,168,58,160,213,17,254,138
 37536 DEFB 47,40,152,31,136,31,170,136,136,0,255,255,255,191,255,85
 37552 DEFB 88,255,191,85,192,127,171,86,0,31,171,85,85,243,255,255
 37568 DEFB 63,255,255,255,255,255,255,255,255,255,129,94,149,85,0,1
 37584 DEFB 94,149,21,81,94,149,85,67,21,81,255,255,255,255,255,192
 37600 DEFB 255,255,255,255,255,255,128,0,170,169,122,129,138,168,169,122
 37616 DEFB 170,169,122,138,168,194,255,255,26,170,254,3,170,168,248,0
 37632 DEFB 121,255,127,255,51,121,239,11,255,255,216,11,216,11,216,11
 37648 DEFB 216,32,2,224,0,128,128,183,255,31,47,255,159,128,0,223
 37664 DEFB 223,253,255,187,170,127,255,127,254,126,225,252,192,255,240,255
 37680 DEFB 255,127,254,227,255,254,227,11,48,208,9,41,66,148,16,0
 37696 DEFB 126,0,126,0,162,34,42,35,63,221,221,254,254,224,254,254
 37712 DEFB 222,121,222,21,59,255,208,21,254,59,255,130,42,0,0,31
 37728 DEFB 226,73,127,128,226,131,54,226,235,54,51,48,96,0,252,0
 37744 DEFB 0,1,31,127,255,127,255,143,0,28,241,0,127,241,31,247
 37760 DEFB 251,223,224,240,255,128,0,255,4,255,243,255,255,255,160,4
 37776 DEFB 160,15,255,255,255,255,240,0,25,152,57,128,187,170,126,34
 37792 DEFB 63,34,42,31,32,31,153,34,34,0,0,0,0,159,255,153
 37808 DEFB 176,255,159,153,128,127,155,154,0,31,153,153,153,128,127,255
 37824 DEFB 31,255,255,255,255,255,0,0,0,0,129,94,153,153,25,153
 37840 DEFB 94,153,25,153,94,255,255,71,25,153,255,255,255,255,248,0
 37856 DEFB 0,0,0,0,0,0,153,152,153,153,122,129,153,152,153,122
 37872 DEFB 255,255,122,153,152,226,0,255,13,154,254,1,153,154,248,0
 37888 DEFB 121,254,255,0,204,89,255,251,255,255,223,251,223,251,223,251
 37904 DEFB 223,63,254,240,0,128,128,207,252,31,47,248,31,255,255,223
 37920 DEFB 223,255,255,213,68,124,63,126,126,63,193,252,192,248,0,255
 37936 DEFB 252,255,254,227,255,254,227,11,240,208,9,41,66,135,16,7
 37952 DEFB 193,255,131,224,162,34,46,35,63,187,187,254,222,161,253,254
 37968 DEFB 254,125,188,23,59,255,176,23,254,59,255,130,42,0,0,0
 37984 DEFB 230,73,255,255,230,255,86,230,255,86,44,193,128,0,0,0
 38000 DEFB 0,0,143,255,255,255,127,199,7,248,248,0,63,248,15,255
 38016 DEFB 251,219,255,224,255,255,224,0,4,255,243,255,207,255,32,4
 38032 DEFB 32,8,0,0,15,255,240,0,21,80,53,0,213,68,30,70
 38048 DEFB 47,36,79,255,64,31,85,68,68,0,0,0,0,87,255,170
 38064 DEFB 160,127,95,171,128,63,85,170,0,63,85,170,170,128,127,255
 38080 DEFB 0,127,252,124,62,15,0,0,0,0,129,94,170,170,42,169
 38096 DEFB 94,170,42,169,94,255,255,71,42,169,31,255,199,192,248,0
 38112 DEFB 0,0,0,0,0,0,149,84,85,85,122,129,149,84,85,122
 38128 DEFB 255,255,122,149,84,226,0,254,5,84,252,1,213,84,252,0
 38144 DEFB 121,255,127,0,102,73,239,139,255,255,216,139,216,139,216,139
 38160 DEFB 216,0,0,248,0,128,128,223,215,31,47,248,31,255,255,192
 38176 DEFB 31,255,255,238,170,124,31,124,62,31,131,254,192,248,0,255
 38192 DEFB 253,253,126,227,255,254,227,11,240,208,9,201,66,148,16,28
 38208 DEFB 31,255,248,56,162,34,46,35,63,238,238,254,142,227,251,254
 38224 DEFB 254,108,248,22,59,255,240,22,254,59,255,130,42,0,0,0
 38240 DEFB 242,73,255,216,243,128,22,243,249,22,39,6,0,0,0,0
 38256 DEFB 0,0,199,255,127,254,63,227,7,241,252,0,0,252,31,255
 38272 DEFB 251,217,255,192,192,255,255,192,4,255,243,255,207,255,32,4
 38288 DEFB 32,8,0,0,15,255,240,0,12,200,44,128,238,170,14,18
 38304 DEFB 35,49,16,31,0,15,204,17,17,0,0,0,0,207,254,51
 38320 DEFB 112,127,207,51,0,63,205,54,0,63,205,51,51,128,96,0
 38336 DEFB 0,124,126,126,126,15,0,0,0,0,129,94,179,51,51,49
 38352 DEFB 94,179,51,49,94,255,255,79,0,1,63,7,231,254,255,240
 38368 DEFB 0,0,0,0,0,0,140,204,204,205,122,129,140,204,205,122
 38384 DEFB 255,255,122,128,0,242,0,254,14,193,252,0,204,193,252,0
 38400 DEFB 121,255,255,0,153,73,255,139,255,255,216,139,216,139,216,139
 38416 DEFB 216,0,0,252,0,128,128,159,163,159,47,248,31,255,255,255
 38432 DEFB 255,255,255,213,17,124,31,124,62,15,3,254,192,248,0,255
 38448 DEFB 249,250,62,227,255,254,227,8,240,16,9,6,122,103,144,51
 38464 DEFB 191,140,61,204,162,34,46,35,59,118,0,126,222,103,247,254
 38480 DEFB 222,106,112,23,59,255,112,23,130,59,255,130,42,0,0,0
 38496 DEFB 234,73,255,255,234,255,158,234,255,254,60,24,0,0,0,0
 38512 DEFB 0,0,227,253,62,255,31,241,2,163,254,0,0,254,191,255
 38528 DEFB 251,216,255,128,255,0,0,255,4,255,243,255,207,255,32,4
 38544 DEFB 32,15,255,255,255,255,240,0,2,175,234,128,213,25,2,138
 38560 DEFB 33,40,136,31,128,7,170,137,255,255,0,0,0,171,255,85
 38576 DEFB 64,127,175,87,0,63,171,84,0,127,171,85,85,128,127,255
 38592 DEFB 255,255,255,255,255,255,0,0,0,0,129,94,149,85,21,81
 38608 DEFB 94,149,21,81,92,255,255,223,0,1,255,255,255,255,255,255
 38624 DEFB 0,0,0,0,0,0,138,168,170,169,122,129,138,168,169,122
 38640 DEFB 255,255,58,128,0,251,0,254,2,168,252,0,234,168,254,0
 38656 DEFB 121,255,255,0,51,73,175,139,255,255,216,139,216,139,216,136
 38672 DEFB 24,0,0,254,0,0,128,63,255,159,47,248,31,255,255,240
 38688 DEFB 127,187,170,187,170,124,31,124,62,15,7,223,192,255,192,255
 38704 DEFB 243,255,254,227,255,254,227,15,0,240,8,0,0,0,16,231
 38720 DEFB 191,119,189,231,162,34,46,35,59,208,0,62,254,239,231,254
 38736 DEFB 142,123,208,21,59,255,208,21,254,42,15,130,42,0,0,0
 38752 DEFB 226,73,255,132,226,156,54,226,255,6,32,48,0,0,0,0
 38768 DEFB 0,0,241,248,29,255,143,248,0,7,255,0,0,255,255,255
 38784 DEFB 123,221,255,0,255,255,0,0,4,255,243,255,207,255,32,4
 38800 DEFB 32,15,255,255,255,255,240,0,3,51,51,0,255,255,2,34
 38816 DEFB 32,34,32,31,0,7,63,254,0,0,255,255,255,51,255,204
 38832 DEFB 192,255,55,206,0,63,51,204,1,255,51,255,254,128,127,255
 38848 DEFB 0,124,63,63,248,15,255,255,255,255,129,94,140,204,12,201
 38864 DEFB 94,140,12,201,88,255,255,255,255,255,126,3,247,254,255,240
 38880 DEFB 255,255,255,255,255,255,147,48,51,49,122,129,147,48,49,122
 38896 DEFB 255,255,26,255,255,255,255,255,3,34,252,0,115,34,255,128

; Play area graphic data (tiles #b0-#b255, base page #b152)
;
; Used by the routine at #R59148. Tiles #b209 and #b210 are unused; tile #b209
; would be used at play area locations (9,40) and (193,40), and tile #b210
; would be used at play area locations (14,40) and (198,40), but the row of
; tiles at y-coordinate 40 is #FACT#hiddenGround(never displayed).
; .
; #UDGTABLE(gallery)
; { #UDG39121,,,256(tile0xD1) | #UDG39122,,,256(tile0xD2) }
; { #b209                     | #b210 }
; TABLE#
b38912 DEFB 85,68,255,207,245,85,227,255,254,222,238,255,238,2,227,128
 38928 DEFB 110,10,9,4,64,0,89,4,10,8,65,68,2,65,2,128
 38944 DEFB 8,65,0,65,213,191,255,253,192,255,128,0,0,0,34,221
 38960 DEFB 221,221,213,31,255,255,240,255,255,31,255,251,2,95,254,3
 38976 DEFB 223,15,15,255,254,187,223,248,255,255,255,255,169,63,13,170
 38992 DEFB 127,253,132,248,13,191,137,240,13,176,9,255,253,221,192,1
 39008 DEFB 221,221,192,1,255,255,228,66,240,0,252,126,246,66,255,255
 39024 DEFB 255,255,183,0,77,180,36,45,180,36,36,45,45,180,36,45
 39040 DEFB 176,23,130,42,1,176,55,134,42,0,14,64,31,248,162,34
 39056 DEFB 46,35,162,34,34,42,34,35,59,187,178,42,34,35,15,248
 39072 DEFB 3,255,254,128,255,248,56,0,3,159,224,129,42,255,254,72
 39088 DEFB 56,84,0,0,64,255,1,1,16,0,0,0,255,128,224,0
 39104 DEFB 12,255,208,7,255,0,128,112,0,4,240,0,0,84,240,255
 39120 DEFB 240,16,240,85,85,85,85,80,0,255,255,255,255,0,0,252
 39136 DEFB 0,0,68,187,2,0,28,0,127,68,184,28,64,36,4,3
 39152 DEFB 255,68,68,2,36,64,31,64,192,254,228,224,12,0,2,68
 39168 DEFB 102,81,255,207,230,103,227,255,254,206,238,255,238,2,227,0
 39184 DEFB 46,10,9,7,255,255,253,4,10,8,65,255,255,65,1,255
 39200 DEFB 254,65,255,193,213,191,255,253,193,252,128,15,255,248,34,221
 39216 DEFB 221,245,213,24,0,0,80,255,239,31,255,239,2,95,255,0
 39232 DEFB 31,10,10,15,255,239,218,8,191,255,255,253,169,63,13,186
@bfix=DEFB 124,13,137,248,13,191,137,255,253,176,9,192,13,221,192,1
 39248 DEFB 124,13,137,248,13,191,0,255,253,176,9,192,13,221,192,1
 39264 DEFB 221,221,255,255,255,255,228,66,255,254,252,66,246,66,191,255
 39280 DEFB 255,252,182,0,77,180,36,45,180,36,36,45,45,180,36,45
 39296 DEFB 240,22,130,46,1,241,254,130,42,0,0,64,255,128,162,34
 39312 DEFB 42,35,162,34,34,42,34,35,59,187,178,43,255,255,7,253
 39328 DEFB 1,255,252,129,128,124,76,0,6,208,48,129,43,191,252,240
 39344 DEFB 30,103,3,0,128,63,1,255,16,0,0,0,231,128,240,0
 39360 DEFB 25,255,248,0,16,3,255,240,0,102,240,0,6,102,112,255
 39376 DEFB 240,16,224,102,102,6,102,32,0,128,0,0,1,0,0,227
 39392 DEFB 240,0,17,224,4,0,3,240,0,0,0,102,128,48,17,1
 39408 DEFB 255,17,17,2,33,0,15,0,0,254,240,224,8,0,2,16
 39424 DEFB 106,136,255,207,170,170,227,255,254,238,238,255,238,2,226,0
 39440 DEFB 110,10,9,4,136,0,5,4,10,8,127,136,1,127,0,255
 39456 DEFB 255,255,128,127,213,128,0,1,195,240,128,8,8,8,34,221
 39472 DEFB 221,213,213,27,255,255,80,254,119,31,255,119,2,95,254,0
 39488 DEFB 31,10,10,15,254,119,218,8,191,255,255,253,169,63,253,132
 39504 DEFB 252,13,137,255,253,176,9,224,13,176,9,255,253,221,192,1
 39520 DEFB 221,221,221,221,192,0,228,66,240,2,252,66,246,66,186,171
 39536 DEFB 234,173,188,0,45,180,36,45,180,36,36,45,45,180,36,45
 39552 DEFB 112,23,130,42,1,126,7,130,58,0,0,64,224,0,162,34
 39568 DEFB 42,35,162,34,34,42,34,35,0,0,0,0,0,0,3,255
 39584 DEFB 0,255,248,129,0,62,134,0,12,112,56,129,42,255,240,225
 39600 DEFB 87,171,4,0,128,0,1,0,144,0,0,0,171,128,248,0
 39616 DEFB 49,255,252,0,16,2,0,240,0,170,255,255,10,170,240,255
 39632 DEFB 240,16,192,42,170,10,170,160,0,255,255,255,255,0,0,152
 39648 DEFB 15,255,254,0,42,0,192,15,128,0,7,175,0,40,0,1
 39664 DEFB 255,136,136,2,40,128,7,0,0,252,120,192,12,0,254,0
 39680 DEFB 89,162,254,1,153,153,227,255,254,238,238,255,238,3,226,0
 39696 DEFB 238,10,8,130,34,0,4,130,10,8,65,34,1,65,0,0
 39712 DEFB 0,0,0,0,213,255,255,255,199,192,128,20,20,20,65,255
 39728 DEFB 255,213,213,27,255,255,80,254,223,31,254,221,2,95,254,0
 39744 DEFB 31,10,10,15,254,221,218,8,191,255,159,253,170,127,253,132
 39760 DEFB 252,13,137,240,13,176,9,255,253,176,9,192,13,221,192,1
 39776 DEFB 255,255,221,221,252,126,244,66,240,0,252,66,254,126,185,157
 39792 DEFB 185,157,180,0,45,180,36,45,180,36,36,13,45,180,36,45
 39808 DEFB 223,21,130,42,1,208,7,2,43,0,0,192,0,0,162,34
 39824 DEFB 42,35,162,34,34,42,34,35,0,0,0,0,0,0,1,255
 39840 DEFB 0,127,240,129,135,255,6,0,24,48,60,255,43,191,224,10
 39856 DEFB 171,153,8,0,128,0,1,0,80,0,0,0,155,128,255,255
 39872 DEFB 227,255,255,0,63,2,0,240,1,153,224,0,153,155,240,255
 39888 DEFB 224,31,128,25,152,0,0,0,0,255,255,255,255,0,7,135
 39904 DEFB 192,0,0,1,153,224,32,0,127,34,221,156,0,32,2,0
 39920 DEFB 255,34,32,2,34,0,7,0,0,252,114,192,6,0,0,0
 39936 DEFB 85,68,254,1,85,85,226,15,254,238,238,248,238,1,226,1
 39952 DEFB 238,10,8,130,68,0,4,130,10,8,65,68,1,65,0,0
 39968 DEFB 0,0,0,0,213,128,0,0,207,0,128,20,20,20,65,192
 39984 DEFB 1,213,213,27,192,3,80,254,191,31,254,187,2,95,254,0
 40000 DEFB 31,10,10,15,254,187,218,8,191,192,159,13,170,126,13,132
 40016 DEFB 252,13,137,255,253,176,9,224,13,176,9,192,13,221,192,1
 40032 DEFB 192,1,221,221,228,66,244,66,240,14,252,66,254,0,181,117
 40048 DEFB 93,13,183,255,237,180,36,45,183,231,230,237,237,183,231,237
 40064 DEFB 177,23,130,42,1,177,240,3,234,128,0,192,0,0,162,34
 40080 DEFB 42,35,162,34,34,46,34,35,0,0,0,0,0,0,0,255
 40096 DEFB 0,63,224,129,127,255,11,0,48,16,62,1,42,255,158,85
 40112 DEFB 255,85,8,1,0,0,1,0,80,0,0,255,215,128,224,0
 40128 DEFB 55,255,192,0,32,7,255,240,1,85,255,255,85,87,0,255
 40144 DEFB 192,0,0,21,84,0,0,0,0,0,0,0,1,224,6,96
 40160 DEFB 63,128,0,59,84,96,28,0,0,68,187,240,0,32,4,0
 40176 DEFB 127,68,64,2,36,0,3,0,0,248,52,192,4,0,0,0
 40192 DEFB 108,145,6,1,204,204,227,241,254,238,238,240,238,0,226,3
 40208 DEFB 206,10,8,131,255,255,254,130,10,8,65,255,255,193,0,0
 40224 DEFB 0,0,0,0,213,128,0,0,220,0,128,20,20,20,65,255
 40240 DEFB 255,213,213,27,224,3,80,255,255,31,255,239,2,95,255,0
 40256 DEFB 31,10,10,15,255,239,218,8,191,191,63,13,170,126,13,132
 40272 DEFB 255,253,137,240,13,176,9,224,13,176,9,192,13,221,255,255
 40288 DEFB 255,255,221,221,228,66,244,66,255,238,244,66,255,255,188,204
 40304 DEFB 202,13,176,0,13,180,36,45,176,0,0,237,13,176,0,13
 40320 DEFB 241,22,130,42,1,254,0,0,10,64,1,128,0,0,162,34
 40336 DEFB 42,35,162,34,34,46,34,35,0,0,0,0,0,0,0,127
 40352 DEFB 0,0,0,129,1,63,149,0,96,8,63,1,43,190,1,255
 40368 DEFB 128,205,16,1,0,0,1,0,48,0,0,129,207,128,192,0
 40384 DEFB 31,252,0,0,32,28,0,240,0,207,0,0,204,255,0,255
 40400 DEFB 0,0,0,12,200,0,0,0,5,240,0,0,6,160,5,24
 40416 DEFB 0,127,17,238,200,160,3,224,0,17,239,192,0,32,16,0
 40432 DEFB 127,17,0,2,48,0,1,0,0,248,48,128,3,128,0,0
 40448 DEFB 42,136,254,1,170,170,163,254,126,238,238,224,110,0,162,7
 40464 DEFB 142,10,8,130,136,0,2,130,250,8,65,136,0,65,0,0
 40480 DEFB 0,0,0,0,212,128,0,0,240,0,255,20,20,20,73,192
 40496 DEFB 127,213,213,27,255,255,80,254,119,31,254,119,2,95,254,0
 40512 DEFB 31,10,9,4,255,247,217,4,191,169,63,253,170,126,13,132
 40528 DEFB 255,253,137,240,13,176,9,224,13,176,9,255,253,221,192,0
 40544 DEFB 192,1,221,221,228,66,252,126,248,14,244,66,255,247,186,170
 40560 DEFB 145,13,176,0,13,180,36,45,176,0,0,237,13,176,0,13
 40576 DEFB 115,247,194,42,255,128,0,0,10,64,7,0,0,0,162,34
 40592 DEFB 42,35,187,187,187,175,187,187,0,0,0,0,0,0,15,255
 40608 DEFB 0,0,0,129,42,255,235,255,224,23,255,0,128,248,0,0
 40624 DEFB 0,171,32,1,0,0,1,0,31,128,0,255,171,192,192,0
 40640 DEFB 0,224,0,0,255,60,0,240,10,171,0,0,171,255,0,254
 40656 DEFB 0,0,0,2,160,255,255,255,4,15,255,255,247,160,252,199
 40672 DEFB 192,0,136,119,160,63,0,31,255,255,248,0,0,32,136,0
 40688 DEFB 63,255,255,254,63,255,255,0,0,240,24,128,0,240,0,0
 40704 DEFB 51,34,254,1,51,51,99,255,190,238,238,192,110,0,34,15
 40720 DEFB 14,10,8,127,34,0,2,127,14,8,65,34,0,65,0,0
 40736 DEFB 0,0,0,0,208,128,0,0,0,0,0,34,34,34,54,199
 40752 DEFB 127,213,213,24,0,0,80,254,253,223,254,221,2,95,254,0
 40768 DEFB 31,10,9,4,32,63,217,4,191,169,63,253,170,127,253,132
 40784 DEFB 248,13,137,240,13,176,9,224,13,176,15,0,13,221,0,0
 40800 DEFB 192,1,221,221,228,66,240,0,248,0,244,66,32,63,179,48
 40816 DEFB 0,141,183,231,237,180,36,45,183,231,231,13,237,176,0,13
 40832 DEFB 220,53,186,42,0,0,0,0,10,64,126,0,0,0,162,34
 40848 DEFB 42,35,187,187,162,46,34,35,0,0,0,0,0,0,7,255
 40864 DEFB 0,0,0,129,43,191,247,196,224,43,255,0,127,128,0,0
 40880 DEFB 0,51,32,1,192,0,255,0,0,192,7,213,255,224,128,0
 40896 DEFB 0,0,0,0,128,127,255,240,51,63,0,0,127,255,0,252
 40912 DEFB 0,0,0,1,32,0,0,0,4,0,0,34,221,96,4,32
 40928 DEFB 63,128,34,221,3,32,0,0,0,0,0,0,0,34,32,0
 40944 DEFB 31,32,0,2,32,0,0,0,0,240,26,128,0,31,0,0

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 1/8)
;
; Used by the routine at #R59148.
b40960 DEFB 1,80,16,8,255,248,4,85,85,71,128,0,225,198,56,128
 40976 DEFB 3,129,255,129,192

; Mask value 1/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
@label=MASKBITS
b40981 DEFB 128      ; Bit 7 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character moves in a certain direction from one of the
; following locations:
; .
; #TABLE(default,:w,centre,centre)
; { =h Location(s) | =h Direction | =h Descriptor(s) }
; { Inside no. 74, just to the left of the front door on the second and third
; floors | Left | #R47607 }
; { Between the stairwell and the first window to the left of the stairwell on
; each floor of the apartment building next to no. 19 | Left | #R49009 }
; { Between the stairwell and the first window to the left of the stairwell on
; the second, third and top floors of the apartment building next to no. 74 |
; =r3 Left | =r3 #R50072 }
; { Between the second and third windows from the left on the second, third and
; top floors of no. 17 }
; { Between the second and third windows from the left on the second, third and
; top floors of no. 15 }
; { Between the stairwell and the first window to the right of the stairwell on
; each floor of the apartment building next to no. 19 | =r3 Right | =r3 #R50139
; }
; { Between the stairwell and the first window to the right of the stairwell on
; the second, third and top floors of the apartment building next to no. 74 }
; { The right end of the catwalk }
; TABLE#
; .
; However, the routine at #R60423 does nothing special, which means that the
; location descriptors that invoke it (see the table above) are redundant.
; .
; The other special location handler routine addresses can be found at #R41238,
; #R41494, #R41750, #R42006, #R42262 and #R42518.
@label=SLHANDLER1
w40982 DEFW 60423

; Unused
s40984 DEFB 0

; Direction indicators for a character facing left and going left
;
; Used by the routine at #R60347. This list indicates, in descending order of
; preference, the directions in which a character who is facing left and moving
; left may go.
@label=DIRINDLL
b40985 DEFB 128      ; Bit 7 set: left
 40986 DEFB 32       ; Bit 5 set: up/left
 40987 DEFB 8        ; Bit 3 set: down/left

; T values (6|y)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 0, 6, 12, 18, 24, 30 and 36; in
; practice, these T values are used only by the tiles at (138,18) and (140,18).
@label=Z3VALUES0A
b40988 DEFB 1,1

; Play area tile back buffer byte 1/8
;
; Used by the routines at #R59136 and #R59635.
@label=BACKBUF
b40990 DEFB 0

; T values (6|y)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 0, 6, 12, 18, 24, 30 and 36; in
; practice, these T values are used only by tiles at y-coordinates 18, 24, 30
; and 36.
b40991 DEFB 3
 40992 DEFB 68,3,3,68,3,19,19,19,19,80,80,80,80,80,76,76
 41008 DEFB 64,64,15,15,12,12,12,12,8,0,0,64,76,15,15,15
 41024 DEFB 15,76,64,76,64,64,76,72,64,224,216,0,12,0,0,0
 41040 DEFB 76,3,3,3,3,3,3,71,76,3,3,3,11,3,15,15
 41056 DEFB 3,3,3,3,76,76,76,76,76,76,0,12,12,76,76,68
 41072 DEFB 77,77,77,77,78,78,76,76,77,77,13,13,13,13,64,64
 41088 DEFB 64,76,78,78,76,64,64,64,76,76,76,76,76,76,76,76
 41104 DEFB 1,13,15,15,15,15,15,15,64,76,64,5,1,9,1,64
 41120 DEFB 64,72,72,72,72,72,72,72,74,74,74,74,74,74,74,74
 41136 DEFB 74,74,74,74,72,72,72,72,72,72,72,72,73,65,0,3
 41152 DEFB 7,11,7,8,8,72,75,75,75,75,75,75,72,68,68,68
 41168 DEFB 68,72,68,68,68,68,68,72,68,68,72,68,72,64,9,0
 41184 DEFB 9,8,11,0,4,4,5,5,0,8,4,68,68,68,64,64
 41200 DEFB 68,68,64,64,68,68,1,193,1,253,1,68,64,11,11,11

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 2/8)
;
; Used by the routine at #R59148.
b41216 DEFB 1,80,16,8,0,24,7,102,102,248,31,255,14,24,192,127
 41232 DEFB 28,194,136,67,56

; Mask value 2/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b41237 DEFB 64       ; Bit 6 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character moves right from the top-right edge of the roof of
; the apartment building next to no. 74 or the apartment building next to no.
; 19 (see #R50165), or moves left or right from the top-left edge of the roof
; of no. 17 (see #R50048).
; .
; The other special location handler routine addresses can be found at #R40982,
; #R41494, #R41750, #R42006, #R42262 and #R42518.
@label=SLHANDLER2
w41238 DEFW 64338

; Unused
s41240 DEFB 0

; Direction indicators for a character facing right and going right
;
; Used by the routine at #R60334. This list indicates, in descending order of
; preference, the directions in which a character who is facing right and
; moving right may go.
@label=DIRINDRR
b41241 DEFB 64       ; Bit 6 set: right
 41242 DEFB 16       ; Bit 4 set: up/right
 41243 DEFB 4        ; Bit 2 set: down/right

; T' values (6|y)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 0, 6, 12, 18, 24, 30 and 36; in practice, these
; T' values are used only by the tiles at (138,18) and (140,18).
b41244 DEFB 128,128

; Play area tile back buffer byte 2/8
;
; Used by the routines at #R59136 and #R59635.
b41246 DEFB 0

; T' values (6|y)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 0, 6, 12, 18, 24, 30 and 36; in practice, these
; T' values are used only by tiles at y-coordinates 18, 24, 30 and 36.
b41247 DEFB 201
 41248 DEFB 130,201,201,130,201,11,10,9,8,7,3,2,1,0,255,254
 41264 DEFB 210,194,250,249,240,239,238,237,159,196,196,194,221,220,219,218
 41280 DEFB 217,216,194,212,211,211,211,20,194,217,55,238,196,198,198,198
 41296 DEFB 195,194,194,194,194,194,194,131,182,194,194,194,131,128,159,158
 41312 DEFB 194,194,194,231,145,143,144,143,143,142,194,131,130,129,128,18
 41328 DEFB 113,112,111,110,53,52,44,43,93,93,75,74,73,72,194,194
 41344 DEFB 194,54,53,52,51,194,194,194,45,44,44,44,43,39,38,37
 41360 DEFB 105,36,23,22,21,20,19,18,231,17,194,234,128,54,128,196
 41376 DEFB 196,169,169,169,169,169,169,169,223,222,221,220,219,218,197,196
 41392 DEFB 195,194,193,192,169,169,169,169,169,169,168,167,166,211,128,129
 41408 DEFB 7,26,234,36,35,142,141,140,139,139,138,137,136,100,99,99
 41424 DEFB 99,128,192,180,191,190,184,115,84,182,114,58,113,231,99,128
 41440 DEFB 98,97,96,195,251,175,167,228,128,72,234,27,27,31,55,55
 41456 DEFB 30,31,55,55,30,129,128,122,128,93,128,32,231,50,49,48

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 3/8)
;
; Used by the routine at #R59148.
b41472 DEFB 0,208,31,248,255,252,4,170,171,129,224,0,48,99,0,255
 41488 DEFB 113,61,17,188,142

; Mask value 3/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b41493 DEFB 32       ; Bit 5 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character moves left from the top-left edge of the roof of the
; apartment building next to no. 19, or the left edge of the fire escape on the
; second, third or top floor of that building (see #R49876).
; .
; The other special location handler routine addresses can be found at #R40982,
; #R41238, #R41750, #R42006, #R42262 and #R42518.
@label=SLHANDLER3
w41494 DEFW 64338

; Direction indicators for a character facing left and going up
;
; Used by the routine at #R60315. This list indicates, in descending order of
; preference, the directions in which a character who is facing left and moving
; up may go.
@label=DIRINDLU
b41496 DEFB 32       ; Bit 5 set: up/left
 41497 DEFB 16       ; Bit 4 set: up/right
 41498 DEFB 128      ; Bit 7 set: left
 41499 DEFB 8        ; Bit 3 set: down/left

; T values (6|y-1)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 1, 7, 13, 19, 25, 31 and 37; in
; practice, these T values are used only by the tiles at (138,19) and (140,19).
b41500 DEFB 1,1

; Play area tile back buffer byte 3/8
;
; Used by the routines at #R59136 and #R59635.
b41502 DEFB 0

; T values (6|y-1)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 1, 7, 13, 19, 25, 31 and 37; in
; practice, these T values are used only by tiles at y-coordinates 19, 25, 31
; and 37.
b41503 DEFB 19
 41504 DEFB 19,3,19,19,19,3,3,19,19,19,19,19,19,19,19,19
 41520 DEFB 19,76,15,15,12,8,12,12,12,12,12,76,15,15,15,15
 41536 DEFB 15,15,76,76,76,76,72,72,72,76,216,0,12,12,0,0
 41552 DEFB 64,3,3,3,3,3,3,79,15,15,3,3,3,15,15,15
 41568 DEFB 3,3,3,3,76,76,76,76,76,76,12,12,12,76,76,76
 41584 DEFB 77,77,77,77,77,77,76,76,77,77,13,13,13,1,64,64
 41600 DEFB 64,68,13,13,64,64,64,64,76,76,76,76,76,72,72,76
 41616 DEFB 13,13,15,15,15,15,15,15,64,76,64,13,13,13,1,72
 41632 DEFB 72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72
 41648 DEFB 72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,3
 41664 DEFB 7,11,7,8,8,68,67,67,67,67,67,67,72,68,0,0
 41680 DEFB 68,68,72,129,129,68,72,72,72,68,72,72,64,64,9,1
 41696 DEFB 1,8,11,0,4,4,5,5,0,8,8,72,72,68,133,133
 41712 DEFB 68,68,129,129,68,68,1,193,1,193,1,68,64,72,72,11

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 4/8)
;
; Used by the routine at #R59148.
b41728 DEFB 0,48,16,8,0,12,4,153,156,62,7,255,195,140,0,0
 41744 DEFB 196,68,68,34,35

; Mask value 4/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b41749 DEFB 16       ; Bit 4 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character moves left from the top-left edge of the roof of the
; police station (see #R48507).
; .
; The other special location handler routine addresses can be found at #R40982,
; #R41238, #R41494, #R42006, #R42262 and #R42518.
@label=SLHANDLER4
w41750 DEFW 64338

; Direction indicators for a character facing right and going up
;
; Used by the routine at #R60315. This list indicates, in descending order of
; preference, the directions in which a character who is facing right and
; moving up may go.
@label=DIRINDRU
b41752 DEFB 16       ; Bit 4 set: up/right
 41753 DEFB 32       ; Bit 5 set: up/left
 41754 DEFB 64       ; Bit 6 set: right
 41755 DEFB 4        ; Bit 2 set: down/right

; T' values (6|y-1)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 1, 7, 13, 19, 25, 31 and 37; in practice, these
; T' values are used only by the tiles at (138,19) and (140,19).
b41756 DEFB 158,128

; Play area tile back buffer byte 4/8
;
; Used by the routines at #R59136 and #R59635.
b41758 DEFB 0

; T' values (6|y-1)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 1, 7, 13, 19, 25, 31 and 37; in practice, these
; T' values are used only by tiles at y-coordinates 19, 25, 31 and 37.
b41759 DEFB 20
 41760 DEFB 19,212,18,17,16,194,194,14,13,12,6,5,4,4,4,4
 41776 DEFB 4,253,252,251,246,169,245,244,243,242,241,229,228,227,226,225
 41792 DEFB 224,223,222,215,214,213,169,169,169,199,184,141,198,197,194,194
 41808 DEFB 194,194,194,194,194,194,194,184,183,178,194,194,194,162,161,160
 41824 DEFB 194,194,194,231,151,150,149,148,147,146,137,136,135,134,133,132
 41840 DEFB 116,115,115,114,101,100,46,46,95,94,78,77,76,96,194,194
 41856 DEFB 194,129,56,55,129,194,194,194,46,46,46,46,46,169,169,42
 41872 DEFB 41,40,29,28,21,27,26,25,231,24,194,8,7,6,128,246
 41888 DEFB 201,172,172,172,172,172,172,172,229,228,227,226,225,224,201,171
 41904 DEFB 200,199,198,172,172,172,172,172,172,172,172,172,171,170,128,129
 41920 DEFB 7,26,234,157,156,49,128,115,128,128,113,128,143,105,128,128
 41936 DEFB 104,195,129,3,0,87,119,118,117,186,116,113,194,231,101,128
 41952 DEFB 128,97,100,195,251,237,229,228,230,76,75,74,73,33,3,0
 41968 DEFB 32,33,3,0,32,129,128,122,158,93,128,32,231,53,52,51

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 5/8)
;
; Used by the routine at #R59148.
b41984 DEFB 0,8,16,4,0,15,252,85,113,192,248,0,252,48,0,0
 42000 DEFB 34,34,34,68,68

; Mask value 5/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b42005 DEFB 8        ; Bit 3 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character moves right from the top-right edge of the roof of
; no. 31 (see #R48501).
; .
; The other special location handler routine addresses can be found at #R40982,
; #R41238, #R41494, #R41750, #R42262 and #R42518.
@label=SLHANDLER5
w42006 DEFW 64338

; Direction indicators for a character facing left and going down
;
; Used by the routine at #R60315. This list indicates, in descending order of
; preference, the directions in which a character who is facing left and moving
; down may go.
@label=DIRINDLD
b42008 DEFB 8        ; Bit 3 set: down/left
 42009 DEFB 4        ; Bit 2 set: down/right
 42010 DEFB 128      ; Bit 7 set: left
 42011 DEFB 32       ; Bit 5 set: up/left

; T values (6|y-2)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 2, 8, 14, 20, 26, 32 and 38; in
; practice, these T values are used only by the tiles at (138,20) and (140,20).
b42012 DEFB 1,1

; Play area tile back buffer byte 5/8
;
; Used by the routines at #R59136 and #R59635.
b42014 DEFB 0

; T values (6|y-2)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 2, 8, 14, 20, 26, 32 and 38; in
; practice, these T values are used only by tiles at y-coordinates 20, 26, 32
; and 38.
b42015 DEFB 3
 42016 DEFB 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 42032 DEFB 3,3,3,3,3,3,3,15,11,3,15,15,15,15,15,15
 42048 DEFB 15,15,15,3,3,3,3,3,3,68,220,12,12,12,12,12
 42064 DEFB 0,15,12,15,15,3,15,3,3,15,15,3,15,13,15,15
 42080 DEFB 15,15,15,15,15,15,15,15,15,15,12,12,0,0,0,0
 42096 DEFB 77,77,77,77,77,77,78,78,3,3,13,13,13,1,64,68
 42112 DEFB 64,68,13,13,76,64,68,64,129,129,129,14,14,3,3,3
 42128 DEFB 3,3,15,7,7,15,15,15,15,15,64,14,2,9,5,72
 42144 DEFB 64,65,65,1,10,10,9,72,11,9,9,9,75,75,75,75
 42160 DEFB 9,9,9,11,72,11,9,10,10,9,73,69,73,73,0,3
 42176 DEFB 7,11,11,3,3,72,129,131,129,129,131,129,72,204,0,0
 42192 DEFB 0,68,68,129,129,68,68,68,68,68,68,68,64,64,9,3
 42208 DEFB 3,8,11,0,4,8,9,5,0,8,8,72,72,68,133,133
 42224 DEFB 68,68,129,129,68,68,1,253,1,193,1,68,64,68,64,9

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 6/8)
;
; Used by the routine at #R59148.
b42240 DEFB 0,6,24,4,255,252,4,205,198,31,3,254,1,192,0,0
 42256 DEFB 136,136,136,17,17

; Mask value 6/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b42261 DEFB 4        ; Bit 2 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character moves left from the left edge of the fire escape on
; the first floor of the apartment building next to no. 19 (see #R49898).
; .
; The other special location handler routine addresses can be found at #R40982,
; #R41238, #R41494, #R41750, #R42006 and #R42518.
@label=SLHANDLER6
w42262 DEFW 64338

; Direction indicators for a character facing right and going down
;
; Used by the routine at #R60315. This list indicates, in descending order of
; preference, the directions in which a character who is facing right and
; moving down may go.
@label=DIRINDRD
b42264 DEFB 4        ; Bit 2 set: down/right
 42265 DEFB 8        ; Bit 3 set: down/left
 42266 DEFB 64       ; Bit 6 set: right
 42267 DEFB 16       ; Bit 4 set: up/right

; T' values (6|y-2)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 2, 8, 14, 20, 26, 32 and 38; in practice, these
; T' values are used only by the tiles at (138,20) and (140,20).
b42268 DEFB 128,128

; Play area tile back buffer byte 6/8
;
; Used by the routines at #R59136 and #R59635.
b42270 DEFB 0

; T' values (6|y-2)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 2, 8, 14, 20, 26, 32 and 38; in practice, these
; T' values are used only by tiles at y-coordinates 20, 26, 32 and 38.
b42271 DEFB 194
 42272 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 42288 DEFB 194,194,194,194,194,194,194,248,20,194,247,236,235,234,233,232
 42304 DEFB 231,230,30,194,194,194,194,194,194,10,57,203,203,202,201,200
 42320 DEFB 194,189,188,187,186,194,185,194,194,180,179,194,170,169,168,167
 42336 DEFB 166,165,164,163,157,156,155,154,153,152,139,138,194,194,194,194
 42352 DEFB 119,118,118,117,103,102,97,96,194,194,81,80,79,96,225,22
 42368 DEFB 194,129,59,58,57,225,22,194,17,13,9,48,47,194,194,194
 42384 DEFB 194,194,35,0,0,34,33,32,31,30,194,9,128,54,234,249
 42400 DEFB 211,211,211,211,248,247,139,235,139,234,233,232,231,230,207,206
 42416 DEFB 205,204,203,139,202,139,139,177,176,175,175,27,174,173,128,129
 42432 DEFB 7,26,158,196,196,144,28,26,24,24,8,6,143,230,128,128
 42448 DEFB 129,197,196,4,1,88,65,64,63,62,52,51,194,231,104,128
 42464 DEFB 128,97,103,195,251,102,81,228,105,80,79,78,77,35,4,1
 42480 DEFB 34,35,4,1,34,129,128,122,128,93,128,32,231,234,128,54

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 7/8)
;
; Used by the routine at #R59148.
b42496 DEFB 0,1,24,4,0,4,4,174,24,224,124,0,30,0,0,0
 42512 DEFB 17,17,17,136,136

; Mask value 7/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b42517 DEFB 2        ; Bit 1 set

; Special location handler routine address
;
; Used by the routine at #R60347. This special location handler routine is
; invoked when a character tries to move right from behind the door of the
; left-hand jail cell on the first floor of the police station (see #R48893).
; .
; The other special location handler routine addresses can be found at #R40982,
; #R41238, #R41494, #R41750, #R42006 and #R42262.
@label=SLHANDLER7
w42518 DEFW 31580

; Unused
s42520 DEFS 4

; T values (6|y-3)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 3, 9, 15, 21, 27, 33 and 39; in
; practice, these T values are used only by the tiles at (138,21) and (140,21).
b42524 DEFB 1,1

; Play area tile back buffer byte 7/8
;
; Used by the routines at #R59136 and #R59635.
b42526 DEFB 0

; T values (6|y-3)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 3, 9, 15, 21, 27, 33 and 39; in
; practice, these T values are used only by tiles at y-coordinates 21, 27, 33
; and 39.
b42527 DEFB 3
 42528 DEFB 3,3,3,3,3,19,3,3,3,3,3,3,3,3,3,3
 42544 DEFB 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 42560 DEFB 3,3,3,3,3,3,3,3,3,12,12,0,0,0,12,12
 42576 DEFB 12,15,15,5,15,15,15,3,3,15,3,3,13,5,15,15
 42592 DEFB 15,15,15,15,3,3,3,3,3,3,0,12,12,0,0,0
 42608 DEFB 77,77,77,77,77,77,78,78,3,3,13,13,13,1,128,76
 42624 DEFB 64,68,5,13,76,128,76,64,133,133,133,2,14,3,3,3
 42640 DEFB 3,3,3,3,3,3,3,3,3,3,64,14,2,9,5,64
 42656 DEFB 72,65,65,9,10,10,1,68,3,9,9,1,75,75,75,75
 42672 DEFB 9,9,9,3,68,3,1,10,10,9,73,69,73,65,0,3
 42688 DEFB 7,11,11,3,3,68,129,131,129,129,131,129,72,208,4,8
 42704 DEFB 0,68,68,129,129,68,68,68,68,72,68,72,72,64,3,3
 42720 DEFB 3,8,11,0,4,8,9,5,8,8,4,72,72,68,133,133
 42736 DEFB 68,68,129,129,68,72,193,193,193,193,193,72,64,68,3,9

; Play area graphic data (tiles #b0-#b20, base page #b160, byte 8/8)
;
; Used by the routine at #R59148.
b42752 DEFB 0,0,216,7,0,7,252,56,115,7,128,0,224,0,0,0
 42768 DEFB 68,68,68,34,34

; Mask value 8/8
;
; Used by the routines at #R29100, #R29332, #R29361, #R59148 and #R59861.
b42773 DEFB 1        ; Bit 0 set

; Unused
;
; The first two bytes here may once have been used as the address of a special
; location handler routine, which would have been invoked by a three-byte
; special location descriptor with 8 as the third byte (such as the unused
; three-byte location descriptor in the table at #R49742). The addresses of the
; special location handler routines that are used can be found at #R40982,
; #R41238, #R41494, #R41750, #R42006, #R42262 and #R42518.
u42774 DEFB 10,115
 42776 DEFB 0,0,0,0

; T' values (6|y-3)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 3, 9, 15, 21, 27, 33 and 39; in practice, these
; T' values are used only by the tiles at (138,21) and (140,21).
b42780 DEFB 128,158

; Play area tile back buffer byte 8/8
;
; Used by the routines at #R59136 and #R59635.
b42782 DEFB 0

; T' values (6|y-3)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 3, 9, 15, 21, 27, 33 and 39; in practice, these
; T' values are used only by tiles at y-coordinates 21, 27, 33 and 39.
b42783 DEFB 228
 42784 DEFB 228,228,228,228,228,15,210,210,210,210,228,228,228,228,228,228
 42800 DEFB 228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228
 42816 DEFB 228,228,228,228,228,228,228,228,228,208,207,194,194,194,206,205
 42832 DEFB 204,194,193,241,192,191,190,228,228,181,194,194,177,241,176,175
 42848 DEFB 174,173,172,171,228,228,228,228,228,228,194,141,140,228,228,228
 42864 DEFB 123,122,121,120,105,104,99,98,228,228,84,83,82,96,31,60
 42880 DEFB 194,129,103,62,61,30,60,194,28,27,26,105,49,228,228,228
 42896 DEFB 228,228,228,228,228,228,228,228,228,228,194,10,128,54,234,196
 42912 DEFB 253,211,211,252,251,250,128,130,128,239,238,211,237,236,211,210
 42928 DEFB 175,209,208,128,130,128,128,181,180,179,175,27,178,211,128,129
 42944 DEFB 7,160,159,196,196,49,29,27,25,25,23,7,143,102,109,132
 42960 DEFB 129,36,37,5,2,89,71,70,69,122,183,121,120,231,128,128
 42976 DEFB 128,97,103,195,251,102,81,228,85,84,234,83,82,37,5,2
 42992 DEFB 36,37,5,2,36,57,90,92,90,91,90,55,231,234,128,54

; Play area attribute data
;
; Used by the routine at #R59148.
b43008 DEFB 120,120,48,56,48,120,56,48,48,120,48,56,56,56,56,120
 43024 DEFB 56,48,48,120,40,80,120,120,120,56,40,56

; T values (6|y-4)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 4, 10, 16, 22, 28, 34 and 40; in
; practice, these T values are used only by the tiles at (138,22) and (140,22).
b43036 DEFB 1,1

; Play area tile back buffer attribute byte
;
; Used by the routine at #R59148.
@label=BACKBUFATT
b43038 DEFB 56

; T values (6|y-4)
;
@ignoreua
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 4, 10, 16, 22, 28, 34 and 40; in
; practice, these T values are used only by tiles at y-coordinates 22, 28, 34
; and 40. In particular, the T values at addresses #w43039-#w43119, #w43128,
; #w43129 and #w43149-#w43161 are used only by tiles at y-coordinate 40 (which
; are never displayed), and are therefore effectively unused.
b43039 DEFB 3
 43040 DEFB 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 43056 DEFB 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 43072 DEFB 3,3,3,3,3,3,3,3,3,0,12,12,12,12,12,12
 43088 DEFB 0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 43104 DEFB 3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0
 43120 DEFB 77,77,77,77,77,77,78,78,3,3,13,13,13,13,64,76
 43136 DEFB 64,68,5,13,76,64,76,64,133,133,133,2,14,3,3,3
 43152 DEFB 3,3,3,3,3,3,3,3,3,3,76,13,13,9,5,64
 43168 DEFB 76,65,65,13,10,10,2,68,3,9,9,9,75,75,75,75
 43184 DEFB 9,9,9,3,68,3,1,10,10,9,73,69,73,65,0,11
 43200 DEFB 11,11,11,3,3,72,75,75,75,75,75,75,72,220,8,8
 43216 DEFB 192,68,68,68,68,72,72,68,72,72,68,72,72,64,3,3
 43232 DEFB 3,11,11,11,8,8,9,5,8,8,8,72,72,68,68,68
 43248 DEFB 68,68,68,68,68,64,72,72,72,72,72,64,72,68,64,72

; Play area attribute data
;
; Used by the routine at #R59148.
b43264 DEFB 43,43,112,40,96,40,96,40,56,32,104,48,104,88,48,24
 43280 DEFB 112,56,88,48,56,112,56,48,56,80,40,40

; T' values (6|y-4)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 4, 10, 16, 22, 28, 34 and 40; in practice, these
; T' values are used only by the tiles at (138,22) and (140,22).
b43292 DEFB 128,128

; Unused
u43294 DEFB 0

; T' values (6|y-4)
;
@ignoreua
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 4, 10, 16, 22, 28, 34 and 40; in practice, these
; T' values are used only by tiles at y-coordinates 22, 28, 34 and 40. In
; particular, the T' values at addresses #w43295-#w43375, #w43384, #w43385 and
; #w43405-#w43417 are used only by tiles at y-coordinate 40 (which are never
; displayed), and are therefore effectively unused.
b43295 DEFB 194
 43296 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43312 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43328 DEFB 194,194,194,194,194,194,194,194,194,194,210,191,191,191,191,209
 43344 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43360 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43376 DEFB 124,121,121,120,107,106,93,93,194,194,88,87,86,85,198,63
 43392 DEFB 194,129,103,62,64,198,63,194,28,27,26,105,50,194,194,194
 43408 DEFB 194,194,194,194,194,194,194,194,194,194,13,12,11,54,234,196
 43424 DEFB 1,211,211,0,255,254,128,130,128,242,241,240,237,236,211,210
 43440 DEFB 214,213,212,128,130,128,128,185,184,183,175,27,182,211,128,163
 43456 DEFB 162,161,159,196,196,150,149,148,146,146,147,146,145,215,134,133
 43472 DEFB 151,92,91,93,93,130,126,69,125,114,58,124,123,231,198,198
 43488 DEFB 198,109,108,107,106,105,81,228,90,89,88,87,86,40,39,39
 43504 DEFB 38,40,39,39,38,194,62,61,60,59,58,194,56,234,128,54

; Play area attribute data
;
; Used by the routine at #R59148.
b43520 DEFB 43
 43521 DEFB 43                       ; Unused; this attribute byte would be
                                     ; used by the 16 tiles in the top two rows
                                     ; of the play area between x-coordinates
                                     ; 80 and 87, but those tiles are
                                     ; #FACT#hiddenSky(never displayed)
 43522 DEFB 40,40,56,40,48,104,40,40
 43530 DEFB 0                        ; Unused
 43531 DEFB 40
 43532 DEFB 0,0                      ; Unused
 43534 DEFB 40
 43535 DEFB 0,0                      ; Unused
 43537 DEFB 40
 43538 DEFB 0                        ; Unused
 43539 DEFB 121,48,112,96,121,32
 43545 DEFB 56                       ; Unused
 43546 DEFB 40
 43547 DEFB 0                        ; Unused

; T values (6|y-5)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 5, 11, 17, 23, 29, 35 and 41; in
; practice, these T values are used only by the tiles at (138,23) and (140,23).
b43548 DEFB 1,1

; Unused
u43550 DEFB 0

; T values (6|y-5)
;
@ignoreua
; Used by the routines at #R59148 and #R62368. T values in this block may be
; used by play area tiles at y-coordinates 5, 11, 17, 23, 29, 35 and 41; in
; practice, these T values are used only by tiles at y-coordinates 23, 29, 35
; and 41. In particular, the T values at addresses #w43551-#w43631, #w43640,
; #w43641 and #w43661-#w43673 are used only by tiles at y-coordinate 41 (which
; are never displayed), and are therefore effectively unused.
b43551 DEFB 3
 43552 DEFB 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 43568 DEFB 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 43584 DEFB 3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0
 43600 DEFB 0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
 43616 DEFB 3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0
 43632 DEFB 77,77,77,77,77,77,78,78,3,3,13,13,13,13,64,64
 43648 DEFB 76,76,13,13,76,76,68,76,133,133,133,2,14,3,3,3
 43664 DEFB 3,3,3,3,3,3,3,3,3,3,64,13,13,13,5,64
 43680 DEFB 64,77,65,13,15,13,9,68,11,9,1,1,75,75,75,75
 43696 DEFB 1,1,9,11,68,11,9,11,11,9,73,69,73,65,3,11
 43712 DEFB 11,11,11,3,3,72,64,64,72,72,64,72,72,224,212,8
 43728 DEFB 196,64,64,64,64,72,64,72,72,68,72,64,64,64,3,3
 43744 DEFB 3,3,3,11,11,11,8,8,8,8,8,72,72,72,72,72
 43760 DEFB 72,72,72,72,72,64,72,72,72,72,72,64,64,68,64,72

; Play area attribute data
;
; Used by the routine at #R59148.
b43776 DEFB 56,40,56,48,56,104
 43782 DEFB 0                  ; Unused
 43783 DEFB 56,46,96,56,48
 43788 DEFB 0,0                ; Unused
 43790 DEFB 47,88
 43792 DEFB 0                  ; Unused
 43793 DEFB 56,56,112
 43796 DEFB 0,0                ; Unused
 43798 DEFB 112,56,48,56
 43802 DEFB 0                  ; Unused
 43803 DEFB 56

; T' values (6|y-5)
;
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 5, 11, 17, 23, 29, 35 and 41; in practice, these
; T' values are used only by the tiles at (138,23) and (140,23).
b43804 DEFB 158,158

; Unused
u43806 DEFB 0

; T' values (6|y-5)
;
@ignoreua
; Used by the routine at #R59148. T' values in this block may be used by play
; area tiles at y-coordinates 5, 11, 17, 23, 29, 35 and 41; in practice, these
; T' values are used only by tiles at y-coordinates 23, 29, 35 and 41. In
; particular, the T' values at addresses #w43807-#w43887, #w43896, #w43897 and
; #w43917-#w43929 are used only by tiles at y-coordinate 41 (which are never
; displayed), and are therefore effectively unused.
b43807 DEFB 194
 43808 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43824 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43840 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43856 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43872 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194
 43888 DEFB 127,126,126,125,109,108,93,93,194,194,92,91,90,89,194,194
 43904 DEFB 71,70,69,68,67,66,250,65,28,27,26,105,50,194,194,194
 43920 DEFB 194,194,194,194,194,194,194,194,194,194,194,16,15,14,234,196
 43936 DEFB 196,5,211,4,3,2,191,130,191,245,128,128,244,243,217,216
 43952 DEFB 128,128,215,191,130,191,191,190,189,188,187,27,186,211,128,165
 43968 DEFB 164,161,159,196,196,155,211,211,154,153,211,152,151,88,153,135
 43984 DEFB 24,194,194,194,194,131,128,127,114,58,113,194,194,231,194,194
 44000 DEFB 194,194,194,112,111,110,95,94,93,92,91,87,86,71,69,70
 44016 DEFB 69,69,69,69,68,194,67,66,65,64,63,194,194,234,128,54

; T values (6|y)
;
@ignoreua
; Used by the routines at #R59148 and #R62368. T values in this block may be
; (and in practice are) used by play area tiles at y-coordinates 0, 6, 12, 18,
; 24, 30 and 36. The T values at addresses #w44255-#w44260, #w44265-#w44277 and
; #w44284-#w44287 are used only by tiles at y-coordinate 0 (which are never
; displayed), and are therefore effectively unused.
@label=Z3VALUES0B
b44032 DEFB 11,64,64,64,64,64,64,64,64,64,64,64,64,0,9,9
 44048 DEFB 9,0,8,0,2,2,75,64,68,75,75,75,75,75,75,2
 44064 DEFB 6,6,5,7,0,4,4,5,5,68,68,64,64,64,64,68
 44080 DEFB 193,253,1,68,1,5,5,5,1,2,6,64,64,68,64,64
 44096 DEFB 68,68,68,68,68,68,68,68,68,68,68,68,68,2,2,2
 44112 DEFB 0,4,0,1,1,1,1,1,64,64,68,71,71,71,68,68
 44128 DEFB 68,64,129,129,129,129,71,68,68,68,68,68,68,68,68,64
 44144 DEFB 129,129,129,129,64,68,2,2,64,6,2,2,2,2,6,2
 44160 DEFB 68,68,68,68,68,68,68,68,68,64,64,68,68,64,64,68
 44176 DEFB 68,68,68,68,68,64,64,68,2,2,2,2,2,2,2,2
 44192 DEFB 2,68,68,64,64,68,64,64,68,6,6,6,2,2,2,2
 44208 DEFB 2,2,2,2,2,2,6,68,131,129,68,68,64,64,64,64
 44224 DEFB 64,64,64,64,64,67,3,3,3,3,129,129,129,131,64,2
 44240 DEFB 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,64
 44256 DEFB 64,64,64,2,3,3,3,64,64,2,2,2,2,2,2,2
 44272 DEFB 2,2,2,2,2,2,64,64,3,3,3,3,2,2,2,2

; T' values (6|y)
;
@ignoreua
; Used by the routine at #R59148. T' values in this block may be (and in
; practice are) used by play area tiles at y-coordinates 0, 6, 12, 18, 24, 30
; and 36. The T' values at addresses #w44511-#w44516, #w44521-#w44533 and
; #w44540-#w44543 are used only by tiles at y-coordinate 0 (which are never
; displayed), and are therefore effectively unused.
b44288 DEFB 47,194,194,194,194,194,194,194,194,194,194,194,194,128,25,24
 44304 DEFB 23,128,22,128,194,194,19,198,202,9,8,10,9,8,7,194
 44320 DEFB 241,240,239,238,194,49,237,229,228,227,226,128,194,194,194,129
 44336 DEFB 122,93,128,32,128,205,204,203,128,198,202,55,55,31,55,55
 44352 DEFB 30,193,192,180,191,190,184,183,84,182,181,180,179,194,194,231
 44368 DEFB 194,49,194,194,196,196,196,196,194,194,146,145,144,143,142,141
 44384 DEFB 133,231,17,13,13,9,131,130,124,123,122,121,120,119,114,231
 44400 DEFB 17,13,13,9,194,10,128,194,128,112,225,225,225,225,111,194
 44416 DEFB 100,99,99,99,99,99,99,98,31,55,55,30,31,55,55,86
 44432 DEFB 54,53,52,51,31,55,55,50,194,194,194,194,194,194,194,194
 44448 DEFB 194,27,18,55,55,31,55,55,30,27,27,27,194,194,194,194
 44464 DEFB 194,194,194,194,194,194,7,6,17,9,3,2,194,194,194,194
 44480 DEFB 196,211,211,225,252,194,251,250,249,248,17,13,13,9,199,194
 44496 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,128
 44512 DEFB 128,128,230,229,195,224,223,222,194,195,195,195,195,195,215,195
 44528 DEFB 195,195,195,195,195,195,205,204,203,202,201,200,195,195,195,195

; T values (6|y-1)
;
@ignoreua
; Used by the routines at #R59148 and #R62368. T values in this block may be
; (and in practice are) used by play area tiles at y-coordinates 1, 7, 13, 19,
; 25, 31 and 37. The T values at addresses #w44767-#w44772, #w44777-#w44789 and
; #w44796-#w44799 are used only by tiles at y-coordinate 1 (which are never
; displayed), and are therefore effectively unused.
b44544 DEFB 3,129,129,129,129,64,64,64,64,129,129,129,129,0,9,9
 44560 DEFB 9,5,0,0,2,75,72,64,64,133,133,75,129,129,75,2
 44576 DEFB 6,6,7,7,0,4,4,5,5,5,68,68,64,64,64,68
 44592 DEFB 193,193,1,68,0,5,5,5,5,2,2,133,133,68,129,129
 44608 DEFB 68,68,68,129,129,68,68,68,68,68,68,129,129,2,2,2
 44624 DEFB 0,4,0,1,1,1,1,1,64,64,68,68,68,68,68,68
 44640 DEFB 68,64,129,129,129,129,71,68,68,68,68,68,68,68,68,64
 44656 DEFB 129,129,129,129,64,68,2,2,64,249,249,249,249,249,249,2
 44672 DEFB 68,0,0,68,68,68,68,68,68,133,133,68,68,129,129,68
 44688 DEFB 68,68,68,68,68,129,129,68,2,2,6,2,2,2,2,2
 44704 DEFB 2,68,68,133,133,68,129,129,68,6,6,6,1,5,5,5
 44720 DEFB 1,1,6,2,2,2,6,68,131,129,7,7,64,129,129,129
 44736 DEFB 64,64,64,7,3,67,3,3,3,3,129,129,129,131,64,2
 44752 DEFB 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,64
 44768 DEFB 64,64,64,2,3,3,3,64,64,2,2,2,2,2,2,2
 44784 DEFB 2,2,2,2,2,2,64,3,3,3,3,3,2,2,2,2

; T' values (6|y-1)
;
@ignoreua
; Used by the routine at #R59148. T' values in this block may be (and in
; practice are) used by play area tiles at y-coordinates 1, 7, 13, 19, 25, 31
; and 37. The T' values at addresses #w45023-#w45028, #w45033-#w45045 and
; #w45052-#w45055 are used only by tiles at y-coordinate 1 (which are never
; displayed), and are therefore effectively unused.
b44800 DEFB 128,13,13,13,9,194,194,194,194,17,13,13,13,128,28,27
 44816 DEFB 26,230,231,128,194,19,20,194,231,3,0,12,3,0,11,194
 44832 DEFB 241,178,244,243,194,49,242,233,228,232,231,230,194,194,194,129
 44848 DEFB 122,93,128,32,128,16,10,207,206,194,231,3,0,33,3,0
 44864 DEFB 32,195,194,3,0,87,59,58,57,186,185,3,0,194,194,231
 44880 DEFB 194,49,194,194,196,196,196,196,194,194,149,148,147,147,147,147
 44896 DEFB 134,231,18,21,14,10,131,130,127,125,125,126,125,125,115,231
 44912 DEFB 18,21,14,10,194,10,128,194,128,29,29,29,29,29,29,194
 44928 DEFB 105,128,128,104,103,102,101,12,33,3,0,32,33,3,0,87
 44944 DEFB 59,58,57,52,56,3,0,55,194,194,45,225,194,194,194,194
 44960 DEFB 194,27,18,3,0,33,3,0,32,27,27,27,234,15,15,14
 44976 DEFB 198,198,11,194,194,194,7,6,18,10,5,4,194,17,13,9
 44992 DEFB 196,211,211,0,255,194,194,254,194,253,18,21,14,10,199,194
 45008 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,128
 45024 DEFB 128,128,105,231,195,227,226,196,225,195,195,195,195,195,216,195
 45040 DEFB 195,195,195,195,195,195,208,207,206,194,194,194,195,195,195,195

; T values (6|y-2)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; (and in practice are) used by play area tiles at y-coordinates 2, 8, 14, 20,
; 26, 32 and 38.
b45056 DEFB 3,129,129,129,129,64,64,64,64,129,129,129,129,0,1,5
 45072 DEFB 9,5,8,8,6,72,64,64,64,133,133,75,129,129,75,6
 45088 DEFB 6,6,0,7,0,4,4,5,5,1,68,68,64,64,64,68
 45104 DEFB 253,193,1,68,0,1,5,4,4,2,2,134,134,68,130,130
 45120 DEFB 68,68,68,129,129,68,68,68,68,68,68,129,129,2,6,2
 45136 DEFB 0,4,0,1,5,1,1,5,64,64,68,68,0,0,68,68
 45152 DEFB 68,64,129,129,129,129,71,68,68,193,253,193,193,193,68,64
 45168 DEFB 129,129,129,129,64,68,2,2,64,249,249,251,249,249,249,2
 45184 DEFB 204,0,0,0,4,0,4,192,68,133,133,68,68,129,129,68
 45200 DEFB 68,68,68,68,68,129,129,68,6,4,4,0,3,7,3,7
 45216 DEFB 7,68,68,133,133,68,129,129,68,6,6,6,5,5,1,5
 45232 DEFB 1,1,6,2,2,2,6,68,131,129,3,3,64,129,129,129
 45248 DEFB 64,64,64,3,3,3,3,3,3,3,129,129,129,131,64,2
 45264 DEFB 2,2,2,64,2,2,2,2,2,2,2,2,2,2,2,64
 45280 DEFB 64,64,64,2,3,3,3,3,3,1,1,1,1,1,1,1
 45296 DEFB 1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1

; T' values (6|y-2)
;
; Used by the routine at #R59148. T' values in this block may be (and in
; practice are) used by play area tiles at y-coordinates 2, 8, 14, 20, 26, 32
; and 38.
b45312 DEFB 128,24,24,24,23,194,194,194,194,25,24,24,24,128,129,7
 45328 DEFB 26,234,30,29,250,20,194,194,231,4,1,14,4,1,13,250
 45344 DEFB 249,248,105,247,194,246,245,235,228,128,231,234,194,194,194,129
 45360 DEFB 122,93,128,32,128,129,210,209,208,194,231,4,1,35,4,1
 45376 DEFB 34,197,196,4,1,88,187,64,63,62,61,7,1,194,168,231
 45392 DEFB 194,49,194,194,161,196,196,44,194,194,152,151,128,128,150,99
 45408 DEFB 135,231,19,22,15,11,131,130,128,123,125,123,124,123,116,231
 45424 DEFB 19,22,15,11,194,10,128,194,128,29,29,29,29,29,29,194
 45440 DEFB 230,128,128,129,107,128,106,6,35,4,1,34,35,4,1,88
 45456 DEFB 65,64,63,62,61,7,1,60,48,47,46,194,198,43,221,42
 45472 DEFB 41,27,18,4,1,35,4,1,34,27,27,27,18,17,128,16
 45488 DEFB 194,194,12,194,194,194,7,6,19,11,194,194,194,25,24,23
 45504 DEFB 196,211,211,194,194,194,194,194,194,194,19,22,15,11,199,194
 45520 DEFB 194,194,194,198,194,194,194,194,194,194,194,194,194,194,194,128
 45536 DEFB 128,128,105,231,195,194,194,194,194,195,195,195,195,195,217,195
 45552 DEFB 195,195,195,195,195,195,194,194,194,194,194,194,195,195,195,195

; T values (6|y-3)
;
; Used by the routines at #R59148 and #R62368. T values in this block may be
; (and in practice are) used by play area tiles at y-coordinates 3, 9, 15, 21,
; 27, 33 and 39.
b45568 DEFB 3,129,129,129,129,64,64,64,64,129,129,129,129,0,1,5
 45584 DEFB 9,5,8,8,10,64,64,64,72,133,133,75,129,129,75,6
 45600 DEFB 6,6,0,7,4,4,4,5,5,64,68,68,64,68,68,68
 45616 DEFB 193,193,1,68,0,1,5,0,4,7,6,134,134,68,130,130
 45632 DEFB 68,68,68,129,129,68,68,68,68,68,68,128,129,6,6,6
 45648 DEFB 0,4,0,1,5,1,1,5,64,64,68,68,0,0,64,64
 45664 DEFB 68,64,129,129,129,129,71,68,68,1,193,1,193,1,68,64
 45680 DEFB 129,129,129,129,64,68,2,2,64,249,249,251,251,249,249,2
 45696 DEFB 208,4,4,0,0,0,4,192,68,133,133,68,68,129,129,68
 45712 DEFB 68,68,68,68,68,128,129,68,2,0,4,0,1,1,1,1
 45728 DEFB 5,68,68,133,133,68,129,129,68,6,6,6,5,5,5,5
 45744 DEFB 1,1,6,2,2,2,6,68,131,129,3,3,64,129,129,129
 45760 DEFB 64,64,64,3,3,3,3,3,3,3,129,129,129,131,64,2
 45776 DEFB 2,2,2,64,2,2,2,2,2,2,2,2,2,2,2,64
 45792 DEFB 64,64,64,2,3,3,3,3,3,1,1,64,67,67,64,67
 45808 DEFB 67,1,1,1,1,64,3,3,3,3,3,3,1,1,1,1

; T' values (6|y-3)
;
; Used by the routine at #R59148. T' values in this block may be (and in
; practice are) used by play area tiles at y-coordinates 3, 9, 15, 21, 27, 33
; and 39.
b45824 DEFB 128,16,16,16,12,194,194,194,194,20,16,16,16,128,129,7
 45840 DEFB 26,234,32,31,21,194,194,194,21,5,2,16,5,2,15,254
 45856 DEFB 249,253,105,247,252,251,237,229,228,128,231,234,194,220,219,129
 45872 DEFB 122,93,128,32,128,129,7,128,213,212,211,5,2,37,5,2
 45888 DEFB 36,36,37,5,2,89,71,70,69,68,67,8,6,171,170,169
 45904 DEFB 194,49,194,194,161,196,196,44,194,194,131,153,128,128,113,128
 45920 DEFB 16,231,20,16,16,12,131,130,129,158,122,128,93,128,32,231
 45936 DEFB 20,16,16,12,194,10,128,194,128,29,29,29,29,29,29,194
 45952 DEFB 102,109,108,129,128,128,106,6,37,5,2,36,37,5,2,89
 45968 DEFB 71,70,69,68,67,8,6,66,231,194,49,194,194,196,196,196
 45984 DEFB 44,27,18,5,2,37,5,2,36,27,28,28,21,21,20,19
 46000 DEFB 194,194,13,194,194,194,7,6,20,12,228,228,194,20,16,12
 46016 DEFB 196,211,211,228,228,228,228,228,228,228,20,16,16,12,199,194
 46032 DEFB 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,128
 46048 DEFB 128,128,105,231,195,228,228,228,228,195,195,128,219,218,128,128
 46064 DEFB 214,195,195,195,195,128,210,210,210,210,210,209,195,195,195,195

; T values (6|y-4)
;
@ignoreua
; Used by the routines at #R59148 and #R62368. T values in this block may be
; (and in practice are) used by play area tiles at y-coordinates 4, 10, 16, 22,
; 28, 34 and 40. The T values at addresses #w46266, #w46267, #w46275-#w46281,
; #w46309-#w46312 and #w46326-#w46331 are used only by tiles at y-coordinate 40
; (which are never displayed), and are therefore effectively unused.
b46080 DEFB 3,64,64,64,64,64,64,64,64,64,64,64,64,0,1,5
 46096 DEFB 9,5,8,8,68,68,68,68,68,68,68,72,68,68,72,6
 46112 DEFB 10,10,8,7,4,4,4,5,5,64,68,68,68,68,68,68
 46128 DEFB 253,193,1,68,0,1,5,5,4,4,0,68,68,68,68,68
 46144 DEFB 68,68,68,68,68,68,68,68,68,68,68,68,68,6,5,7
 46160 DEFB 0,4,0,1,5,1,5,5,68,64,68,68,0,0,68,64
 46176 DEFB 68,68,68,68,68,68,71,68,68,1,253,1,193,1,68,68
 46192 DEFB 68,68,68,68,68,68,2,2,64,249,251,251,251,249,249,68
 46208 DEFB 208,200,196,192,192,192,192,192,68,68,68,68,68,68,68,68
 46224 DEFB 68,68,68,68,68,68,68,68,2,0,4,0,1,1,1,1
 46240 DEFB 1,68,68,68,68,68,68,68,68,6,68,64,64,64,64,64
 46256 DEFB 64,64,64,64,68,6,6,68,64,64,3,3,64,64,64,64
 46272 DEFB 64,64,64,3,3,3,3,3,3,3,64,64,64,64,64,2
 46288 DEFB 2,2,2,64,2,2,2,2,2,2,2,2,2,2,2,64
 46304 DEFB 64,64,64,64,64,3,3,3,3,64,64,64,64,64,64,64
 46320 DEFB 64,64,64,64,64,64,3,3,3,3,3,3,64,64,2,2

; T' values (6|y-4)
;
@ignoreua
; Used by the routine at #R59148. T' values in this block may be (and in
; practice are) used by play area tiles at y-coordinates 4, 10, 16, 22, 28, 34
; and 40. The T' values at addresses #w46522, #w46523, #w46531-#w46537,
; #w46565-#w46568 and #w46582-#w46587 are used only by tiles at y-coordinate 40
; (which are never displayed), and are therefore effectively unused.
b46336 DEFB 128,194,194,194,194,194,194,194,194,194,194,194,194,128,129,7
 46352 DEFB 26,234,34,33,110,110,110,110,110,39,39,18,39,39,17,241
 46368 DEFB 2,1,0,247,255,251,242,233,228,128,231,234,223,222,221,129
 46384 DEFB 122,93,128,32,128,129,7,216,215,214,128,39,39,40,39,39
 46400 DEFB 38,92,91,90,76,76,188,77,76,75,74,62,73,174,173,172
 46416 DEFB 194,49,194,194,161,196,163,162,155,194,131,153,128,128,154,213
 46432 DEFB 138,137,136,136,136,136,131,132,129,128,122,128,93,128,32,118
 46448 DEFB 117,117,117,117,113,10,128,231,128,29,29,29,29,29,29,110
 46464 DEFB 231,199,199,168,38,38,38,7,91,93,93,92,91,90,76,76
 46480 DEFB 78,77,76,75,74,62,73,72,231,194,49,194,194,196,196,196
 46496 DEFB 196,27,18,39,39,40,39,39,38,27,18,194,194,194,194,194
 46512 DEFB 194,194,194,194,10,9,7,8,196,194,194,194,194,194,194,194
 46528 DEFB 196,211,211,194,194,194,194,194,194,194,194,194,194,194,199,194
 46544 DEFB 244,194,194,194,194,194,194,194,194,194,194,194,194,194,194,233
 46560 DEFB 232,198,198,198,198,194,194,194,194,221,220,213,213,213,213,213
 46576 DEFB 213,213,212,196,211,211,194,194,194,194,194,194,198,197,196,196

; T values (6|y-5)
;
@ignoreua
; Used by the routines at #R59148 and #R62368. T values in this block may be
; (and in practice are) used by play area tiles at y-coordinates 5, 11, 17, 23,
; 29, 35 and 41. The T values at addresses #w46778, #w46779, #w46787-#w46793,
; #w46821-#w46824 and #w46838-#w46843 are used only by tiles at y-coordinate 41
; (which are never displayed), and are therefore effectively unused.
b46592 DEFB 3,74,74,74,70,74,74,74,74,74,74,74,66,0,1,5
 46608 DEFB 9,5,8,8,64,64,64,64,64,64,64,64,64,64,64,6
 46624 DEFB 2,9,8,7,8,4,8,5,5,64,68,68,68,68,64,68
 46640 DEFB 253,253,1,68,0,1,5,5,0,4,0,71,71,68,71,71
 46656 DEFB 68,64,68,68,68,68,68,68,68,68,68,68,68,6,5,7
 46672 DEFB 0,4,4,5,5,5,5,1,64,68,68,68,4,4,68,64
 46688 DEFB 68,68,64,64,64,64,71,68,68,1,253,1,253,1,68,64
 46704 DEFB 64,64,64,64,64,68,2,2,64,249,251,251,251,249,249,64
 46720 DEFB 212,204,200,196,192,192,192,192,64,64,64,64,68,68,68,68
 46736 DEFB 68,68,68,68,68,68,68,68,2,0,4,0,1,1,1,1
 46752 DEFB 1,68,68,64,64,64,64,64,64,71,68,64,68,68,68,68
 46768 DEFB 68,64,64,64,68,64,6,68,64,64,3,3,64,64,64,64
 46784 DEFB 64,64,68,3,3,3,3,3,3,3,64,64,64,64,64,2
 46800 DEFB 2,2,64,64,64,64,64,64,64,64,2,2,2,64,64,64
 46816 DEFB 64,64,64,64,64,3,3,3,3,64,64,64,64,64,64,64
 46832 DEFB 64,64,64,64,64,64,3,3,3,3,3,3,64,64,2,1

; T' values (6|y-5)
;
@ignoreua
; Used by the routine at #R59148. T' values in this block may be (and in
; practice are) used by play area tiles at y-coordinates 5, 11, 17, 23, 29, 35
; and 41. The T' values at addresses #w47034, #w47035, #w47043-#w47049,
; #w47077-#w47080 and #w47094-#w47099 are used only by tiles at y-coordinate 41
; (which are never displayed), and are therefore effectively unused.
b46848 DEFB 128,46,45,44,12,43,42,41,40,39,38,37,194,128,129,7
 46864 DEFB 26,234,36,35,194,194,194,194,194,194,194,194,194,194,194,241
 46880 DEFB 128,6,5,247,4,251,3,236,228,128,231,234,225,224,194,129
 46896 DEFB 122,93,158,32,128,129,7,218,128,217,128,200,199,201,200,199
 46912 DEFB 198,194,97,96,95,94,85,84,83,80,189,81,80,178,177,176
 46928 DEFB 194,49,175,167,166,165,164,128,194,160,159,153,158,157,156,194
 46944 DEFB 140,139,194,194,194,194,131,18,129,158,122,158,93,158,32,194
 46960 DEFB 194,194,194,194,194,10,128,231,128,29,29,29,29,29,29,194
 46976 DEFB 104,72,72,70,39,39,39,8,194,194,194,194,97,96,95,94
 46992 DEFB 85,84,83,80,82,81,80,79,231,194,49,194,194,196,196,196
 47008 DEFB 196,27,18,194,194,194,194,194,194,29,18,194,26,25,24,23
 47024 DEFB 22,194,194,194,10,128,7,8,196,194,194,194,194,194,194,194
 47040 DEFB 196,211,1,194,194,194,194,194,194,194,194,194,194,194,199,247
 47056 DEFB 246,245,243,238,242,241,240,239,238,237,194,236,235,234,198,105
 47072 DEFB 196,194,194,194,194,194,194,194,194,196,196,194,194,194,194,194
 47088 DEFB 194,194,196,196,211,211,194,194,194,194,194,194,194,199,196,196

; Z values (0<=y<=5)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high.
b47104 DEFB 0,0,0       ; 0<=x<24: apartment building next to no. 74
 47107 DEFB 0           ; 24<=x<32
 47108 DEFB 0,0,0       ; 32<=x<56: no. 74
 47111 DEFB 1,3,4,5,6,8 ; 56<=x<104: hotel (roof)
 47117 DEFB 0,0         ; 104<=x<120: no. 31
 47119 DEFB 0           ; 120<=x<128
 47120 DEFB 0,0,0       ; 128<=x<152: police station
 47123 DEFB 0           ; 152<=x<160: no. 27
 47124 DEFB 0,0         ; 160<=x<176
 47126 DEFB 0,0,0,0     ; 176<=x<208: apartment building next to no. 19
 47130 DEFB 0,0         ; 208<=x<224: no. 19
 47132 DEFB 0,0         ; 224<=x<240: no. 17
 47134 DEFB 0,0         ; 240<=x<256: no. 15

; Play area tile attribute address LSBs (0<=y<=5)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high.
b47136 DEFB 0,0,0       ; 0<=x<24: apartment building next to no. 74
 47139 DEFB 0           ; 24<=x<32
 47140 DEFB 0,0,0       ; 32<=x<56: no. 74
 47143 DEFB 0,0,0,1,0,0 ; 56<=x<104: hotel (roof)
 47149 DEFB 0,0         ; 104<=x<120: no. 31
 47151 DEFB 0           ; 120<=x<128
 47152 DEFB 0,0,0       ; 128<=x<152: police station
 47155 DEFB 0           ; 152<=x<160: no. 27
 47156 DEFB 0,0         ; 160<=x<176
 47158 DEFB 0,0,0,0     ; 176<=x<208: apartment building next to no. 19
 47162 DEFB 0,0         ; 208<=x<224: no. 19
 47164 DEFB 0,0         ; 224<=x<240: no. 17
 47166 DEFB 0,0         ; 240<=x<256: no. 15

; Window flags (0<=y<=5)
;
; Used by the routine at #R63450. Since there are no windows between
; y-coordinates 0 and 5, these window flag bytes are always 0. The window flags
; for the next range of y-coordinates (6-11, corresponding to the 5th floor
; windows) are at #R47424.
@label=WINFLAGS6
b47168 DEFS 32

; Location descriptors (x-coordinate 66)
;
; Used by the routine at #R60179. These descriptors correspond to the staircase
; between the third and fourth floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(66,15,4,128,64,15) | #CALL:ld_img(66,17,4,0,64,15) }
; TABLE#
@label=LOCDESCS66
b47200 DEFB 22,24    ; y=15, z=1; up/right, down/left
 47202 DEFB 26,36    ; y=17, z=1; up/left, down/right
 47204 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47205 DEFB 220,255

; Location descriptors (x-coordinate 67)
;
; Used by the routine at #R60179. These descriptors correspond to the staircase
; between the third and fourth floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(67,14,4,128,65,14,,10) | #CALL:ld_img(67,18,4,0,65,14,,10) }
; TABLE#
@label=LOCDESCS67
b47207 DEFB 20,72    ; y=14, z=1; right, down/left
 47209 DEFB 28,36    ; y=18, z=1; up/left, down/right
 47211 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47212 DEFB 76
 47213 DEFB 122,220  ; y=33, z=2; left, right, up/right, down/left, down/right
 47215 DEFB 255      ; End marker

; Location descriptors (x-coordinate 68)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircase between the third and
; fourth floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(68,14,1,128,66,14,,9) | #CALL:ld_img(68,19,1,0,66,14,,9) }
; TABLE#
@label=LOCDESCS68
b47216 DEFB 20,144   ; y=14, z=1; left, up/right
 47218 DEFB 30,224   ; y=19, z=1; left, right, up/left (bottom of the
                     ; staircase)
; The next descriptor corresponds to the front steps on the left side of the
; hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(68,33,2,0) }
; TABLE#
 47220 DEFB 122,28   ; y=33, z=2; up/right, down/left, down/right
 47222 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47223 DEFB 200,255

; Location descriptors (x-coordinate 69)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the top of the staircase between the
; third and fourth floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(69,13,1,0) }
; TABLE#
@label=LOCDESCS69
b47225 DEFB 18,200   ; y=13, z=1; left, right, down/left
; The next descriptor corresponds to the front steps on the left side of the
; hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(69,32,2,0) }
; TABLE#
 47227 DEFB 120,72   ; y=32, z=2; right, down/left
 47229 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47230 DEFB 220,255

; Z'' values (8|x)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N (0<=N<=31).
@label=Z2VALUES0
b47232 DEFB 255,254,251,245,241,241,241,232,228,222,221,218,217,216,212,216
 47248 DEFB 207,201,194,189,188,190,195,185,218,179,176,179,168,168,162,155
 47264 DEFB 151,143,135,127,188,120,119,115,109,115,101,95,188,162,82,151
 47280 DEFB 69,64,188,185,115,50,168,162,38,30,24,188,189,6,0,115
 47296 DEFB 250,244,162,229,221,213,135,204,188,189,181,173,166,50,153,145
 47312 DEFB 140,135,127,121,119,135,127,111,105,99,91,195,86,80,72,66
 47328 DEFB 197,51,48,41,36,33

; Location descriptors (x-coordinates 13, 197)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircases between the top floor
; and the roof in the apartment buildings next to no. 74 (x=13) and no. 19
; (x=197).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(13,11,1,0,11,11,5) | #CALL:ld_img(13,13,1,128,11,11,5) }
; TABLE#
@label=LOCDESCS13
b47334 DEFB 14,36    ; y=11, z=1; up/left, down/right
 47336 DEFB 18,208   ; y=13, z=1; left, right, up/right
; The next two descriptors correspond to the staircases between the third and
; top floors in the apartment buildings next to no. 74 (x=13) and no. 19
; (x=197).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(13,17,1,0,11,17,5) | #CALL:ld_img(13,19,1,128,11,17,5) }
; TABLE#
 47338 DEFB 26,36    ; y=17, z=1; up/left, down/right
 47340 DEFB 30,208   ; y=19, z=1; left, right, up/right
; The next two descriptors correspond to the staircases between the second and
; third floors in the apartment buildings next to no. 74 (x=13) and no. 19
; (x=197).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(13,23,1,0,11,23,5) | #CALL:ld_img(13,25,1,128,11,23,5) }
; TABLE#
 47342 DEFB 38,36    ; y=23, z=1; up/left, down/right
 47344 DEFB 42,208   ; y=25, z=1; left, right, up/right
; The next two descriptors correspond to the staircases between the first and
; second floors in the apartment buildings next to no. 74 (x=13) and no. 19
; (x=197).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(13,29,1,0,11,29,5) | #CALL:ld_img(13,31,1,128,11,29,5) }
; TABLE#
 47346 DEFB 50,36    ; y=29, z=1; up/left, down/right
 47348 DEFB 54,208   ; y=31, z=1; left, right, up/right
 47350 DEFB 255      ; End marker

; Location descriptor (x-coordinate 38)
;
; Used by the routine at #R60179. This descriptor corresponds to the wall in
; the room past the catwalk.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(38,13,4,128,30,,12) }
; TABLE#
@label=LOCDESCS38
b47351 DEFB 18,128   ; y=13, z=1; left (no access to no. 74)
 47353 DEFB 255      ; End marker

; Location descriptors (x-coordinates 40, 112, 208)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the wall on the top floor of no. 74 that
; separates it from the room past the catwalk (x=40).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(40,13,1,0,30,12,14) }
; TABLE#
@label=LOCDESCS40
b47354 DEFB 18,64    ; y=13, z=1; right (no access to the room past the
                     ; catwalk)
; The next descriptor corresponds to the front steps of no. 74 (x=40), no. 31
; (x=112) and no. 19 (x=208).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(40,32,2,0) | #CALL:ld_img(112,32,2,0) |
; #CALL:ld_img(208,32,2,0) }
; TABLE#
@label=LOCDESCS112
 47356 DEFB 120,84   ; y=32, z=2; right, up/right, down/right
; The next descriptor also corresponds to the front steps of no. 74 (x=40), no.
; 31 (x=112) and no. 19 (x=208).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(40,33,2,0,38,31) | #CALL:ld_img(112,33,2,0,110,31) |
; #CALL:ld_img(208,33,2,0,206,31) }
; TABLE#
 47358 DEFB 122,92   ; y=33, z=2; right, up/right, down/left, down/right
; This block of location descriptors is implicitly terminated by the page
; boundary.

; Z values (6<=y<=11)
;
; Used by the routines at #R59148, #R62368, #R62468, #R63662, #R64512 and
; #R64549. Each byte here corresponds to a segment of the play area that is
; eight tiles wide and six tiles high, and level with the 5th floor of a
; building (6<=y<=11).
@label=ZVALUES5
b47360 DEFB 13,14,13          ; 0<=x<24: apartment building next to no. 74
                              ; (roof)
 47363 DEFB 15                ; 24<=x<32
 47364 DEFB 9,9,9             ; 32<=x<56: no. 74 (roof)
 47367 DEFB 16,18,19,20,21,23 ; 56<=x<104: hotel
 47373 DEFB 11,11             ; 104<=x<120: above the roof of no. 31
 47375 DEFB 24                ; 120<=x<128
 47376 DEFB 25,26,27          ; 128<=x<152: police station (roof)
 47379 DEFB 9                 ; 152<=x<160: no. 27 (roof)
 47380 DEFB 10,11             ; 160<=x<176
 47382 DEFB 12,13,14,13       ; 176<=x<208: apartment building next to no. 19
                              ; (roof)
 47386 DEFB 11,11             ; 208<=x<224: above the roof of no. 19 (these Z
                              ; values are checked by the routine at #R64512
                              ; and changed by the routines at #R63662 and
                              ; #R64549)
 47388 DEFB 9,9               ; 224<=x<240: no. 17 (roof)
 47390 DEFB 9,9               ; 240<=x<256: no. 15 (roof)

; Play area tile attribute address LSBs (6<=y<=11)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high, and level with the
; 5th floor of a building (6<=y<=11).
b47392 DEFB 2,3,3       ; 0<=x<24: apartment building next to no. 74 (roof)
 47395 DEFB 3           ; 24<=x<32
 47396 DEFB 2,2,2       ; 32<=x<56: no. 74
 47399 DEFB 5,5,5,5,5,5 ; 56<=x<104: hotel
 47405 DEFB 2,2         ; 104<=x<120: above the roof of no. 31
 47407 DEFB 2           ; 120<=x<128
 47408 DEFB 2,2,2       ; 128<=x<152: police station (roof)
 47411 DEFB 3           ; 152<=x<160: no. 27 (roof)
 47412 DEFB 3,2         ; 160<=x<176
 47414 DEFB 3,3,3,3     ; 176<=x<208: apartment building next to no. 19 (roof)
 47418 DEFB 26,26       ; 208<=x<224: above the roof of no. 19
 47420 DEFB 3,3         ; 224<=x<240: no. 17 (roof)
 47422 DEFB 2,2         ; 240<=x<256: no. 15 (roof)

; 5th floor window flags (6<=y<=11)
;
; Used by the routines at #R62518 and #R63450. Each byte here corresponds to a
; segment of the play area that is eight tiles wide, and level with the 5th
; floor of a building (6<=y<=11). The window flags for y-coordinate range 0-5
; are at #R47168; the 4th floor window flags are at #R47680.
@label=WINFLAGS5
b47424 DEFB 0,0,0,0,0,0,0   ; 0<=x<56: no windows here
 47431 DEFB 136,0,0,0,0,200 ; 56<=x<104: hotel
 47437 DEFB 0,0,0           ; {104<=x<256: no windows here
 47440 DEFB 0,0,0,0,0,0,0,0 ;
 47448 DEFB 0,0,0,0,0,0,0,0 ; }

; Location descriptors (x-coordinate 91)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircase between the fourth and
; top floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(91,9,4,0,89,9) | #CALL:ld_img(91,11,4,128,89,9) }
; TABLE#
@label=LOCDESCS91
b47456 DEFB 10,36    ; y=9, z=1; up/left, down/right
 47458 DEFB 14,24    ; y=11, z=1; up/right, down/left
; The next two descriptors correspond to the staircase between the second and
; third floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(91,21,4,0,89,21) | #CALL:ld_img(91,23,4,128,89,21) }
; TABLE#
 47460 DEFB 34,36    ; y=21, z=1; up/left, down/right
 47462 DEFB 38,24    ; y=23, z=1; up/right, down/left
 47464 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47465 DEFB 236,255

; Location descriptors (x-coordinate 90)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircase between the fourth and
; top floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(90,8,4,0,88,8,,10) | #CALL:ld_img(90,12,4,128,88,8,,10) }
; TABLE#
@label=LOCDESCS90
b47467 DEFB 8,132    ; y=8, z=1; left, down/right
 47469 DEFB 16,24    ; y=12, z=1; up/right, down/left
; The next two descriptors correspond to the staircase between the second and
; third floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(90,20,4,0,88,20,,10) | #CALL:ld_img(90,24,4,128,88,20,,10) }
; TABLE#
 47471 DEFB 32,132   ; y=20, z=1; left, down/right
 47473 DEFB 40,24    ; y=24, z=1; up/right, down/left
 47475 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47476 DEFB 140
 47477 DEFB 122,236  ; y=33, z=2; left, right, up/left, down/left, down/right
 47479 DEFB 255      ; End marker

; Location descriptors (x-coordinate 76)
;
; Used by the routine at #R60179. These descriptors correspond to the steps
; near the entrance to the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(76,31,2,0,74,30) | #CALL:ld_img(76,32,2,0,74,30) }
; TABLE#
@label=LOCDESCS76
b47480 DEFB 219,204,192 ; y=31, z=1 or 2; left, right, down/left, down/right
 47483 DEFB 120,224     ; y=32, z=2; left, right, up/left
 47485 DEFB 255         ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47486 DEFB 236,255

; Z'' values (8|x-1)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+1 (0<=N<=31).
b47488 DEFB 255,253,250,244,241,241,241,232,228,222,220,218,216,216,211,209
 47504 DEFB 206,200,193,191,188,190,195,204,218,179,175,171,167,167,161,154
 47520 DEFB 150,142,134,127,126,206,218,114,108,114,100,94,188,161,81,76
 47536 DEFB 68,63,58,204,114,49,167,161,37,29,23,19,191,5,0,114
 47552 DEFB 249,243,236,228,220,212,134,203,196,188,180,172,165,158,152,144
 47568 DEFB 139,134,126,120,118,134,126,110,104,98,91,195,85,79,71,65
 47584 DEFB 58,50,47,40,35,33

; Location descriptors (x-coordinates 22, 149, 205, 222)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the top-right edge of the roof of the
; police station (x=149).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(149,5,1,128) }
; TABLE#
@label=LOCDESCS149
b47590 DEFB 2,12     ; y=5, z=1; down/left, down/right
; The next descriptor corresponds to the rightmost edges on the top floor of
; the police station (x=149)#IF({fix}<2)//, the top floor of the apartment
; building next to no. 19 (x=205), and the roof of no. 19 (x=222)/ and the top
; floor of the apartment building next to no. 19 (x=205)//.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(149,13,4,128) | #CALL:ld_img(205,13,1,128) |
; #CALL:ld_img(222,13,1,128) }
; TABLE#
@label=LOCDESCS205
 47592 DEFB 18,128   ; y=13, z=1; left
; The next descriptor corresponds to the rightmost edges on the first floor of
; the police station (x=149)#IF({fix}<2)//, the apartment building next to no.
; 19 (x=205), and no. 19 (x=222)/ and the apartment building next to no. 19
; (x=205)//.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(149,31,4,128) | #CALL:ld_img(205,31,1,128) |
; #CALL:ld_img(222,31,4,128) }
; TABLE#
 47594 DEFB 54,128   ; y=31, z=1; left
; The next descriptor corresponds to the spot just to the left of the top-right
; edge of the roof of the apartment building next to no. 74 (x=22),
; #IF({fix}<2)//the spot just to the left of the top-right edge of the roof of
; the apartment building next to no. 19 (x=205), and the right end of the rope
; across the roof of no. 19 (x=222); the location at (x,y,z)=(149,6,1) is not
; accessible/and the spot just to the left of the top-right edge of the roof of
; the apartment building next to no. 19 (x=205); the location at
; (x,y,z)=(149,6,1) is not accessible//.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(22,6,1,128,,,,9) | #CALL:ld_img(205,6,1,128,,,,9) | #PUSHS
; #POKES47386,9;47387,9 #CALL:ld_img(222,6,1,128,221,,,9) #POPS }
; TABLE#
@label=LOCDESCS22
 47596 DEFB 4,72     ; y=6, z=1; right, down/left
; The next descriptor corresponds to the right edge of the roof of the
; apartment building next to no. 74 (x=22), #IF({fix}<2)//the right edge of the
; roof of the apartment building next to no. 19 (x=205), and the spot just to
; the left of the right end of the rope across the roof of no. 19 (x=222); the
; location at (x,y,z)=(149,7,1) is not accessible/and the right edge of the
; roof of the apartment building next to no. 19 (x=205); the location at
; (x,y,z)=(149,7,1) is not accessible//.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(22,7,1,128,,5,,9) | #CALL:ld_img(205,7,1,128,,5,,9) | #PUSHS
; #POKES47386,9;47387,9 #CALL:ld_img(222,7,1,128,221,5,,9) #POPS }
; TABLE#
 47598 DEFB 6,128    ; y=7, z=1; left
; The next descriptor corresponds to the rightmost edges on the third floor of
; the apartment building next to no. 74 (x=22), the police station (x=149),
; #IF({fix}<2)//the apartment building next to no. 19 (x=205), and no. 19
; (x=222)/and the apartment building next to no. 19 (x=205)//.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(22,19,4,128,,17) | #CALL:ld_img(149,19,4,128,,17) |
; #CALL:ld_img(205,19,1,128,,17) | #CALL:ld_img(222,19,4,128,,17) }
; TABLE#
 47600 DEFB 30,128   ; y=19, z=1; left
; The next descriptor corresponds to the rightmost edges on the second floor of
; the apartment building next to no. 74 (x=22), the police station (x=149),
; #IF({fix}<2)//the apartment building next to no. 19 (x=205), and no. 19
; (x=222)/and the apartment building next to no. 19 (x=205)//.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(22,25,4,128,,23) | #CALL:ld_img(149,25,4,128,,23) |
; #CALL:ld_img(205,25,1,128,,23) | #CALL:ld_img(222,25,4,128,,23) }
; TABLE#
 47602 DEFB 42,128   ; y=25, z=1; left
; The next descriptor corresponds to the rightmost edge of the right-hand shop
; under the apartments next to no. 74 (x=22); the locations at
; (x,y,z)=(149,33,1)#IF({fix}<2)//, (205,33,1) and (222,33,1)/ and (205,33,1)//
; are not accessible.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(22,33,1,128) }
; TABLE#
 47604 DEFB 58,128   ; y=33, z=1; left
 47606 DEFB 255      ; End marker

; Location descriptors (x-coordinate 39)
;
; Used by the routine at #R60179. These descriptors correspond to locations
; inside no. 74 just to the left of the front door, and invoke the special
; location handler routine whose address is at #R40982 when a character moves
; left at these locations. However, the handler routine does nothing special,
; and therefore these descriptors are redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(39,19,4,0,,19,,14) | #CALL:ld_img(39,25,4,0,,19,,14) }
; TABLE#
@label=LOCDESCS39
b47607 DEFB 143,194,1 ; y=19, z=1; left, right (third floor)
 47610 DEFB 149,194,1 ; y=25, z=1; left, right (second floor)
 47613 DEFB 255       ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47614 DEFB 92,255

; Z values (12<=y<=17)
;
; Used by the routines at #R59148 and #R62368. Each byte here corresponds to a
; segment of the play area that is eight tiles wide and six tiles high, and
; level with the 4th floor of a building (12<=y<=17).
b47616 DEFB 28,34,28          ; 0<=x<24: apartment building next to no. 74
 47619 DEFB 36                ; 24<=x<32
 47620 DEFB 29,28,44          ; 32<=x<56: no. 74
 47623 DEFB 37,18,19,20,21,23 ; 56<=x<104: hotel
 47629 DEFB 35,35             ; 104<=x<120: no. 31 (roof)
 47631 DEFB 38                ; 120<=x<128
 47632 DEFB 39,40,41          ; 128<=x<152: police station
 47635 DEFB 29                ; 152<=x<160: no. 27
 47636 DEFB 30,31             ; 160<=x<176
 47638 DEFB 32,33,34,28       ; 176<=x<208: apartment building next to no. 19
 47642 DEFB 58,35             ; 208<=x<224: no. 19 (roof)
 47644 DEFB 28,29             ; 224<=x<240: no. 17
 47646 DEFB 28,29             ; 240<=x<256: no. 15

; Play area tile attribute address LSBs (12<=y<=17)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high, and level with the
; 4th floor of a building (12<=y<=17).
b47648 DEFB 4,3,6       ; 0<=x<24: apartment building next to no. 74
 47651 DEFB 3           ; 24<=x<32
 47652 DEFB 7,4,8       ; 32<=x<56: no. 74
 47655 DEFB 9,9,9,9,9,9 ; 56<=x<104: hotel
 47661 DEFB 2,2         ; 104<=x<120: no. 31 (roof)
 47663 DEFB 2           ; 120<=x<128
 47664 DEFB 10,8,10     ; 128<=x<152: police station
 47667 DEFB 11          ; 152<=x<160: no. 27
 47668 DEFB 11,2        ; 160<=x<176
 47670 DEFB 12,13,3,6   ; 176<=x<208: apartment building next to no. 19
 47674 DEFB 8,2         ; 208<=x<224: no. 19 (roof)
 47676 DEFB 11,11       ; 224<=x<240: no. 17
 47678 DEFB 8,8         ; 240<=x<256: no. 15

; 4th floor window flags (12<=y<=17)
;
; Used by the routines at #R62518 and #R63450. Each byte here corresponds to a
; segment of the play area that is eight tiles wide, and level with the 4th
; floor of a building (12<=y<=17). The 5th floor window flags are at #R47424;
; the 3rd floor window flags are at #R47936.
@label=WINFLAGS4
b47680 DEFB 159,0,254           ; 0<=x<24: apartment building next to no. 74
 47683 DEFB 0                   ; 24<=x<32: no windows here
 47684 DEFB 152,28,21           ; 32<=x<56: no. 74
 47687 DEFB 200,32,32,32,32,232 ; 56<=x<104: hotel
 47693 DEFB 0,0,0               ; 104<=x<128: no windows here
 47696 DEFB 8,0,40              ; 128<=x<152: police station
 47699 DEFB 24                  ; 152<=x<160: no. 27
 47700 DEFB 0,0                 ; 160<=x<176: no windows here
 47702 DEFB 24,223,0,255        ; 176<=x<208: apartment building next to no. 19
 47706 DEFB 0,0                 ; 208<=x<224: no windows here
 47708 DEFB 222,216             ; 224<=x<240: no. 17
 47710 DEFB 223,56              ; 240<=x<256: no. 15

; Location descriptor (x-coordinate 74)
;
; Used by the routine at #R60179. This descriptor corresponds to the front
; steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(74,32,2,0) }
; TABLE#
@label=LOCDESCS74
b47712 DEFB 220,208,144 ; y=32, z=1 or 2; left, right, up/right
 47715 DEFB 255         ; End marker

; Location descriptors (x-coordinate 77)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the entrance to the hotel, at the bottom
; of the staircase leading up to the second floor.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(77,31,2,128) }
; TABLE#
@label=LOCDESCS77
b47716 DEFB 219,208,80 ; y=31, z=1 or 2; left, right, up/right
; The next descriptor corresponds to the front steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(77,32,2,0,,30) }
; TABLE#
 47719 DEFB 120,224    ; y=32, z=2; left, right, up/left
 47721 DEFB 255        ; End marker

; Location descriptors (x-coordinate 81)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the top of the staircase between the
; first and second floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(81,25,1,0) }
; TABLE#
@label=LOCDESCS81
b47722 DEFB 42,200      ; y=25, z=1; left, right, down/left
; The next two descriptors correspond to the entrance to the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(81,31,1,0,,30) | #CALL:ld_img(81,32,2,128,,30) }
; TABLE#
 47724 DEFB 219,204,192 ; y=31, z=1 or 2; left, right, down/left, down/right
 47727 DEFB 120,208     ; y=32, z=2; left, right, up/right
 47729 DEFB 255         ; End marker

; Location descriptors (x-coordinate 78)
;
; Used by the routine at #R60179. These descriptors correspond to the staircase
; between the first and second floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(78,28,4,128,,28) | #CALL:ld_img(78,30,4,128,,28) }
; TABLE#
@label=LOCDESCS78
b47730 DEFB 48,20    ; y=28, z=1; up/right, down/right
 47732 DEFB 52,24    ; y=30, z=1; up/right, down/left
 47734 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47735 DEFB 120,200  ; y=32, z=2; left, right, down/left
 47737 DEFB 255      ; End marker

; Location descriptors (x-coordinate 82)
;
; Used by the routine at #R60179.
; .
; These descriptors correspond to the entrance to the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(82,31,1,0,,30) | #CALL:ld_img(82,32,2,0,,30) }
; TABLE#
@label=LOCDESCS82
b47738 DEFB 219,140,128 ; y=31, z=1 or 2; left, down/left, down/right
 47741 DEFB 120,224     ; y=32, z=2; left, right, up/left
 47743 DEFB 255         ; End marker

; Z'' values (8|x-2)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+2 (0<=N<=31).
b47744 DEFB 255,252,250,243,241,241,241,232,227,222,219,218,216,216,211,218
 47760 DEFB 205,199,192,190,191,190,195,204,218,179,174,171,166,166,161,153
 47776 DEFB 149,141,133,127,125,205,218,114,107,114,100,93,188,161,80,75
 47792 DEFB 67,62,57,204,114,28,166,161,36,28,22,18,12,4,255,114
 47808 DEFB 248,242,235,227,219,211,133,202,195,187,179,171,164,157,151,143
 47824 DEFB 138,133,125,143,138,133,115,109,104,97,91,195,84,78,70,64
 47840 DEFB 57,49,46,39,34,33

; Location descriptors (x-coordinates 32, 57, 103, 125, 150, 207)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the step just below the top-left edge of
; the roof of the police station (x=125), and the top-left edge of the roof of
; no. 27 (x=150).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(125,6,1,0) | #CALL:ld_img(150,6,1,0) }
; TABLE#
@label=LOCDESCS125
b47846 DEFB 4,36     ; y=6, z=1; up/left, down/right
; The next descriptor corresponds to the far left wall on the top floor of the
; hotel (x=57), the left edge of the roof of the police station (x=125), and
; the left edge of the roof of no. 27 (x=150).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(57,7,1,0) | #CALL:ld_img(125,7,1,0) | #CALL:ld_img(150,7,1,0)
; }
; TABLE#
@label=LOCDESCS57
 47848 DEFB 6,64     ; y=7, z=1; right
; The next descriptor corresponds to the far left wall on the fourth floor of
; the hotel (x=57), the left edge of the roof of no. 31 (x=103), the far left
; wall on the top floor of the police station (x=125), the far left wall on the
; top floor of no. 27 (x=150), and the left edge of the roof of no. 19 (x=207).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(57,13,1,0) | #CALL:ld_img(103,13,1,0) |
; #CALL:ld_img(125,13,4,0) | #CALL:ld_img(150,13,4,0) |
; #CALL:ld_img(207,13,4,0) }
; TABLE#
@label=LOCDESCS103
 47850 DEFB 18,64    ; y=13, z=1; right
; The next descriptor corresponds to the far left wall on the third floor of
; no. 74 (x=32), the hotel (x=57), no. 31 (x=103), the police station (x=125),
; no. 27 (x=150), and no. 19 (x=207).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(32,19,1,0) | #CALL:ld_img(57,19,1,0) |
; #CALL:ld_img(103,19,4,0) | #CALL:ld_img(125,19,4,0) |
; #CALL:ld_img(150,19,4,0) | #CALL:ld_img(207,19,4,0) }
; TABLE#
@label=LOCDESCS32
 47852 DEFB 30,64    ; y=19, z=1; right
; The next descriptor corresponds to the far left wall on the second floor of
; no. 74 (x=32), the hotel (x=57), no. 31 (x=103), the police station (x=125),
; no. 27 (x=150), and no. 19 (x=207).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(32,25,1,0)) | #CALL:ld_img(57,25,1,0) |
; #CALL:ld_img(103,25,4,0) | #CALL:ld_img(125,25,4,0) |
; #CALL:ld_img(150,25,4,0) | #CALL:ld_img(207,25,4,0) }
; TABLE#
 47854 DEFB 42,64    ; y=25, z=1; right
; The next descriptor corresponds to the far left wall on the first floor of
; no. 74 (x=32), the far left wall of the inaccessible left-hand room on the
; first floor of the hotel (x=57), the far left wall on the first floor of no.
; 31 (x=103), the far left wall of the left-hand jail cell in the police
; station (x=125), the far left wall on the first floor of no. 27 (x=150), and
; the far left wall on the first floor of no. 19 (x=207).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(32,31,1,0) | #CALL:ld_img(57,31,4,0) |
; #CALL:ld_img(103,31,4,0) | #CALL:ld_img(125,31,4,0) |
; #CALL:ld_img(150,31,4,0) | #CALL:ld_img(207,31,4,0) }
; TABLE#
 47856 DEFB 54,64    ; y=31, z=1; right
 47858 DEFB 255      ; End marker

; Unused
u47859 DEFB 0

; Location descriptors (x-coordinates 53, 62, 100, 254)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to a location on the front steps of no. 15
; (x=254) which is not accessible; this descriptor is therefore redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(254,33,2,0) }
; TABLE#
@label=LOCDESCS254
b47860 DEFB 122,168  ; y=33, z=2; left, up/left, down/left
; The next descriptor corresponds to the far right wall on the top floor of the
; hotel (x=100), and the rightmost edge of the roof of no. 15 (x=254).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(100,7,1,128) | #CALL:ld_img(254,7,1,128) }
; TABLE#
@label=LOCDESCS100
 47862 DEFB 6,128    ; y=7, z=1; left
; The next descriptor corresponds to the far right walls on the fourth floor of
; no. 74 (x=53), the hotel (x=100), and no. 15 (x=254).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(53,13,1,128) | #CALL:ld_img(100,13,1,128) |
; #CALL:ld_img(254,13,4,128) }
; TABLE#
@label=LOCDESCS53
 47864 DEFB 18,128   ; y=13, z=1; left
; The next descriptor corresponds to the far right walls on the third floor of
; no. 74 (x=53), the hotel (x=100), and no. 15 (x=254).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(53,19,1,0) | #CALL:ld_img(100,19,1,0) |
; #CALL:ld_img(254,19,4,0) }
; TABLE#
 47866 DEFB 30,128   ; y=19, z=1; left
; The next descriptor corresponds to the far right walls on the second floor of
; no. 74 (x=53), the hotel (x=100), and no. 15 (x=254).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(53,25,1,128) | #CALL:ld_img(100,25,1,128) |
; #CALL:ld_img(254,25,4,128) }
; TABLE#
 47868 DEFB 42,128   ; y=25, z=1; left
; The next descriptor corresponds to the far right wall on the first floor of
; no. 74 (x=53), the wall on the right in the inaccessible left-hand room on
; the first floor of the hotel (x=62), the wall on the right in the
; inaccessible right-hand room on the first floor of the hotel (x=100), and the
; far right wall on the first floor of no. 15 (x=254).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(53,31,1,128) | #CALL:ld_img(62,31,4,128) |
; #CALL:ld_img(100,31,1,128) | #CALL:ld_img(254,31,4,128) }
; TABLE#
@label=LOCDESCS62
 47870 DEFB 54,128   ; y=31, z=1; left
; This block of location descriptors is implicitly terminated by the page
; boundary.

; Z values (18<=y<=23)
;
; Used by the routines at #R59148 and #R62368. Each byte here corresponds to a
; segment of the play area that is eight tiles wide and six tiles high, and
; level with the 3rd floor of a building (18<=y<=23).
b47872 DEFB 28,34,28          ; 0<=x<24: apartment building next to no. 74
 47875 DEFB 50                ; 24<=x<32
 47876 DEFB 29,28,44          ; 32<=x<56: no. 74
 47879 DEFB 37,18,19,20,21,51 ; 56<=x<104: hotel
 47885 DEFB 49,49             ; 104<=x<120: no. 31
 47887 DEFB 38                ; 120<=x<128
 47888 DEFB 52,53,41          ; 128<=x<152: police station
 47891 DEFB 44                ; 152<=x<160: no. 27
 47892 DEFB 45,46             ; 160<=x<176
 47894 DEFB 47,48,34,28       ; 176<=x<208: apartment building next to no. 19
 47898 DEFB 71,71             ; 208<=x<224: no. 19
 47900 DEFB 28,44             ; 224<=x<240: no. 17
 47902 DEFB 28,44             ; 240<=x<256: no. 15

; Play area tile attribute address LSBs (18<=y<=23)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high, and level with the
; 3rd floor of a building (18<=y<=23).
b47904 DEFB 8,3,13            ; 0<=x<24: apartment building next to no. 74
 47907 DEFB 14                ; 24<=x<32
 47908 DEFB 4,8,4             ; 32<=x<56: no. 74
 47911 DEFB 15,15,15,15,15,15 ; 56<=x<104: hotel
 47917 DEFB 4,4               ; 104<=x<120: no. 31
 47919 DEFB 2                 ; 120<=x<128
 47920 DEFB 2,8,4             ; 128<=x<152: police station
 47923 DEFB 3                 ; 152<=x<160: no. 27
 47924 DEFB 11,2              ; 160<=x<176
 47926 DEFB 6,16,3,12         ; 176<=x<208: apartment building next to no. 19
 47930 DEFB 17,18             ; 208<=x<224: no. 19
 47932 DEFB 13,13             ; 224<=x<240: no. 17
 47934 DEFB 2,2               ; 240<=x<256: no. 15

; 3rd floor window flags (18<=y<=23)
;
; Used by the routines at #R62518 and #R63450. Each byte here corresponds to a
; segment of the play area that is eight tiles wide, and level with the 3rd
; floor of a building (18<=y<=23). The 4th floor window flags are at #R47680;
; the 2nd floor window flags are at #R48192.
@label=WINFLAGS3
b47936 DEFB 60,0,190        ; 0<=x<24: apartment building next to no. 74
 47939 DEFB 0               ; 24<=x<32: no windows here
 47940 DEFB 184,28,53       ; 32<=x<56: no. 74
 47943 DEFB 200,0,0,0,0,200 ; 56<=x<104: hotel
 47949 DEFB 254,159         ; 104<=x<120: no. 31
 47951 DEFB 0               ; 120<=x<128: no windows here
 47952 DEFB 200,0,136       ; 128<=x<152: police station
 47955 DEFB 20              ; 152<=x<160: no. 27
 47956 DEFB 0,0             ; 160<=x<176: no windows here
 47958 DEFB 56,255,0,95     ; 176<=x<208: apartment building next to no. 19
 47962 DEFB 72,72           ; 208<=x<224: no. 19
@defb=158,23 ; Raise blind of Sam's office window
 47964 DEFB 158,23          ; 224<=x<240: no. 17
 47966 DEFB 223,52          ; 240<=x<256: no. 15

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47968 DEFB 12,40    ; y=10, z=1; up/left, down/left

; Location descriptors (x-coordinate 92)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircase between the fourth and top
; floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(92,10,4,0) }
; TABLE#
@label=LOCDESCS92
b47970 DEFB 12,40    ; y=10, z=1; up/left, down/left
; The next descriptor corresponds to the staircase between the second and third
; floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(92,22,4,0) }
; TABLE#
 47972 DEFB 36,40    ; y=22, z=1; up/left, down/left
 47974 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u47975 DEFB 204,255,193,1
 47979 DEFB 137,193,1     ; y=13, z=1; left, right
 47982 DEFB 143,193,1     ; y=19, z=1; left, right
 47985 DEFB 149,193,1     ; y=25, z=1; left, right
 47988 DEFB 155,193,1     ; y=31, z=1; left, right
 47991 DEFB 255           ; End marker

; Location descriptor (x-coordinate 83)
;
; Used by the routine at #R60179. This descriptor corresponds to the front
; steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(83,32,2,0) }
; TABLE#
@label=LOCDESCS83
b47992 DEFB 220,224,96 ; y=32, z=1 or 2; left, right, up/left
 47995 DEFB 255        ; End marker

; Location descriptor (x-coordinate 86)
;
; Used by the routine at #R60179. This descriptor corresponds to the front
; steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(86,32,1,128) }
; TABLE#
@label=LOCDESCS86
b47996 DEFB 220,192,128 ; y=32, z=1 or 2; left, right
 47999 DEFB 255         ; End marker

; Z'' values (8|x-3)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+3 (0<=N<=31).
b48000 DEFB 255,252,250,242,240,238,241,232,226,222,218,218,216,216,211,218
 48016 DEFB 204,198,192,190,190,189,195,203,218,179,173,171,165,165,160,152
 48032 DEFB 148,140,132,127,125,204,218,113,106,113,99,92,188,87,79,74
 48048 DEFB 66,61,56,203,113,48,165,43,35,27,21,17,11,3,254,113
 48064 DEFB 247,241,234,226,218,210,132,201,194,186,178,170,163,156,150,142
 48080 DEFB 137,132,124,142,137,132,114,108,104,96,91,195,83,77,69,63
 48096 DEFB 56,232,45,38,34,33

; Location descriptors (x-coordinates 43, 115, 211)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircase between the third and
; fourth floors of no. 74 (x=43), the staircase leading up to the roof of no.
; 31 (x=115), and the staircase leading up to the roof of no. 19 (x=211).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(43,16,4,0) | #CALL:ld_img(115,16,4,0) |
; #CALL:ld_img(211,16,4,0) }
; TABLE#
@label=LOCDESCS43
b48102 DEFB 24,36       ; y=16, z=1; up/left, down/right
; The next descriptor is identical to the first one, and is therefore
; redundant.
 48104 DEFB 24,36       ; y=16, z=1; up/left, down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 74 (x=43), no. 31 (x=115), and no. 19 (x=211).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(43,22,4,0) | #CALL:ld_img(115,22,4,0) |
; #CALL:ld_img(211,22,4,0) }
; TABLE#
 48106 DEFB 36,24       ; y=22, z=1; up/right, down/left
; The next descriptor corresponds to the tops of the staircases between the
; first and second floors of no. 74 (x=43), no. 31 (x=115), and no. 19 (x=211).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(43,25,4,0) | #CALL:ld_img(115,25,4,0) |
; #CALL:ld_img(211,25,4,0) }
; TABLE#
 48108 DEFB 42,196      ; y=25, z=1; left, right, down/right
; The next three descriptors correspond to the front doors of no. 74 (x=43),
; no. 31 (x=115) and no. 19 (x=211).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(43,31,2,0) | #CALL:ld_img(115,31,2,0) |
; #CALL:ld_img(211,31,2,0) }
; TABLE#
 48110 DEFB 219,220,209 ; y=31, z=1 or 2; left, right, up/right, down/left,
                        ; down/right (door open)
 48113 DEFB 54,208      ; y=31, z=1; left, right, up/right (inside, door
                        ; closed)
 48115 DEFB 118,204     ; y=31, z=2; left, right, down/left, down/right
                        ; (outside, door closed)
; The next descriptor corresponds to the front steps of no. 74 (x=43), no. 31
; (x=115) and no. 19 (x=211).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(43,32,2,0) | #CALL:ld_img(115,32,2,0) |
; #CALL:ld_img(211,32,2,0) }
; TABLE#
 48117 DEFB 120,252     ; y=32, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
; The next descriptor also corresponds to the front steps of no. 74 (x=43), no.
; 31 (x=115) and no. 19 (x=211).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(43,33,2,0) | #CALL:ld_img(115,33,2,0) |
; #CALL:ld_img(211,33,2,0) }
; TABLE#
 48119 DEFB 122,252     ; y=33, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
 48121 DEFB 255         ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u48122 DEFB 1,255,172,255
 48126 DEFB 122,76        ; y=33, z=2; right, down/left, down/right

; Z values (24<=y<=29)
;
; Used by the routines at #R59148 and #R62368. Each byte here corresponds to a
; segment of the play area that is eight tiles wide and six tiles high, and
; level with the 2nd floor of a building (24<=y<=29).
b48128 DEFB 28,34,28          ; 0<=x<24: apartment building next to no. 74
 48131 DEFB 59                ; 24<=x<32
 48132 DEFB 29,28,44          ; 32<=x<56: no. 74
 48135 DEFB 37,18,60,61,21,51 ; 56<=x<104: hotel
 48141 DEFB 57,57             ; 104<=x<120: no. 31
 48143 DEFB 62                ; 120<=x<128
 48144 DEFB 63,64,41          ; 128<=x<152: police station
 48147 DEFB 54                ; 152<=x<160: no. 27
 48148 DEFB 55,56             ; 160<=x<176
 48150 DEFB 47,48,34,28       ; 176<=x<208: apartment building next to no. 19
 48154 DEFB 71,71             ; 208<=x<224: no. 19
 48156 DEFB 28,54             ; 224<=x<240: no. 17
 48158 DEFB 28,54             ; 240<=x<256: no. 15

; Play area tile attribute address LSBs (24<=y<=29)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high, and level with the
; 2nd floor of a building (24<=y<=29).
b48160 DEFB 10,3,12           ; 0<=x<24: apartment building next to no. 74
 48163 DEFB 11                ; 24<=x<32
 48164 DEFB 8,7,7             ; 32<=x<56: no. 74
 48167 DEFB 19,19,19,19,19,19 ; 56<=x<104: hotel
 48173 DEFB 7,2               ; 104<=x<120: no. 31
 48175 DEFB 2                 ; 120<=x<128
 48176 DEFB 8,8,7             ; 128<=x<152: police station
 48179 DEFB 6                 ; 152<=x<160: no. 27
 48180 DEFB 11,2              ; 160<=x<176
 48182 DEFB 16,12,3,13        ; 176<=x<208: apartment building next to no. 19
 48186 DEFB 2,4               ; 208<=x<224: no. 19
 48188 DEFB 6,6               ; 224<=x<240: no. 17
 48190 DEFB 7,7               ; 240<=x<256: no. 15

; 2nd floor window flags (24<=y<=29)
;
; Used by the routines at #R62518 and #R63450. Each byte here corresponds to a
; segment of the play area that is eight tiles wide, and level with the 2nd
; floor of a building (24<=y<=29). The 3rd floor window flags are at #R47936;
; the 1st floor window flags are at #R48448.
@label=WINFLAGS2
b48192 DEFB 29,0,222        ; 0<=x<24: apartment building next to no. 74
 48195 DEFB 0               ; 24<=x<32: no windows here
 48196 DEFB 152,28,22       ; 32<=x<56: no. 74
 48199 DEFB 200,0,0,0,0,168 ; 56<=x<104: hotel
 48205 DEFB 125,93          ; 104<=x<120: no. 31
 48207 DEFB 0               ; 120<=x<128: no windows here
 48208 DEFB 136,0,136       ; 128<=x<152: police station
 48211 DEFB 24              ; 152<=x<160: no. 27
 48212 DEFB 0,0             ; 160<=x<176: no windows here
 48214 DEFB 24,255,0,28     ; 176<=x<208: apartment building next to no. 19
 48218 DEFB 72,104          ; 208<=x<224: no. 19
 48220 DEFB 158,216         ; 224<=x<240: no. 17
 48222 DEFB 223,56          ; 240<=x<256: no. 15

; Unused
;
; These bytes are probably remnants of location descriptor tables.
u48224 DEFB 46,24    ; y=27, z=1; up/right, down/left
 48226 DEFB 48,40    ; y=28, z=1; up/left, down/left
 48228 DEFB 50,36    ; y=29, z=1; up/left, down/right
 48230 DEFB 255      ; End marker
 48231 DEFB 44,24    ; y=26, z=1; up/right, down/left
 48233 DEFB 52,36    ; y=30, z=1; up/left, down/right
 48235 DEFB 120,208  ; y=32, z=2; left, right, up/right
 48237 DEFB 255      ; End marker

; Location descriptors (x-coordinate 75)
;
; Used by the routine at #R60179. These descriptors correspond to the entrance
; to the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(75,31,2,0,,30) | #CALL:ld_img(75,32,2,128,,30) }
; TABLE#
@label=LOCDESCS75
b48238 DEFB 219,76,64 ; y=31, z=1 or 2; right, down/left, down/right
 48241 DEFB 120,208   ; y=32, z=2; left, right, up/right
 48243 DEFB 255       ; End marker

; Unused
;
; These bytes are probably remnants of location descriptor tables.
u48244 DEFB 255
 48245 DEFB 122,140  ; y=33, z=2; left, down/left, down/right
 48247 DEFB 255      ; End marker
 48248 DEFB 44,36    ; y=26, z=1; up/left, down/right
 48250 DEFB 48,24    ; y=28, z=1; up/right, down/left
 48252 DEFB 52,36    ; y=30, z=1; up/left, down/right
 48254 DEFB 255      ; End marker
 48255 DEFB 0

; Z'' values (8|x-4)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+4 (0<=N<=31).
b48256 DEFB 255,252,249,241,239,237,241,232,225,222,218,218,216,216,216,218
 48272 DEFB 204,197,191,190,190,188,195,204,181,178,172,171,168,188,159,218
 48288 DEFB 147,139,131,127,124,204,118,114,105,114,100,91,168,86,78,73
 48304 DEFB 65,64,55,204,114,29,46,42,34,30,20,16,10,2,253,114
 48320 DEFB 246,240,233,225,217,209,208,200,193,185,177,169,162,155,149,142
 48336 DEFB 137,131,123,142,137,117,113,107,103,95,91,195,82,76,68,62
 48352 DEFB 55,232,44,250,34,33

; Location descriptors (x-coordinates 42, 114, 210)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the top of the staircase between the
; third and fourth floors of no. 74 (x=42), the top of the staircase leading up
; to the roof of no. 31 (x=114), and the top of the staircase leading up to the
; roof of no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,13,4,0) | #CALL:ld_img(114,13,1,0) |
; #CALL:ld_img(210,13,4,0) }
; TABLE#
@label=LOCDESCS42
b48358 DEFB 18,200      ; y=13, z=1; left, right, down/left
; The next descriptor corresponds to the staircase between the third and fourth
; floors of no. 74 (x=42), the staircase leading up to the roof of no. 31
; (x=114), and the staircase leading up to the roof of no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,15,4,0) | #CALL:ld_img(114,15,4,0) |
; #CALL:ld_img(210,15,4,0) }
; TABLE#
 48360 DEFB 22,36       ; y=15, z=1; up/left, down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 74 (x=42), no. 31 (x=114), and no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,23,4,0) | #CALL:ld_img(114,23,4,0) |
; #CALL:ld_img(210,23,4,0) }
; TABLE#
 48362 DEFB 38,24       ; y=23, z=1; up/right, down/left
; The next two descriptors correspond to the front doors of no. 74 (x=42), no.
; 31 (x=114) and no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,31,2,0) | #CALL:ld_img(114,31,2,0) |
; #CALL:ld_img(210,31,2,0) }
; TABLE#
 48364 DEFB 219,204,193 ; y=31, z=1 or 2; left, right, down/left, down/right
                        ; (door open)
 48367 DEFB 118,204     ; y=31, z=2; left, right, down/left, down/right
                        ; (outside, door closed)
; The next descriptor corresponds to the front steps of no. 74 (x=42), no. 31
; (x=114) and no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,32,2,0) | #CALL:ld_img(114,32,2,0) |
; #CALL:ld_img(210,32,2,0) }
; TABLE#
 48369 DEFB 120,252     ; y=32, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
; The next descriptor also corresponds to the front steps of no. 74 (x=42), no.
; 31 (x=114) and no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,33,2,0) | #CALL:ld_img(114,33,2,0) |
; #CALL:ld_img(210,33,2,0) }
; TABLE#
 48371 DEFB 122,252     ; y=33, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
; The next descriptor corresponds to the bottoms of the staircases between the
; second and third floors of no. 74 (x=42), no. 31 (x=114), and no. 19 (x=210).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(42,25,4,0) | #CALL:ld_img(114,25,4,0) |
; #CALL:ld_img(210,25,4,0) }
; TABLE#
 48373 DEFB 42,224      ; y=25, z=1; left, right, up/left
 48375 DEFB 255         ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u48376 DEFB 252,255,252,255

; Location descriptor (x-coordinate 71)
;
; Used by the routine at #R60179. This descriptor corresponds to the front
; steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(71,32,1,0) }
; TABLE#
@label=LOCDESCS71
b48380 DEFB 220,192,64 ; y=32, z=1 or 2; left, right
 48383 DEFB 255        ; End marker

; Z values (30<=y<=35)
;
; Used by the routines at #R59148, #R60179, #R61696, #R62368 and #R63662. Each
; byte here corresponds to a segment of the play area that is eight tiles wide
; and six tiles high, and level with the 1st floor of a building (30<=y<=35).
@label=ZVALUES1
b48384 DEFB 84,70,84          ; 0<=x<24: apartment building next to no. 74
 48387 DEFB 72                ; 24<=x<32
 48388 DEFB 65,86,65          ; 32<=x<56: no. 74
 48391 DEFB 37,73,74,75,76,51 ; 56<=x<104: hotel
 48397 DEFB 65,86             ; 104<=x<120: no. 31
 48399 DEFB 77                ; 120<=x<128
 48400 DEFB 42,43,41          ; 128<=x<152: police station
 48403 DEFB 85                ; 152<=x<160: no. 27
 48404 DEFB 66,67             ; 160<=x<176
 48406 DEFB 68,69,70,65       ; 176<=x<208: apartment building next to no. 19
 48410 DEFB 86,71             ; 208<=x<224: no. 19
 48412 DEFB 84,85             ; 224<=x<240: no. 17
 48414 DEFB 84,85             ; 240<=x<256: no. 15

; Play area tile attribute address LSBs (30<=y<=35)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high, and level with the
; 1st floor of a building (30<=y<=35).
b48416 DEFB 20,3,21         ; 0<=x<24: apartment building next to no. 74
 48419 DEFB 3               ; 24<=x<32
 48420 DEFB 8,4,8           ; 32<=x<56: no. 74
 48423 DEFB 5,22,23,23,24,5 ; 56<=x<104: hotel
 48429 DEFB 8,7             ; 104<=x<120: no. 31
 48431 DEFB 17              ; 120<=x<128
 48432 DEFB 2,2,2           ; 128<=x<152: police station
 48435 DEFB 11              ; 152<=x<160: no. 27
 48436 DEFB 11,2            ; 160<=x<176
 48438 DEFB 3,6,3,16        ; 176<=x<208: apartment building next to no. 19
 48442 DEFB 18,10           ; 208<=x<224: no. 19
 48444 DEFB 26,6            ; 224<=x<240: no. 17
 48446 DEFB 21,7            ; 240<=x<256: no. 15

; 1st floor window flags (30<=y<=35)
;
; Used by the routines at #R62518 and #R63450. Each byte here corresponds to a
; segment of the play area that is eight tiles wide, and level with the 1st
; floor of a building (30<=y<=35). The 2nd floor window flags are at #R48192;
; the window flags for y-coordinate range 36-41 are at #R48704.
@label=WINFLAGS1
b48448 DEFB 12,0,44         ; 0<=x<24: apartment building next to no. 74
 48451 DEFB 0               ; 24<=x<32: no windows here
 48452 DEFB 93,64,93        ; 32<=x<56: no. 74 (windows and a house number
                            ; sign)
 48455 DEFB 200,0,0,0,0,136 ; 56<=x<104: hotel
 48461 DEFB 222,0           ; 104<=x<120: no. 31 (windows and a house number
                            ; sign)
 48463 DEFB 0               ; 120<=x<128: no windows here
 48464 DEFB 72,0,104        ; 128<=x<152: police station
 48467 DEFB 128             ; 152<=x<160: no. 27 (windows and a house number
                            ; sign)
 48468 DEFB 0,0             ; 160<=x<176: no windows here
 48470 DEFB 0,223,0,28      ; 176<=x<208: apartment building next to no. 19
 48474 DEFB 128,72          ; 208<=x<224: no. 19 (windows and a house number
                            ; sign)
 48476 DEFB 46,64           ; 224<=x<240: no. 17 (windows and a house number
                            ; sign)
 48478 DEFB 14,32           ; 240<=x<256: no. 15 (windows and a house number
                            ; sign)

; Location descriptors (x-coordinates 126, 151, 182, 183)
;
; Used by the routine at #R60179.
; .
; The first four descriptors correspond to the fire escape on the apartment
; building next to no. 19 (x=182).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(182,6,1,0) | #CALL:ld_img(182,11,2,0) |
; #CALL:ld_img(182,17,2,0) | #CALL:ld_img(182,23,2,0) }
; TABLE#
@label=LOCDESCS182
b48480 DEFB 4,140    ; y=6, z=1; left, down/left, down/right (roof)
 48482 DEFB 78,200   ; y=11, z=2; left, right, down/left (top floor)
 48484 DEFB 90,200   ; y=17, z=2; left, right, down/left (third floor)
 48486 DEFB 102,200  ; y=23, z=2; left, right, down/left (second floor)
; The next descriptor corresponds to the first step up towards the top-left
; edge of the roof of the police station (x=126), the step up to the top-left
; edge of the roof of no. 27 (x=151), and the steps up to the fire escape on
; the roof of the apartment building next to no. 19 (x=182, 183).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(126,7,1,0) | #CALL:ld_img(151,7,1,0) | #CALL:ld_img(182,7,1,0)
; | #CALL:ld_img(183,7,1,0) }
; TABLE#
@label=LOCDESCS126
 48488 DEFB 6,224    ; y=7, z=1; left, right, up/left
 48490 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of location descriptor tables.
u48491 DEFB 42,200   ; y=25, z=1; left, right, down/left
 48493 DEFB 50,20    ; y=29, z=1; up/right, down/right
 48495 DEFB 255      ; End marker
 48496 DEFB 46,40    ; y=27, z=1; up/left, down/left
 48498 DEFB 54,224   ; y=31, z=1; left, right, up/left
 48500 DEFB 255      ; End marker

; Location descriptor (x-coordinate 118)
;
; Used by the routine at #R60179.  This descriptor corresponds to the top-right
; edge of the roof of no. 31. It is used to check whether Sam is going to step
; off the roof (see #R42006).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(118,11,1,128) }
; TABLE#
@label=LOCDESCS118
b48501 DEFB 135,73,5 ; y=11, z=1; right, down/left
 48504 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u48505 DEFB 172,255

; Location descriptor (x-coordinate 124)
;
; Used by the routine at #R60179. This descriptor corresponds to the top-left
; edge of the roof of the police station. It is used to check whether Sam is
; going to step off the roof (see #R41750).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(124,5,1,0) }
; TABLE#
@label=LOCDESCS124
b48507 DEFB 129,134,4 ; y=5, z=1; left, down/right
 48510 DEFB 255       ; End marker

; Unused
u48511 DEFB 0

; Z'' values (8|x-5)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+5 (0<=N<=31).
b48512 DEFB 255,252,248,241,239,236,241,231,224,222,218,218,215,216,216,218
 48528 DEFB 203,196,190,189,190,188,195,184,180,177,179,171,164,188,158,218
 48544 DEFB 146,138,130,127,123,203,117,112,104,112,98,90,164,85,77,72
 48560 DEFB 138,60,54,184,112,47,45,41,33,26,127,15,9,1,117,112
 48576 DEFB 245,239,232,224,216,138,207,199,192,184,176,168,161,117,148,142
 48592 DEFB 137,130,122,142,137,116,112,106,102,94,91,195,81,75,68,61
 48608 DEFB 54,232,43,250,34,33

; Location descriptors (x-coordinates 41, 113, 209)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircase between the third and
; fourth floors of no. 74 (x=41), the staircase leading up to the roof of no.
; 31 (x=113), and the staircase leading up to the roof of no. 19 (x=209).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(41,14,4,128) | #CALL:ld_img(113,14,4,128) |
; #CALL:ld_img(209,14,4,128) }
; TABLE#
@label=LOCDESCS41
b48614 DEFB 20,20    ; y=14, z=1; up/right, down/right
; The next descriptor corresponds to the top of the front steps of no. 74
; (x=41), no. 31 (x=113) and no. 19 (x=209).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(41,31,2,128) | #CALL:ld_img(113,31,2,128) |
; #CALL:ld_img(209,31,2,128) }
; TABLE#
 48616 DEFB 118,76   ; y=31, z=2; right, down/left, down/right
; The next descriptor corresponds to the front steps of no. 74 (x=41), no. 31
; (x=113) and no. 19 (x=209).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(41,32,2,128) | #CALL:ld_img(113,32,2,128) |
; #CALL:ld_img(209,32,2,128) }
; TABLE#
 48618 DEFB 120,220  ; y=32, z=2; left, right, up/right, down/left, down/right
; The next descriptor also corresponds to the front steps of no. 74 (x=41), no.
; 31 (x=113) and no. 19 (x=209).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(41,33,2,128,,31) | #CALL:ld_img(113,33,2,128,,31) |
; #CALL:ld_img(209,33,2,128,,31) }
; TABLE#
 48620 DEFB 122,252  ; y=33, z=2; left, right, up/left, up/right, down/left,
                     ; down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 74 (x=41), no. 31 (x=113), and no. 19 (x=209).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(41,24,4,128) | #CALL:ld_img(113,24,4,128) |
; #CALL:ld_img(209,24,4,128) }
; TABLE#
 48622 DEFB 40,20    ; y=24, z=1; up/right, down/right
 48624 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of location descriptor tables.
u48625 DEFB 120,252     ; y=32, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
 48627 DEFB 122,252     ; y=33, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
 48629 DEFB 255         ; End marker
 48630 DEFB 42,196      ; y=25, z=1; left, right, down/right
 48632 DEFB 219,220,208 ; y=31, z=1 or 2; left, right, up/right, down/left,
                        ; down/right
 48635 DEFB 120,224     ; y=32, z=2; left, right, up/left
 48637 DEFB 255         ; End marker
 48638 DEFB 255,255

; Z values (36<=y<=41)
;
; Used by the routines at #R59148, #R61696 and #R63662. Each byte here
; corresponds to a segment of the play area that is eight tiles wide and six
; tiles high.
@label=ZVALUES0
b48640 DEFB 83,93,83          ; 0<=x<24: apartment building next to no. 74
 48643 DEFB 96                ; 24<=x<32
 48644 DEFB 88,95,88          ; 32<=x<56: no. 74
 48647 DEFB 97,99,100,101,2,7 ; 56<=x<104: hotel
 48653 DEFB 88,95             ; 104<=x<120: no. 31
 48655 DEFB 17                ; 120<=x<128
 48656 DEFB 22,98,91          ; 128<=x<152: police station
 48659 DEFB 78                ; 152<=x<160: no. 27
 48660 DEFB 87,90             ; 160<=x<176
 48662 DEFB 89,92,93,88       ; 176<=x<208: apartment building next to no. 19
 48666 DEFB 95,94             ; 208<=x<224: no. 19
 48668 DEFB 83,78             ; 224<=x<240: no. 17
 48670 DEFB 83,78             ; 240<=x<256: no. 15

; Play area tile attribute address LSBs (36<=y<=41)
;
; Used by the routine at #R59148. Each byte here corresponds to a segment of
; the play area that is eight tiles wide and six tiles high.
b48672 DEFB 17,25,2     ; 0<=x<24: apartment building next to no. 74
 48675 DEFB 2           ; 24<=x<32
 48676 DEFB 2,2,2       ; 32<=x<56: no. 74
 48679 DEFB 0,0,0,0,0,0 ; 56<=x<104: hotel
 48685 DEFB 2,2         ; 104<=x<120: no. 31
 48687 DEFB 2           ; 120<=x<128
 48688 DEFB 2,2,2       ; 128<=x<152: police station
 48691 DEFB 25          ; 152<=x<160: no. 27
 48692 DEFB 25,25       ; 160<=x<176
 48694 DEFB 2,7,25,25   ; 176<=x<208: apartment building next to no. 19
 48698 DEFB 2,2         ; 208<=x<224: no. 19
 48700 DEFB 27,25       ; 224<=x<240: no. 17
 48702 DEFB 2,2         ; 240<=x<256: no. 15

; Window flags (36<=y<=41)
;
; Used by the routine at #R63450. Since there are no windows between
; y-coordinates 36 and 41, these window flag bytes are always 0. The window
; flags for the previous range of y-coordinates (30-35, corresponding to the
; 1st floor windows) are at #R48448.
@label=WINFLAGS0
b48704 DEFS 32

; Location descriptors (x-coordinates 45, 117, 213)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the step leading up to the top-right edge
; of the roof of no. 31 (x=117).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(117,12,1,128) }
; TABLE#
@label=LOCDESCS117
b48736 DEFB 16,24    ; y=12, z=1; up/right, down/left
; The next four descriptors correspond to the far right side of no. 31 (x=117).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(117,13,1,128) | #CALL:ld_img(117,19,1,128) |
; #CALL:ld_img(117,25,1,128) | #CALL:ld_img(117,31,4,128) }
; TABLE#
 48738 DEFB 18,128   ; y=13, z=1; left (roof)
 48740 DEFB 30,128   ; y=19, z=1; left (top floor)
 48742 DEFB 42,128   ; y=25, z=1; left (second floor)
 48744 DEFB 54,128   ; y=31, z=1; left (first floor)
; The next descriptor corresponds to the staircase between the third and fourth
; floors of no. 74 (x=45), the staircase leading up to the roof of no. 31
; (x=117), and the staircase leading up to the roof of no. 19 (x=213).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(45,18,4,128) | #CALL:ld_img(117,18,4,128) |
; #CALL:ld_img(213,18,4,128) }
; TABLE#
@label=LOCDESCS45
 48746 DEFB 28,40    ; y=18, z=1; up/left, down/left
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 74 (x=45), no. 31 (x=117) and no. 19 (x=213).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(45,20,4,128) | #CALL:ld_img(117,20,4,128) |
; #CALL:ld_img(213,20,4,128) }
; TABLE#
 48748 DEFB 32,40    ; y=20, z=1; up/left, down/left
; The next descriptor corresponds to the staircases between the first and
; second floors of no. 74 (x=45), no. 31 (x=117) and no. 19 (x=213).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(45,27,4,128) | #CALL:ld_img(117,27,4,128) |
; #CALL:ld_img(213,27,4,128) }
; TABLE#
 48750 DEFB 46,40    ; y=27, z=1; up/left, down/left
; The next descriptor also corresponds to the staircases between the first and
; second floors of no. 74 (x=45), no. 31 (x=117) and no. 19 (x=213).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(45,29,4,128) | #CALL:ld_img(117,29,4,128) |
; #CALL:ld_img(213,29,4,128) }
; TABLE#
 48752 DEFB 50,40    ; y=29, z=1; up/left, down/left
; The next descriptor corresponds to the front steps of no. 74 (x=45), no. 31
; (x=117) and no. 19 (x=213).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(45,32,2,128) | #CALL:ld_img(117,32,2,128) |
; #CALL:ld_img(213,32,2,128) }
; TABLE#
 48754 DEFB 120,168  ; y=32, z=2; left, up/left, down/left
; The next descriptor also corresponds to the front steps of no. 74 (x=45), no.
; 31 (x=117) and no. 19 (x=213).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(45,33,2,128,,31) | #CALL:ld_img(117,33,2,128,,31) |
; #CALL:ld_img(213,33,2,128,,31) }
; TABLE#
 48756 DEFB 122,172  ; y=33, z=2; left, up/left, down/left, down/right
 48758 DEFB 255      ; End marker

; Location descriptors (x-coordinate 135)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircase between the first and
; second floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(135,29,4,128) }
; TABLE#
@label=LOCDESCS135
b48759 DEFB 50,20    ; y=29, z=1; up/right, down/right
; The next descriptor corresponds to a location beside the entrance to the
; police station that is not accessible; it is therefore redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(135,31,2,128,,30,,10) }
; TABLE#
 48761 DEFB 118,68   ; y=31, z=2; right, down/right
; The next two descriptors correspond to the front steps of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(135,32,2,128,,30,,10) | #CALL:ld_img(135,33,2,128,,30,,10) }
; TABLE#
 48763 DEFB 120,68   ; y=32, z=2; right, down/right
 48765 DEFB 122,92   ; y=33, z=2; right, up/right, down/left, down/right
 48767 DEFB 255      ; End marker

; Z'' values (8|x-6)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+6 (0<=N<=31).
b48768 DEFB 255,252,247,241,241,235,234,230,223,222,218,218,214,216,216,218
 48784 DEFB 204,195,190,188,189,192,187,183,179,177,179,170,163,188,157,218
 48800 DEFB 145,137,129,127,122,204,188,111,188,103,97,89,163,84,218,71
 48816 DEFB 137,59,53,183,111,188,44,40,32,25,127,14,8,189,188,252
 48832 DEFB 188,238,231,223,215,137,206,198,191,183,175,167,160,188,147,142
 48848 DEFB 137,129,188,142,137,129,188,80,101,93,90,88,85,74,67,60
 48864 DEFB 53,232,42,250,34,32

; Location descriptors (x-coordinates 44, 116, 212)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the first step leading up to the
; top-right edge of the roof of no. 31 (x=116).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(116,13,1,128) }
; TABLE#
@label=LOCDESCS116
b48870 DEFB 18,208   ; y=13, z=1; left, right, up/right
; The next descriptor corresponds to the staircase between the third and fourth
; floors of no. 74 (x=44), the staircase leading up to the roof of no. 31
; (x=116), and the staircase leading up to the roof of no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,17,4,0) | #CALL:ld_img(116,17,4,0) |
; #CALL:ld_img(212,17,4,0) }
; TABLE#
@label=LOCDESCS44
 48872 DEFB 26,36    ; y=17, z=1; up/left, down/right
; The next descriptor corresponds to the bottom of the staircase between the
; third and fourth floors of no. 74 (x=44), the bottom of the staircase leading
; up to the roof of no. 31 (x=116), and the bottom of the staircase leading up
; to the roof of no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,19,4,128) | #CALL:ld_img(116,19,4,128) |
; #CALL:ld_img(212,19,4,128) }
; TABLE#
 48874 DEFB 30,212   ; y=19, z=1; left, right, up/right, down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 74 (x=44), no. 31 (x=116), and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,21,4,128) | #CALL:ld_img(116,21,4,128) |
; #CALL:ld_img(212,21,4,128) }
; TABLE#
 48876 DEFB 34,24    ; y=21, z=1; up/right, down/left
; The next descriptor is identical to the one above, and is therefore
; redundant.
 48878 DEFB 34,24    ; y=21, z=1; up/right, down/left
; The next descriptor corresponds to the staircases between the first and
; second floors of no. 74 (x=44), no. 31 (x=116), and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,26,4,128) | #CALL:ld_img(116,26,4,128) |
; #CALL:ld_img(212,26,4,128) }
; TABLE#
 48880 DEFB 44,36    ; y=26, z=1; up/left, down/right
; The next descriptor also corresponds to the staircases between the first and
; second floors of no. 74 (x=44), no. 31 (x=116), and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,28,4,128) | #CALL:ld_img(116,28,4,128) |
; #CALL:ld_img(212,28,4,128) }
; TABLE#
 48882 DEFB 48,20    ; y=28, z=1; up/right, down/right
; The next descriptor also corresponds to the staircases between the first and
; second floors of no. 74 (x=44), no. 31 (x=116), and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,30,4,128) | #CALL:ld_img(116,30,4,128) |
; #CALL:ld_img(212,30,4,128) }
; TABLE#
 48884 DEFB 52,24    ; y=30, z=1; up/right, down/left
; The next descriptor corresponds to the top of the front steps of no. 74
; (x=44), no. 31 (x=116) and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,31,2,0) | #CALL:ld_img(116,31,2,0) |
; #CALL:ld_img(212,31,2,0) }
; TABLE#
 48886 DEFB 118,140  ; y=31, z=2; left, down/left, down/right
; The next descriptor corresponds to the front steps of no. 74 (x=44), no. 31
; (x=116) and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,32,2,0) | #CALL:ld_img(116,32,2,0) |
; #CALL:ld_img(212,32,2,0) }
; TABLE#
 48888 DEFB 120,236  ; y=32, z=2; left, right, up/left, down/left, down/right
; The next descriptor also corresponds to the front steps of no. 74 (x=44), no.
; 31 (x=116) and no. 19 (x=212).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(44,33,2,0) | #CALL:ld_img(116,33,2,0) |
; #CALL:ld_img(212,33,2,0) }
; TABLE#
 48890 DEFB 122,252  ; y=33, z=2; left, right, up/left, up/right, down/left,
                     ; down/right
 48892 DEFB 255      ; End marker

; Location descriptor (x-coordinate 133)
;
; Used by the routine at #R60179. This descriptor corresponds to the location
; just behind the door of the left-hand jail cell on the first floor of the
; police station. It is used to check whether Sam can leave the cell (see
; #R42518).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(133,31,4,128) }
; TABLE#
@label=LOCDESCS133
b48893 DEFB 155,193,7 ; y=31, z=1; left, right
; This block of location descriptors is implicitly terminated by the page
; boundary.

; Z' values
;
; Used by the routines at #R59148 and #R62368. Each Z' value is used by one or
; more segments of the play area (a segment being six tiles high and eight
; tiles wide).
; .
; The first Z' value is used by the segments at (0,0), (8,0), (16,0), (24,0),
; (32,0), (40,0), (48,0), (104,0), (112,0), (120,0), (128,0), (136,0), (144,0),
; (152,0), (160,0), (168,0), (176,0), (184,0), (192,0), (200,0), (208,0),
; (216,0), (224,0), (232,0), (240,0) and (248,0).
; .
; #UDGTABLE
; { #SEGMENT0,0 }
; TABLE#
@label=Z1VALUES
b48896 DEFB 255
; The next Z' value is used by the segment at (56,0).
; .
; #UDGTABLE
; { #SEGMENT56,0 }
; TABLE#
 48897 DEFB 255
; The next Z' value is used by the segment at (88,36).
; .
; #UDGTABLE
; { #SEGMENT88,36 }
; TABLE#
 48898 DEFB 255
; The next four Z' values are used by the segments at (64,0), (72,0), (80,0)
; and (88,0).
; .
; #UDGTABLE
; { #SEGMENT64,0 | #SEGMENT72,0 | #SEGMENT80,0 | #SEGMENT88,0 }
; TABLE#
 48899 DEFB 255,255,255,255
; The next Z' value is used by the segment at (96,36).
; .
; #UDGTABLE
; { #SEGMENT96,36 }
; TABLE#
 48903 DEFB 255
; The next Z' value is used by the segment at (96,0).
; .
; #UDGTABLE
; { #SEGMENT96,0 }
; TABLE#
 48904 DEFB 255
; The next Z' value is used by the segments at (32,6), (40,6), (48,6), (152,6),
; (208,6), (216,6), (224,6), (232,6), (240,6) and (248,6).
; .
; #PUSHS #POKES47386,9,2
; #UDGTABLE
; { #SEGMENT32,6 | #SEGMENT40,6 | #SEGMENT48,6 | #SEGMENT152,6 |
; #SEGMENT208,6(segment-208-6-rope) | #SEGMENT216,6(segment-216-6-rope) |
; #SEGMENT224,6 | #SEGMENT232,6 | #SEGMENT240,6 | #SEGMENT248,6 }
; TABLE#
; #POPS
 48905 DEFB 255
; The next Z' value is used by the segment at (160,6).
; .
; #UDGTABLE
; { #SEGMENT160,6 }
; TABLE#
 48906 DEFB 255
; The next Z' value is used by the segments at (104,6), (112,6), (168,6),
; (208,6) and (216,6).
; .
; #UDGTABLE
; { #SEGMENT104,6 }
; TABLE#
 48907 DEFB 255
; The next Z' value is used by the segment at (176,6).
; .
; #UDGTABLE
; { #SEGMENT176,6 }
; TABLE#
 48908 DEFB 255
; The next Z' value is used by the segments at (0,6), (16,6), (184,6) and
; (200,6).
; .
; #UDGTABLE
; { #SEGMENT0,6 | #SEGMENT16,6 | #SEGMENT184,6 | #SEGMENT200,6 }
; TABLE#
 48909 DEFB 255
; The next Z' value is used by the segments at (8,6) and (192,6).
; .
; #UDGTABLE
; { #SEGMENT8,6 }
; TABLE#
 48910 DEFB 255
; The next Z' value is used by the segment at (24,6).
; .
; #UDGTABLE
; { #SEGMENT24,6 }
; TABLE#
 48911 DEFB 255
; The next Z' value is used by the segment at (56,6).
; .
; #UDGTABLE
; { #SEGMENT56,6 }
; TABLE#
 48912 DEFB 255
; The next Z' value is used by the segment at (120,36).
; .
; #UDGTABLE
; { #SEGMENT120,36 }
; TABLE#
 48913 DEFB 255
; The next Z' value is used by the segments at (64,6), (64,12), (64,18) and
; (64,24).
; .
; #UDGTABLE
; { #SEGMENT64,6 | #SEGMENT64,12 | #SEGMENT64,18 | #SEGMENT64,24 }
; TABLE#
 48914 DEFB 255
; The next Z' value is used by the segments at (72,6), (72,12) and (72,18).
; .
; #UDGTABLE
; { #SEGMENT72,6 | #SEGMENT72,12 | #SEGMENT72,18 }
; TABLE#
 48915 DEFB 255
; The next Z' value is used by the segments at (80,6), (80,12) and (80,18).
; .
; #UDGTABLE
; { #SEGMENT80,6 | #SEGMENT80,12 | #SEGMENT80,18 }
; TABLE#
 48916 DEFB 255
; The next Z' value is used by the segments at (88,6), (88,12), (88,18) and
; (88,24).
; .
; #UDGTABLE
; { #SEGMENT88,6 | #SEGMENT88,12 | #SEGMENT88,18 | #SEGMENT88,24 }
; TABLE#
 48917 DEFB 255
; The next Z' value is used by the segment at (128,36).
; .
; #UDGTABLE
; { #SEGMENT128,36 }
; TABLE#
 48918 DEFB 255
; The next Z' value is used by the segments at (96,6) and (96,12).
; .
; #UDGTABLE
; { #SEGMENT96,6 | #SEGMENT96,12 }
; TABLE#
 48919 DEFB 255
; The next four Z' values are used by the segments at (120,6), (128,6), (136,6)
; and (144,6).
; .
; #UDGTABLE
; { #SEGMENT120,6 | #SEGMENT128,6 | #SEGMENT136,6 | #SEGMENT144,6 }
; TABLE#
 48920 DEFB 255,255,255,255
; The next Z' value is used by the segments at (0,12), (0,18), (0,24), (16,12),
; (16,18), (16,24), (40,12), (40,18), (40,24), (200,12), (200,18), (200,24),
; (224,12), (224,18), (224,24), (240,12), (240,18) and (240,24).
; .
; #UDGTABLE
; { #SEGMENT0,12 | #SEGMENT0,18 | #SEGMENT0,24 | #SEGMENT16,12 | #SEGMENT16,18
; | #SEGMENT16,24 | #SEGMENT40,12 | #SEGMENT40,18 | #SEGMENT40,24 }
; { #SEGMENT200,12 | #SEGMENT200,18 | #SEGMENT200,24 | #SEGMENT224,12 |
; #SEGMENT224,18 | #SEGMENT224,24 | #SEGMENT240,12 | #SEGMENT240,18 |
; #SEGMENT240,24 }
; TABLE#
 48924 DEFB 255
; The next Z' value is used by the segments at (32,12), (32,18), (32,24),
; (152,12), (232,12) and (248,12).
; .
; #UDGTABLE
; { #SEGMENT32,12 | #SEGMENT32,18 | #SEGMENT32,24 | #SEGMENT152,12 |
; #SEGMENT232,12 #SEGMENT248,12 }
; TABLE#
 48925 DEFB 255
; The next four Z' values are used by the segments at (160,12), (168,12),
; (176,12) and (184,12).
; .
; #UDGTABLE
; { #SEGMENT160,12 | #SEGMENT168,12 | #SEGMENT176,12 | #SEGMENT184,12 }
; TABLE#
 48926 DEFB 255,255,255,255
; The next Z' value is used by the segments at (8,12), (8,18), (8,24),
; (192,12), (192,18) and (192,24).
; .
; #UDGTABLE
; { #SEGMENT8,12 }
; TABLE#
 48930 DEFB 255
; The next Z' value is used by the segments at (104,12), (112,12) and (216,12).
; .
; #UDGTABLE
; { #SEGMENT104,12 }
; TABLE#
 48931 DEFB 255
; The next Z' value is used by the segment at (24,12).
; .
; #UDGTABLE
; { #SEGMENT24,12 }
; TABLE#
 48932 DEFB 255
; The next Z' value is used by the segments at (56,12), (56,18), (56,24) and
; (56,30).
; .
; #UDGTABLE
; { #SEGMENT56,12 | #SEGMENT56,18 | #SEGMENT56,24 | #SEGMENT56,30 }
; TABLE#
 48933 DEFB 255
; The next Z' value is used by the segments at (120,12) and (120,18).
; .
; #UDGTABLE
; { #SEGMENT120,12 }
; TABLE#
 48934 DEFB 255
; The next two Z' values are used by the segments at (128,12) and (136,12).
; .
; #UDGTABLE
; { #SEGMENT128,12 | #SEGMENT136,12 }
; TABLE#
 48935 DEFB 255,255
; The next Z' value is used by the segments at (144,12), (144,18), (144,24) and
; (144,30).
; .
; #UDGTABLE
; { #SEGMENT144,12 | #SEGMENT144,18 | #SEGMENT144,24 | #SEGMENT144,30 }
; TABLE#
 48937 DEFB 255
; The next two Z' values are used by the segments at (128,30) and (136,30).
; .
; #UDGTABLE
; { #SEGMENT128,30 | #SEGMENT136,30 }
; TABLE#
 48938 DEFB 255,255
; The next Z' value is used by the segments at (48,12), (48,18), (48,24),
; (152,18), (232,18) and (248,18).
; .
; #UDGTABLE
; { #SEGMENT48,12 | #SEGMENT48,18 | #SEGMENT48,24 | #SEGMENT152,18 |
; #SEGMENT232,18 #SEGMENT248,18 }
; TABLE#
 48940 DEFB 255
; The next two Z' values are used by the segments at (160,18) and (168,18).
; .
; #UDGTABLE
; { #SEGMENT160,18 | #SEGMENT168,18 }
; TABLE#
 48941 DEFB 255,255
; The next Z' value is used by the segments at (176,18) and (176,24).
; .
; #UDGTABLE
; { #SEGMENT176,18 | #SEGMENT176,24 }
; TABLE#
 48943 DEFB 255
; The next Z' value is used by the segments at (184,18) and (184,24).
; .
; #UDGTABLE
; { #SEGMENT184,18 | #SEGMENT184,24 }
; TABLE#
 48944 DEFB 255
; The next Z' value is used by the segments at (104,18) and (112,18).
; .
; #UDGTABLE
; { #SEGMENT104,18 }
; TABLE#
 48945 DEFB 255
; The next Z' value is used by the segment at (24,18).
; .
; #UDGTABLE
; { #SEGMENT24,18 }
; TABLE#
 48946 DEFB 255
; The next Z' value is used by the segments at (96,18), (96,24) and (96,30).
; .
; #UDGTABLE
; { #SEGMENT96,18 | #SEGMENT96,24 | #SEGMENT96,30 }
; TABLE#
 48947 DEFB 255
; The next two Z' values are used by the segments at (128,18) and (136,18).
; .
; #UDGTABLE
; { #SEGMENT128,18 | #SEGMENT136,18 }
; TABLE#
 48948 DEFB 255,215
; The next Z' value is used by the segments at (152,24), (232,24) and (248,24).
; .
; #UDGTABLE
; { #SEGMENT152,24 | #SEGMENT232,24 | #SEGMENT248,24 }
; TABLE#
 48950 DEFB 255
; The next two Z' values are used by the segments at (160,24) and (168,24).
; .
; #UDGTABLE
; { #SEGMENT160,24 | #SEGMENT168,24 }
; TABLE#
 48951 DEFB 255,255
; The next Z' value is used by the segments at (104,24) and (112,24).
; .
; #UDGTABLE
; { #SEGMENT104,24 | #SEGMENT112,24 }
; TABLE#
 48953 DEFB 255
; The next Z' value is used by the segment at (208,12).
; .
; #UDGTABLE
; { #SEGMENT208,12 }
; TABLE#
 48954 DEFB 255
; The next Z' value is used by the segment at (24,24).
; .
; #UDGTABLE
; { #SEGMENT24,24 }
; TABLE#
 48955 DEFB 255
; The next two Z' values are used by the segments at (72,24) and (80,24).
; .
; #UDGTABLE
; { #SEGMENT72,24 | #SEGMENT80,24 }
; TABLE#
 48956 DEFB 255,255
; The next three Z' values are used by the segments at (120,24), (128,24) and
; (136,24).
; .
; #UDGTABLE
; { #SEGMENT120,24 | #SEGMENT128,24 | #SEGMENT136,24 }
; TABLE#
 48958 DEFB 199,252,3
; The next Z' value is used by the segments at (32,30), (48,30), (104,30) and
; (200,30).
; .
; #UDGTABLE
; { #SEGMENT32,30 | #SEGMENT48,30 | #SEGMENT104,30 | #SEGMENT200,30 }
; TABLE#
 48961 DEFB 0
; The next four Z' values are used by the segments at (160,30), (168,30),
; (176,30) and (184,30).
; .
; #UDGTABLE
; { #SEGMENT160,30 | #SEGMENT168,30 | #SEGMENT176,30 | #SEGMENT184,30 }
; TABLE#
 48962 DEFB 128,0,0,7
; The next Z' value is used by the segments at (8,30) and (192,30).
; .
; #UDGTABLE
; { #SEGMENT8,30 }
; TABLE#
 48966 DEFB 240
; The next Z' value is used by the segments at (208,18), (208,24), (216,18),
; (216,24) and (216,30).
; .
; #UDGTABLE
; { #SEGMENT208,18 | #SEGMENT208,24 | #SEGMENT216,18 | #SEGMENT216,24 |
; #SEGMENT216,30 }
; TABLE#
 48967 DEFB 0
; The next Z' value is used by the segment at (24,30).
; .
; #UDGTABLE
; { #SEGMENT24,30 }
; TABLE#
 48968 DEFB 128
; The next four Z' values are used by the segments at (64,30), (72,30), (80,30)
; and (88,30).
; .
; #UDGTABLE
; { #SEGMENT64,30 | #SEGMENT72,30 | #SEGMENT80,30 | #SEGMENT88,30 }
; TABLE#
 48969 DEFB 0,0,0,0
; The next Z' value is used by the segment at (120,30).
; .
; #UDGTABLE
; { #SEGMENT120,30 }
; TABLE#
 48973 DEFB 134
; The next Z' value is used by the segments at (152,36), (232,36) and (248,36).
; .
; #UDGTABLE
; { #SEGMENT152,36 | #SEGMENT232,36 | #SEGMENT248,36 }
; TABLE#
 48974 DEFB 0
; The next Z' value is used by the segments at (0,36), (16,36), (224,36) and
; (240,36).
; .
; #PUSHS #POKES48640,79;48642,79;48668,79;48670,79
; #UDGTABLE
; { #SEGMENT0,36(segment-0-36-open) | #SEGMENT16,36(segment-16-36-open) |
; #SEGMENT224,36(segment-224-36-open) | #SEGMENT240,36(segment-240-36-open) }
; TABLE#
; #POPS
 48975 DEFB 0
; The next Z' value is used by the segments at (0,30), (16,30), (224,30) and
; (240,30).
; .
; #PUSHS #POKES48384,80;48386,80;48412,80;48414,80
; #UDGTABLE
; { #SEGMENT0,30(segment-0-30-open) | #SEGMENT16,30(segment-16-30-open) |
; #SEGMENT224,30(segment-224-30-open) | #SEGMENT240,30(segment-240-30-open) }
; TABLE#
; #POPS
 48976 DEFB 0
; The next Z' value is used by the segments at (152,30), (232,30) and (248,30).
; .
; #PUSHS #POKES48403,81;48413,81;48415,81
; #UDGTABLE
; { #SEGMENT152,30(segment-152-30-open) | #SEGMENT232,30(segment-232-30-open) |
; #SEGMENT248,30(segment-248-30-open) }
; TABLE#
; #POPS
 48977 DEFB 0
; The next Z' value is used by the segments at (40,30), (112,30) and (208,30).
; .
; #PUSHS #POKES48389,82;48398,82;48410,82
; #UDGTABLE
; { #SEGMENT40,30(segment-40-30-open) | #SEGMENT112,30(segment-112-30-open) |
; #SEGMENT208,30(segment-208-30-open) }
; TABLE#
; #POPS
 48978 DEFB 3
; The next Z' value is used by the segments at (0,36), (16,36), (224,36) and
; (240,36).
; .
; #UDGTABLE
; { #SEGMENT0,36 | #SEGMENT16,36 | #SEGMENT224,36 | #SEGMENT240,36 }
; TABLE#
 48979 DEFB 0
; The next Z' value is used by the segments at (0,30), (16,30), (224,30) and
; (240,30).
; .
; #UDGTABLE
; { #SEGMENT0,30 | #SEGMENT16,30 | #SEGMENT224,30 | #SEGMENT240,30 }
; TABLE#
 48980 DEFB 0
; The next Z' value is used by the segments at (152,30), (232,30) and (248,30).
; .
; #UDGTABLE
; { #SEGMENT152,30 | #SEGMENT232,30 | #SEGMENT248,30 }
; TABLE#
 48981 DEFB 0
; The next Z' value is used by the segments at (40,30), (112,30) and (208,30).
; .
; #UDGTABLE
; { #SEGMENT40,30 | #SEGMENT112,30 | #SEGMENT208,30 }
; TABLE#
 48982 DEFB 3
; The next Z' value is used by the segment at (160,36).
; .
; #UDGTABLE
; { #SEGMENT160,36 }
; TABLE#
 48983 DEFB 3
; The next Z' value is used by the segments at (32,36), (48,36), (104,36) and
; (200,36).
; .
; #UDGTABLE
; { #SEGMENT32,36 | #SEGMENT48,36 | #SEGMENT104,36 | #SEGMENT200,36 }
; TABLE#
 48984 DEFB 0
; The next Z' value is used by the segment at (176,36).
; .
; #UDGTABLE
; { #SEGMENT176,36 }
; TABLE#
 48985 DEFB 0
; The next Z' value is used by the segment at (168,36).
; .
; #UDGTABLE
; { #SEGMENT168,36 }
; TABLE#
 48986 DEFB 0
; The next Z' value is used by the segment at (144,36).
; .
; #UDGTABLE
; { #SEGMENT144,36 }
; TABLE#
 48987 DEFB 252
; The next Z' value is used by the segment at (184,36).
; .
; #UDGTABLE
; { #SEGMENT184,36 }
; TABLE#
 48988 DEFB 0
; The next Z' value is used by the segments at (8,36) and (192,36).
; .
; #UDGTABLE
; { #SEGMENT8,36 }
; TABLE#
 48989 DEFB 0
; The next Z' value is used by the segment at (216,36).
; .
; #UDGTABLE
; { #SEGMENT216,36 }
; TABLE#
 48990 DEFB 0
; The next Z' value is used by the segments at (40,36), (112,36) and (208,36).
; .
; #UDGTABLE
; { #SEGMENT40,36 }
; TABLE#
 48991 DEFB 0
; The next Z' value is used by the segment at (24,36).
; .
; #UDGTABLE
; { #SEGMENT24,36 }
; TABLE#
 48992 DEFB 128
; The next Z' value is used by the segment at (56,36).
; .
; #UDGTABLE
; { #SEGMENT56,36 }
; TABLE#
 48993 DEFB 31
; The next Z' value is used by the segment at (136,36).
; .
; #UDGTABLE
; { #SEGMENT136,36 }
; TABLE#
 48994 DEFB 1
; The next three Z' values are used by the segments at (64,36), (72,36) and
; (80,36).
; .
; #UDGTABLE
; { #SEGMENT64,36 | #SEGMENT72,36 | #SEGMENT80,36 }
; TABLE#
 48995 DEFB 14
 48996 DEFB 0
 48997 DEFB 0

; Location descriptor (x-coordinate 80)
;
; Used by the routine at #R60179. This descriptor corresponds to the staircase
; between the first and second floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(80,26,4,128) }
; TABLE#
@label=LOCDESCS80
b48998 DEFB 44,24    ; y=26, z=1; up/right, down/left
 49000 DEFB 255      ; End marker

; Unused
;
; This byte is probably a remnant of a location descriptor table.
u49001 DEFB 255

; Location descriptor (x-coordinate 65)
;
; Used by the routine at #R60179. This descriptor corresponds to the staircase
; between the second and third floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(65,16,4,128) }
; TABLE#
@label=LOCDESCS65
b49002 DEFB 24,20    ; y=16, z=1; up/right, down/right
 49004 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u49005 DEFB 204,255,194,1

; Location descriptors (x-coordinate 190)
;
; Used by the routine at #R60179. These descriptors correspond to locations
; between the stairwell and the first window to the left of the stairwell on
; each floor of the apartment building next to no. 19, and invoke the special
; location handler routine whose address is at #R40982 when a character moves
; left at these locations. However, the handler routine does nothing special,
; and therefore these descriptors are redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(190,13,4,0) | #CALL:ld_img(190,19,4,0) |
; #CALL:ld_img(190,25,4,0) | #CALL:ld_img(190,31,4,0) }
; TABLE#
@label=LOCDESCS190
b49009 DEFB 137,194,1 ; y=13, z=1; left, right (top floor)
 49012 DEFB 143,194,1 ; y=19, z=1; left, right (third floor)
 49015 DEFB 149,194,1 ; y=25, z=1; left, right (second floor)
 49018 DEFB 155,194,1 ; y=31, z=1; left, right (first floor)
 49021 DEFB 255       ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u49022 DEFB 255,255

; Z'' values (8|x-7)
;
; Used by the routines at #R59148 and #R62368. These Z'' values correspond to
; x-coordinates 8N+7 (0<=N<=31).
b49024 DEFB 255,252,246,241,241,241,233,229,255,222,218,218,213,216,210,208
 49040 DEFB 202,195,190,188,191,192,186,182,179,177,179,169,165,188,156,218
 49056 DEFB 144,136,128,127,121,202,116,110,116,102,96,88,165,83,218,70
 49072 DEFB 136,61,52,120,51,116,188,39,31,27,127,13,7,191,116,251
 49088 DEFB 116,237,230,222,214,136,205,197,190,182,174,181,159,154,146,141
 49104 DEFB 136,128,188,141,136,128,188,80,100,92,89,87,85,73,72,59
 49120 DEFB 52,232,195,37,34,31

; Location descriptors (x-coordinate 88)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the top of the staircase between the
; fourth and top floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(88,7,1,128) }
; TABLE#
@label=LOCDESCS88
b49126 DEFB 6,196    ; y=7, z=1; left, right, down/right
; The next descriptor corresponds to the top of the staircase between the
; second and third floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(88,19,1,128) }
; TABLE#
 49128 DEFB 30,196   ; y=19, z=1; left, right, down/right
; The next descriptor corresponds to the front steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(88,32,2,128) }
; TABLE#
 49130 DEFB 120,132  ; y=32, z=2; left, down/right
 49132 DEFB 255      ; End marker

; Location descriptors (x-coordinate 89)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircase between the fourth and
; top floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(89,8,4,128,86) | #CALL:ld_img(89,13,1,128,86) }
; TABLE#
@label=LOCDESCS89
b49133 DEFB 8,96     ; y=8, z=1; right, up/left
 49135 DEFB 18,208   ; y=13, z=1; left, right, up/right (bottom of the
                     ; staircase)
; The next two descriptors correspond to the staircase between the second and
; third floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(89,20,4,128,86) | #CALL:ld_img(89,25,1,128,86) }
; TABLE#
 49137 DEFB 32,96    ; y=20, z=1; right, up/left
 49139 DEFB 42,208   ; y=25, z=1; left, right, up/right (bottom of the
                     ; staircase)
; The next descriptor corresponds to the front steps of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(89,33,2,128) }
; TABLE#
 49141 DEFB 122,44   ; y=33, z=2; up/left, down/left, down/right
 49143 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u49144 DEFB 196,255

; Location descriptors (x-coordinate 79)
;
; Used by the routine at #R60179. These descriptors correspond to the staircase
; between the first and second floors of the hotel.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(79,27,4,128,,27) | #CALL:ld_img(79,29,4,0,,27) }
; TABLE#
@label=LOCDESCS79
b49146 DEFB 46,24    ; y=27, z=1; up/right, down/left
 49148 DEFB 50,40    ; y=29, z=1; up/left, down/left
 49150 DEFB 255      ; End marker

; Unused
;
; This byte is probably a remnant of a location descriptor table.
u49151 DEFB 255

; Play area foreground tile references
;
; Used by the routine at #R59148. Each byte here is the LSB of the first of a
; pair of half-tiles whose 8 graphic and mask bytes are found in pages
; #b128-#b135. The LSBs of the second half-tiles in each pair can be found at
; #R49408.
@label=FTILEREFS1
b49152 DEFB 0,2,0,4,2,4,0,2,19,21,22,24,22,26,4,27
 49168 DEFB 4,29,30,32,30,4,27,22,4,30,147,146,148,0,178,152
 49184 DEFB 92,2,92,92,2,92,92,2,95,49,96,96,96,53,92,92
 49200 DEFB 92,57,99,99,99,92,92,96,92,99,96,92,99,0,178,152
 49216 DEFB 7,2,0,9,2,4,78,80,81,34,35,37,35,39,40,42
 49232 DEFB 40,44,45,47,45,40,42,83,84,86,87,88,89,91,180,154
 49248 DEFB 92,2,92,92,2,92,98,92,112,101,96,96,96,104,105,105
 49264 DEFB 105,108,109,109,109,105,105,113,98,92,114,115,98,92,180,154
 49280 DEFB 0,2,0,0,2,4,116,117,118,49,51,24,22,53,55,27
 49296 DEFB 4,57,59,32,30,55,62,163,164,165,149,150,151,157,192,182
 49312 DEFB 92,2,92,92,2,92,119,120,122,49,96,96,96,53,92,92
 49328 DEFB 92,57,99,99,99,92,92,167,169,171,96,92,99,0,192,182
 49344 DEFB 12,2,12,15,2,15,123,125,126,49,50,65,67,53,54,69
 49360 DEFB 71,57,72,74,76,54,69,172,174,176,4,187,189,187,0,0
 49376 DEFB 92,2,92,92,2,92,160,161,162,49,96,96,96,53,92,92
 49392 DEFB 92,57,99,99,99,92,92,0,0,0,189,188,190,191

; Unused
s49406 DEFS 2

; Play area foreground tile references
;
; Used by the routine at #R59148. Each byte here is the LSB of the second of a
; pair of half-tiles whose 8 graphic and mask bytes are found in pages
; #b128-#b135. The LSBs of the first half-tiles in each pair can be found at
; #R49152.
@label=FTILEREFS2
b49408 DEFB 1,0,3,5,4,6,17,18,20,22,23,22,25,4,6,4
 49424 DEFB 28,30,31,30,33,6,4,22,4,30,147,146,148,0,179,153
 49440 DEFB 92,92,56,92,92,56,93,94,20,96,52,96,97,92,56,92
 49456 DEFB 98,99,60,99,100,56,92,96,92,99,96,92,99,0,179,153
 49472 DEFB 8,0,3,10,4,6,79,80,82,35,36,35,38,40,41,40
 49488 DEFB 43,45,46,45,48,41,40,83,85,86,88,88,90,91,181,155
 49504 DEFB 92,92,56,92,92,56,92,92,113,96,102,96,103,105,106,105
 49520 DEFB 107,109,110,109,111,106,105,113,92,92,115,115,92,92,181,155
 49536 DEFB 1,0,3,11,4,6,116,118,118,50,52,22,25,54,56,4
 49552 DEFB 28,58,60,30,33,61,63,164,164,166,149,150,151,157,193,183
 49568 DEFB 92,92,56,92,92,56,120,121,123,96,52,96,97,92,56,92
 49584 DEFB 98,99,60,99,100,56,92,168,170,128,96,92,99,0,193,183
 49600 DEFB 13,12,14,16,15,14,124,126,127,50,64,66,25,54,68,70
 49616 DEFB 28,58,73,75,77,68,70,173,175,177,186,186,186,187,0,0
 49632 DEFB 92,92,56,92,92,56,160,162,162,96,52,96,97,92,56,92
 49648 DEFB 98,99,60,99,100,56,92,0,0,0,189,4,187,189

; Unused
;
; The third byte here is probably a remnant of a location descriptor table.
u49662 DEFB 0,0,8

; Location descriptors (x-coordinate 136)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircase leading up to the roof of
; the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(136,8,4,128) }
; TABLE#
@label=LOCDESCS136
b49665 DEFB 8,20     ; y=8, z=1; up/right, down/right
; The next descriptor corresponds to the staircase between the third and fourth
; floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(136,14,1,128) }
; TABLE#
 49667 DEFB 20,20    ; y=14, z=1; up/right, down/right
; The next descriptor corresponds to the staircase between the second and third
; floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(136,20,1,128) }
; TABLE#
 49669 DEFB 32,20    ; y=20, z=1; up/right, down/right
; The next three descriptors correspond to the staircase between the first and
; second floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(136,26,4,128,,26,,10) | #CALL:ld_img(136,28,4,128,,26,,10) |
; #CALL:ld_img(136,30,4,0,,26,,10) }
; TABLE#
 49671 DEFB 44,20    ; y=26, z=1; up/right, down/right
 49673 DEFB 48,24    ; y=28, z=1; up/right, down/left
 49675 DEFB 52,36    ; y=30, z=1; up/left, down/right
; The next descriptor corresponds to a location beside the entrance to the
; police station that is not accessible; it is therefore redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(136,31,2,128) }
; TABLE#
 49677 DEFB 118,204  ; y=31, z=2; left, right, down/left, down/right
; The next two descriptors correspond to the front steps of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(136,32,2,0) | #CALL:ld_img(136,33,2,0,,31) }
; TABLE#
 49679 DEFB 120,220  ; y=32, z=2; left, right, up/right, down/left, down/right
 49681 DEFB 122,252  ; y=33, z=2; left, right, up/left, up/right, down/left,
                     ; down/right
 49683 DEFB 255      ; End marker

; Location descriptors (x-coordinate 137)
;
; Used by the routine at #R60179.
; .
; The first three descriptors correspond to the staircase leading up to the
; roof of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(137,7,1,128,,7,,12) | #CALL:ld_img(137,9,4,0,,7,,12) |
; #CALL:ld_img(137,13,1,128,,7,,12) }
; TABLE#
@label=LOCDESCS137
b49684 DEFB 6,200       ; y=7, z=1; left, right, down/left (top of the
                        ; staircase)
 49686 DEFB 10,36       ; y=9, z=1; up/left, down/right
 49688 DEFB 18,216      ; y=13, z=1; left, right, up/right, down/left (bottom
                        ; of the staircase)
; The next two descriptors correspond to the staircase between the third and
; fourth floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(137,15,1,0,,15,,10) | #CALL:ld_img(137,19,1,128,,15,,10) }
; TABLE#
 49690 DEFB 22,36       ; y=15, z=1; up/left, down/right
 49692 DEFB 30,216      ; y=19, z=1; left, right, up/right, down/left (bottom
                        ; of the staircase)
; The next two descriptors correspond to the staircase between the second and
; third floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(137,21,1,0,,21,,10) | #CALL:ld_img(137,25,1,128,,21,,10) }
; TABLE#
 49694 DEFB 34,36       ; y=21, z=1; up/left, down/right
 49696 DEFB 42,216      ; y=25, z=1; left, right, up/right, down/left (bottom
                        ; of the staircase)
; The next two descriptors correspond to the staircase between the first and
; second floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(137,27,4,0,,27,,10) | #CALL:ld_img(137,31,1,128,,27,,10) }
; TABLE#
 49698 DEFB 46,40       ; y=27, z=1; up/left, down/left
 49700 DEFB 219,236,224 ; y=31, z=1 or 2; left, right, up/left, down/left,
                        ; down/right (bottom of the staircase)
; The next two descriptors correspond to the front steps of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(137,32,2,0,,31) | #CALL:ld_img(137,33,2,0,,31) }
; TABLE#
 49703 DEFB 120,200     ; y=32, z=2; left, right, down/left
 49705 DEFB 122,252     ; y=33, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
 49707 DEFB 255         ; End marker

; Unused
u49708 DEFB 0,0

; Location descriptors (x-coordinate 138)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircase leading up to the roof
; of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(138,10,4,0,,10) | #CALL:ld_img(138,12,1,128,,10) }
; TABLE#
@label=LOCDESCS138
b49710 DEFB 12,36       ; y=10, z=1; up/left, down/right
 49712 DEFB 16,24       ; y=12, z=1; up/right, down/left
; The next two descriptors correspond to the staircase between the third and
; fourth floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(138,16,1,0,,16) | #CALL:ld_img(138,18,1,128,,16) }
; TABLE#
 49714 DEFB 24,36       ; y=16, z=1; up/left, down/right
 49716 DEFB 28,24       ; y=18, z=1; up/right, down/left
; The next two descriptors correspond to the staircase between the second and
; third floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(138,22,1,0,,22) | #CALL:ld_img(138,24,1,128,,22) }
; TABLE#
 49718 DEFB 36,36       ; y=22, z=1; up/left, down/right
 49720 DEFB 40,24       ; y=24, z=1; up/right, down/left
; The next three descriptors correspond to the front steps of the police
; station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(138,31,1,0,,31) | #CALL:ld_img(138,32,2,0,,31) |
; #CALL:ld_img(138,33,2,0,,31) }
; TABLE#
 49722 DEFB 219,204,192 ; y=31, z=1 or 2; left, right, down/left, down/right
 49725 DEFB 120,236     ; y=32, z=2; left, right, up/left, down/left,
                        ; down/right
 49727 DEFB 122,252     ; y=33, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
 49729 DEFB 255         ; End marker

; Unused
u49730 DEFB 0

; Location descriptors (x-coordinate 139)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircase leading up to the roof of
; the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(139,11,4,0) }
; TABLE#
@label=LOCDESCS139
b49731 DEFB 14,40    ; y=11, z=1; up/left, down/left
; The next descriptor corresponds to the staircase between the third and fourth
; floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(139,17,1,0) }
; TABLE#
 49733 DEFB 26,40    ; y=17, z=1; up/left, down/left
; The next descriptor corresponds to the staircase between the second and third
; floors of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(139,23,1,0) }
; TABLE#
 49735 DEFB 38,40    ; y=23, z=1; up/left, down/left
; The next two descriptors correspond to the front steps of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(139,32,2,0,,31) | #CALL:ld_img(139,33,2,0,,31) }
; TABLE#
 49737 DEFB 120,168  ; y=32, z=2; left, up/left, down/left
 49739 DEFB 122,172  ; y=33, z=2; left, up/left, down/left, down/right
 49741 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of location descriptor tables.
@label=XLOCDESCS
u49742 DEFB 0
 49743 DEFB 120,136   ; y=32, z=2; left, down/left
 49745 DEFB 122,172   ; y=33, z=2; left, up/left, down/left, down/right
 49747 DEFB 255       ; End marker
 49748 DEFB 155,194,8 ; y=31, z=1; left, right
 49751 DEFB 255       ; End marker

; Location descriptors (x-coordinate 148)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the step leading up to the top-right edge
; of the roof of the police station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(148,6,1,128) }
; TABLE#
@label=LOCDESCS148
b49752 DEFB 4,24     ; y=6, z=1; up/right, down/left
; The next descriptor corresponds to the right edge of the roof of the police
; station.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(148,7,1,128) }
; TABLE#
 49754 DEFB 6,128    ; y=7, z=1; left
 49756 DEFB 255      ; End marker

; Location descriptors (x-coordinates 152, 232, 248)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircases between the third and
; fourth floors of no. 27 (x=152) and no. 15 (x=248).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(152,14,4,128) | #CALL:ld_img(248,14,4,128) }
; TABLE#
@label=LOCDESCS152
b49757 DEFB 20,20    ; y=14, z=1; up/right, down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 27 (x=152), no. 17 (x=232) and no. 15 (x=248).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(152,26,4,128) | #CALL:ld_img(232,26,4,128) |
; #CALL:ld_img(248,26,4,128) }
; TABLE#
@label=LOCDESCS232
 49759 DEFB 44,20    ; y=26, z=1; up/right, down/right
 49761 DEFB 255      ; End marker

; Unused
u49762 DEFB 0,0

; Location descriptors (x-coordinates 153, 233, 249)
;
; Used by the routine at #R60179.
; .
; The first three descriptors correspond to the staircases between the third
; and fourth floors of no. 27 (x=153) and no. 15 (x=249).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(153,13,4,128,,13,,10) | #CALL:ld_img(153,15,4,0,,13,,10) |
; #CALL:ld_img(153,17,4,128,,13,,10) | #CALL:ld_img(249,13,4,128,,13,,10) |
; #CALL:ld_img(249,15,4,0,,13,,10) | #CALL:ld_img(249,17,4,128,,13,,10) }
; TABLE#
@label=LOCDESCS153
b49764 DEFB 18,200   ; y=13, z=1; left, right, down/left (top of the staircase)
 49766 DEFB 22,36    ; y=15, z=1; up/left, down/right
 49768 DEFB 26,20    ; y=17, z=1; up/right, down/right
; The next descriptor corresponds to the tops of the staircases between the
; first and second floors of no. 27 (x=153), no. 17 (x=233) and no. 15 (x=249).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(153,25,4,128) | #CALL:ld_img(233,25,4,128) |
; #CALL:ld_img(249,25,4,128) }
; TABLE#
@label=LOCDESCS233
 49770 DEFB 42,200   ; y=25, z=1; left, right, down/left
; The next two descriptors correspond to the staircases between the first and
; second floors of no. 27 (x=153), no. 17 (x=233) and no. 15 (x=249).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(153,27,4,0,,27,,10) | #CALL:ld_img(153,29,4,128,,27,,10) |
; #CALL:ld_img(233,27,4,0,,27,,10) | #CALL:ld_img(233,29,4,128,,27,,10) |
; #CALL:ld_img(249,27,4,0,,27,,10) | #CALL:ld_img(249,29,4,128,,27,,10) }
; TABLE#
 49772 DEFB 46,36    ; y=27, z=1; up/left, down/right
 49774 DEFB 50,20    ; y=29, z=1; up/right, down/right
 49776 DEFB 255      ; End marker

; Unused
u49777 DEFB 0

; Location descriptors (x-coordinates 154, 234, 250)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the bottoms of the staircases leading up
; to the roofs of no. 27 (x=154) and no. 17 (x=234).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(154,13,4,128) | #CALL:ld_img(234,13,4,128) }
; TABLE#
@label=LOCDESCS154
b49778 DEFB 18,208   ; y=13, z=1; left, right, up/right
; The next two descriptors correspond to the staircase between the third and
; fourth floors of no. 27 (x=154), inaccessible locations between the third and
; fourth floors of no. 17 (x=234), and the staircase between the third and
; fourth floors of no. 15 (x=250).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(154,16,4,0,,16) | #CALL:ld_img(154,18,4,0,,16) |
; #CALL:ld_img(234,16,4,0,,16) | #CALL:ld_img(234,18,4,0,,16) |
; #CALL:ld_img(250,16,4,0,,16) | #CALL:ld_img(250,18,4,0,,16) }
; TABLE#
@label=LOCDESCS250
 49780 DEFB 24,40    ; y=16, z=1; up/left, down/left
 49782 DEFB 28,36    ; y=18, z=1; up/left, down/right
; The next descriptor corresponds to the bottoms of the staircases between the
; second and third floors of no. 27 (x=154), no. 17 (x=234) and no. 15 (x=250).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(154,25,4,128) | #CALL:ld_img(234,25,4,128) |
; #CALL:ld_img(250,25,4,128) }
; TABLE#
 49784 DEFB 42,208   ; y=25, z=1; left, right, up/right
; The next two descriptors correspond to the staircases between the first and
; second floors of no. 27 (x=154), no. 17 (x=234) and no. 15 (x=250).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(154,28,4,0,,28,,10) | #CALL:ld_img(154,30,4,0,,28,,10) |
; #CALL:ld_img(234,28,4,0,,28,,10) | #CALL:ld_img(234,30,4,0,,28,,10) |
; #CALL:ld_img(250,28,4,0,,28,,10) | #CALL:ld_img(250,30,4,0,,28,,10) }
; TABLE#
 49786 DEFB 48,40    ; y=28, z=1; up/left, down/left
 49788 DEFB 52,36    ; y=30, z=1; up/left, down/right
 49790 DEFB 255      ; End marker

; Unused
;
; This byte is probably a remnant of a location descriptor table.
u49791 DEFB 92

; Location descriptors (x-coordinate 155, 235, 251)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the location on the third floor of no. 17
; at which there could be (but isn't) a staircase leading up to the fourth
; floor (x=235).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(235,19,4,0) }
; TABLE#
@label=LOCDESCS235
b49792 DEFB 30,192      ; y=19, z=1; left, right
; The next two descriptors correspond to the staircases leading up to the roofs
; of no. 27 (x=155) and no. 17 (x=235).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(155,10,4,128,,10) | #CALL:ld_img(155,12,4,128,,10) |
; #CALL:ld_img(235,10,4,128,,10) | #CALL:ld_img(235,12,4,128,,10) }
; TABLE#
@label=LOCDESCS155
 49794 DEFB 12,20       ; y=10, z=1; up/right, down/right
 49796 DEFB 16,24       ; y=12, z=1; up/right, down/left
; The next descriptor corresponds to the bottoms of the staircases between the
; third and fourth floors of no. 27 (x=155) and no. 15 (x=251); the
; corresponding location in no. 17 (x=235, at which there is no staircase) is
; dealt with by the first descriptor in this block.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(155,19,4,0) | #CALL:ld_img(235,19,4,0) }
; TABLE#
@label=LOCDESCS251
 49798 DEFB 30,224      ; y=19, z=1; left, right, up/left
; The next two descriptors correspond to the staircases between the second and
; third floors of no. 27 (x=155), no. 17 (x=235) and no. 15 (x=251).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(155,22,4,128,,22) | #CALL:ld_img(155,24,4,128,,22) |
; #CALL:ld_img(235,22,4,128,,22) | #CALL:ld_img(235,24,4,128,,22) |
; #CALL:ld_img(251,22,4,128,,22) | #CALL:ld_img(251,24,4,128,,22) }
; TABLE#
 49800 DEFB 36,20       ; y=22, z=1; up/right, down/right
 49802 DEFB 40,24       ; y=24, z=1; up/right, down/left
; The next three descriptors correspond to the front doors of no. 27 (x=155),
; no. 17 (x=235) and no. 15 (x=251).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(155,31,2,0) | #CALL:ld_img(235,31,2,0) |
; #CALL:ld_img(251,31,2,0) }
; TABLE#
 49804 DEFB 219,228,225 ; y=31, z=1 or 2; left, right, up/left, down/right
                        ; (door open)
 49807 DEFB 54,224      ; y=31, z=1; left, right, up/left (inside, door closed)
 49809 DEFB 118,68      ; y=31, z=2; right, down/right (outside, door closed)
; The next two descriptors correspond to the front steps of no. 27 (x=155), no.
; 17 (x=235) and no. 15 (x=251).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(155,32,2,0,,31) | #CALL:ld_img(155,33,2,0,,31) |
; #CALL:ld_img(235,32,2,0,,31) | #CALL:ld_img(235,33,2,0,,31) |
; #CALL:ld_img(251,32,2,0,,31) | #CALL:ld_img(251,33,2,0,,31) }
; TABLE#
 49811 DEFB 120,84      ; y=32, z=2; right, up/right, down/right
 49813 DEFB 122,92      ; y=33, z=2; right, up/right, down/left, down/right
 49815 DEFB 255         ; End marker

; Unused
u49816 DEFB 0

; Location descriptors (x-coordinates 156, 236, 252)
;
; Used by the routine at #R60179.
; .
; The first three descriptors correspond to the staircases leading up to the
; roofs of no. 27 (x=156) and no. 17 (x=236).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(156,7,1,0,,7,,10) | #CALL:ld_img(156,9,4,128,,7,,10) |
; #CALL:ld_img(156,11,4,0,,7,,10) | #CALL:ld_img(236,7,1,0,,7,,10) |
; #CALL:ld_img(236,9,4,128,,7,,10) | #CALL:ld_img(236,11,4,0,,7,,10) }
; TABLE#
@label=LOCDESCS156
b49817 DEFB 6,196       ; y=7, z=1; left, right, down/right (top of the
                        ; staircase)
 49819 DEFB 10,24       ; y=9, z=1; up/right, down/left
 49821 DEFB 14,40       ; y=11, z=1; up/left, down/left
; The next descriptor is identical to the previous one, and is therefore
; redundant.
 49823 DEFB 14,40       ; y=11, z=1; up/left, down/left
; The next descriptor corresponds to the tops of the staircases between the
; second and third floors of no. 27 (x=156), no. 17 (x=236) and no. 15 (x=252).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(156,19,4,0) | #CALL:ld_img(236,19,4,0) |
; #CALL:ld_img(252,19,4,0) }
; TABLE#
@label=LOCDESCS252
 49825 DEFB 30,196      ; y=19, z=1; left, right, down/right (top of the
                        ; staircase)
; The next two descriptors correspond to the staircases between the second and
; third floors of no. 27 (x=156), no. 17 (x=236) and no. 15 (x=252).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(156,21,4,128,,21) | #CALL:ld_img(156,23,4,0,,21) |
; #CALL:ld_img(236,21,4,128,,21) | #CALL:ld_img(236,23,4,0,,21) |
; #CALL:ld_img(252,21,4,128,,21) | #CALL:ld_img(252,23,4,0,,21) | }
; TABLE#
 49827 DEFB 34,24       ; y=21, z=1; up/right, down/left
 49829 DEFB 38,40       ; y=23, z=1; up/left, down/left
; The next two descriptors correspond to the front doors of no. 27 (x=156), no.
; 17 (x=236) and no. 15 (x=252).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(156,31,2,0) | #CALL:ld_img(236,31,2,0) |
; #CALL:ld_img(252,31,2,0) }
; TABLE#
 49831 DEFB 219,204,193 ; y=31, z=1 or 2; left, right, down/left, down/right
                        ; (door open)
 49834 DEFB 118,140     ; y=31, z=2; left, down/left, down/right (outside, door
                        ; closed)
; The next two descriptors correspond to the front steps of no. 27 (x=156), no.
; 17 (x=236) and no. 15 (x=252).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(156,32,2,0,,31) | #CALL:ld_img(156,33,2,0,,31) |
; #CALL:ld_img(236,32,2,0,,31) | #CALL:ld_img(236,33,2,0,,31) |
; #CALL:ld_img(252,32,2,0,,31) | #CALL:ld_img(252,33,2,0,,31) }
; TABLE#
 49836 DEFB 120,236     ; y=32, z=2; left, right, up/left, down/left,
                        ; down/right
 49838 DEFB 122,252     ; y=33, z=2; left, right, up/left, up/right, down/left,
                        ; down/right
 49840 DEFB 255         ; End marker

; Unused
u49841 DEFB 0

; Location descriptors (x-coordinates 157, 237, 253)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircases leading up to the
; roofs of no. 27 (x=157) and no. 17 (x=237).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(157,8,1,0) | #CALL:ld_img(237,8,1,0) }
; TABLE#
@label=LOCDESCS157
b49842 DEFB 8,40     ; y=8, z=1; up/left, down/left
; The next descriptor corresponds to the staircases between the second and
; third floors of no. 27 (x=157), no. 17 (x=237) and no. 15 (x=253).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(157,20,4,0) | #CALL:ld_img(237,20,4,0) |
; #CALL:ld_img(253,20,4,0) }
; TABLE#
@label=LOCDESCS253
 49844 DEFB 32,40    ; y=20, z=1; up/left, down/left
; The next two descriptors correspond to the front steps of no. 27 (x=157), no.
; 17 (x=237) and no. 15 (x=253).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(157,32,2,0,,31) | #CALL:ld_img(157,33,2,0,,31) |
; #CALL:ld_img(237,32,2,0,,31) | #CALL:ld_img(237,33,2,0,,31) |
; #CALL:ld_img(253,32,2,0,,31) | #CALL:ld_img(253,33,2,0,,31) }
; TABLE#
 49846 DEFB 120,168  ; y=32, z=2; left, up/left, down/left
 49848 DEFB 122,172  ; y=33, z=2; left, up/left, down/left, down/right
 49850 DEFB 255      ; End marker

; Location descriptors (x-coordinates 158, 238)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the right edge of the roof of no. 27
; (x=158).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(158,7,1,128) }
; TABLE#
@label=LOCDESCS158
b49851 DEFB 6,128    ; y=7, z=1; left
; The next descriptor corresponds to the far right wall on the top floors of
; no. 27 (x=158) and no. 17 (x=238).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(158,13,4,128) | #CALL:ld_img(238,13,4,128) }
; TABLE#
@label=LOCDESCS238
 49853 DEFB 18,128   ; y=13, z=1; left
; The next descriptor corresponds to the far right wall on the third floors of
; no. 27 (x=158) and no. 17 (x=238).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(158,19,4,128) | #CALL:ld_img(238,19,4,128) }
; TABLE#
 49855 DEFB 30,128   ; y=19, z=1; left
; The next descriptor corresponds to the far right wall on the second floors of
; no. 27 (x=158) and no. 17 (x=238).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(158,25,4,128) | #CALL:ld_img(238,25,4,128) }
; TABLE#
 49857 DEFB 42,128   ; y=25, z=1; left
; The next descriptor corresponds to the far right wall on the first floors of
; no. 27 (x=158) and no. 17 (x=238).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(158,31,4,128) | #CALL:ld_img(238,31,4,128) }
; TABLE#
 49859 DEFB 54,128   ; y=31, z=1; left
 49861 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u49862 DEFB 236,255

; Location descriptors (x-coordinate 181)
;
; Used by the routine at #R60179. These descriptors correspond to the fire
; escape on the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(181,6,1,0) | #CALL:ld_img(181,7,1,0) |
; #CALL:ld_img(181,12,2,0) | #CALL:ld_img(181,18,2,0) |
; #CALL:ld_img(181,24,2,0) }
; TABLE#
@label=LOCDESCS181
b49864 DEFB 194,204,196 ; y=6, z=1 or 2; left, right, down/left, down/right
 49867 DEFB 6,240       ; y=7, z=1; left, right, up/left, up/right
 49869 DEFB 80,24       ; y=12, z=2; up/right, down/left
 49871 DEFB 92,24       ; y=18, z=2; up/right, down/left
 49873 DEFB 104,24      ; y=24, z=2; up/right, down/left
 49875 DEFB 255         ; End marker

; Location descriptors (x-coordinate 175)
;
; Used by the routine at #R60179. These descriptors correspond to the top-left
; edge of the roof of the apartment building next to no. 19, and the left edges
; of the fire escape on that building on the second, third and top floors. They
; are used to check whether Sam is going to step off the building at one of
; those locations (see #R41494).
; .
; The first descriptor corresponds to the top-left edge of the roof of the
; apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(175,6,1,0) }
; TABLE#
@label=LOCDESCS175
b49876 DEFB 130,194,3 ; y=6, z=1; left, right
; The next three descriptors correspond to the left edges of the fire escape on
; the top, third and second floors of the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(175,11,2,0) | #CALL:ld_img(175,17,2,0) |
; #CALL:ld_img(175,23,2,0) }
; TABLE#
 49879 DEFB 167,194,3 ; y=11, z=2; left, right (top floor)
 49882 DEFB 173,194,3 ; y=17, z=2; left, right (third floor)
 49885 DEFB 179,194,3 ; y=23, z=2; left, right (second floor)
 49888 DEFB 255       ; End marker

; Unused
u49889 DEFB 0

; Location descriptors (x-coordinate 177)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the step up to the top-left edge of the
; roof of the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(177,7,1,0) }
; TABLE#
@label=LOCDESCS177
b49890 DEFB 6,224     ; y=7, z=1; left, right, up/left
; The next three descriptors correspond to the fire escape on the apartment
; building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(177,10,2,0) | #CALL:ld_img(177,16,2,0) |
; #CALL:ld_img(177,22,2,0) }
; TABLE#
 49892 DEFB 76,24     ; y=10, z=2; up/right, down/left
 49894 DEFB 88,24     ; y=16, z=2; up/right, down/left
 49896 DEFB 100,24    ; y=22, z=2; up/right, down/left
; The next descriptor corresponds to the left edge of the fire escape on the
; first floor of the apartment building next to no. 19. It is used to check
; whether Sam is going to step off the fire escape at that location (see
; #R42262).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(177,28,2,0) }
; TABLE#
@label=FIREESCAPE
 49898 DEFB 184,146,6 ; y=28, z=2; left, up/right
 49901 DEFB 255       ; End marker

; Unused
u49902 DEFB 0

; Location descriptors (x-coordinate 178)
;
; Used by the routine at #R60179. These descriptors correspond to the fire
; escape on the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(178,9,2,0) | #CALL:ld_img(178,15,2,0) |
; #CALL:ld_img(178,21,2,0) | #CALL:ld_img(178,27,2,0) }
; TABLE#
@label=LOCDESCS178
b49903 DEFB 74,24    ; y=9, z=2; up/right, down/left
 49905 DEFB 86,24    ; y=15, z=2; up/right, down/left
 49907 DEFB 98,24    ; y=21, z=2; up/right, down/left
 49909 DEFB 110,24   ; y=27, z=2; up/right, down/left
 49911 DEFB 255      ; End marker

; Unused
u49912 DEFB 0

; Location descriptors (x-coordinate 15)
;
; Used by the routine at #R60179. These descriptors correspond to the doorway
; of the right-hand shop under the apartments next to no. 74.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(15,33,2,128) }
; TABLE#
@label=LOCDESCS15
b49913 DEFB 221,68,65 ; y=33, z=1 or 2; right, down/right (door open)
 49916 DEFB 58,64     ; y=33, z=1; right (inside, door closed)
 49918 DEFB 122,68    ; y=33, z=2; right, down/right (outside, door closed)
; This block of location descriptors is implicitly terminated by the page
; boundary.

; Unused
;
; This byte is probably a remnant of a location descriptor table.
u49920 DEFB 6

; Location descriptors (x-coordinate 179)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to a location near the top of the fire
; escape on the roof of the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(179,7,1,128) }
; TABLE#
@label=LOCDESCS179
b49921 DEFB 6,208    ; y=7, z=1; left, right, up/right
; The next four descriptors correspond to the fire escape on the apartment
; building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(179,8,2,0) | #CALL:ld_img(179,14,2,0) |
; #CALL:ld_img(179,20,2,0) | #CALL:ld_img(179,26,2,0) }
; TABLE#
 49923 DEFB 72,24    ; y=8, z=2; up/right, down/left
 49925 DEFB 84,24    ; y=14, z=2; up/right, down/left
 49927 DEFB 96,24    ; y=20, z=2; up/right, down/left
 49929 DEFB 108,24   ; y=26, z=2; up/right, down/left
 49931 DEFB 255      ; End marker

; Location descriptors (x-coordinate 180)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to locations near the top of the fire
; escape on the roof of the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(180,6,1,0) | #CALL:ld_img(180,7,1,128) }
; TABLE#
@label=LOCDESCS180
b49932 DEFB 4,72     ; y=6, z=1; right, down/left
 49934 DEFB 6,208    ; y=7, z=1; left, right, up/right
; The next four descriptors correspond to the fire escape on the apartment
; building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(180,7,2,0) | #CALL:ld_img(180,13,2,0) |
; #CALL:ld_img(180,19,2,0) | #CALL:ld_img(180,25,2,0) }
; TABLE#
 49936 DEFB 70,24    ; y=7, z=2; up/right, down/left
 49938 DEFB 82,24    ; y=13, z=2; up/right, down/left
 49940 DEFB 94,24    ; y=19, z=2; up/right, down/left
 49942 DEFB 106,24   ; y=25, z=2; up/right, down/left
 49944 DEFB 255      ; End marker

; Location descriptors (x-coordinate 184)
;
; Used by the routine at #R60179. These descriptors correspond to the right
; edges of the fire escape on the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(184,11,2,0) | #CALL:ld_img(184,17,2,0) |
; #CALL:ld_img(184,23,2,0) }
; TABLE#
@label=LOCDESCS184
b49945 DEFB 78,128   ; y=11, z=2; left (top floor)
 49947 DEFB 90,128   ; y=17, z=2; left (third floor)
 49949 DEFB 102,128  ; y=23, z=2; left (second floor)
 49951 DEFB 255      ; End marker

; Location descriptors (most x-coordinates)
;
; Used by the routine at #R60179.
; .
; The first four descriptors correspond to the left edge of the roof of the
; apartment building next to no. 74, and the far left walls inside that
; building on the top, third and second floors (x=0).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(0,7,1,0) | #CALL:ld_img(0,13,1,0) | #CALL:ld_img(0,19,1,0) |
; #CALL:ld_img(0,25,1,0) }
; TABLE#
@label=LOCDESCS0
b49952 DEFB 6,64      ; y=7, z=1; right (roof)
 49954 DEFB 18,64     ; y=13, z=1; right (top floor)
 49956 DEFB 30,64     ; y=19, z=1; right (third floor)
 49958 DEFB 42,64     ; y=25, z=1; right (second floor)
; The next three descriptors correspond to the doorway of the shop at the far
; left of town (x=0).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(0,33,2,128) }
; TABLE#
 49960 DEFB 221,68,65 ; y=33, z=1 or 2; right, down/right (door open)
 49963 DEFB 58,64     ; y=33, z=1; right (inside, door closed)
 49965 DEFB 122,4     ; y=33, z=2; down/right (outside, door closed)
; The following empty location descriptor table corresponds to x-coordinates
; 1-5, 8, 17-20, 24-29, 31, 33-37, 46-52, 54-56, 58-61, 63, 64, 70, 72, 73, 84,
; 85, 87, 93-99, 101, 102, 104-111, 119-123, 127-132, 134, 140-146, 159-174,
; 185-189, 191, 192, 199-203, 214-221, 227-229, 241-245 and 255; at these
; x-coordinates and any y-coordinate, a character can move left or right only.
@label=LOCDESCS1
 49967 DEFB 255       ; End marker

; Keypress offset table
;
; Used by the routine at #R60146. Each non-zero entry in this table corresponds
; to a game key, and points to an entry in the table of keypress-handling
; routine addresses at #R60672.
@label=KEYTABLE
@ssub=DEFB 60690%256+1
b49968 DEFB 19       ; '0': Knock on or open a door
 49969 DEFB 0        ; '1': Unused
 49970 DEFB 0        ; '2': Unused
 49971 DEFB 0        ; '3': Unused
 49972 DEFB 0        ; '4': Unused
@ssub=DEFB 60678%256+1
 49973 DEFB 7        ; '5': Left (fast)
@ssub=DEFB 60674%256+1
 49974 DEFB 3        ; '6': Down (fast)
@ssub=DEFB 60672%256+1
 49975 DEFB 1        ; '7': Up (fast)
@ssub=DEFB 60676%256+1
 49976 DEFB 5        ; '8': Right (fast)
 49977 DEFB 0        ; '9': Unused
 49978 DEFB 0        ; ':': Unused
 49979 DEFB 0        ; ';': Unused
 49980 DEFB 0        ; '<': Unused
 49981 DEFB 0        ; '=': Unused
 49982 DEFB 0        ; '>': Unused
 49983 DEFB 0        ; '?': Unused
 49984 DEFB 0        ; '@': Unused
@ssub=DEFB 60674%256+1
 49985 DEFB 3        ; 'A': Down (fast)
@ssub=DEFB 60694%256+1
 49986 DEFB 23       ; 'B': Raise/lower blind
@ssub=DEFB 60706%256+1
 49987 DEFB 35       ; 'C': Use hook
@ssub=DEFB 60688%256+1
 49988 DEFB 17       ; 'D': Change disguise
 49989 DEFB 0        ; 'E': Unused
@ssub=DEFB 60696%256+1
 49990 DEFB 25       ; 'F': Fuse
@ssub=DEFB 60704%256+1
 49991 DEFB 33       ; 'G': Get object
 49992 DEFB 0        ; 'H': Unused
 49993 DEFB 0        ; 'I': Unused
@ssub=DEFB 60700%256+1
 49994 DEFB 29       ; 'J': Joystick
@ssub=DEFB 60690%256+1
 49995 DEFB 19       ; 'K': Knock on or open a door
@ssub=DEFB 60692%256+1
 49996 DEFB 21       ; 'L': Light on/off
@ssub=DEFB 60698%256+1
 49997 DEFB 27       ; 'M': Toggle message speed
 49998 DEFB 0        ; 'N': Unused
@ssub=DEFB 60678%256+1
 49999 DEFB 7        ; 'O': Left (fast)
@ssub=DEFB 60676%256+1
 50000 DEFB 5        ; 'P': Right (fast)
@ssub=DEFB 60672%256+1
 50001 DEFB 1        ; 'Q': Up (fast)
@ssub=DEFB 60708%256+1
 50002 DEFB 37       ; 'R': Forward roll
@ssub=DEFB 60710%256+1
 50003 DEFB 39       ; 'S': Somersault
@ssub=DEFB 60702%256+1
 50004 DEFB 31       ; 'T': Telephone
 50005 DEFB 0        ; 'U': Unused
 50006 DEFB 0        ; 'V': Unused
 50007 DEFB 0        ; 'W': Unused
 50008 DEFB 0        ; 'X': Unused
 50009 DEFB 0        ; 'Y': Unused
 50010 DEFB 0        ; 'Z': Unused
 50011 DEFB 0        ; '[': Unused
 50012 DEFB 0        ; '\': Unused
 50013 DEFB 0        ; ']': Unused
 50014 DEFB 0        ; '#CHR8593': Unused
 50015 DEFB 0        ; '_': Unused
 50016 DEFB 0        ; '#CHR163': Unused
@ssub=DEFB 60682%256+1
 50017 DEFB 11       ; 'a': Down (slow)
@ssub=DEFB 60694%256+1
 50018 DEFB 23       ; 'b': Raise/lower blind
@ssub=DEFB 60706%256+1
 50019 DEFB 35       ; 'c': Use hook
@ssub=DEFB 60688%256+1
 50020 DEFB 17       ; 'd': Change disguise
 50021 DEFB 0        ; 'e': Unused
@ssub=DEFB 60696%256+1
 50022 DEFB 25       ; 'f': Fuse
@ssub=DEFB 60704%256+1
 50023 DEFB 33       ; 'g': Get object
 50024 DEFB 0        ; 'h': Unused
 50025 DEFB 0        ; 'i': Unused
@ssub=DEFB 60700%256+1
 50026 DEFB 29       ; 'j': Joystick
@ssub=DEFB 60690%256+1
 50027 DEFB 19       ; 'k': Knock on or open a door
@ssub=DEFB 60692%256+1
 50028 DEFB 21       ; 'l': Light on/off
@ssub=DEFB 60698%256+1
 50029 DEFB 27       ; 'm': Toggle message speed
 50030 DEFB 0        ; 'n': Unused
@ssub=DEFB 60686%256+1
 50031 DEFB 15       ; 'o': Left (slow)
@ssub=DEFB 60684%256+1
 50032 DEFB 13       ; 'p': Right (slow)
@ssub=DEFB 60680%256+1
 50033 DEFB 9        ; 'q': Up (slow)
@ssub=DEFB 60708%256+1
 50034 DEFB 37       ; 'r': Forward roll
@ssub=DEFB 60710%256+1
 50035 DEFB 39       ; 's': Somersault
@ssub=DEFB 60702%256+1
 50036 DEFB 31       ; 't': Telephone
 50037 DEFB 0        ; 'u': Unused
 50038 DEFB 0        ; 'v': Unused
 50039 DEFB 0        ; 'w': Unused
 50040 DEFB 0        ; 'x': Unused
 50041 DEFB 0        ; 'y': Unused
 50042 DEFB 0        ; 'z': Unused
 50043 DEFB 0        ; '{': Unused
 50044 DEFB 0        ; '|': Unused
 50045 DEFB 0        ; '}': Unused
 50046 DEFB 0        ; '~': Unused
 50047 DEFB 0        ; '#CHR169': Unused

; Location descriptors (x-coordinates 223, 239)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the top-left edge of the roof of no. 17
; (x=223). It is used to check whether Sam is going to step off the roof or
; away from the edge of the roof (see #R41238).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(223,6,1,0) }
; TABLE#
@label=LOCDESCS223
b50048 DEFB 130,195,2 ; y=6, z=1; left, right
; The next three descriptors correspond to the far left walls of no. 17 (x=223)
; and no. 15 (x=239).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(223,13,4,0) | #CALL:ld_img(223,19,4,0) |
; #CALL:ld_img(223,25,4,0) | #CALL:ld_img(239,13,4,0) |
; #CALL:ld_img(239,19,4,0) | #CALL:ld_img(239,25,4,0) }
; TABLE#
@label=LOCDESCS239
 50051 DEFB 18,64     ; y=13, z=1; right (top floor)
 50053 DEFB 30,64     ; y=19, z=1; right (third floor)
 50055 DEFB 42,64     ; y=25, z=1; right (second floor)
; The next three descriptors correspond to the doorways of the shops under no.
; 17 (x=223) and no. 15 (x=239).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(223,33,2,128) | #CALL:ld_img(239,33,2,128) }
; TABLE#
 50057 DEFB 221,76,65 ; y=33, z=1 or 2; right, down/left, down/right (door
                      ; open)
 50060 DEFB 58,64     ; y=33, z=1; right (inside, door closed)
 50062 DEFB 122,76    ; y=33, z=2; right, down/left, down/right (outside, door
                      ; closed)
 50064 DEFB 255       ; End marker

; Location descriptor (x-coordinate 225)
;
; Used by the routine at #R60179. This descriptor corresponds to the step down
; from the top edge of the roof of no. 17.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(225,6,1,128) }
; TABLE#
@label=LOCDESCS225
b50065 DEFB 4,132    ; y=6, z=1; left, down/right
 50067 DEFB 255      ; End marker

; Location descriptor (x-coordinate 226)
;
; Used by the routine at #R60179. This descriptor corresponds to the step up to
; the top edge of the roof of no. 17.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(226,7,1,0) }
; TABLE#
@label=LOCDESCS226
b50068 DEFB 6,96     ; y=7, z=1; right, up/left
 50070 DEFB 255      ; End marker

; Unused
;
; This byte is probably a remnant of a location descriptor table.
u50071 DEFB 255

; Location descriptors (x-coordinates 7, 231, 247)
;
; Used by the routine at #R60179.
; .
; The first three descriptors here invoke the special location handler routine
; whose address is at #R40982 when a character moves left at the designated
; locations. However, the handler routine does nothing special, and therefore
; the descriptors are redundant.
; .
; The first descriptor corresponds to locations between the stairwell and the
; first window to the left of the stairwell on the top floor of the apartment
; building next to no. 74 (x=7), between the second and third windows from the
; left on the top floor of no. 17 (x=231), and between the second and third
; windows from the left on the top floor of no. 15 (x=247).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(7,13,4,0) | #CALL:ld_img(231,13,4,0) |
; #CALL:ld_img(247,13,4,0) }
; TABLE#
@label=LOCDESCS7
b50072 DEFB 137,194,1 ; y=13, z=1; left, right
; The next descriptor corresponds to locations between the stairwell and the
; first window to the left of the stairwell on the third floor of the apartment
; building next to no. 74 (x=7), between the second and third windows from the
; left on the third floor of no. 17 (x=231), and between the second and third
; windows from the left on the third floor of no. 15 (x=247).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(7,19,4,0) | #CALL:ld_img(231,19,4,0) |
; #CALL:ld_img(247,19,4,0) }
; TABLE#
 50075 DEFB 143,194,1 ; y=19, z=1; left, right
; The next descriptor corresponds to locations between the stairwell and the
; first window to the left of the stairwell on the second floor of the
; apartment building next to no. 74 (x=7), between the second and third windows
; from the left on the second floor of no. 17 (x=231), and between the second
; and third windows from the left on the second floor of no. 15 (x=247).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(7,25,4,0) | #CALL:ld_img(231,25,4,0) |
; #CALL:ld_img(247,25,4,0) }
; TABLE#
 50078 DEFB 149,194,1 ; y=25, z=1; left, right (second floor)
; The next descriptor corresponds to the right sides of the walls between the
; shop at the far left of town and the stairwell in the apartment building next
; to no. 74 (x=7), between no. 17 and the shop under no. 17 (x=231), and
; between no. 15 and the shop under no. 15 (x=247).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(7,31,1,0) | #CALL:ld_img(231,31,4,0) |
; #CALL:ld_img(247,31,4,0) }
; TABLE#
 50081 DEFB 54,64     ; y=31, z=1; right
 50083 DEFB 255       ; End marker

; Location descriptor (x-coordinates 6, 230, 246)
;
; Used by the routine at #R60179. This descriptor corresponds to the far right
; walls in the shop at the far left of town (x=6), the shop under no. 17
; (x=230), and the shop under no. 15 (x=246).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(6,33,1,128) | #CALL:ld_img(230,33,1,128) |
; #CALL:ld_img(246,33,1,128) }
; TABLE#
@label=LOCDESCS6
b50084 DEFB 58,128   ; y=33, z=1; left
 50086 DEFB 255      ; End marker

; Location descriptor (x-coordinates 9, 193)
;
; Used by the routine at #R60179. This descriptor corresponds to the steps
; leading up from the road to the first floor of the apartment building next to
; no. 74 (x=9), and the steps leading up from the road to the first floor of
; the apartment building next to no. 74 (x=193).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(9,34,2,128) | #CALL:ld_img(193,34,2,128) }
; TABLE#
@label=LOCDESCS9
b50087 DEFB 124,24   ; y=34, z=2; up/right, down/left
 50089 DEFB 255      ; End marker

; Location descriptors (x-coordinates 11, 195)
;
; Used by the routine at #R60179.
; .
; The first two descriptors correspond to the staircases between the top floor
; and the roof in the apartment building next to no. 74 (x=11) and the
; apartment building next to no. 19 (x=195).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(11,7,1,0,,7) | #CALL:ld_img(11,9,4,0,,7) |
; #CALL:ld_img(195,7,1,0,,7) | #CALL:ld_img(195,9,4,0,,7) }
; TABLE#
@label=LOCDESCS11
b50090 DEFB 6,200     ; y=7, z=1; left, right, down/left
 50092 DEFB 10,36     ; y=9, z=1; up/left, down/right
; The next two descriptors correspond to the staircases between the third and
; top floors of the apartment building next to no. 74 (x=11) and the apartment
; building next to no. 19 (x=195).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(11,13,1,0,,13) | #CALL:ld_img(11,15,1,0,,13) |
; #CALL:ld_img(195,13,1,0,,13) | #CALL:ld_img(195,15,1,0,,13) }
; TABLE#
 50094 DEFB 18,200    ; y=13, z=1; left, right, down/left
 50096 DEFB 22,36     ; y=15, z=1; up/left, down/right
; The next two descriptors correspond to the staircases between the second and
; third floors of the apartment building next to no. 74 (x=11) and the
; apartment building next to no. 19 (x=195).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(11,19,1,0,,19) | #CALL:ld_img(11,21,1,0,,19) |
; #CALL:ld_img(195,19,1,0,,19) | #CALL:ld_img(195,21,1,0,,19) }
; TABLE#
 50098 DEFB 30,200    ; y=19, z=1; left, right, down/left
 50100 DEFB 34,36     ; y=21, z=1; up/left, down/right
; The next two descriptors correspond to the staircases between the first and
; second floors of the apartment building next to no. 74 (x=11) and the
; apartment building next to no. 19 (x=195).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(11,25,1,0,,25) | #CALL:ld_img(11,27,1,0,,25) |
; #CALL:ld_img(195,25,1,0,,25) | #CALL:ld_img(195,27,1,0,,25) }
; TABLE#
 50102 DEFB 42,200    ; y=25, z=1; left, right, down/left
 50104 DEFB 46,36     ; y=27, z=1; up/left, down/right
; The next descriptor corresponds to the steps leading up to the first floor of
; the apartment building next to no. 74 (x=11) and the apartment building next
; to no. 19 (x=195).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(11,32,2,128) | #CALL:ld_img(195,32,2,128) }
; TABLE#
 50106 DEFB 220,24,16 ; y=32, z=1 or 2; up/right, down/left
 50109 DEFB 255       ; End marker

; Location descriptors (x-coordinates 10, 194)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircases between the top floor and
; the roof in the apartment building next to no. 74 (x=10) and the apartment
; building next to no. 19 (x=194).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(10,8,4,128) | #CALL:ld_img(194,8,4,128) }
; TABLE#
@label=LOCDESCS10
b50110 DEFB 8,20     ; y=8, z=1; up/right, down/right
; The next descriptor corresponds to the staircases between the third and top
; floors of the apartment building next to no. 74 (x=10) and the apartment
; building next to no. 19 (x=194).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(10,14,1,128) | #CALL:ld_img(194,14,1,128) }
; TABLE#
 50112 DEFB 20,20    ; y=14, z=1; up/right, down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of the apartment building next to no. 74 (x=10) and the
; apartment building next to no. 19 (x=194).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(10,20,1,128) | #CALL:ld_img(194,20,1,128) }
; TABLE#
 50114 DEFB 32,20    ; y=20, z=1; up/right, down/right
; The next descriptor corresponds to the staircases between the first and
; second floors of the apartment building next to no. 74 (x=10) and the
; apartment building next to no. 19 (x=194).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(10,26,1,128) | #CALL:ld_img(194,26,1,128) }
; TABLE#
 50116 DEFB 44,20    ; y=26, z=1; up/right, down/right
; The next descriptor corresponds to the steps leading up to the first floor of
; the apartment building next to no. 74 (x=10) and the apartment building next
; to no. 19 (x=194).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(10,33,2,128) | #CALL:ld_img(194,33,2,128) }
; TABLE#
 50118 DEFB 122,24   ; y=33, z=2; up/right, down/left
 50120 DEFB 255      ; End marker

; Location descriptors (x-coordinates 12, 196)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the staircases between the top floor and
; the roof in the apartment building next to no. 74 (x=12) and the apartment
; building next to no. 19 (x=196).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(12,10,1,128) | #CALL:ld_img(196,10,1,128) }
; TABLE#
@label=LOCDESCS12
b50121 DEFB 12,36       ; y=10, z=1; up/left, down/right
; The next descriptor corresponds to the staircases between the third and top
; floors of the apartment building next to no. 74 (x=12) and the apartment
; building next to no. 19 (x=196).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(12,16,1,128) | #CALL:ld_img(196,16,1,128) }
; TABLE#
 50123 DEFB 24,36       ; y=16, z=1; up/left, down/right
; The next descriptor corresponds to the staircases between the second and
; third floors of the apartment building next to no. 74 (x=12) and the
; apartment building next to no. 19 (x=196).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(12,22,1,128) | #CALL:ld_img(196,22,1,128) }
; TABLE#
 50125 DEFB 36,36       ; y=22, z=1; up/left, down/right
; The next descriptor corresponds to the staircases between the first and
; second floors of the apartment building next to no. 74 (x=12) and the
; apartment building next to no. 19 (x=196).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(12,28,1,128) | #CALL:ld_img(196,28,1,128) }
; TABLE#
 50127 DEFB 48,36       ; y=28, z=1; up/left, down/right
; The next descriptor corresponds to the steps leading down from the first
; floor of the apartment building next to no. 74 (x=12) and the apartment
; building next to no. 19 (x=196).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(12,31,2,0) | #CALL:ld_img(196,31,2,0) }
; TABLE#
 50129 DEFB 219,200,192 ; y=31, z=1 or 2; left, right, down/left
 50132 DEFB 255         ; End marker

; Location descriptors (x-coordinates 16, 224, 240)
;
; Used by the routine at #R60179. These descriptors correspond to the doorways
; of the right-hand shop under the apartments next to no. 74 (x=16), the shop
; under no. 17 (x=224), and the shop under no. 15 (x=240).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(16,33,2,0) | #CALL:ld_img(224,33,2,0) |
; #CALL:ld_img(240,33,2,0) }
; TABLE#
@label=LOCDESCS16
b50133 DEFB 221,204,65 ; y=33, z=1 or 2; left, right, down/left, down/right
                       ; (door open)
 50136 DEFB 122,140    ; y=33, z=2; left, down/left, down/right (outside, door
                       ; closed)
 50138 DEFB 255        ; End marker

; Location descriptors (x-coordinates 14, 30, 198)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the left side of the wall between the
; right-hand shop under the apartment building next to no. 74 and the stairwell
; of that building (x=14).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,31,4,128) }
; TABLE#
@label=LOCDESCS14
b50139 DEFB 54,128    ; y=31, z=1; left
; The next descriptor corresponds to the staircases leading up to the roofs of
; the apartment building next to no. 74 (x=14) and the apartment building next
; to no. 19 (x=198).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,12,4,0) | #CALL:ld_img(198,12,4,0) }
; TABLE#
@label=LOCDESCS198
 50141 DEFB 16,40     ; y=12, z=1; up/left, down/left
; The next descriptor corresponds to the location between the stairwell and the
; first window to the right of the stairwell on the first floor of the
; apartment building next to no. 19 (x=198). It invokes the special location
; handler routine whose address is at #R40982 when a character moves right at
; this location. However, the handler routine does nothing special, and
; therefore the descriptor is redundant. (The location at (x,y,z)=(14,31,1) is
; dealt with by the first descriptor above.)
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(198,31,4,128) }
; TABLE#
 50143 DEFB 155,193,1 ; y=31, z=1; left, right
; The next descriptor corresponds to the staircases between the third and top
; floors in the apartment building next to no. 74 (x=14) and the apartment
; building next to no. 19 (x=198).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,18,4,0) | #CALL:ld_img(198,18,4,0) }
; TABLE#
 50146 DEFB 28,40     ; y=18, z=1; up/left, down/left
; The next descriptor corresponds to the location between the stairwell and the
; first window to the right of the stairwell on the third floor of the
; apartment building next to no. 74 (x=14), and the location between the
; stairwell and the first window to the right of the stairwell on the third
; floor of the apartment building next to no. 19 (x=198). It invokes the
; special location handler routine whose address is at #R40982 when a character
; moves right at these locations. However, the handler routine does nothing
; special, and therefore the descriptor is redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,19,4,128) | #CALL:ld_img(198,19,4,128) }
; TABLE#
 50148 DEFB 143,193,1 ; y=19, z=1; left, right
; The next descriptor corresponds to the staircases between the second and
; third floors in the apartment building next to no. 74 (x=14) and the
; apartment building next to no. 19 (x=198).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,24,4,0) | #CALL:ld_img(198,24,4,0) }
; TABLE#
 50151 DEFB 40,40     ; y=24, z=1; up/left, down/left
; The next descriptor corresponds to the location between the stairwell and the
; first window to the right of the stairwell on the second floor of the
; apartment building next to no. 74 (x=14), and the location between the
; stairwell and the first window to the right of the stairwell on the second
; floor of the apartment building next to no. 19 (x=198). It invokes the
; special location handler routine whose address is at #R40982 when a character
; moves right at these locations. However, the handler routine does nothing
; special, and therefore the descriptor is redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,25,4,128) | #CALL:ld_img(198,25,4,128) }
; TABLE#
 50153 DEFB 149,193,1 ; y=25, z=1; left, right
; The next descriptor corresponds to the staircases between the first and
; second floors in the apartment building next to no. 74 (x=14) and the
; apartment building next to no. 19 (x=198).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,30,4,0) | #CALL:ld_img(198,30,4,0) }
; TABLE#
 50156 DEFB 52,40     ; y=30, z=1; up/left, down/left
; The next descriptor corresponds to the location between the stairwell and the
; first window to the right of the stairwell on the top floor of the apartment
; building next to no. 74 (x=14), the right end of the catwalk (x=30), and the
; location between the stairwell and the first window to the right of the
; stairwell on the top floor of the apartment building next to no. 19 (x=198).
; It invokes the special location handler routine whose address is at #R40982
; when a character moves right at these locations. However, the handler routine
; does nothing special, and therefore the descriptor is redundant.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(14,13,4,128) | #CALL:ld_img(30,13,1,128) |
; #CALL:ld_img(198,13,4,128) }
; TABLE#
@label=LOCDESCS30
 50158 DEFB 137,193,1 ; y=13, z=1; left, right
 50161 DEFB 255       ; End marker

; Location descriptor (x-coordinates 21, 147, 204)
;
; Used by the routine at #R60179. This descriptor corresponds to the step up
; towards the top-right edge of the roof of the apartment building next to no.
; 74 (x=21), the first step up towards the top-right edge of the police station
; roof (x=147), and the step up towards the top-right edge of the roof of the
; apartment building next to no. 19 (x=204).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(21,7,1,128) | #CALL:ld_img(147,7,1,128) |
; #CALL:ld_img(204,7,1,128) }
; TABLE#
@label=LOCDESCS21
b50162 DEFB 6,208    ; y=7, z=1; left, right, up/right
 50164 DEFB 255      ; End marker

; Location descriptor (x-coordinates 23, 206)
;
; Used by the routine at #R60179. This descriptor corresponds to the top right
; edges of the roofs the apartment building next to no. 74 (x=23) and the
; apartment building next to no. 19 (x=206). It is used to check whether a
; character is going to step off the roof (see #R41238).
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(23,6,1,128) | #CALL:ld_img(206,6,1,128) }
; TABLE#
@label=LOCDESCS23
b50165 DEFB 130,193,2 ; y=6, z=1; left, right
 50168 DEFB 255       ; End marker

; Unused
;
; These bytes are probably remnants of a location descriptor table.
u50169 DEFB 44,36    ; y=26, z=1; up/left, down/right
 50171 DEFB 52,24    ; y=30, z=1; up/right, down/left
 50173 DEFB 120,224  ; y=32, z=2; left, right, up/left
 50175 DEFB 255      ; End marker

; Location descriptors (all x-coordinates, z=4)
;
; Used by the routine at #R60179.
; .
; The first seven descriptors correspond to the sidewalk outside the shop at
; the far left of town.
; .
; #UDGTABLE
; { #CALL:ldz4_img(0,7) }
; TABLE#
@label=LOCDESCSZ4
b50176 DEFB 64       ; x=0; right
 50177 DEFB 224      ; x=1; left, right, up/left
 50178 DEFB 192      ; x=2; left, right
 50179 DEFB 192      ; x=3; left, right
 50180 DEFB 192      ; x=4; left, right
 50181 DEFB 192      ; x=5; left, right
 50182 DEFB 133      ; x=6; left, down/right
; The next eight descriptors correspond to the section of road containing the
; steps leading up to the first floor of the apartment building next to no. 74.
; .
; #UDGTABLE
; { #CALL:ldz4_img(7,8) }
; TABLE#
 50183 DEFB 98       ; x=7; right, up/left
 50184 DEFB 208      ; x=8; left, right, up/right
 50185 DEFB 192      ; x=9; left, right
 50186 DEFB 192      ; x=10; left, right
 50187 DEFB 192      ; x=11; left, right
 50188 DEFB 192      ; x=12; left, right
 50189 DEFB 192      ; x=13; left, right
 50190 DEFB 145      ; x=14; left, up/right
; The next 24 descriptors correspond to the sidewalk from the doorway of the
; right-hand shop under the apartments next to no. 74 and the front steps of
; no. 74.
; .
; #UDGTABLE
; { #CALL:ldz4_img(15,24) }
; TABLE#
 50191 DEFB 90       ; x=15; right, up/right, down/left
 50192 DEFB 224      ; x=16; left, right, up/left
 50193 DEFB 224      ; x=17; left, right, up/left
 50194 DEFB 192      ; x=18; left, right
 50195 DEFB 192      ; x=19; left, right
 50196 DEFB 192      ; x=20; left, right
 50197 DEFB 192      ; x=21; left, right
 50198 DEFB 192      ; x=22; left, right
 50199 DEFB 192      ; x=23; left, right
 50200 DEFB 192      ; x=24; left, right
 50201 DEFB 192      ; x=25; left, right
 50202 DEFB 192      ; x=26; left, right
 50203 DEFB 192      ; x=27; left, right
 50204 DEFB 192      ; x=28; left, right
 50205 DEFB 192      ; x=29; left, right
 50206 DEFB 192      ; x=30; left, right
 50207 DEFB 192      ; x=31; left, right
 50208 DEFB 192      ; x=32; left, right
 50209 DEFB 192      ; x=33; left, right
 50210 DEFB 192      ; x=34; left, right
 50211 DEFB 192      ; x=35; left, right
 50212 DEFB 192      ; x=36; left, right
 50213 DEFB 192      ; x=37; left, right
 50214 DEFB 192      ; x=38; left, right
; The next eight descriptors correspond to the sidewalk next to the front steps
; of no. 74.
; .
; #UDGTABLE
; { #CALL:ldz4_img(39,8) }
; TABLE#
 50215 DEFB 208      ; x=39; left, right, up/right
 50216 DEFB 208      ; x=40; left, right, up/right
 50217 DEFB 240      ; x=41; left, right, up/left, up/right
 50218 DEFB 240      ; x=42; left, right, up/left, up/right
 50219 DEFB 240      ; x=43; left, right, up/left, up/right
 50220 DEFB 240      ; x=44; left, right, up/left, up/right
 50221 DEFB 224      ; x=45; left, right, up/left
 50222 DEFB 224      ; x=46; left, right, up/left
; The next 20 descriptors correspond to the sidewalk between the front steps of
; no. 74 and the entrance to the hotel.
; .
; #UDGTABLE
; { #CALL:ldz4_img(47,20) }
; TABLE#
 50223 DEFB 192      ; x=47; left, right
 50224 DEFB 192      ; x=48; left, right
 50225 DEFB 192      ; x=49; left, right
 50226 DEFB 192      ; x=50; left, right
 50227 DEFB 192      ; x=51; left, right
 50228 DEFB 192      ; x=52; left, right
 50229 DEFB 192      ; x=53; left, right
 50230 DEFB 192      ; x=54; left, right
 50231 DEFB 192      ; x=55; left, right
 50232 DEFB 192      ; x=56; left, right
 50233 DEFB 192      ; x=57; left, right
 50234 DEFB 192      ; x=58; left, right
 50235 DEFB 192      ; x=59; left, right
 50236 DEFB 192      ; x=60; left, right
 50237 DEFB 192      ; x=61; left, right
 50238 DEFB 192      ; x=62; left, right
 50239 DEFB 192      ; x=63; left, right
 50240 DEFB 192      ; x=64; left, right
 50241 DEFB 192      ; x=65; left, right
 50242 DEFB 192      ; x=66; left, right
; The next three descriptors correspond to the sidewalk next to the left-hand
; entrance to the hotel.
; .
; #UDGTABLE
; { #CALL:ldz4_img(67,3) }
; TABLE#
 50243 DEFB 208      ; x=67; left, right, up/right
 50244 DEFB 192      ; x=68; left, right
 50245 DEFB 224      ; x=69; left, right, up/left
; The next 18 descriptors correspond to the sidewalk outside the front doors of
; the hotel.
; .
; #UDGTABLE
; { #CALL:ldz4_img(70,18) }
; TABLE#
 50246 DEFB 192      ; x=70; left, right
 50247 DEFB 192      ; x=71; left, right
 50248 DEFB 192      ; x=72; left, right
 50249 DEFB 192      ; x=73; left, right
 50250 DEFB 192      ; x=74; left, right
 50251 DEFB 192      ; x=75; left, right
 50252 DEFB 192      ; x=76; left, right
 50253 DEFB 192      ; x=77; left, right
 50254 DEFB 192      ; x=78; left, right
 50255 DEFB 192      ; x=79; left, right
 50256 DEFB 192      ; x=80; left, right
 50257 DEFB 192      ; x=81; left, right
 50258 DEFB 192      ; x=82; left, right
 50259 DEFB 192      ; x=83; left, right
 50260 DEFB 192      ; x=84; left, right
 50261 DEFB 192      ; x=85; left, right
 50262 DEFB 192      ; x=86; left, right
 50263 DEFB 192      ; x=87; left, right
; The next three descriptors correspond to the sidewalk next to the right-hand
; entrance to the hotel.
; .
; #UDGTABLE
; { #CALL:ldz4_img(88,3) }
; TABLE#
 50264 DEFB 208      ; x=88; left, right, up/right
 50265 DEFB 192      ; x=89; left, right
 50266 DEFB 224      ; x=90; left, right, up/left
; The next 20 descriptors correspond to the sidewalk between the right-hand
; entrance to the hotel and the front steps of no. 31.
; .
; #UDGTABLE
; { #CALL:ldz4_img(91,20) }
; TABLE#
 50267 DEFB 192      ; x=91; left, right
 50268 DEFB 192      ; x=92; left, right
 50269 DEFB 192      ; x=93; left, right
 50270 DEFB 192      ; x=94; left, right
 50271 DEFB 192      ; x=95; left, right
 50272 DEFB 192      ; x=96; left, right
 50273 DEFB 192      ; x=97; left, right
 50274 DEFB 192      ; x=98; left, right
 50275 DEFB 192      ; x=99; left, right
 50276 DEFB 192      ; x=100; left, right
 50277 DEFB 192      ; x=101; left, right
 50278 DEFB 192      ; x=102; left, right
 50279 DEFB 192      ; x=103; left, right
 50280 DEFB 192      ; x=104; left, right
 50281 DEFB 192      ; x=105; left, right
 50282 DEFB 192      ; x=106; left, right
 50283 DEFB 192      ; x=107; left, right
 50284 DEFB 192      ; x=108; left, right
 50285 DEFB 192      ; x=109; left, right
 50286 DEFB 192      ; x=110; left, right
; The next eight descriptors correspond to the sidewalk next to the front steps
; of no. 31.
; .
; #UDGTABLE
; { #CALL:ldz4_img(111,8) }
; TABLE#
 50287 DEFB 208      ; x=111; left, right, up/right
 50288 DEFB 208      ; x=112; left, right, up/right
 50289 DEFB 240      ; x=113; left, right, up/left, up/right
 50290 DEFB 240      ; x=114; left, right, up/left, up/right
 50291 DEFB 240      ; x=115; left, right, up/left, up/right
 50292 DEFB 240      ; x=116; left, right, up/left, up/right
 50293 DEFB 224      ; x=117; left, right, up/left
 50294 DEFB 224      ; x=118; left, right, up/left
; The next 15 descriptors correspond to the sidewalk between the front steps of
; no. 31 and the front steps of the police station.
; .
; #UDGTABLE
; { #CALL:ldz4_img(119,15) }
; TABLE#
 50295 DEFB 192      ; x=119; left, right
 50296 DEFB 192      ; x=120; left, right
 50297 DEFB 192      ; x=121; left, right
 50298 DEFB 192      ; x=122; left, right
 50299 DEFB 192      ; x=123; left, right
 50300 DEFB 192      ; x=124; left, right
 50301 DEFB 192      ; x=125; left, right
 50302 DEFB 192      ; x=126; left, right
 50303 DEFB 192      ; x=127; left, right
 50304 DEFB 192      ; x=128; left, right
 50305 DEFB 192      ; x=129; left, right
 50306 DEFB 192      ; x=130; left, right
 50307 DEFB 192      ; x=131; left, right
 50308 DEFB 192      ; x=132; left, right
 50309 DEFB 192      ; x=133; left, right
; The next seven descriptors correspond to the sidewalk next to the front steps
; of the police station.
; .
; #UDGTABLE
; { #CALL:ldz4_img(134,7) }
; TABLE#
 50310 DEFB 208      ; x=134; left, right, up/right
 50311 DEFB 208      ; x=135; left, right, up/right
 50312 DEFB 240      ; x=136; left, right, up/left, up/right
 50313 DEFB 240      ; x=137; left, right, up/left, up/right
 50314 DEFB 240      ; x=138; left, right, up/left, up/right
 50315 DEFB 224      ; x=139; left, right, up/left
 50316 DEFB 224      ; x=140; left, right, up/left
; The next 13 descriptors correspond to the sidewalk between the front steps of
; the police station and the front steps of no. 27.
; .
; #UDGTABLE
; { #CALL:ldz4_img(141,13) }
; TABLE#
 50317 DEFB 192      ; x=141; left, right
 50318 DEFB 192      ; x=142; left, right
 50319 DEFB 192      ; x=143; left, right
 50320 DEFB 192      ; x=144; left, right
 50321 DEFB 192      ; x=145; left, right
 50322 DEFB 192      ; x=146; left, right
 50323 DEFB 192      ; x=147; left, right
 50324 DEFB 192      ; x=148; left, right
 50325 DEFB 192      ; x=149; left, right
 50326 DEFB 192      ; x=150; left, right
 50327 DEFB 192      ; x=151; left, right
 50328 DEFB 192      ; x=152; left, right
 50329 DEFB 192      ; x=153; left, right
; The next five descriptors correspond to the sidewalk next to the front steps
; of no. 27.
; .
; #UDGTABLE
; { #CALL:ldz4_img(154,5) }
; TABLE#
 50330 DEFB 208      ; x=154; left, right, up/right
 50331 DEFB 208      ; x=155; left, right, up/right
 50332 DEFB 240      ; x=156; left, right, up/left, up/right
 50333 DEFB 224      ; x=157; left, right, up/left
 50334 DEFB 224      ; x=158; left, right, up/left
; The next five descriptors correspond to the sidewalk to the right of the
; front steps of no. 27.
; .
; #UDGTABLE
; { #CALL:ldz4_img(159,5) }
; TABLE#
 50335 DEFB 192      ; x=159; left, right
 50336 DEFB 192      ; x=160; left, right
 50337 DEFB 192      ; x=161; left, right
 50338 DEFB 192      ; x=162; left, right
 50339 DEFB 133      ; x=163; left, down/right
; The next 35 descriptors correspond to the road between no. 27 and the
; right-hand side of the apartment building next to no. 19.
; .
; #UDGTABLE
; { #CALL:ldz4_img(164,35) }
; TABLE#
 50340 DEFB 98       ; x=164; right, up/left
 50341 DEFB 192      ; x=165; left, right
 50342 DEFB 192      ; x=166; left, right
 50343 DEFB 192      ; x=167; left, right
 50344 DEFB 192      ; x=168; left, right
 50345 DEFB 192      ; x=169; left, right
 50346 DEFB 192      ; x=170; left, right
 50347 DEFB 192      ; x=171; left, right
 50348 DEFB 192      ; x=172; left, right
 50349 DEFB 192      ; x=173; left, right
 50350 DEFB 192      ; x=174; left, right
 50351 DEFB 192      ; x=175; left, right
 50352 DEFB 192      ; x=176; left, right
 50353 DEFB 192      ; x=177; left, right
 50354 DEFB 192      ; x=178; left, right
 50355 DEFB 192      ; x=179; left, right
 50356 DEFB 192      ; x=180; left, right
 50357 DEFB 192      ; x=181; left, right
 50358 DEFB 192      ; x=182; left, right
 50359 DEFB 192      ; x=183; left, right
 50360 DEFB 192      ; x=184; left, right
 50361 DEFB 192      ; x=185; left, right
 50362 DEFB 192      ; x=186; left, right
 50363 DEFB 192      ; x=187; left, right
 50364 DEFB 192      ; x=188; left, right
 50365 DEFB 192      ; x=189; left, right
 50366 DEFB 192      ; x=190; left, right
 50367 DEFB 192      ; x=191; left, right
 50368 DEFB 208      ; x=192; left, right, up/right
 50369 DEFB 192      ; x=193; left, right
 50370 DEFB 192      ; x=194; left, right
 50371 DEFB 192      ; x=195; left, right
 50372 DEFB 192      ; x=196; left, right
 50373 DEFB 192      ; x=197; left, right
 50374 DEFB 145      ; x=198; left, up/right
; The next eight descriptors correspond to the sidewalk outside the right-hand
; side of the apartment building next to no. 19.
; .
; #UDGTABLE
; { #CALL:ldz4_img(199,8) }
; TABLE#
 50375 DEFB 74       ; x=199; right, down/left
 50376 DEFB 192      ; x=200; left, right
 50377 DEFB 192      ; x=201; left, right
 50378 DEFB 192      ; x=202; left, right
 50379 DEFB 192      ; x=203; left, right
 50380 DEFB 192      ; x=204; left, right
 50381 DEFB 192      ; x=205; left, right
 50382 DEFB 192      ; x=206; left, right
; The next eight descriptors correspond to the sidewalk next to the front steps
; of no. 19.
; .
; #UDGTABLE
; { #CALL:ldz4_img(207,8) }
; TABLE#
 50383 DEFB 208      ; x=207; left, right, up/right
 50384 DEFB 208      ; x=208; left, right, up/right
 50385 DEFB 240      ; x=209; left, right, up/left, up/right
 50386 DEFB 240      ; x=210; left, right, up/left, up/right
 50387 DEFB 240      ; x=211; left, right, up/left, up/right
 50388 DEFB 240      ; x=212; left, right, up/left, up/right
 50389 DEFB 224      ; x=213; left, right, up/left
 50390 DEFB 224      ; x=214; left, right, up/left
; The next seven descriptors correspond to the sidewalk between the front steps
; of no. 19 and the shop under no. 17.
; .
; #UDGTABLE
; { #CALL:ldz4_img(215,7) }
; TABLE#
 50391 DEFB 192      ; x=215; left, right
 50392 DEFB 192      ; x=216; left, right
 50393 DEFB 192      ; x=217; left, right
 50394 DEFB 192      ; x=218; left, right
 50395 DEFB 192      ; x=219; left, right
 50396 DEFB 192      ; x=220; left, right
 50397 DEFB 192      ; x=221; left, right
; The next four descriptors correspond to the sidewalk outside the door to the
; shop under no. 17.
; .
; #UDGTABLE
; { #CALL:ldz4_img(222,4) }
; TABLE#
 50398 DEFB 208      ; x=222; left, right, up/right
 50399 DEFB 208      ; x=223; left, right, up/right
 50400 DEFB 224      ; x=224; left, right, up/left
 50401 DEFB 224      ; x=225; left, right, up/left
; The next eight descriptors correspond to the sidewalk between the door to the
; shop under no. 17 and the front steps of no. 17.
; .
; #UDGTABLE
; { #CALL:ldz4_img(226,8) }
; TABLE#
 50402 DEFB 192      ; x=226; left, right
 50403 DEFB 192      ; x=227; left, right
 50404 DEFB 192      ; x=228; left, right
 50405 DEFB 192      ; x=229; left, right
 50406 DEFB 192      ; x=230; left, right
 50407 DEFB 192      ; x=231; left, right
 50408 DEFB 192      ; x=232; left, right
 50409 DEFB 192      ; x=233; left, right
; The next eight descriptors correspond to the sidewalk next to the front steps
; of no. 17 and the door to the shop under no. 15.
; .
; #UDGTABLE
; { #CALL:ldz4_img(234,8) }
; TABLE#
 50410 DEFB 208      ; x=234; left, right, up/right
 50411 DEFB 208      ; x=235; left, right, up/right
 50412 DEFB 240      ; x=236; left, right, up/left, up/right
 50413 DEFB 224      ; x=237; left, right, up/left
 50414 DEFB 240      ; x=238; left, right, up/left, up/right
 50415 DEFB 208      ; x=239; left, right, up/right
 50416 DEFB 224      ; x=240; left, right, up/left
 50417 DEFB 224      ; x=241; left, right, up/left
; The next eight descriptors correspond to the sidewalk between the door to the
; shop under no. 15 and the front steps of no. 15.
; .
; #UDGTABLE
; { #CALL:ldz4_img(242,8) }
; TABLE#
 50418 DEFB 192      ; x=242; left, right
 50419 DEFB 192      ; x=243; left, right
 50420 DEFB 192      ; x=244; left, right
 50421 DEFB 192      ; x=245; left, right
 50422 DEFB 192      ; x=246; left, right
 50423 DEFB 192      ; x=247; left, right
 50424 DEFB 192      ; x=248; left, right
 50425 DEFB 192      ; x=249; left, right
; The next five descriptors correspond to the sidewalk next to the front steps
; of no. 15.
; .
; #UDGTABLE
; { #CALL:ldz4_img(250,5) }
; TABLE#
 50426 DEFB 208      ; x=250; left, right, up/right
 50427 DEFB 208      ; x=251; left, right, up/right
 50428 DEFB 240      ; x=252; left, right, up/left, up/right
 50429 DEFB 160      ; x=253; left, up/left
 50430 DEFB 160      ; x=254; left, up/left
; The next descriptor is unused, because no character can reach x=255.
 50431 DEFB 128      ; x=255; left

; Location descriptor address LSBs
;
; Used by the routine at #R60179. The location descriptor address MSBs can be
; found at #R50688.
@label=LDESCLSBS
@ssub=DEFB 49952%256
b50432 DEFB 32       ; x=0: #R49952
@ssub=DEFB 49967%256
 50433 DEFB 47       ; x=1: #R49967
@ssub=DEFB 49967%256
 50434 DEFB 47       ; x=2: #R49967
@ssub=DEFB 49967%256
 50435 DEFB 47       ; x=3: #R49967
@ssub=DEFB 49967%256
 50436 DEFB 47       ; x=4: #R49967
@ssub=DEFB 49967%256
 50437 DEFB 47       ; x=5: #R49967
@ssub=DEFB 50084%256
 50438 DEFB 164      ; x=6: #R50084
@ssub=DEFB 50072%256
 50439 DEFB 152      ; x=7: #R50072
@ssub=DEFB 49967%256
 50440 DEFB 47       ; x=8: #R49967
@ssub=DEFB 50087%256
 50441 DEFB 167      ; x=9: #R50087
@ssub=DEFB 50110%256
 50442 DEFB 190      ; x=10: #R50110
@ssub=DEFB 50090%256
 50443 DEFB 170      ; x=11: #R50090
@ssub=DEFB 50121%256
 50444 DEFB 201      ; x=12: #R50121
@ssub=DEFB 47334%256
 50445 DEFB 230      ; x=13: #R47334
@ssub=DEFB 50139%256
 50446 DEFB 219      ; x=14: #R50139
@ssub=DEFB 49913%256
 50447 DEFB 249      ; x=15: #R49913
@ssub=DEFB 50133%256
 50448 DEFB 213      ; x=16: #R50133
@ssub=DEFB 49967%256
 50449 DEFB 47       ; x=17: #R49967
@ssub=DEFB 49967%256
 50450 DEFB 47       ; x=18: #R49967
@ssub=DEFB 49967%256
 50451 DEFB 47       ; x=19: #R49967
@ssub=DEFB 49967%256
 50452 DEFB 47       ; x=20: #R49967
@ssub=DEFB 50162%256
 50453 DEFB 242      ; x=21: #R50162
@ssub=DEFB 47596%256
 50454 DEFB 236      ; x=22: #R47596
@ssub=DEFB 50165%256
 50455 DEFB 245      ; x=23: #R50165
@ssub=DEFB 49967%256
 50456 DEFB 47       ; x=24: #R49967
@ssub=DEFB 49967%256
 50457 DEFB 47       ; x=25: #R49967
@ssub=DEFB 49967%256
 50458 DEFB 47       ; x=26: #R49967
@ssub=DEFB 49967%256
 50459 DEFB 47       ; x=27: #R49967
@ssub=DEFB 49967%256
 50460 DEFB 47       ; x=28: #R49967
@ssub=DEFB 49967%256
 50461 DEFB 47       ; x=29: #R49967
@ssub=DEFB 50158%256
 50462 DEFB 238      ; x=30: #R50158
@ssub=DEFB 49967%256
 50463 DEFB 47       ; x=31: #R49967
@ssub=DEFB 47852%256
 50464 DEFB 236      ; x=32: #R47852
@ssub=DEFB 49967%256
 50465 DEFB 47       ; x=33: #R49967
@ssub=DEFB 49967%256
 50466 DEFB 47       ; x=34: #R49967
@ssub=DEFB 49967%256
 50467 DEFB 47       ; x=35: #R49967
@ssub=DEFB 49967%256
 50468 DEFB 47       ; x=36: #R49967
@ssub=DEFB 49967%256
 50469 DEFB 47       ; x=37: #R49967
@ssub=DEFB 47351%256
 50470 DEFB 247      ; x=38: #R47351
@ssub=DEFB 47607%256
 50471 DEFB 247      ; x=39: #R47607
@ssub=DEFB 47354%256
 50472 DEFB 250      ; x=40: #R47354
@ssub=DEFB 48614%256
 50473 DEFB 230      ; x=41: #R48614
@ssub=DEFB 48358%256
 50474 DEFB 230      ; x=42: #R48358
@ssub=DEFB 48102%256
 50475 DEFB 230      ; x=43: #R48102
@ssub=DEFB 48872%256
 50476 DEFB 232      ; x=44: #R48872
@ssub=DEFB 48746%256
 50477 DEFB 106      ; x=45: #R48746
@ssub=DEFB 49967%256
 50478 DEFB 47       ; x=46: #R49967
@ssub=DEFB 49967%256
 50479 DEFB 47       ; x=47: #R49967
@ssub=DEFB 49967%256
 50480 DEFB 47       ; x=48: #R49967
@ssub=DEFB 49967%256
 50481 DEFB 47       ; x=49: #R49967
@ssub=DEFB 49967%256
 50482 DEFB 47       ; x=50: #R49967
@ssub=DEFB 49967%256
 50483 DEFB 47       ; x=51: #R49967
@ssub=DEFB 49967%256
 50484 DEFB 47       ; x=52: #R49967
@ssub=DEFB 47864%256
 50485 DEFB 248      ; x=53: #R47864
@ssub=DEFB 49967%256
 50486 DEFB 47       ; x=54: #R49967
@ssub=DEFB 49967%256
 50487 DEFB 47       ; x=55: #R49967
@ssub=DEFB 49967%256
 50488 DEFB 47       ; x=56: #R49967
@ssub=DEFB 47848%256
 50489 DEFB 232      ; x=57: #R47848
@ssub=DEFB 49967%256
 50490 DEFB 47       ; x=58: #R49967
@ssub=DEFB 49967%256
 50491 DEFB 47       ; x=59: #R49967
@ssub=DEFB 49967%256
 50492 DEFB 47       ; x=60: #R49967
@ssub=DEFB 49967%256
 50493 DEFB 47       ; x=61: #R49967
@ssub=DEFB 47870%256
 50494 DEFB 254      ; x=62: #R47870
@ssub=DEFB 49967%256
 50495 DEFB 47       ; x=63: #R49967
@ssub=DEFB 49967%256
 50496 DEFB 47       ; x=64: #R49967
@ssub=DEFB 49002%256
 50497 DEFB 106      ; x=65: #R49002
@ssub=DEFB 47200%256
 50498 DEFB 96       ; x=66: #R47200
@ssub=DEFB 47207%256
 50499 DEFB 103      ; x=67: #R47207
@ssub=DEFB 47216%256
 50500 DEFB 112      ; x=68: #R47216
@ssub=DEFB 47225%256
 50501 DEFB 121      ; x=69: #R47225
@ssub=DEFB 49967%256
 50502 DEFB 47       ; x=70: #R49967
@ssub=DEFB 48380%256
 50503 DEFB 252      ; x=71: #R48380
@ssub=DEFB 49967%256
 50504 DEFB 47       ; x=72: #R49967
@ssub=DEFB 49967%256
 50505 DEFB 47       ; x=73: #R49967
@ssub=DEFB 47712%256
 50506 DEFB 96       ; x=74: #R47712
@ssub=DEFB 48238%256
 50507 DEFB 110      ; x=75: #R48238
@ssub=DEFB 47480%256
 50508 DEFB 120      ; x=76: #R47480
@ssub=DEFB 47716%256
 50509 DEFB 100      ; x=77: #R47716
@ssub=DEFB 47730%256
 50510 DEFB 114      ; x=78: #R47730
@ssub=DEFB 49146%256
 50511 DEFB 250      ; x=79: #R49146
@ssub=DEFB 48998%256
 50512 DEFB 102      ; x=80: #R48998
@ssub=DEFB 47722%256
 50513 DEFB 106      ; x=81: #R47722
@ssub=DEFB 47738%256
 50514 DEFB 122      ; x=82: #R47738
@ssub=DEFB 47992%256
 50515 DEFB 120      ; x=83: #R47992
@ssub=DEFB 49967%256
 50516 DEFB 47       ; x=84: #R49967
@ssub=DEFB 49967%256
 50517 DEFB 47       ; x=85: #R49967
@ssub=DEFB 47996%256
 50518 DEFB 124      ; x=86: #R47996
@ssub=DEFB 49967%256
 50519 DEFB 47       ; x=87: #R49967
@ssub=DEFB 49126%256
 50520 DEFB 230      ; x=88: #R49126
@ssub=DEFB 49133%256
 50521 DEFB 237      ; x=89: #R49133
@ssub=DEFB 47467%256
 50522 DEFB 107      ; x=90: #R47467
@ssub=DEFB 47456%256
 50523 DEFB 96       ; x=91: #R47456
@ssub=DEFB 47970%256
 50524 DEFB 98       ; x=92: #R47970
@ssub=DEFB 49967%256
 50525 DEFB 47       ; x=93: #R49967
@ssub=DEFB 49967%256
 50526 DEFB 47       ; x=94: #R49967
@ssub=DEFB 49967%256
 50527 DEFB 47       ; x=95: #R49967
@ssub=DEFB 49967%256
 50528 DEFB 47       ; x=96: #R49967
@ssub=DEFB 49967%256
 50529 DEFB 47       ; x=97: #R49967
@ssub=DEFB 49967%256
 50530 DEFB 47       ; x=98: #R49967
@ssub=DEFB 49967%256
 50531 DEFB 47       ; x=99: #R49967
@ssub=DEFB 47862%256
 50532 DEFB 246      ; x=100: #R47862
@ssub=DEFB 49967%256
 50533 DEFB 47       ; x=101: #R49967
@ssub=DEFB 49967%256
 50534 DEFB 47       ; x=102: #R49967
@ssub=DEFB 47850%256
 50535 DEFB 234      ; x=103: #R47850
@ssub=DEFB 49967%256
 50536 DEFB 47       ; x=104: #R49967
@ssub=DEFB 49967%256
 50537 DEFB 47       ; x=105: #R49967
@ssub=DEFB 49967%256
 50538 DEFB 47       ; x=106: #R49967
@ssub=DEFB 49967%256
 50539 DEFB 47       ; x=107: #R49967
@ssub=DEFB 49967%256
 50540 DEFB 47       ; x=108: #R49967
@ssub=DEFB 49967%256
 50541 DEFB 47       ; x=109: #R49967
@ssub=DEFB 49967%256
 50542 DEFB 47       ; x=110: #R49967
@ssub=DEFB 49967%256
 50543 DEFB 47       ; x=111: #R49967
@ssub=DEFB 47356%256
 50544 DEFB 252      ; x=112: #R47356
@ssub=DEFB 48614%256
 50545 DEFB 230      ; x=113: #R48614
@ssub=DEFB 48358%256
 50546 DEFB 230      ; x=114: #R48358
@ssub=DEFB 48102%256
 50547 DEFB 230      ; x=115: #R48102
@ssub=DEFB 48870%256
 50548 DEFB 230      ; x=116: #R48870
@ssub=DEFB 48736%256
 50549 DEFB 96       ; x=117: #R48736
@ssub=DEFB 48501%256
 50550 DEFB 117      ; x=118: #R48501
@ssub=DEFB 49967%256
 50551 DEFB 47       ; x=119: #R49967
@ssub=DEFB 49967%256
 50552 DEFB 47       ; x=120: #R49967
@ssub=DEFB 49967%256
 50553 DEFB 47       ; x=121: #R49967
@ssub=DEFB 49967%256
 50554 DEFB 47       ; x=122: #R49967
@ssub=DEFB 49967%256
 50555 DEFB 47       ; x=123: #R49967
@ssub=DEFB 48507%256
 50556 DEFB 123      ; x=124: #R48507
@ssub=DEFB 47846%256
 50557 DEFB 230      ; x=125: #R47846
@ssub=DEFB 48488%256
 50558 DEFB 104      ; x=126: #R48488
@ssub=DEFB 49967%256
 50559 DEFB 47       ; x=127: #R49967
@ssub=DEFB 49967%256
 50560 DEFB 47       ; x=128: #R49967
@ssub=DEFB 49967%256
 50561 DEFB 47       ; x=129: #R49967
@ssub=DEFB 49967%256
 50562 DEFB 47       ; x=130: #R49967
@ssub=DEFB 49967%256
 50563 DEFB 47       ; x=131: #R49967
@ssub=DEFB 49967%256
 50564 DEFB 47       ; x=132: #R49967
@ssub=DEFB 48893%256
 50565 DEFB 253      ; x=133: #R48893
@ssub=DEFB 49967%256
 50566 DEFB 47       ; x=134: #R49967
@ssub=DEFB 48759%256
 50567 DEFB 119      ; x=135: #R48759
@ssub=DEFB 49665%256
 50568 DEFB 1        ; x=136: #R49665
@ssub=DEFB 49684%256
 50569 DEFB 20       ; x=137: #R49684
@ssub=DEFB 49710%256
 50570 DEFB 46       ; x=138: #R49710
@ssub=DEFB 49731%256
 50571 DEFB 67       ; x=139: #R49731
@ssub=DEFB 49967%256
 50572 DEFB 47       ; x=140: #R49967
@ssub=DEFB 49967%256
 50573 DEFB 47       ; x=141: #R49967
@ssub=DEFB 49967%256
 50574 DEFB 47       ; x=142: #R49967
@ssub=DEFB 49967%256
 50575 DEFB 47       ; x=143: #R49967
@ssub=DEFB 49967%256
 50576 DEFB 47       ; x=144: #R49967
@ssub=DEFB 49967%256
 50577 DEFB 47       ; x=145: #R49967
@ssub=DEFB 49967%256
 50578 DEFB 47       ; x=146: #R49967
@ssub=DEFB 50162%256
 50579 DEFB 242      ; x=147: #R50162
@ssub=DEFB 49752%256
 50580 DEFB 88       ; x=148: #R49752
@ssub=DEFB 47590%256
 50581 DEFB 230      ; x=149: #R47590
@ssub=DEFB 47846%256
 50582 DEFB 230      ; x=150: #R47846
@ssub=DEFB 48488%256
 50583 DEFB 104      ; x=151: #R48488
@ssub=DEFB 49757%256
 50584 DEFB 93       ; x=152: #R49757
@ssub=DEFB 49764%256
 50585 DEFB 100      ; x=153: #R49764
@ssub=DEFB 49778%256
 50586 DEFB 114      ; x=154: #R49778
@ssub=DEFB 49794%256
 50587 DEFB 130      ; x=155: #R49794
@ssub=DEFB 49817%256
 50588 DEFB 153      ; x=156: #R49817
@ssub=DEFB 49842%256
 50589 DEFB 178      ; x=157: #R49842
@ssub=DEFB 49851%256
 50590 DEFB 187      ; x=158: #R49851
@ssub=DEFB 49967%256
 50591 DEFB 47       ; x=159: #R49967
@ssub=DEFB 49967%256
 50592 DEFB 47       ; x=160: #R49967
@ssub=DEFB 49967%256
 50593 DEFB 47       ; x=161: #R49967
@ssub=DEFB 49967%256
 50594 DEFB 47       ; x=162: #R49967
@ssub=DEFB 49967%256
 50595 DEFB 47       ; x=163: #R49967
@ssub=DEFB 49967%256
 50596 DEFB 47       ; x=164: #R49967
@ssub=DEFB 49967%256
 50597 DEFB 47       ; x=165: #R49967
@ssub=DEFB 49967%256
 50598 DEFB 47       ; x=166: #R49967
@ssub=DEFB 49967%256
 50599 DEFB 47       ; x=167: #R49967
@ssub=DEFB 49967%256
 50600 DEFB 47       ; x=168: #R49967
@ssub=DEFB 49967%256
 50601 DEFB 47       ; x=169: #R49967
@ssub=DEFB 49967%256
 50602 DEFB 47       ; x=170: #R49967
@ssub=DEFB 49967%256
 50603 DEFB 47       ; x=171: #R49967
@ssub=DEFB 49967%256
 50604 DEFB 47       ; x=172: #R49967
@ssub=DEFB 49967%256
 50605 DEFB 47       ; x=173: #R49967
@ssub=DEFB 49967%256
 50606 DEFB 47       ; x=174: #R49967
@ssub=DEFB 49876%256
 50607 DEFB 212      ; x=175: #R49876
@ssub=DEFB 65408%256
 50608 DEFB 128      ; x=176: #R65408
@ssub=DEFB 49890%256
 50609 DEFB 226      ; x=177: #R49890
@ssub=DEFB 49903%256
 50610 DEFB 239      ; x=178: #R49903
@ssub=DEFB 49921%256
 50611 DEFB 1        ; x=179: #R49921
@ssub=DEFB 49932%256
 50612 DEFB 12       ; x=180: #R49932
@ssub=DEFB 49864%256
 50613 DEFB 200      ; x=181: #R49864
@ssub=DEFB 48480%256
 50614 DEFB 96       ; x=182: #R48480
@ssub=DEFB 48488%256
 50615 DEFB 104      ; x=183: #R48488
@ssub=DEFB 49945%256
 50616 DEFB 25       ; x=184: #R49945
@ssub=DEFB 49967%256
 50617 DEFB 47       ; x=185: #R49967
@ssub=DEFB 49967%256
 50618 DEFB 47       ; x=186: #R49967
@ssub=DEFB 49967%256
 50619 DEFB 47       ; x=187: #R49967
@ssub=DEFB 49967%256
 50620 DEFB 47       ; x=188: #R49967
@ssub=DEFB 49967%256
 50621 DEFB 47       ; x=189: #R49967
@ssub=DEFB 49009%256
 50622 DEFB 113      ; x=190: #R49009
@ssub=DEFB 49967%256
 50623 DEFB 47       ; x=191: #R49967
@ssub=DEFB 49967%256
 50624 DEFB 47       ; x=192: #R49967
@ssub=DEFB 50087%256
 50625 DEFB 167      ; x=193: #R50087
@ssub=DEFB 50110%256
 50626 DEFB 190      ; x=194: #R50110
@ssub=DEFB 50090%256
 50627 DEFB 170      ; x=195: #R50090
@ssub=DEFB 50121%256
 50628 DEFB 201      ; x=196: #R50121
@ssub=DEFB 47334%256
 50629 DEFB 230      ; x=197: #R47334
@ssub=DEFB 50141%256
 50630 DEFB 221      ; x=198: #R50141
@ssub=DEFB 49967%256
 50631 DEFB 47       ; x=199: #R49967
@ssub=DEFB 49967%256
 50632 DEFB 47       ; x=200: #R49967
@ssub=DEFB 49967%256
 50633 DEFB 47       ; x=201: #R49967
@ssub=DEFB 49967%256
 50634 DEFB 47       ; x=202: #R49967
@ssub=DEFB 49967%256
 50635 DEFB 47       ; x=203: #R49967
@ssub=DEFB 50162%256
 50636 DEFB 242      ; x=204: #R50162
@ssub=DEFB 47592%256
 50637 DEFB 232      ; x=205: #R47592
@ssub=DEFB 50165%256
 50638 DEFB 245      ; x=206: #R50165
@ssub=DEFB 47850%256
 50639 DEFB 234      ; x=207: #R47850
@ssub=DEFB 47356%256
 50640 DEFB 252      ; x=208: #R47356
@ssub=DEFB 48614%256
 50641 DEFB 230      ; x=209: #R48614
@ssub=DEFB 48358%256
 50642 DEFB 230      ; x=210: #R48358
@ssub=DEFB 48102%256
 50643 DEFB 230      ; x=211: #R48102
@ssub=DEFB 48872%256
 50644 DEFB 232      ; x=212: #R48872
@ssub=DEFB 48746%256
 50645 DEFB 106      ; x=213: #R48746
@ssub=DEFB 49967%256
 50646 DEFB 47       ; x=214: #R49967
@ssub=DEFB 49967%256
 50647 DEFB 47       ; x=215: #R49967
@ssub=DEFB 49967%256
 50648 DEFB 47       ; x=216: #R49967
@ssub=DEFB 49967%256
 50649 DEFB 47       ; x=217: #R49967
@ssub=DEFB 49967%256
 50650 DEFB 47       ; x=218: #R49967
@ssub=DEFB 49967%256
 50651 DEFB 47       ; x=219: #R49967
@ssub=DEFB 49967%256
 50652 DEFB 47       ; x=220: #R49967
@ssub=DEFB 49967%256
 50653 DEFB 47       ; x=221: #R49967
@ssub=DEFB 47592%256
@if({asm}<2)(bfix=DEFB 248,bfix=DEFB 56568%256)
 50654 DEFB 232      ; x=222: #IF({fix}<2)(#R47592,#R56568)
@ssub=DEFB 50048%256
 50655 DEFB 128      ; x=223: #R50048
@ssub=DEFB 50133%256
 50656 DEFB 213      ; x=224: #R50133
@ssub=DEFB 50065%256
 50657 DEFB 145      ; x=225: #R50065
@ssub=DEFB 50068%256
 50658 DEFB 148      ; x=226: #R50068
@ssub=DEFB 49967%256
 50659 DEFB 47       ; x=227: #R49967
@ssub=DEFB 49967%256
 50660 DEFB 47       ; x=228: #R49967
@ssub=DEFB 49967%256
 50661 DEFB 47       ; x=229: #R49967
@ssub=DEFB 50084%256
 50662 DEFB 164      ; x=230: #R50084
@ssub=DEFB 50072%256
 50663 DEFB 152      ; x=231: #R50072
@ssub=DEFB 49759%256
 50664 DEFB 95       ; x=232: #R49759
@ssub=DEFB 49770%256
 50665 DEFB 106      ; x=233: #R49770
@ssub=DEFB 49778%256
 50666 DEFB 114      ; x=234: #R49778
@ssub=DEFB 49792%256
 50667 DEFB 128      ; x=235: #R49792
@ssub=DEFB 49817%256
 50668 DEFB 153      ; x=236: #R49817
@ssub=DEFB 49842%256
 50669 DEFB 178      ; x=237: #R49842
@ssub=DEFB 49853%256
 50670 DEFB 189      ; x=238: #R49853
@ssub=DEFB 50051%256
 50671 DEFB 131      ; x=239: #R50051
@ssub=DEFB 50133%256
 50672 DEFB 213      ; x=240: #R50133
@ssub=DEFB 49967%256
 50673 DEFB 47       ; x=241: #R49967
@ssub=DEFB 49967%256
 50674 DEFB 47       ; x=242: #R49967
@ssub=DEFB 49967%256
 50675 DEFB 47       ; x=243: #R49967
@ssub=DEFB 49967%256
 50676 DEFB 47       ; x=244: #R49967
@ssub=DEFB 49967%256
 50677 DEFB 47       ; x=245: #R49967
@ssub=DEFB 50084%256
 50678 DEFB 164      ; x=246: #R50084
@ssub=DEFB 50072%256
 50679 DEFB 152      ; x=247: #R50072
@ssub=DEFB 49757%256
 50680 DEFB 93       ; x=248: #R49757
@ssub=DEFB 49764%256
 50681 DEFB 100      ; x=249: #R49764
@ssub=DEFB 49780%256
 50682 DEFB 116      ; x=250: #R49780
@ssub=DEFB 49798%256
 50683 DEFB 134      ; x=251: #R49798
@ssub=DEFB 49825%256
 50684 DEFB 161      ; x=252: #R49825
@ssub=DEFB 49844%256
 50685 DEFB 180      ; x=253: #R49844
@ssub=DEFB 47860%256
 50686 DEFB 244      ; x=254: #R47860
@ssub=DEFB 49967%256
 50687 DEFB 47       ; x=255: #R49967

; Location descriptor address MSBs
;
; Used by the routine at #R60179. The location descriptor address LSBs can be
; found at #R50432.
@label=LDESCMSBS
@ssub=DEFB 49952/256
b50688 DEFB 195      ; x=0: #R49952
@ssub=DEFB 49967/256
 50689 DEFB 195      ; x=1: #R49967
@ssub=DEFB 49967/256
 50690 DEFB 195      ; x=2: #R49967
@ssub=DEFB 49967/256
 50691 DEFB 195      ; x=3: #R49967
@ssub=DEFB 49967/256
 50692 DEFB 195      ; x=4: #R49967
@ssub=DEFB 49967/256
 50693 DEFB 195      ; x=5: #R49967
@ssub=DEFB 50084/256
 50694 DEFB 195      ; x=6: #R50084
@ssub=DEFB 50072/256
 50695 DEFB 195      ; x=7: #R50072
@ssub=DEFB 49967/256
 50696 DEFB 195      ; x=8: #R49967
@ssub=DEFB 50087/256
 50697 DEFB 195      ; x=9: #R50087
@ssub=DEFB 50110/256
 50698 DEFB 195      ; x=10: #R50110
@ssub=DEFB 50090/256
 50699 DEFB 195      ; x=11: #R50090
@ssub=DEFB 50121/256
 50700 DEFB 195      ; x=12: #R50121
@ssub=DEFB 47334/256
 50701 DEFB 184      ; x=13: #R47334
@ssub=DEFB 50139/256
 50702 DEFB 195      ; x=14: #R50139
@ssub=DEFB 49913/256
 50703 DEFB 194      ; x=15: #R49913
@ssub=DEFB 50133/256
 50704 DEFB 195      ; x=16: #R50133
@ssub=DEFB 49967/256
 50705 DEFB 195      ; x=17: #R49967
@ssub=DEFB 49967/256
 50706 DEFB 195      ; x=18: #R49967
@ssub=DEFB 49967/256
 50707 DEFB 195      ; x=19: #R49967
@ssub=DEFB 49967/256
 50708 DEFB 195      ; x=20: #R49967
@ssub=DEFB 50162/256
 50709 DEFB 195      ; x=21: #R50162
@ssub=DEFB 47596/256
 50710 DEFB 185      ; x=22: #R47596
@ssub=DEFB 50165/256
 50711 DEFB 195      ; x=23: #R50165
@ssub=DEFB 49967/256
 50712 DEFB 195      ; x=24: #R49967
@ssub=DEFB 49967/256
 50713 DEFB 195      ; x=25: #R49967
@ssub=DEFB 49967/256
 50714 DEFB 195      ; x=26: #R49967
@ssub=DEFB 49967/256
 50715 DEFB 195      ; x=27: #R49967
@ssub=DEFB 49967/256
 50716 DEFB 195      ; x=28: #R49967
@ssub=DEFB 49967/256
 50717 DEFB 195      ; x=29: #R49967
@ssub=DEFB 50158/256
 50718 DEFB 195      ; x=30: #R50158
@ssub=DEFB 49967/256
 50719 DEFB 195      ; x=31: #R49967
@ssub=DEFB 47852/256
 50720 DEFB 186      ; x=32: #R47852
@ssub=DEFB 49967/256
 50721 DEFB 195      ; x=33: #R49967
@ssub=DEFB 49967/256
 50722 DEFB 195      ; x=34: #R49967
@ssub=DEFB 49967/256
 50723 DEFB 195      ; x=35: #R49967
@ssub=DEFB 49967/256
 50724 DEFB 195      ; x=36: #R49967
@ssub=DEFB 49967/256
 50725 DEFB 195      ; x=37: #R49967
@ssub=DEFB 47351/256
 50726 DEFB 184      ; x=38: #R47351
@ssub=DEFB 47607/256
 50727 DEFB 185      ; x=39: #R47607
@ssub=DEFB 47354/256
 50728 DEFB 184      ; x=40: #R47354
@ssub=DEFB 48614/256
 50729 DEFB 189      ; x=41: #R48614
@ssub=DEFB 48358/256
 50730 DEFB 188      ; x=42: #R48358
@ssub=DEFB 48102/256
 50731 DEFB 187      ; x=43: #R48102
@ssub=DEFB 48872/256
 50732 DEFB 190      ; x=44: #R48872
@ssub=DEFB 48746/256
 50733 DEFB 190      ; x=45: #R48746
@ssub=DEFB 49967/256
 50734 DEFB 195      ; x=46: #R49967
@ssub=DEFB 49967/256
 50735 DEFB 195      ; x=47: #R49967
@ssub=DEFB 49967/256
 50736 DEFB 195      ; x=48: #R49967
@ssub=DEFB 49967/256
 50737 DEFB 195      ; x=49: #R49967
@ssub=DEFB 49967/256
 50738 DEFB 195      ; x=50: #R49967
@ssub=DEFB 49967/256
 50739 DEFB 195      ; x=51: #R49967
@ssub=DEFB 49967/256
 50740 DEFB 195      ; x=52: #R49967
@ssub=DEFB 47864/256
 50741 DEFB 186      ; x=53: #R47864
@ssub=DEFB 49967/256
 50742 DEFB 195      ; x=54: #R49967
@ssub=DEFB 49967/256
 50743 DEFB 195      ; x=55: #R49967
@ssub=DEFB 49967/256
 50744 DEFB 195      ; x=56: #R49967
@ssub=DEFB 47848/256
 50745 DEFB 186      ; x=57: #R47848
@ssub=DEFB 49967/256
 50746 DEFB 195      ; x=58: #R49967
@ssub=DEFB 49967/256
 50747 DEFB 195      ; x=59: #R49967
@ssub=DEFB 49967/256
 50748 DEFB 195      ; x=60: #R49967
@ssub=DEFB 49967/256
 50749 DEFB 195      ; x=61: #R49967
@ssub=DEFB 47870/256
 50750 DEFB 186      ; x=62: #R47870
@ssub=DEFB 49967/256
 50751 DEFB 195      ; x=63: #R49967
@ssub=DEFB 49967/256
 50752 DEFB 195      ; x=64: #R49967
@ssub=DEFB 49002/256
 50753 DEFB 191      ; x=65: #R49002
@ssub=DEFB 47200/256
 50754 DEFB 184      ; x=66: #R47200
@ssub=DEFB 47207/256
 50755 DEFB 184      ; x=67: #R47207
@ssub=DEFB 47216/256
 50756 DEFB 184      ; x=68: #R47216
@ssub=DEFB 47225/256
 50757 DEFB 184      ; x=69: #R47225
@ssub=DEFB 49967/256
 50758 DEFB 195      ; x=70: #R49967
@ssub=DEFB 48380/256
 50759 DEFB 188      ; x=71: #R48380
@ssub=DEFB 49967/256
 50760 DEFB 195      ; x=72: #R49967
@ssub=DEFB 49967/256
 50761 DEFB 195      ; x=73: #R49967
@ssub=DEFB 47712/256
 50762 DEFB 186      ; x=74: #R47712
@ssub=DEFB 48238/256
 50763 DEFB 188      ; x=75: #R48238
@ssub=DEFB 47480/256
 50764 DEFB 185      ; x=76: #R47480
@ssub=DEFB 47716/256
 50765 DEFB 186      ; x=77: #R47716
@ssub=DEFB 47730/256
 50766 DEFB 186      ; x=78: #R47730
@ssub=DEFB 49146/256
 50767 DEFB 191      ; x=79: #R49146
@ssub=DEFB 48998/256
 50768 DEFB 191      ; x=80: #R48998
@ssub=DEFB 47722/256
 50769 DEFB 186      ; x=81: #R47722
@ssub=DEFB 47738/256
 50770 DEFB 186      ; x=82: #R47738
@ssub=DEFB 47992/256
 50771 DEFB 187      ; x=83: #R47992
@ssub=DEFB 49967/256
 50772 DEFB 195      ; x=84: #R49967
@ssub=DEFB 49967/256
 50773 DEFB 195      ; x=85: #R49967
@ssub=DEFB 47996/256
 50774 DEFB 187      ; x=86: #R47996
@ssub=DEFB 49967/256
 50775 DEFB 195      ; x=87: #R49967
@ssub=DEFB 49126/256
 50776 DEFB 191      ; x=88: #R49126
@ssub=DEFB 49133/256
 50777 DEFB 191      ; x=89: #R49133
@ssub=DEFB 47467/256
 50778 DEFB 185      ; x=90: #R47467
@ssub=DEFB 47456/256
 50779 DEFB 185      ; x=91: #R47456
@ssub=DEFB 47970/256
 50780 DEFB 187      ; x=92: #R47970
@ssub=DEFB 49967/256
 50781 DEFB 195      ; x=93: #R49967
@ssub=DEFB 49967/256
 50782 DEFB 195      ; x=94: #R49967
@ssub=DEFB 49967/256
 50783 DEFB 195      ; x=95: #R49967
@ssub=DEFB 49967/256
 50784 DEFB 195      ; x=96: #R49967
@ssub=DEFB 49967/256
 50785 DEFB 195      ; x=97: #R49967
@ssub=DEFB 49967/256
 50786 DEFB 195      ; x=98: #R49967
@ssub=DEFB 49967/256
 50787 DEFB 195      ; x=99: #R49967
@ssub=DEFB 47862/256
 50788 DEFB 186      ; x=100: #R47862
@ssub=DEFB 49967/256
 50789 DEFB 195      ; x=101: #R49967
@ssub=DEFB 49967/256
 50790 DEFB 195      ; x=102: #R49967
@ssub=DEFB 47850/256
 50791 DEFB 186      ; x=103: #R47850
@ssub=DEFB 49967/256
 50792 DEFB 195      ; x=104: #R49967
@ssub=DEFB 49967/256
 50793 DEFB 195      ; x=105: #R49967
@ssub=DEFB 49967/256
 50794 DEFB 195      ; x=106: #R49967
@ssub=DEFB 49967/256
 50795 DEFB 195      ; x=107: #R49967
@ssub=DEFB 49967/256
 50796 DEFB 195      ; x=108: #R49967
@ssub=DEFB 49967/256
 50797 DEFB 195      ; x=109: #R49967
@ssub=DEFB 49967/256
 50798 DEFB 195      ; x=110: #R49967
@ssub=DEFB 49967/256
 50799 DEFB 195      ; x=111: #R49967
@ssub=DEFB 47356/256
 50800 DEFB 184      ; x=112: #R47356
@ssub=DEFB 48614/256
 50801 DEFB 189      ; x=113: #R48614
@ssub=DEFB 48358/256
 50802 DEFB 188      ; x=114: #R48358
@ssub=DEFB 48102/256
 50803 DEFB 187      ; x=115: #R48102
@ssub=DEFB 48870/256
 50804 DEFB 190      ; x=116: #R48870
@ssub=DEFB 48736/256
 50805 DEFB 190      ; x=117: #R48736
@ssub=DEFB 48501/256
 50806 DEFB 189      ; x=118: #R48501
@ssub=DEFB 49967/256
 50807 DEFB 195      ; x=119: #R49967
@ssub=DEFB 49967/256
 50808 DEFB 195      ; x=120: #R49967
@ssub=DEFB 49967/256
 50809 DEFB 195      ; x=121: #R49967
@ssub=DEFB 49967/256
 50810 DEFB 195      ; x=122: #R49967
@ssub=DEFB 49967/256
 50811 DEFB 195      ; x=123: #R49967
@ssub=DEFB 48507/256
 50812 DEFB 189      ; x=124: #R48507
@ssub=DEFB 47846/256
 50813 DEFB 186      ; x=125: #R47846
@ssub=DEFB 48488/256
 50814 DEFB 189      ; x=126: #R48488
@ssub=DEFB 49967/256
 50815 DEFB 195      ; x=127: #R49967
@ssub=DEFB 49967/256
 50816 DEFB 195      ; x=128: #R49967
@ssub=DEFB 49967/256
 50817 DEFB 195      ; x=129: #R49967
@ssub=DEFB 49967/256
 50818 DEFB 195      ; x=130: #R49967
@ssub=DEFB 49967/256
 50819 DEFB 195      ; x=131: #R49967
@ssub=DEFB 49967/256
 50820 DEFB 195      ; x=132: #R49967
@ssub=DEFB 48893/256
 50821 DEFB 190      ; x=133: #R48893
@ssub=DEFB 49967/256
 50822 DEFB 195      ; x=134: #R49967
@ssub=DEFB 48759/256
 50823 DEFB 190      ; x=135: #R48759
@ssub=DEFB 49665/256
 50824 DEFB 194      ; x=136: #R49665
@ssub=DEFB 49684/256
 50825 DEFB 194      ; x=137: #R49684
@ssub=DEFB 49710/256
 50826 DEFB 194      ; x=138: #R49710
@ssub=DEFB 49731/256
 50827 DEFB 194      ; x=139: #R49731
@ssub=DEFB 49967/256
 50828 DEFB 195      ; x=140: #R49967
@ssub=DEFB 49967/256
 50829 DEFB 195      ; x=141: #R49967
@ssub=DEFB 49967/256
 50830 DEFB 195      ; x=142: #R49967
@ssub=DEFB 49967/256
 50831 DEFB 195      ; x=143: #R49967
@ssub=DEFB 49967/256
 50832 DEFB 195      ; x=144: #R49967
@ssub=DEFB 49967/256
 50833 DEFB 195      ; x=145: #R49967
@ssub=DEFB 49967/256
 50834 DEFB 195      ; x=146: #R49967
@ssub=DEFB 50162/256
 50835 DEFB 195      ; x=147: #R50162
@ssub=DEFB 49752/256
 50836 DEFB 194      ; x=148: #R49752
@ssub=DEFB 47590/256
 50837 DEFB 185      ; x=149: #R47590
@ssub=DEFB 47846/256
 50838 DEFB 186      ; x=150: #R47846
@ssub=DEFB 48488/256
 50839 DEFB 189      ; x=151: #R48488
@ssub=DEFB 49757/256
 50840 DEFB 194      ; x=152: #R49757
@ssub=DEFB 49764/256
 50841 DEFB 194      ; x=153: #R49764
@ssub=DEFB 49778/256
 50842 DEFB 194      ; x=154: #R49778
@ssub=DEFB 49794/256
 50843 DEFB 194      ; x=155: #R49794
@ssub=DEFB 49817/256
 50844 DEFB 194      ; x=156: #R49817
@ssub=DEFB 49842/256
 50845 DEFB 194      ; x=157: #R49842
@ssub=DEFB 49851/256
 50846 DEFB 194      ; x=158: #R49851
@ssub=DEFB 49967/256
 50847 DEFB 195      ; x=159: #R49967
@ssub=DEFB 49967/256
 50848 DEFB 195      ; x=160: #R49967
@ssub=DEFB 49967/256
 50849 DEFB 195      ; x=161: #R49967
@ssub=DEFB 49967/256
 50850 DEFB 195      ; x=162: #R49967
@ssub=DEFB 49967/256
 50851 DEFB 195      ; x=163: #R49967
@ssub=DEFB 49967/256
 50852 DEFB 195      ; x=164: #R49967
@ssub=DEFB 49967/256
 50853 DEFB 195      ; x=165: #R49967
@ssub=DEFB 49967/256
 50854 DEFB 195      ; x=166: #R49967
@ssub=DEFB 49967/256
 50855 DEFB 195      ; x=167: #R49967
@ssub=DEFB 49967/256
 50856 DEFB 195      ; x=168: #R49967
@ssub=DEFB 49967/256
 50857 DEFB 195      ; x=169: #R49967
@ssub=DEFB 49967/256
 50858 DEFB 195      ; x=170: #R49967
@ssub=DEFB 49967/256
 50859 DEFB 195      ; x=171: #R49967
@ssub=DEFB 49967/256
 50860 DEFB 195      ; x=172: #R49967
@ssub=DEFB 49967/256
 50861 DEFB 195      ; x=173: #R49967
@ssub=DEFB 49967/256
 50862 DEFB 195      ; x=174: #R49967
@ssub=DEFB 49876/256
 50863 DEFB 194      ; x=175: #R49876
@ssub=DEFB 65408/256
 50864 DEFB 255      ; x=176: #R65408
@ssub=DEFB 49890/256
 50865 DEFB 194      ; x=177: #R49890
@ssub=DEFB 49903/256
 50866 DEFB 194      ; x=178: #R49903
@ssub=DEFB 49921/256
 50867 DEFB 195      ; x=179: #R49921
@ssub=DEFB 49932/256
 50868 DEFB 195      ; x=180: #R49932
@ssub=DEFB 49864/256
 50869 DEFB 194      ; x=181: #R49864
@ssub=DEFB 48480/256
 50870 DEFB 189      ; x=182: #R48480
@ssub=DEFB 48488/256
 50871 DEFB 189      ; x=183: #R48488
@ssub=DEFB 49945/256
 50872 DEFB 195      ; x=184: #R49945
@ssub=DEFB 49967/256
 50873 DEFB 195      ; x=185: #R49967
@ssub=DEFB 49967/256
 50874 DEFB 195      ; x=186: #R49967
@ssub=DEFB 49967/256
 50875 DEFB 195      ; x=187: #R49967
@ssub=DEFB 49967/256
 50876 DEFB 195      ; x=188: #R49967
@ssub=DEFB 49967/256
 50877 DEFB 195      ; x=189: #R49967
@ssub=DEFB 49009/256
 50878 DEFB 191      ; x=190: #R49009
@ssub=DEFB 49967/256
 50879 DEFB 195      ; x=191: #R49967
@ssub=DEFB 49967/256
 50880 DEFB 195      ; x=192: #R49967
@ssub=DEFB 50087/256
 50881 DEFB 195      ; x=193: #R50087
@ssub=DEFB 50110/256
 50882 DEFB 195      ; x=194: #R50110
@ssub=DEFB 50090/256
 50883 DEFB 195      ; x=195: #R50090
@ssub=DEFB 50121/256
 50884 DEFB 195      ; x=196: #R50121
@ssub=DEFB 47334/256
 50885 DEFB 184      ; x=197: #R47334
@ssub=DEFB 50141/256
 50886 DEFB 195      ; x=198: #R50141
@ssub=DEFB 49967/256
 50887 DEFB 195      ; x=199: #R49967
@ssub=DEFB 49967/256
 50888 DEFB 195      ; x=200: #R49967
@ssub=DEFB 49967/256
 50889 DEFB 195      ; x=201: #R49967
@ssub=DEFB 49967/256
 50890 DEFB 195      ; x=202: #R49967
@ssub=DEFB 49967/256
 50891 DEFB 195      ; x=203: #R49967
@ssub=DEFB 50162/256
 50892 DEFB 195      ; x=204: #R50162
@ssub=DEFB 47592/256
 50893 DEFB 185      ; x=205: #R47592
@ssub=DEFB 50165/256
 50894 DEFB 195      ; x=206: #R50165
@ssub=DEFB 47850/256
 50895 DEFB 186      ; x=207: #R47850
@ssub=DEFB 47356/256
 50896 DEFB 184      ; x=208: #R47356
@ssub=DEFB 48614/256
 50897 DEFB 189      ; x=209: #R48614
@ssub=DEFB 48358/256
 50898 DEFB 188      ; x=210: #R48358
@ssub=DEFB 48102/256
 50899 DEFB 187      ; x=211: #R48102
@ssub=DEFB 48872/256
 50900 DEFB 190      ; x=212: #R48872
@ssub=DEFB 48746/256
 50901 DEFB 190      ; x=213: #R48746
@ssub=DEFB 49967/256
 50902 DEFB 195      ; x=214: #R49967
@ssub=DEFB 49967/256
 50903 DEFB 195      ; x=215: #R49967
@ssub=DEFB 49967/256
 50904 DEFB 195      ; x=216: #R49967
@ssub=DEFB 49967/256
 50905 DEFB 195      ; x=217: #R49967
@ssub=DEFB 49967/256
 50906 DEFB 195      ; x=218: #R49967
@ssub=DEFB 49967/256
 50907 DEFB 195      ; x=219: #R49967
@ssub=DEFB 49967/256
 50908 DEFB 195      ; x=220: #R49967
@ssub=DEFB 49967/256
 50909 DEFB 195      ; x=221: #R49967
@ssub=DEFB 47592/256
@if({asm}<2)(bfix=DEFB 220,bfix=DEFB 56568/256)
 50910 DEFB 185      ; x=222: #IF({fix}<2)(#R47592,#R56568)
@ssub=DEFB 50048/256
 50911 DEFB 195      ; x=223: #R50048
@ssub=DEFB 50133/256
 50912 DEFB 195      ; x=224: #R50133
@ssub=DEFB 50065/256
 50913 DEFB 195      ; x=225: #R50065
@ssub=DEFB 50068/256
 50914 DEFB 195      ; x=226: #R50068
@ssub=DEFB 49967/256
 50915 DEFB 195      ; x=227: #R49967
@ssub=DEFB 49967/256
 50916 DEFB 195      ; x=228: #R49967
@ssub=DEFB 49967/256
 50917 DEFB 195      ; x=229: #R49967
@ssub=DEFB 50084/256
 50918 DEFB 195      ; x=230: #R50084
@ssub=DEFB 50072/256
 50919 DEFB 195      ; x=231: #R50072
@ssub=DEFB 49759/256
 50920 DEFB 194      ; x=232: #R49759
@ssub=DEFB 49770/256
 50921 DEFB 194      ; x=233: #R49770
@ssub=DEFB 49778/256
 50922 DEFB 194      ; x=234: #R49778
@ssub=DEFB 49792/256
 50923 DEFB 194      ; x=235: #R49792
@ssub=DEFB 49817/256
 50924 DEFB 194      ; x=236: #R49817
@ssub=DEFB 49842/256
 50925 DEFB 194      ; x=237: #R49842
@ssub=DEFB 49853/256
 50926 DEFB 194      ; x=238: #R49853
@ssub=DEFB 50051/256
 50927 DEFB 195      ; x=239: #R50051
@ssub=DEFB 50133/256
 50928 DEFB 195      ; x=240: #R50133
@ssub=DEFB 49967/256
 50929 DEFB 195      ; x=241: #R49967
@ssub=DEFB 49967/256
 50930 DEFB 195      ; x=242: #R49967
@ssub=DEFB 49967/256
 50931 DEFB 195      ; x=243: #R49967
@ssub=DEFB 49967/256
 50932 DEFB 195      ; x=244: #R49967
@ssub=DEFB 49967/256
 50933 DEFB 195      ; x=245: #R49967
@ssub=DEFB 50084/256
 50934 DEFB 195      ; x=246: #R50084
@ssub=DEFB 50072/256
 50935 DEFB 195      ; x=247: #R50072
@ssub=DEFB 49757/256
 50936 DEFB 194      ; x=248: #R49757
@ssub=DEFB 49764/256
 50937 DEFB 194      ; x=249: #R49764
@ssub=DEFB 49780/256
 50938 DEFB 194      ; x=250: #R49780
@ssub=DEFB 49798/256
 50939 DEFB 194      ; x=251: #R49798
@ssub=DEFB 49825/256
 50940 DEFB 194      ; x=252: #R49825
@ssub=DEFB 49844/256
 50941 DEFB 194      ; x=253: #R49844
@ssub=DEFB 47860/256
 50942 DEFB 186      ; x=254: #R47860
@ssub=DEFB 49967/256
 50943 DEFB 195      ; x=255: #R49967

; Sprite graphic data
;
; Used by the routine at #R59635.
; .
; Tile #b0 is unused by design (and would appear completely blank if it were
; used). Tiles #b91-#b97, #b99-#b102, #b105 and #b106 belong exclusively to the
; unused sprites of the #FACT#skinnyMan(Skinny Man) character. Tiles #b215 and
; #b216 are unused, but resemble the #FACT#aCatsTale(body and tail of a cat).
; Tiles #b238-#b247 are used for Sam's sprite when he's rolling or
; somersaulting (see #R25618); tiles #b248-#b255 are used by the sprites of
; characters when they are lying down (see #R63784).
b50944 DEFB 0,0,0,60,0,0,192,128,1,9,128,0,255,0,0,0
 50960 DEFB 3,192,12,8,16,152,15,240,15,240,0,0,75,0,190,44
 50976 DEFB 0,0,6,176,9,224,20,160,0,0,0,255,7,137,0,82
 50992 DEFB 0,0,15,240,120,144,8,192,121,48,49,32,0,0,0,255
 51008 DEFB 198,124,0,0,15,240,12,96,61,224,12,7,128,0,52,146
 51024 DEFB 0,0,3,64,9,32,52,9,32,2,192,60,3,192,0,97
 51040 DEFB 0,154,84,6,16,9,160,11,32,9,160,5,128,0,0,84
 51056 DEFB 3,148,0,0,5,64,57,64,57,64,0,18,0,60,0,5
 51072 DEFB 51,0,20,126,24,242,129,16,52,48,0,0,0,0,190,11
 51088 DEFB 224,11,224,0,56,0,243,0,3,179,3,128,15,48,59,48
 51104 DEFB 0,53,14,0,0,224,15,27,0,53,0,0,222,5,183,0
 51120 DEFB 0,13,224,91,112,91,112,0,80,0,0,0,0,0,112,0
 51136 DEFB 5,19,7,234,7,0,81,48,126,160,126,160,0,149,0,0
 51152 DEFB 1,0,96,0,16,1,0,0,0,0,6,3,0,96,63,6
 51168 DEFB 3,96,53,15,240,10,72,0,63,192,0,84,0,56,0,0
 51184 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 51200 DEFB 0,255,255,189,255,254,192,191,253,9,191,254,255,127,255,255
@bfix=DEFB 251,223,236,11,208,155,239,247,239,247,199,255,75,127,190,173
 51216 DEFB 251,223,236,11,208,155,239,251,239,251,199,255,75,127,190,173
 51232 DEFB 252,127,246,183,233,239,212,175,255,255,254,255,247,137,255,82
 51248 DEFB 255,255,239,247,120,151,232,223,121,55,177,47,252,31,254,255
 51264 DEFB 198,125,193,255,175,247,236,111,189,239,236,247,159,255,181,146
@bfix=DEFB 255,255,251,95,233,47,181,233,47,250,223,189,251,223,255,97
 51280 DEFB 255,255,251,95,223,47,181,223,47,250,223,189,251,223,255,97
 51296 DEFB 254,154,85,246,23,233,175,235,47,233,175,245,191,252,15,85
 51312 DEFB 251,149,192,255,229,95,185,95,185,95,255,210,252,188,255,245
 51328 DEFB 51,252,212,126,216,242,129,215,181,183,255,255,255,255,190,235
 51344 DEFB 239,235,239,255,185,254,243,127,251,179,251,159,239,55,187,55
 51360 DEFB 255,181,206,254,252,239,239,219,255,181,255,254,222,245,183,255
 51376 DEFB 255,237,231,91,119,91,119,254,86,255,7,240,127,255,119,255
 51392 DEFB 245,19,247,234,247,127,81,55,126,175,126,175,255,149,255,255
 51408 DEFB 253,126,111,255,215,249,127,127,255,255,246,251,255,97,191,246
 51424 DEFB 251,96,181,239,247,202,75,239,63,223,254,84,255,187,0,0
 51440 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 51456 DEFB 0,0,0,34,0,0,192,64,0,138,128,0,41,0,0,0
 51472 DEFB 2,32,12,4,8,168,9,144,6,96,56,0,75,0,186,36
 51488 DEFB 3,128,6,176,10,160,20,160,0,0,0,185,7,137,0,82
 51504 DEFB 0,0,11,144,120,144,8,192,121,48,35,16,3,224,0,255
 51520 DEFB 206,124,62,0,79,240,12,224,60,240,12,7,192,0,74,98
 51536 DEFB 0,0,4,160,6,32,52,6,32,2,64,60,3,192,0,69
 51552 DEFB 0,146,84,4,80,9,32,10,144,9,32,9,64,1,240,194
 51568 DEFB 5,98,31,0,12,32,86,32,86,32,0,17,3,15,0,2
 51584 DEFB 227,1,14,122,23,97,129,40,74,40,0,0,0,0,126,7
 51600 DEFB 224,7,224,0,70,0,173,0,3,189,4,96,10,208,59,208
 51616 DEFB 0,18,62,0,3,224,10,11,0,18,0,0,127,5,183,0
 51632 DEFB 0,7,240,91,112,91,112,0,88,0,248,15,128,0,184,0
 51648 DEFB 5,225,3,198,11,128,94,16,60,96,60,96,0,125,0,0
 51664 DEFB 3,129,128,0,56,6,0,128,0,0,7,3,0,126,63,5
 51680 DEFB 1,95,28,2,144,48,72,16,96,192,0,130,0,72,0,0
 51696 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 51712 DEFB 0,255,255,34,255,254,192,95,254,138,191,254,41,127,255,255
 51728 DEFB 242,47,236,5,232,171,233,151,246,103,187,255,75,127,186,165
 51744 DEFB 251,191,246,183,234,175,212,175,255,255,254,185,247,137,255,82
 51760 DEFB 255,255,235,151,120,151,232,223,121,55,163,23,251,231,254,255
@bfix=DEFB 206,125,190,127,79,247,236,239,188,247,236,247,223,131,74,98
 51776 DEFB 206,125,190,127,79,247,236,239,188,247,236,247,223,195,74,98
 51792 DEFB 248,127,244,175,246,47,181,246,47,250,95,189,251,223,255,69
@bfix=DEFB 254,146,85,244,87,233,47,234,151,233,47,233,95,253,247,194
 51808 DEFB 254,146,85,244,87,233,47,234,151,233,47,223,95,253,247,194
 51824 DEFB 245,98,223,127,236,47,86,47,86,47,255,209,251,207,255,250
 51840 DEFB 227,253,238,122,215,97,129,171,74,171,255,129,248,31,126,247
 51856 DEFB 239,247,239,254,70,254,173,127,251,189,228,111,234,215,187,215
 51872 DEFB 254,210,190,254,251,239,234,235,255,210,255,255,127,245,183,255
 51888 DEFB 255,247,247,91,119,91,119,254,88,254,251,239,191,254,187,252
 51904 DEFB 245,225,251,198,203,191,94,23,188,111,188,111,252,125,255,255
 51920 DEFB 251,129,159,255,184,6,255,128,31,255,247,251,255,126,191,245
 51936 DEFB 253,95,220,226,151,176,75,213,96,207,254,130,143,75,0,0
 51952 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 51968 DEFB 0,0,0,255,0,0,194,64,0,132,128,0,41,0,0,0
 51984 DEFB 15,240,12,36,8,72,9,72,2,96,124,0,139,0,106,20
 52000 DEFB 7,192,10,176,12,160,24,112,0,0,1,113,2,73,0,82
 52016 DEFB 0,0,23,16,36,144,9,192,37,48,37,16,1,248,1,223
 52032 DEFB 254,124,31,128,93,240,15,224,56,240,15,7,192,120,82,74
 52048 DEFB 7,128,5,32,4,160,52,4,160,1,64,126,7,224,0,197
 52064 DEFB 0,130,84,12,80,8,32,10,80,8,32,11,64,1,136,146
 52080 DEFB 9,74,24,128,9,32,148,160,148,160,0,15,1,7,0,1
 52096 DEFB 11,1,7,106,12,129,65,52,210,20,0,126,7,224,126,7
 52112 DEFB 224,7,224,1,249,0,240,128,3,173,31,144,15,8,58,208
 52128 DEFB 1,8,126,0,7,224,15,10,0,8,0,0,255,3,215,0
 52144 DEFB 0,15,240,61,112,61,112,0,47,1,124,23,192,1,248,3
 52160 DEFB 5,225,3,206,63,128,94,16,60,224,60,224,3,125,0,0
 52176 DEFB 7,254,0,0,127,248,0,255,224,0,5,3,0,95,61,5
 52192 DEFB 1,88,25,2,144,64,72,18,112,48,128,130,112,144,0,0
 52208 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 52224 DEFB 0,255,254,255,127,254,194,95,254,132,191,255,169,127,255,255
 52240 DEFB 239,247,236,37,232,75,233,75,250,111,125,254,139,127,106,213
 52256 DEFB 247,223,234,183,236,175,217,119,255,15,253,113,250,73,255,82
 52272 DEFB 240,255,215,23,164,151,233,223,165,55,165,23,253,251,245,223
 52288 DEFB 254,125,223,191,93,247,239,239,186,247,239,247,223,123,82,74
 52304 DEFB 231,191,229,47,244,175,181,244,175,253,95,126,247,239,254,197
 52320 DEFB 254,130,85,236,87,232,47,234,87,232,47,235,95,249,139,146
 52336 DEFB 249,74,152,191,233,47,148,175,148,175,159,239,253,247,255,253
 52352 DEFB 11,249,247,106,236,129,65,180,210,212,254,126,231,239,126,247
 52368 DEFB 239,247,239,253,249,254,240,191,251,173,223,159,239,11,186,215
 52384 DEFB 253,232,126,254,247,239,239,234,255,232,255,254,255,251,215,255
 52400 DEFB 255,239,247,189,119,189,119,254,175,253,125,215,223,253,251,251
 52416 DEFB 245,225,251,206,191,191,94,23,188,239,188,239,251,125,255,255
 52432 DEFB 247,254,127,255,127,249,255,255,239,255,245,243,255,95,61,245
 52448 DEFB 253,88,217,250,151,64,75,210,119,55,190,130,119,151,0,0
 52464 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 52480 DEFB 0,0,0,126,0,0,130,64,0,128,128,0,41,0,0,0
 52496 DEFB 7,224,8,36,8,8,9,72,2,96,124,0,139,0,74,30
 52512 DEFB 7,192,10,176,8,160,24,112,0,240,1,97,2,79,0,82
 52528 DEFB 15,0,22,16,36,240,9,64,37,240,36,144,3,240,9,255
 52544 DEFB 254,124,63,0,47,240,31,224,56,240,15,7,192,252,130,82
 52560 DEFB 15,192,8,32,5,32,52,5,32,1,224,12,0,192,0,197
 52576 DEFB 0,130,84,12,80,8,32,10,80,8,32,11,64,3,252,146
 52592 DEFB 0,210,63,192,9,32,13,32,13,32,96,6,3,11,0,0
 52608 DEFB 255,3,3,74,6,9,67,11,130,19,1,250,31,160,126,7
 52624 DEFB 224,7,224,2,98,0,164,128,3,161,38,32,10,72,58,16
 52640 DEFB 2,4,124,0,7,192,10,10,0,4,0,1,95,3,215,0
 52656 DEFB 0,21,240,61,112,61,112,0,33,1,252,31,192,1,184,0
 52672 DEFB 5,233,3,254,11,128,94,144,31,224,31,224,0,61,0,0
 52688 DEFB 2,254,0,0,47,240,0,255,128,0,7,9,0,127,159,7
 52704 DEFB 0,127,9,2,144,65,56,36,72,8,0,146,72,144,0,0
 52720 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 52736 DEFB 0,255,255,126,255,254,130,95,254,128,191,255,169,127,255,255
 52752 DEFB 247,239,232,37,232,11,233,75,250,111,125,254,139,127,74,222
 52768 DEFB 247,223,234,183,232,175,217,119,254,247,253,97,250,79,255,82
 52784 DEFB 239,127,214,23,164,247,233,95,165,247,164,151,251,247,233,255
 52800 DEFB 254,125,191,127,175,247,223,239,186,247,239,247,223,253,130,82
 52816 DEFB 239,223,232,47,245,47,181,245,47,253,239,141,240,223,254,197
 52832 DEFB 254,130,85,236,87,232,47,234,87,232,47,235,95,251,253,146
 52848 DEFB 246,210,191,223,233,47,109,47,109,47,111,246,251,251,255,254
@bfix=DEFB 255,251,251,74,246,9,67,203,130,211,253,250,223,175,126,247
 52864 DEFB 255,251,251,74,246,9,67,235,130,211,253,250,223,175,126,247
 52880 DEFB 239,247,239,250,98,254,164,191,251,161,166,47,234,75,186,23
 52896 DEFB 250,244,124,254,247,223,234,234,255,244,255,253,95,251,215,255
 52912 DEFB 255,213,247,189,119,189,119,254,161,253,253,223,223,253,187,252
 52928 DEFB 245,233,251,254,203,191,94,151,223,239,223,239,252,189,255,255
 52944 DEFB 250,254,255,255,175,247,255,255,159,255,247,249,255,127,159,247
 52960 DEFB 254,127,233,250,151,65,59,165,75,203,0,146,75,151,0,0
 52976 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 52992 DEFB 0,0,0,102,0,0,130,64,0,128,128,0,41,0,0,0
 53008 DEFB 6,96,8,36,8,8,10,40,2,96,94,0,106,0,74,14
 53024 DEFB 5,224,6,176,9,160,24,112,1,8,2,201,1,57,0,82
 53040 DEFB 16,128,44,144,19,144,9,64,19,112,36,144,0,16,13,255
 53056 DEFB 254,124,1,0,55,240,31,224,56,240,15,7,224,252,146,66
 53072 DEFB 15,192,9,32,4,32,52,4,32,0,224,76,4,192,0,133
 53088 DEFB 0,130,84,8,80,8,32,10,80,8,32,11,64,1,248,147
 53104 DEFB 0,82,31,128,9,48,5,32,5,32,144,0,0,13,0,0
 53120 DEFB 99,1,1,74,3,57,62,4,146,8,1,250,31,160,126,7
 53136 DEFB 224,7,224,1,28,1,68,128,0,161,17,192,20,72,10,16
 53152 DEFB 1,3,88,1,5,128,20,10,0,3,0,2,167,1,249,0
 53168 DEFB 0,42,112,31,48,31,48,0,18,3,254,63,224,3,24,0
 53184 DEFB 7,233,1,254,1,128,126,144,31,224,31,224,0,31,0,0
 53200 DEFB 0,118,0,0,15,248,0,118,0,0,4,13,0,65,223,5
 53216 DEFB 0,95,9,2,144,65,232,40,40,4,127,34,40,160,0,0
 53232 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 53248 DEFB 0,255,255,102,255,254,130,95,254,128,191,255,169,127,255,255
 53264 DEFB 246,111,232,37,232,11,234,171,250,111,94,254,106,127,74,238
 53280 DEFB 245,239,230,183,233,175,217,119,253,11,250,201,253,57,255,82
@bfix=DEFB 208,191,172,151,211,151,233,95,211,119,164,151,252,23,237,255
 53296 DEFB 208,191,172,151,115,151,233,95,211,119,164,151,252,23,237,255
 53312 DEFB 254,125,193,127,183,247,223,239,186,247,239,247,239,253,146,66
 53328 DEFB 239,223,233,47,244,47,181,244,47,254,239,77,244,223,254,133
 53344 DEFB 254,130,85,232,87,232,47,234,87,232,47,235,95,249,249,147
 53360 DEFB 254,82,159,159,233,63,229,47,229,47,151,248,252,253,255,255
 53376 DEFB 99,249,253,74,251,57,62,244,146,232,253,250,223,175,126,247
 53392 DEFB 239,247,239,253,29,253,68,191,252,161,209,223,212,75,202,23
 53408 DEFB 253,251,91,253,245,191,212,234,255,251,255,250,167,253,249,255
 53424 DEFB 255,170,119,223,55,223,55,254,210,251,254,191,239,251,27,255
@bfix=DEFB 247,233,253,254,241,191,126,151,223,239,223,239,255,223,255,255
 53440 DEFB 247,233,253,254,225,191,126,151,223,239,223,239,255,223,255,255
 53456 DEFB 253,118,255,255,207,251,255,118,127,247,244,253,127,65,223,245
 53472 DEFB 254,95,233,250,151,65,235,167,167,245,127,34,171,175,0,0
 53488 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 53504 DEFB 0,0,0,106,0,0,131,64,0,128,128,0,41,0,0,0
 53520 DEFB 6,160,8,52,8,8,10,40,2,80,78,0,114,0,74,14
 53536 DEFB 4,224,6,160,15,96,24,112,1,92,2,137,0,134,0,82
 53552 DEFB 21,192,40,144,12,96,11,64,29,144,36,176,1,8,6,255
 53568 DEFB 254,252,16,128,23,240,31,224,121,240,15,15,224,94,82,124
 53584 DEFB 5,224,5,32,11,192,52,7,192,0,224,68,4,64,0,137
 53600 DEFB 0,130,84,8,144,8,32,10,80,8,32,11,64,1,28,115
 53616 DEFB 0,126,17,192,7,48,7,224,7,224,104,0,1,6,0,0
 53632 DEFB 114,1,0,74,2,193,134,3,210,4,0,186,11,160,126,15
 53648 DEFB 224,7,224,0,236,1,78,128,0,161,14,192,20,232,10,16
 53664 DEFB 0,1,24,1,1,128,20,10,0,1,0,2,183,0,250,0
 53680 DEFB 0,43,112,31,112,31,96,0,10,1,172,26,192,1,152,0
 53696 DEFB 7,249,1,254,9,128,127,144,31,224,31,224,0,3,0,0
 53712 DEFB 0,67,0,0,28,60,0,67,0,8,5,6,128,80,111,1
 53728 DEFB 0,17,7,2,144,63,252,72,36,2,7,194,16,64,0,0
 53744 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 53760 DEFB 0,255,255,106,255,254,131,95,254,128,191,255,169,127,255,255
 53776 DEFB 246,175,232,53,232,11,234,171,242,87,78,255,114,255,74,238
 53792 DEFB 244,239,246,175,239,111,217,119,253,93,250,137,254,134,254,82
 53808 DEFB 213,223,168,151,236,111,235,95,221,151,164,183,253,11,246,255
 53824 DEFB 254,253,208,191,215,247,223,239,121,247,239,239,239,94,82,124
 53840 DEFB 245,239,245,47,235,223,181,247,223,254,239,69,244,95,254,137
 53856 DEFB 254,130,85,232,151,232,47,234,87,232,47,235,95,253,29,115
 53872 DEFB 255,126,209,223,231,63,231,239,231,239,107,254,141,246,251,255
 53888 DEFB 114,253,254,74,250,193,134,251,210,244,254,186,235,175,126,239
 53904 DEFB 239,247,239,254,237,252,78,191,254,161,238,223,212,235,234,23
 53920 DEFB 206,253,25,253,241,159,212,234,207,253,255,250,183,254,250,255
 53936 DEFB 255,171,119,223,119,223,111,254,234,253,173,218,223,221,155,254
@bfix=DEFB 247,249,253,254,233,191,127,151,223,239,223,239,254,227,255,255
 53952 DEFB 247,249,253,254,223,191,127,151,223,239,223,239,254,227,255,255
 53968 DEFB 255,83,127,255,156,61,255,83,127,251,245,246,191,80,111,249
 53984 DEFB 254,145,231,250,151,191,253,75,165,250,7,194,215,95,0,0
 54000 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 54016 DEFB 0,0,0,115,0,0,130,64,0,128,128,0,127,0,0,0
 54032 DEFB 7,48,8,36,8,8,30,72,15,240,46,0,100,0,126,28
 54048 DEFB 3,224,4,192,14,32,48,112,1,4,3,137,0,98,1,254
 54064 DEFB 16,64,56,144,4,64,29,192,21,16,120,224,1,188,3,127
 54080 DEFB 254,92,27,192,59,240,63,224,185,112,15,23,192,78,36,52
 54096 DEFB 4,224,2,64,9,160,108,2,64,1,192,44,2,192,0,146
 54112 DEFB 0,126,124,9,32,15,224,30,240,7,224,29,128,0,36,230
 54128 DEFB 0,124,2,64,14,96,11,32,4,128,40,0,113,3,4,0
@bfix=DEFB 124,0,0,126,3,129,98,0,36,3,0,138,8,160,126,15
 54144 DEFB 134,0,0,126,3,129,98,0,36,3,0,138,8,160,126,15
 54160 DEFB 224,7,224,0,142,2,252,128,0,161,8,224,47,200,10,16
 54176 DEFB 48,2,78,0,4,224,15,10,48,0,0,5,119,0,126,0
 54192 DEFB 0,87,112,63,224,15,224,0,5,1,12,16,192,33,228,1
 54208 DEFB 7,241,0,252,30,64,127,16,31,224,15,192,1,3,0,0
 54224 DEFB 0,65,0,0,112,10,0,65,0,4,5,3,64,91,55,2
 54240 DEFB 0,34,14,7,240,7,236,112,18,0,130,12,40,0,0,0
 54256 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 54272 DEFB 0,255,255,115,127,254,130,95,254,128,191,255,127,127,255,255
 54288 DEFB 247,55,232,37,232,11,222,75,239,247,174,255,100,255,126,221
 54304 DEFB 251,239,244,223,238,47,179,119,253,5,251,137,255,98,253,254
 54320 DEFB 208,95,184,151,244,95,221,223,213,23,122,239,253,189,251,127
 54336 DEFB 254,93,219,223,187,247,191,239,185,119,239,215,223,78,165,181
@bfix=DEFB 244,239,250,95,233,175,109,250,95,253,223,173,250,223,254,146
 54352 DEFB 244,239,226,95,233,175,109,250,95,253,223,173,250,223,254,146
 54368 DEFB 255,126,125,233,47,239,239,222,247,247,239,221,191,252,37,230
 54384 DEFB 255,125,194,95,238,111,235,47,244,159,42,254,117,251,245,255
@bfix=DEFB 125,228,254,126,251,129,98,252,37,251,254,138,232,175,126,239
 54400 DEFB 125,228,254,126,251,129,98,252,165,251,254,138,232,175,126,239
 54416 DEFB 239,247,239,254,142,250,252,191,254,161,232,239,175,203,234,23
 54432 DEFB 182,250,78,254,244,239,239,234,183,254,255,245,119,255,126,255
 54448 DEFB 255,87,119,191,239,239,239,254,245,253,13,208,223,173,229,253
 54464 DEFB 247,241,254,253,222,95,127,23,223,239,239,223,157,251,255,255
 54480 DEFB 255,93,127,255,115,202,255,93,127,245,245,251,95,91,183,250
 54496 DEFB 254,162,238,247,247,199,237,119,210,255,186,13,171,191,0,0
 54512 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 54528 DEFB 0,0,0,176,128,1,92,128,0,128,128,0,255,0,0,0
 54544 DEFB 11,8,21,200,8,8,62,240,15,224,62,0,76,0,36,60
 54560 DEFB 3,224,5,192,15,32,104,208,1,14,7,137,0,82,1,254
 54576 DEFB 16,224,120,144,4,64,63,192,19,32,249,224,0,126,1,191
 54592 DEFB 254,252,7,224,27,240,63,224,249,224,15,31,192,44,76,52
 54608 DEFB 2,192,4,192,18,160,252,2,64,3,192,114,7,32,0,150
 54624 DEFB 0,84,220,9,96,11,32,61,224,4,128,63,128,0,168,204
 54640 DEFB 0,84,10,128,28,192,11,32,4,128,37,1,88,1,10,0
 54656 DEFB 124,24,1,36,7,129,82,0,76,0,0,24,1,128,52,10
 54672 DEFB 160,2,64,0,105,2,249,0,0,255,6,144,47,144,10,240
 54688 DEFB 72,2,110,1,6,224,31,10,72,1,0,5,119,0,126,0
 54704 DEFB 0,87,112,63,224,15,192,1,5,1,8,16,128,81,10,3
 54720 DEFB 7,243,0,252,48,160,127,48,63,224,15,192,99,7,0,0
 54736 DEFB 0,130,0,0,0,4,0,130,0,14,2,1,224,39,27,2
 54752 DEFB 1,42,28,15,240,0,50,112,0,0,1,244,48,0,0,0
 54768 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 54784 DEFB 0,195,254,176,191,253,92,191,254,128,191,255,255,127,252,63
 54800 DEFB 235,11,213,203,232,11,190,247,239,239,190,255,77,255,165,189
@bfix=DEFB 251,239,245,223,239,47,106,215,253,14,247,137,255,82,253,254
 54816 DEFB 251,239,245,223,239,47,106,215,253,14,247,137,255,82,255,254
 54832 DEFB 208,231,120,151,244,95,191,223,211,47,249,239,254,126,253,191
@bfix=DEFB 254,253,247,239,219,247,191,239,249,239,239,223,223,173,77,181
 54848 DEFB 254,253,247,239,219,247,191,239,249,239,239,255,223,173,77,181
 54864 DEFB 250,223,244,223,210,175,253,250,95,251,223,114,247,47,254,150
 54880 DEFB 255,85,221,233,111,235,47,253,239,244,159,255,191,254,171,205
 54896 DEFB 255,85,234,191,220,223,235,47,244,191,165,253,90,253,234,255
 54912 DEFB 125,218,253,165,247,129,82,255,77,252,255,25,241,159,181,234
 54928 DEFB 175,250,95,255,105,250,249,127,254,255,246,151,175,151,234,247
 54944 DEFB 74,250,110,253,246,239,223,234,74,253,195,245,119,255,126,252
 54960 DEFB 63,87,119,191,239,239,223,253,245,253,9,208,159,85,10,251
 54976 DEFB 247,243,254,253,176,175,127,55,191,239,239,223,107,247,254,159
 54992 DEFB 254,186,255,239,143,245,255,186,255,254,250,253,239,167,219,250
 55008 DEFB 253,170,220,255,247,248,50,112,237,255,253,245,183,255,0,0
 55024 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

@defs=55040:125
; Character buffers for character group #b215
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used. These buffers belong to the following characters:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Character          | =h Initial location }
; { Lady in a hat         | Third floor of the apartment building next to no.
;                           74 }
; { Girl with a pony tail | Third floor of no. 74 }
; { Man in a bowler hat   | Top floor of the hotel }
; { None                  | Out of sight }
; { Gangster              | Top floor of no. 19 }
; TABLE#
; .
; See #R65198 for more details.
@label=CBUF215
b55040 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 55065 DEFS 25       ; {Secondary character buffers (for the characters in
 55090 DEFS 25       ; group #b215 who are currently off screen)
 55115 DEFS 25       ;
 55140 DEFS 25       ; }

; Unused
;
; The value stored here is part of the graphic data that is copied to the
; bottom 3 rows of the screen by the #R56576@start(startup routine).
s55165 DEFB 0

; Sprite tile references (tile 0, animatory states #b0-#b127) and graphic data
; (UDG byte 1/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b55166 DEFB 0,64,3              ; Graphic data for sprite tiles #b126-#b128
                                ; (used for Sam's disguises)
 55169 DEFB 175,0,175,0,175,0,0 ; Sprite tile references for animatory states
                                ; #b0-#b7
 55176 DEFB 192                 ; Graphic data for sprite tile #b136 (used for
                                ; Sam's disguises)
 55177 DEFB 0,0                 ; Sprite tile references for animatory states
                                ; #b8-#b10
 55179 DEFB 0                   ; Sprite tile reference for unused animatory
                                ; state #b11
 55180 DEFB 0,4,32              ; Graphic data for sprite tiles #b140-#b142
                                ; (used for Sam's disguises)
 55183 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b15
 55184 DEFB 4                   ; Graphic data for sprite tile #b144 (used for
                                ; Sam's disguises)
 55185 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b16-#b20
 55189 DEFB 0,0                 ; Graphic data for sprite tiles #b149-#b150
                                ; (used for Sam's disguises)
 55191 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b23
 55192 DEFB 18                  ; Graphic data for sprite tile #b152 (used for
                                ; Sam's disguises)
 55193 DEFB 220,217,220         ; Sprite tile references for animatory states
                                ; #b24-#b27
 55196 DEFB 217                 ; Sprite tile reference for unused animatory
                                ; state #b28
 55197 DEFB 0,66                ; Graphic data for sprite tiles #b157-#b158
                                ; (used for Sam's disguises)
 55199 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b31
 55200 DEFB 0                   ; Graphic data for sprite tile #b160 (used for
                                ; Sam's disguises)
 55201 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b32-#b36
 55205 DEFB 0,240               ; Graphic data for sprite tiles #b165-#b166
                                ; (used for Sam's disguises)
 55207 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b39
 55208 DEFB 0                   ; Graphic data for sprite tile #b168 (used for
                                ; Sam's disguises)
 55209 DEFB 220,217,220,217     ; Sprite tile references for animatory states
                                ; #b40-#b44
 55213 DEFB 0,0,15,0            ; Graphic data for sprite tiles #b173-#b176
                                ; (used for Sam's disguises)
 55217 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b48-#b52
 55221 DEFB 0                   ; Graphic data for sprite tile #b181 (used by
                                ; Sam when he's rolling or somersaulting)
 55222 DEFB 0,0                 ; Sprite tile references for animatory states
                                ; #b54-#b55
 55224 DEFB 0                   ; Graphic data for sprite tile #b184 (used for
                                ; Sam's disguises)
 55225 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b56-#b60
 55229 DEFB 76                  ; Graphic data for sprite tile #b189 (used by
                                ; Sam when he's rolling or somersaulting)
 55230 DEFB 0,0                 ; Sprite tile references for animatory states
                                ; #b62-#b63
 55232 DEFB 0                   ; Graphic data for sprite tile #b192 (used for
                                ; Sam's disguises)
 55233 DEFB 14,0,14,0           ; Sprite tile references for unused animatory
                                ; states #b64-#b68
 55237 DEFB 65                  ; Graphic data for sprite tile #b197 (used by
                                ; Sam when he's rolling or somersaulting)
 55238 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b70
 55239 DEFB 0                   ; Sprite tile reference for unused animatory
                                ; state #b71
 55240 DEFB 60                  ; Graphic data for sprite tile #b200 (used for
                                ; Sam's disguises)
 55241 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b72-#b76
 55245 DEFB 8                   ; Graphic data for sprite tile #b205 (used by
                                ; Sam when he's rolling or somersaulting)
 55246 DEFB 0                   ; Sprite tile reference for unused animatory
                                ; state #b78
 55247 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b79
 55248 DEFB 0                   ; Graphic data for sprite tile #b208 (used for
                                ; Sam's disguises)
 55249 DEFB 14,0,14,0           ; Sprite tile references for animatory states
                                ; #b80-#b84
 55253 DEFB 12,8                ; Graphic data for sprite tiles #b213-#b214
                                ; (used for Sam's disguises)
 55255 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b87
 55256 DEFB 196                 ; Graphic data for sprite tile #b216 (used for
                                ; Sam's disguises)
 55257 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b88-#b92
 55261 DEFB 3,192               ; Graphic data for sprite tiles #b221-#b222
                                ; (used for Sam's disguises)
 55263 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b95
 55264 DEFB 32                  ; Graphic data for sprite tile #b224 (used for
                                ; Sam's disguises)
 55265 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b96-#b100
 55269 DEFB 192,128             ; Graphic data for sprite tiles #b229-#b230
                                ; (used for Sam's disguises)
 55271 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b103
 55272 DEFB 3                   ; Graphic data for sprite tile #b232 (used for
                                ; Sam's disguises)
 55273 DEFB 0,0,0,0             ; Sprite tile references for animatory states
                                ; #b104-#b108
 55277 DEFB 66,60               ; Graphic data for sprite tiles #b237-#b238
                                ; (used for Sam's disguises)
 55279 DEFB 0                   ; Sprite tile reference for animatory state
                                ; #b111
 55280 DEFB 192                 ; Graphic data for sprite tile #b240 (used for
                                ; Sam's disguises)
 55281 DEFB 0,0,0,0,0,0,0       ; Sprite tile references for animatory states
                                ; #b112-#b119
 55288 DEFB 0                   ; Unused
 55289 DEFB 231                 ; Sprite tile reference for animatory state
                                ; #b121
 55290 DEFB 0,0,0,0,0,0         ; Sprite tile references for unused animatory
                                ; states #b120 and #b122-#b127

@defs=55296:125
; Character buffers for character group #b216
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used. These buffers belong to the following characters:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Character          | =h Initial location }
; { Girl with a pony tail | Third floor of the apartment building next to no.
;                           74 }
; { None                  | Out of sight }
; { Lady with big hair    | First floor of no. 31 }
; { None                  | Out of sight }
; { Gangster              | Top floor of no. 19 }
; TABLE#
; .
; See #R65228 for more details.
b55296 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 55321 DEFS 25       ; {Secondary character buffers (for the characters in
 55346 DEFS 25       ; group #b216 who are currently off screen)
 55371 DEFS 25       ;
 55396 DEFS 25       ; }

; Unused
;
; The value stored here is part of the graphic data that is copied to the
; bottom 3 rows of the screen by the #R56576@start(startup routine).
u55421 DEFB 21

; Sprite tile references (tile 1, animatory states #b0-#b127) and graphic data
; (mask byte 1/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b55422 DEFB 254,64,251              ; Graphic data for sprite tiles #b126-#b128
                                    ; (used for Sam's disguises)
 55425 DEFB 16,2,16,122,16,175,251  ; Sprite tile references for animatory
                                    ; states #b0-#b7
 55432 DEFB 223                     ; Graphic data for sprite tile #b136 (used
                                    ; for Sam's disguises)
 55433 DEFB 0,0                     ; Sprite tile references for animatory
                                    ; states #b8-#b10
 55435 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b11
 55436 DEFB 255,244,47              ; Graphic data for sprite tiles #b140-#b142
                                    ; (used for Sam's disguises)
 55439 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b15
 55440 DEFB 228                     ; Graphic data for sprite tile #b144 (used
                                    ; for Sam's disguises)
 55441 DEFB 66,60,66,124            ; Sprite tile references for animatory
                                    ; states #b16-#b20
 55445 DEFB 255,255                 ; Graphic data for sprite tiles #b149-#b150
                                    ; (used for Sam's disguises)
 55447 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b23
 55448 DEFB 210                     ; Graphic data for sprite tile #b152 (used
                                    ; for Sam's disguises)
 55449 DEFB 221,218,221             ; Sprite tile references for animatory
                                    ; states #b24-#b27
 55452 DEFB 218                     ; Sprite tile reference for unused
                                    ; animatory state #b28
 55453 DEFB 227,66                  ; Graphic data for sprite tiles #b157-#b158
                                    ; (used for Sam's disguises)
 55455 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b31
 55456 DEFB 255                     ; Graphic data for sprite tile #b160 (used
                                    ; for Sam's disguises)
 55457 DEFB 114,109,114,129         ; Sprite tile references for animatory
                                    ; states #b32-#b36
 55461 DEFB 255,240                 ; Graphic data for sprite tiles #b165-#b166
                                    ; (used for Sam's disguises)
@bfix=DEFB 0
 55463 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b39
 55464 DEFB 255                     ; Graphic data for sprite tile #b168 (used
                                    ; for Sam's disguises)
 55465 DEFB 225,223,225,223         ; Sprite tile references for animatory
                                    ; states #b40-#b44
 55469 DEFB 254,63,239,1            ; Graphic data for sprite tiles #b173-#b176
                                    ; (used for Sam's disguises)
 55473 DEFB 32,0,32,126             ; Sprite tile references for animatory
                                    ; states #b48-#b52
 55477 DEFB 241                     ; Graphic data for sprite tile #b181 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
@bfix=DEFB 0,0
 55478 DEFB 0,251                   ; Sprite tile references for animatory
                                    ; states #b54-#b55
 55480 DEFB 240                     ; Graphic data for sprite tile #b184 (used
                                    ; for Sam's disguises)
 55481 DEFB 48,40,48,40             ; Sprite tile references for animatory
                                    ; states #b56-#b60
 55485 DEFB 76                      ; Graphic data for sprite tile #b189 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55486 DEFB 0,251                   ; Sprite tile references for animatory
                                    ; states #b62-#b63
 55488 DEFB 31                      ; Graphic data for sprite tile #b192 (used
                                    ; for Sam's disguises)
 55489 DEFB 92,0,92,0               ; Sprite tile references for unused
                                    ; animatory states #b64-#b68
 55493 DEFB 65                      ; Graphic data for sprite tile #b197 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55494 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b70
 55495 DEFB 251                     ; Sprite tile reference for unused
                                    ; animatory state #b71
 55496 DEFB 189                     ; Graphic data for sprite tile #b200 (used
                                    ; for Sam's disguises)
 55497 DEFB 80,27,80,27             ; Sprite tile references for animatory
                                    ; states #b72-#b76
 55501 DEFB 239                     ; Graphic data for sprite tile #b205 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55502 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b78
@bfix=DEFB 0
 55503 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b79
 55504 DEFB 255                     ; Graphic data for sprite tile #b208 (used
                                    ; for Sam's disguises)
 55505 DEFB 154,147,154,160         ; Sprite tile references for animatory
                                    ; states #b80-#b84
 55509 DEFB 236,11                  ; Graphic data for sprite tiles #b213-#b214
                                    ; (used for Sam's disguises)
@bfix=DEFB 0
 55511 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b87
 55512 DEFB 196                     ; Graphic data for sprite tile #b216 (used
                                    ; for Sam's disguises)
 55513 DEFB 164,0,164,168           ; Sprite tile references for animatory
                                    ; states #b88-#b92
 55517 DEFB 251,223                 ; Graphic data for sprite tiles #b221-#b222
                                    ; (used for Sam's disguises)
@bfix=DEFB 0
 55519 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b95
 55520 DEFB 47                      ; Graphic data for sprite tile #b224 (used
                                    ; for Sam's disguises)
 55521 DEFB 140,138,140,138         ; Sprite tile references for animatory
                                    ; states #b96-#b100
 55525 DEFB 192,191                 ; Graphic data for sprite tiles #b229-#b230
                                    ; (used for Sam's disguises)
@bfix=DEFB 0
 55527 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b103
 55528 DEFB 251                     ; Graphic data for sprite tile #b232 (used
                                    ; for Sam's disguises)
 55529 DEFB 187,185,187,189         ; Sprite tile references for animatory
                                    ; states #b104-#b108
 55533 DEFB 66,189                  ; Graphic data for sprite tiles #b237-#b238
                                    ; (used for Sam's disguises)
 55535 DEFB 251                     ; Sprite tile reference for animatory state
                                    ; #b111
 55536 DEFB 223                     ; Graphic data for sprite tile #b240 (used
                                    ; for Sam's disguises)
 55537 DEFB 196,191,196,204,0,0,251 ; Sprite tile references for animatory
                                    ; states #b112-#b119
 55544 DEFB 0                       ; Unused
 55545 DEFB 232                     ; Sprite tile reference for animatory state
                                    ; #b121
 55546 DEFB 0,0,0,0,0,0             ; Sprite tile references for unused
                                    ; animatory states #b120 and #b122-#b127

@defs=55552:125
; Character buffers for character group #b217
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used.  These buffers belong to the following characters:
; .
; #TABLE(default)
; { =h Character          | =h Initial location }
; { Man in a baseball cap | Shop at the far left of town }
; { None                  | Out of sight }
; { Girl with a pony tail | Top floor of no. 31 }
; { None                  | Out of sight }
; { Man in a bowler hat   | Sidewalk outside no. 15 }
; TABLE#
; .
; See #R65258 for more details.
b55552 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 55577 DEFS 25       ; {Secondary character buffers (for the characters in
 55602 DEFS 25       ; group #b217 who are currently off screen)
 55627 DEFS 25       ;
 55652 DEFS 25       ; }

; Unused
;
; The value stored here is part of the graphic data that is copied to the
; bottom 3 rows of the screen by the #R56576@start(startup routine).
u55677 DEFB 24

; Sprite tile references (tile 2, animatory states #b0-#b127) and graphic data
; (UDG byte 2/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b55678 DEFB 0,160,2                 ; Graphic data for sprite tiles #b126-#b128
                                    ; (used for Sam's disguises)
 55681 DEFB 18,183,18,123,18,16,255 ; Sprite tile references for animatory
                                    ; states #b0-#b7
 55688 DEFB 160                     ; Graphic data for sprite tile #b136 (used
                                    ; for Sam's disguises)
 55689 DEFB 244,239                 ; Sprite tile references for animatory
                                    ; states #b8-#b10
 55691 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b11
 55692 DEFB 0,4,32                  ; Graphic data for sprite tiles #b140-#b142
                                    ; (used for Sam's disguises)
 55695 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b15
 55696 DEFB 10                      ; Graphic data for sprite tile #b144 (used
                                    ; for Sam's disguises)
 55697 DEFB 68,62,68,125            ; Sprite tile references for animatory
                                    ; states #b16-#b20
 55701 DEFB 0,0                     ; Graphic data for sprite tiles #b149-#b150
                                    ; (used for Sam's disguises)
 55703 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b23
 55704 DEFB 16                      ; Graphic data for sprite tile #b152 (used
                                    ; for Sam's disguises)
 55705 DEFB 222,219,222             ; Sprite tile references for animatory
                                    ; states #b24-#b27
 55708 DEFB 219                     ; Sprite tile reference for unused
                                    ; animatory state #b28
 55709 DEFB 28,66                   ; Graphic data for sprite tiles #b157-#b158
                                    ; (used for Sam's disguises)
 55711 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b31
 55712 DEFB 0                       ; Graphic data for sprite tile #b160 (used
                                    ; for Sam's disguises)
 55713 DEFB 116,5,116,130           ; Sprite tile references for animatory
                                    ; states #b32-#b36
 55717 DEFB 0,240                   ; Graphic data for sprite tiles #b165-#b166
                                    ; (used for Sam's disguises)
 55719 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b39
 55720 DEFB 0                       ; Graphic data for sprite tile #b168 (used
                                    ; for Sam's disguises)
 55721 DEFB 226,224,226,224         ; Sprite tile references for animatory
                                    ; states #b40-#b44
 55725 DEFB 1,192,15,254            ; Graphic data for sprite tiles #b173-#b176
                                    ; (used for Sam's disguises)
 55729 DEFB 34,27,34,127            ; Sprite tile references for animatory
                                    ; states #b48-#b52
 55733 DEFB 14                      ; Graphic data for sprite tile #b181 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55734 DEFB 0,255                   ; Sprite tile references for animatory
                                    ; states #b54-#b55
 55736 DEFB 15                      ; Graphic data for sprite tile #b184 (used
                                    ; for Sam's disguises)
 55737 DEFB 50,42,50,132            ; Sprite tile references for animatory
                                    ; states #b56-#b60
 55741 DEFB 92                      ; Graphic data for sprite tile #b189 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55742 DEFB 0,255                   ; Sprite tile references for animatory
                                    ; states #b62-#b63
 55744 DEFB 224                     ; Graphic data for sprite tile #b192 (used
                                    ; for Sam's disguises)
 55745 DEFB 99,94,99,137            ; Sprite tile references for unused
                                    ; animatory states #b64-#b68
 55749 DEFB 1                       ; Graphic data for sprite tile #b197 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55750 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b70
 55751 DEFB 255                     ; Sprite tile reference for unused
                                    ; animatory state #b71
 55752 DEFB 42                      ; Graphic data for sprite tile #b200 (used
                                    ; for Sam's disguises)
 55753 DEFB 82,27,82,135            ; Sprite tile references for animatory
                                    ; states #b72-#b76
 55757 DEFB 16                      ; Graphic data for sprite tile #b205 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 55758 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b78
 55759 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b79
 55760 DEFB 0                       ; Graphic data for sprite tile #b208 (used
                                    ; for Sam's disguises)
 55761 DEFB 156,149,156,161         ; Sprite tile references for animatory
                                    ; states #b80-#b84
 55765 DEFB 12,196                  ; Graphic data for sprite tiles #b213-#b214
                                    ; (used for Sam's disguises)
 55767 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b87
 55768 DEFB 196                     ; Graphic data for sprite tile #b216 (used
                                    ; for Sam's disguises)
 55769 DEFB 166,163,166,169         ; Sprite tile references for animatory
                                    ; states #b88-#b92
 55773 DEFB 3,224                   ; Graphic data for sprite tiles #b221-#b222
                                    ; (used for Sam's disguises)
 55775 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b95
 55776 DEFB 32                      ; Graphic data for sprite tile #b224 (used
                                    ; for Sam's disguises)
 55777 DEFB 82,27,82,135            ; Sprite tile references for animatory
                                    ; states #b96-#b100
 55781 DEFB 204,64                  ; Graphic data for sprite tiles #b229-#b230
                                    ; (used for Sam's disguises)
 55783 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b103
 55784 DEFB 2                       ; Graphic data for sprite tile #b232 (used
                                    ; for Sam's disguises)
 55785 DEFB 177,171,177,184         ; Sprite tile references for animatory
                                    ; states #b104-#b108
 55789 DEFB 66,62                   ; Graphic data for sprite tiles #b237-#b238
                                    ; (used for Sam's disguises)
 55791 DEFB 255                     ; Sprite tile reference for animatory state
                                    ; #b111
 55792 DEFB 160                     ; Graphic data for sprite tile #b240 (used
                                    ; for Sam's disguises)
 55793 DEFB 198,192,198,205,0,0,255 ; Sprite tile references for animatory
                                    ; states #b112-#b119
 55800 DEFB 0                       ; Unused
 55801 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b121
 55802 DEFB 0,0,0,0,0,0             ; Sprite tile references for unused
                                    ; animatory states #b120 and #b122-#b127

@defs=55808:125
; Character buffers for character group #b218
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used. These buffers belong to the following characters:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Character          | =h Initial location }
; { Cat                   | Outside the shop on the right-hand side under the
;                           apartments next to no. 74 }
; { Lady in a hat         | Second floor of the hotel }
; { None                  | Out of sight }
; { Cat                   | Left edge of the apartment building next to no. 19
;                           }
; { Lady in a hat         | Sidewalk outside no. 17 }
; TABLE#
; .
; See #R65288 for more details.
b55808 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 55833 DEFS 25       ; {Secondary character buffers (for the characters in
 55858 DEFS 25       ; group #b218 who are currently off screen)
 55883 DEFS 25       ;
 55908 DEFS 25       ; }

; Unused
;
; The value stored here is part of the graphic data that is copied to the
; bottom 3 rows of the screen by the #R56576@start(startup routine).
u55933 DEFB 0

; Sprite tile references (tile 3, animatory states #b0-#b127) and graphic data
; (mask byte 2/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b55934 DEFB 254,160,242               ; Graphic data for sprite tiles
                                      ; #b126-#b128 (used for Sam's disguises)
 55937 DEFB 20,8,20,8,20,18,0         ; Sprite tile references for animatory
                                      ; states #b0-#b7
 55944 DEFB 175                       ; Graphic data for sprite tile #b136
                                      ; (used for Sam's disguises)
 55945 DEFB 241,245                   ; Sprite tile references for animatory
                                      ; states #b8-#b10
 55947 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b11
 55948 DEFB 127,196,39                ; Graphic data for sprite tiles
                                      ; #b140-#b142 (used for Sam's disguises)
 55951 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b15
 55952 DEFB 234                       ; Graphic data for sprite tile #b144
                                      ; (used for Sam's disguises)
 55953 DEFB 70,8,74,8                 ; Sprite tile references for animatory
                                      ; states #b16-#b20
 55957 DEFB 255,252                   ; Graphic data for sprite tiles
                                      ; #b149-#b150 (used for Sam's disguises)
 55959 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b23
 55960 DEFB 208                       ; Graphic data for sprite tile #b152
                                      ; (used for Sam's disguises)
 55961 DEFB 70,8,74                   ; Sprite tile references for animatory
                                      ; states #b24-#b27
 55964 DEFB 8                         ; Sprite tile reference for unused
                                      ; animatory state #b28
 55965 DEFB 221,66                    ; Graphic data for sprite tiles
                                      ; #b157-#b158 (used for Sam's disguises)
 55967 DEFB 246                       ; Sprite tile reference for animatory
                                      ; state #b31
 55968 DEFB 255                       ; Graphic data for sprite tile #b160
                                      ; (used for Sam's disguises)
 55969 DEFB 118,112,120,112           ; Sprite tile references for animatory
                                      ; states #b32-#b36
 55973 DEFB 252,240                   ; Graphic data for sprite tiles
                                      ; #b165-#b166 (used for Sam's disguises)
 55975 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b39
 55976 DEFB 254                       ; Graphic data for sprite tile #b168
                                      ; (used for Sam's disguises)
 55977 DEFB 118,112,120,112           ; Sprite tile references for animatory
                                      ; states #b40-#b44
 55981 DEFB 253,223,239,254           ; Graphic data for sprite tiles
                                      ; #b173-#b176 (used for Sam's disguises)
@bfix=DEFB 36,11,36,0
 55985 DEFB 36,11,36,11               ; Sprite tile references for animatory
                                      ; states #b48-#b52
 55989 DEFB 238                       ; Graphic data for sprite tile #b181
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 55990 DEFB 0,0                       ; Sprite tile references for animatory
                                      ; states #b54-#b55
 55992 DEFB 239                       ; Graphic data for sprite tile #b184
                                      ; (used for Sam's disguises)
 55993 DEFB 52,44,56,44               ; Sprite tile references for animatory
                                      ; states #b56-#b60
 55997 DEFB 92                        ; Graphic data for sprite tile #b189
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 55998 DEFB 0,0                       ; Sprite tile references for animatory
                                      ; states #b62-#b63
 56000 DEFB 239                       ; Graphic data for sprite tile #b192
                                      ; (used for Sam's disguises)
 56001 DEFB 101,96,105,96             ; Sprite tile references for unused
                                      ; animatory states #b64-#b68
 56005 DEFB 1                         ; Graphic data for sprite tile #b197
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 56006 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b70
 56007 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b71
 56008 DEFB 170                       ; Graphic data for sprite tile #b200
                                      ; (used for Sam's disguises)
 56009 DEFB 84,11,87,11               ; Sprite tile references for animatory
                                      ; states #b72-#b76
 56013 DEFB 211                       ; Graphic data for sprite tile #b205
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 56014 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b78
 56015 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b79
 56016 DEFB 255                       ; Graphic data for sprite tile #b208
                                      ; (used for Sam's disguises)
 56017 DEFB 158,152,158,152           ; Sprite tile references for animatory
                                      ; states #b80-#b84
 56021 DEFB 236,197                   ; Graphic data for sprite tiles
                                      ; #b213-#b214 (used for Sam's disguises)
 56023 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b87
 56024 DEFB 196                       ; Graphic data for sprite tile #b216
                                      ; (used for Sam's disguises)
 56025 DEFB 167,8,167,8               ; Sprite tile references for animatory
                                      ; states #b88-#b92
 56029 DEFB 243,239                   ; Graphic data for sprite tiles
                                      ; #b221-#b222 (used for Sam's disguises)
 56031 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b95
 56032 DEFB 47                        ; Graphic data for sprite tile #b224
                                      ; (used for Sam's disguises)
 56033 DEFB 143,11,145,11             ; Sprite tile references for animatory
                                      ; states #b96-#b100
 56037 DEFB 204,95                    ; Graphic data for sprite tiles
                                      ; #b229-#b230 (used for Sam's disguises)
 56039 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b103
 56040 DEFB 250                       ; Graphic data for sprite tile #b232
                                      ; (used for Sam's disguises)
 56041 DEFB 179,173,181,173           ; Sprite tile references for animatory
                                      ; states #b104-#b108
 56045 DEFB 66,62                     ; Graphic data for sprite tiles
                                      ; #b237-#b238 (used for Sam's disguises)
 56047 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b111
 56048 DEFB 175                       ; Graphic data for sprite tile #b240
                                      ; (used for Sam's disguises)
 56049 DEFB 200,194,202,194,211,206,0 ; Sprite tile references for animatory
                                      ; states #b112-#b119
 56056 DEFB 0                         ; Unused
 56057 DEFB 233                       ; Sprite tile reference for animatory
                                      ; state #b121
 56058 DEFB 0,0,0,0,0,0               ; Sprite tile references for unused
                                      ; animatory states #b120 and #b122-#b127

@defs=56064:125
; Character buffers for character group #b219
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used. These buffers belong to the following characters:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Character          | =h Initial location }
; { Gangster              | Top floor of the apartment building next to no. 74
;                           }
; { Man in a baseball cap | Third floor of the hotel }
; { Policeman (jailer)    | Third floor of the police station }
; { Lady with big hair    | Third floor of the apartment building next to no.
;                           19 }
; { Lady in a hat         | Third floor of no. 15 }
; TABLE#
; .
; See #R65318 for more details.
b56064 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 56089 DEFS 25       ; {Secondary character buffers (for the characters in
 56114 DEFS 25       ; group #b219 who are currently off screen)
 56139 DEFS 25       ;
 56164 DEFS 25       ; }

; Unused
s56189 DEFB 0

; Sprite tile references (tile 4, animatory states #b0-#b119) and graphic data
; (UDG byte 3/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b56190 DEFB 1,18,13                 ; Graphic data for sprite tiles #b126-#b128
                                    ; (used for Sam's disguises)
 56193 DEFB 22,11,24,11,227,229,250 ; Sprite tile references for animatory
                                    ; states #b0-#b7
 56200 DEFB 80                      ; Graphic data for sprite tile #b136 (used
                                    ; for Sam's disguises)
 56201 DEFB 0,246                   ; Sprite tile references for animatory
                                    ; states #b8-#b10
 56203 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b11
 56204 DEFB 128,63,248              ; Graphic data for sprite tiles #b140-#b142
                                    ; (used for Sam's disguises)
 56207 DEFB 242                     ; Sprite tile reference for animatory state
                                    ; #b15
 56208 DEFB 17                      ; Graphic data for sprite tile #b144 (used
                                    ; for Sam's disguises)
 56209 DEFB 72,46,75,46             ; Sprite tile references for animatory
                                    ; states #b16-#b20
 56213 DEFB 0,3                     ; Graphic data for sprite tiles #b149-#b150
                                    ; (used for Sam's disguises)
 56215 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b23
 56216 DEFB 15                      ; Graphic data for sprite tile #b152 (used
                                    ; for Sam's disguises)
 56217 DEFB 72,46,75                ; Sprite tile references for animatory
                                    ; states #b24-#b27
 56220 DEFB 46                      ; Sprite tile reference for unused
                                    ; animatory state #b28
 56221 DEFB 62,255                  ; Graphic data for sprite tiles #b157-#b158
                                    ; (used for Sam's disguises)
 56223 DEFB 247                     ; Sprite tile reference for animatory state
                                    ; #b31
 56224 DEFB 0                       ; Graphic data for sprite tile #b160 (used
                                    ; for Sam's disguises)
 56225 DEFB 103,0,107,0             ; Sprite tile references for animatory
                                    ; states #b32-#b36
 56229 DEFB 3,242                   ; Graphic data for sprite tiles #b165-#b166
                                    ; (used for Sam's disguises)
 56231 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b39
 56232 DEFB 0                       ; Graphic data for sprite tile #b168 (used
                                    ; for Sam's disguises)
 56233 DEFB 103,0,107,0             ; Sprite tile references for animatory
                                    ; states #b40-#b44
 56237 DEFB 3,224,31,127            ; Graphic data for sprite tiles #b173-#b176
                                    ; (used for Sam's disguises)
 56241 DEFB 38,0,38,0               ; Sprite tile references for animatory
                                    ; states #b48-#b52
 56245 DEFB 29                      ; Graphic data for sprite tile #b181 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 56246 DEFB 0,250                   ; Sprite tile references for animatory
                                    ; states #b54-#b55
 56248 DEFB 7                       ; Graphic data for sprite tile #b184 (used
                                    ; for Sam's disguises)
 56249 DEFB 54,46,58,46             ; Sprite tile references for animatory
                                    ; states #b56-#b60
 56253 DEFB 92                      ; Graphic data for sprite tile #b189 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 56254 DEFB 0,250                   ; Sprite tile references for animatory
                                    ; states #b62-#b63
 56256 DEFB 240                     ; Graphic data for sprite tile #b192 (used
                                    ; for Sam's disguises)
 56257 DEFB 103,0,107,0             ; Sprite tile references for unused
                                    ; animatory states #b64-#b68
 56261 DEFB 1                       ; Graphic data for sprite tile #b197 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 56262 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b70
 56263 DEFB 250                     ; Sprite tile reference for unused
                                    ; animatory state #b71
 56264 DEFB 69                      ; Graphic data for sprite tile #b200 (used
                                    ; for Sam's disguises)
 56265 DEFB 38,0,89,0               ; Sprite tile references for animatory
                                    ; states #b72-#b76
 56269 DEFB 16                      ; Graphic data for sprite tile #b205 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 56270 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b78
 56271 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b79
 56272 DEFB 0                       ; Graphic data for sprite tile #b208 (used
                                    ; for Sam's disguises)
 56273 DEFB 38,0,89,0               ; Sprite tile references for animatory
                                    ; states #b80-#b84
 56277 DEFB 12,228                  ; Graphic data for sprite tiles #b213-#b214
                                    ; (used for Sam's disguises)
 56279 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b87
 56280 DEFB 196                     ; Graphic data for sprite tile #b216 (used
                                    ; for Sam's disguises)
 56281 DEFB 38,0,89,0               ; Sprite tile references for animatory
                                    ; states #b88-#b92
 56285 DEFB 15,240                  ; Graphic data for sprite tiles #b221-#b222
                                    ; (used for Sam's disguises)
 56287 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b95
 56288 DEFB 64                      ; Graphic data for sprite tile #b224 (used
                                    ; for Sam's disguises)
 56289 DEFB 38,0,89,0               ; Sprite tile references for animatory
                                    ; states #b96-#b100
 56293 DEFB 206,64                  ; Graphic data for sprite tiles #b229-#b230
                                    ; (used for Sam's disguises)
 56295 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b103
 56296 DEFB 4                       ; Graphic data for sprite tile #b232 (used
                                    ; for Sam's disguises)
 56297 DEFB 72,46,75,46             ; Sprite tile references for animatory
                                    ; states #b104-#b108
 56301 DEFB 68,255                  ; Graphic data for sprite tiles #b237-#b238
                                    ; (used for Sam's disguises)
 56303 DEFB 250                     ; Sprite tile reference for animatory state
                                    ; #b111
 56304 DEFB 80                      ; Graphic data for sprite tile #b240 (used
                                    ; for Sam's disguises)
 56305 DEFB 72,46,75,46,212,208,250 ; Sprite tile references for animatory
                                    ; states #b112-#b119

; Unused
;
; These bytes are unused, but they may once have held attribute bytes to be
; used for animatory states #AS120(#b120-#b127/#b248-#b255) (see #R59635).
@label=OBJATTR
s56312 DEFS 8

@defs=56320:125
; Character buffers for character group #b220
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used. These buffers belong to the following characters:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Character          | =h Initial location }
; { Lady with big hair    | Sidewalk by the left edge of no. 74 }
; { Lady with big hair    | Third floor of the hotel }
; { None                  | Out of sight }
; { Man in a baseball cap | Third floor of the apartment building next to no.
;                           19 }
; { Lady with big hair    | Second floor of no. 15 }
; TABLE#
; .
; See #R65348 for more details.
b56320 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 56345 DEFS 25       ; {Secondary character buffers (for the characters in
 56370 DEFS 25       ; group #b220 who are currently off screen)
 56395 DEFS 25       ;
 56420 DEFS 25       ; }

; Unused
s56445 DEFB 0

; Sprite tile references (tile 5, animatory states #b0-#b119) and graphic data
; (mask byte 3/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b56446 DEFB 253,18,237                ; Graphic data for sprite tiles
                                      ; #b126-#b128 (used for Sam's disguises)
 56449 DEFB 176,170,176,170,176,0,254 ; Sprite tile references for animatory
                                      ; states #b0-#b7
 56456 DEFB 87                        ; Graphic data for sprite tile #b136
                                      ; (used for Sam's disguises)
 56457 DEFB 0,0                       ; Sprite tile references for animatory
                                      ; states #b8-#b10
 56459 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b11
 56460 DEFB 191,191,251               ; Graphic data for sprite tiles
                                      ; #b140-#b142 (used for Sam's disguises)
 56463 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b15
 56464 DEFB 209                       ; Graphic data for sprite tile #b144
                                      ; (used for Sam's disguises)
 56465 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b16-#b20
 56469 DEFB 255,251                   ; Graphic data for sprite tiles
                                      ; #b149-#b150 (used for Sam's disguises)
 56471 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b23
 56472 DEFB 239                       ; Graphic data for sprite tile #b152
                                      ; (used for Sam's disguises)
 56473 DEFB 0,0,0                     ; Sprite tile references for animatory
                                      ; states #b24-#b27
 56476 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b28
 56477 DEFB 190,255                   ; Graphic data for sprite tiles
                                      ; #b157-#b158 (used for Sam's disguises)
 56479 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b31
 56480 DEFB 255                       ; Graphic data for sprite tile #b160
                                      ; (used for Sam's disguises)
 56481 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b32-#b36
 56485 DEFB 155,242                   ; Graphic data for sprite tiles
                                      ; #b165-#b166 (used for Sam's disguises)
 56487 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b39
 56488 DEFB 255                       ; Graphic data for sprite tile #b168
                                      ; (used for Sam's disguises)
 56489 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b40-#b44
 56493 DEFB 251,239,223,127           ; Graphic data for sprite tiles
                                      ; #b173-#b176 (used for Sam's disguises)
 56497 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b48-#b52
 56501 DEFB 221                       ; Graphic data for sprite tile #b181
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 56502 DEFB 0,254                     ; Sprite tile references for animatory
                                      ; states #b54-#b55
 56504 DEFB 247                       ; Graphic data for sprite tile #b184
                                      ; (used for Sam's disguises)
 56505 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b56-#b60
 56509 DEFB 92                        ; Graphic data for sprite tile #b189
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 56510 DEFB 0,254                     ; Sprite tile references for animatory
                                      ; states #b62-#b63
 56512 DEFB 247                       ; Graphic data for sprite tile #b192
                                      ; (used for Sam's disguises)
 56513 DEFB 15,1,15,1                 ; Sprite tile references for unused
                                      ; animatory states #b64-#b68
 56517 DEFB 1                         ; Graphic data for sprite tile #b197
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 56518 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b70
 56519 DEFB 254                       ; Sprite tile reference for unused
                                      ; animatory state #b71
 56520 DEFB 69                        ; Graphic data for sprite tile #b200
                                      ; (used for Sam's disguises)
 56521 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b72-#b76
 56525 DEFB 209                       ; Graphic data for sprite tile #b205
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 56526 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b78
 56527 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b79
 56528 DEFB 127                       ; Graphic data for sprite tile #b208
                                      ; (used for Sam's disguises)
 56529 DEFB 15,1,15,1                 ; Sprite tile references for animatory
                                      ; states #b80-#b84
 56533 DEFB 236,228                   ; Graphic data for sprite tiles
                                      ; #b213-#b214 (used for Sam's disguises)
 56535 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b87
 56536 DEFB 196                       ; Graphic data for sprite tile #b216
                                      ; (used for Sam's disguises)
 56537 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b88-#b92
 56541 DEFB 239,247                   ; Graphic data for sprite tiles
                                      ; #b221-#b222 (used for Sam's disguises)
 56543 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b95
 56544 DEFB 95                        ; Graphic data for sprite tile #b224
                                      ; (used for Sam's disguises)
 56545 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b96-#b100
 56549 DEFB 206,79                    ; Graphic data for sprite tiles
                                      ; #b229-#b230 (used for Sam's disguises)
 56551 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b103
 56552 DEFB 244                       ; Graphic data for sprite tile #b232
                                      ; (used for Sam's disguises)
 56553 DEFB 0,0,0,0                   ; Sprite tile references for animatory
                                      ; states #b104-#b108
 56557 DEFB 69,255                    ; Graphic data for sprite tiles
                                      ; #b237-#b238 (used for Sam's disguises)
 56559 DEFB 254                       ; Sprite tile reference for animatory
                                      ; state #b111
 56560 DEFB 87                        ; Graphic data for sprite tile #b240
                                      ; (used for Sam's disguises)
 56561 DEFB 0,0,0,0,0,0,254           ; Sprite tile references for animatory
                                      ; states #b112-#b119

; Unused
@bfix=!56568
s56568 DEFS 8

@bfix+begin
; Location descriptors (x-coordinate 222)
;
; Used by the routine at #R60179. These descriptors correspond to the rightmost
; edges of the roof and floors of no. 19.
@label=LOCDESCS222
b56568 DEFB 18,128 ; y=13, z=1; left (roof)
 56570 DEFB 30,128 ; y=19, z=1; left (third floor)
 56572 DEFB 42,128 ; y=25, z=1; left (second floor)
 56574 DEFB 54,128 ; y=31, z=1; left (first floor)
; This block of location descriptors is implicitly terminated by the page
; boundary.
@bfix+end

@defs=56576:125
; Character buffers for character group #b221
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffers are used. These buffers belong to the following characters:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Character          | =h Initial location }
; { Gangster              | Second floor of no. 74 }
; { Man in a bowler hat   | Second floor of the hotel }
; { None                  | Out of sight }
; { Man in a bowler hat   | Second floor of the apartment building next to no.
;                           19 }
; { None                  | Out of sight }
; TABLE#
; .
; See #R65378 for more details.
@label=CBUF221
b56576 DEFS 25       ; Primary character buffer, used by the routine at #R61948
 56601 DEFS 25       ; {Secondary character buffers (for the characters in
 56626 DEFS 25       ; group #b221 who are currently off screen)
 56651 DEFS 25       ;
 56676 DEFS 25       ; }

; Unused
s56701 DEFB 0

; Sprite tile references (tile 6, animatory states #b0-#b119) and graphic data
; (UDG byte 4/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b56702 DEFB 1,82,7                ; Graphic data for sprite tiles #b126-#b128
                                  ; (used for Sam's disguises)
 56705 DEFB 17,3,17,3,17,176,0    ; Sprite tile references for animatory states
                                  ; #b0-#b7
 56712 DEFB 224                   ; Graphic data for sprite tile #b136 (used
                                  ; for Sam's disguises)
 56713 DEFB 247,242               ; Sprite tile references for animatory states
                                  ; #b8-#b10
 56715 DEFB 0                     ; Sprite tile reference for unused animatory
                                  ; state #b11
 56716 DEFB 0,7,224               ; Graphic data for sprite tiles #b140-#b142
                                  ; (used for Sam's disguises)
 56719 DEFB 241                   ; Sprite tile reference for animatory state
                                  ; #b15
 56720 DEFB 21                    ; Graphic data for sprite tile #b144 (used
                                  ; for Sam's disguises)
 56721 DEFB 67,61,67,61           ; Sprite tile references for animatory states
                                  ; #b16-#b20
 56725 DEFB 0,0                   ; Graphic data for sprite tiles #b149-#b150
                                  ; (used for Sam's disguises)
 56727 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b23
 56728 DEFB 7                     ; Graphic data for sprite tile #b152 (used
                                  ; for Sam's disguises)
 56729 DEFB 67,61,67              ; Sprite tile references for animatory states
                                  ; #b24-#b27
 56732 DEFB 61                    ; Sprite tile reference for unused animatory
                                  ; state #b28
 56733 DEFB 66,126                ; Graphic data for sprite tiles #b157-#b158
                                  ; (used for Sam's disguises)
 56735 DEFB 245                   ; Sprite tile reference for animatory state
                                  ; #b31
 56736 DEFB 0                     ; Graphic data for sprite tile #b160 (used
                                  ; for Sam's disguises)
 56737 DEFB 115,110,115,110       ; Sprite tile references for animatory states
                                  ; #b32-#b36
 56741 DEFB 96,226                ; Graphic data for sprite tiles #b165-#b166
                                  ; (used for Sam's disguises)
 56743 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b39
 56744 DEFB 0                     ; Graphic data for sprite tile #b168 (used
                                  ; for Sam's disguises)
 56745 DEFB 115,110,115,110       ; Sprite tile references for animatory states
                                  ; #b40-#b44
 56749 DEFB 4,32,30,226           ; Graphic data for sprite tiles #b173-#b176
                                  ; (used for Sam's disguises)
 56753 DEFB 33,26,33,26           ; Sprite tile references for animatory states
                                  ; #b48-#b52
 56757 DEFB 20                    ; Graphic data for sprite tile #b181 (used by
                                  ; Sam when he's rolling or somersaulting)
 56758 DEFB 0,0                   ; Sprite tile references for animatory states
                                  ; #b54-#b55
 56760 DEFB 14                    ; Graphic data for sprite tile #b184 (used
                                  ; for Sam's disguises)
 56761 DEFB 49,41,49,41           ; Sprite tile references for animatory states
                                  ; #b56-#b60
 56765 DEFB 84                    ; Graphic data for sprite tile #b189 (used by
                                  ; Sam when he's rolling or somersaulting)
 56766 DEFB 0,0                   ; Sprite tile references for animatory states
                                  ; #b62-#b63
 56768 DEFB 32                    ; Graphic data for sprite tile #b192 (used
                                  ; for Sam's disguises)
 56769 DEFB 93,91,93,91           ; Sprite tile references for unused animatory
                                  ; states #b64-#b68
 56773 DEFB 1                     ; Graphic data for sprite tile #b197 (used by
                                  ; Sam when he's rolling or somersaulting)
 56774 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b70
 56775 DEFB 0                     ; Sprite tile reference for unused animatory
                                  ; state #b71
 56776 DEFB 68                    ; Graphic data for sprite tile #b200 (used
                                  ; for Sam's disguises)
 56777 DEFB 81,77,81,77           ; Sprite tile references for animatory states
                                  ; #b72-#b76
 56781 DEFB 163                   ; Graphic data for sprite tile #b205 (used by
                                  ; Sam when he's rolling or somersaulting)
 56782 DEFB 0                     ; Sprite tile reference for unused animatory
                                  ; state #b78
 56783 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b79
 56784 DEFB 128                   ; Graphic data for sprite tile #b208 (used
                                  ; for Sam's disguises)
 56785 DEFB 155,148,155,148       ; Sprite tile references for animatory states
                                  ; #b80-#b84
 56789 DEFB 8,231                 ; Graphic data for sprite tiles #b213-#b214
                                  ; (used for Sam's disguises)
 56791 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b87
 56792 DEFB 131                   ; Graphic data for sprite tile #b216 (used
                                  ; for Sam's disguises)
 56793 DEFB 165,162,165,162       ; Sprite tile references for animatory states
                                  ; #b88-#b92
 56797 DEFB 7,224                 ; Graphic data for sprite tiles #b221-#b222
                                  ; (used for Sam's disguises)
 56799 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b95
 56800 DEFB 192                   ; Graphic data for sprite tile #b224 (used
                                  ; for Sam's disguises)
 56801 DEFB 141,139,141,139       ; Sprite tile references for animatory states
                                  ; #b96-#b100
 56805 DEFB 142,112               ; Graphic data for sprite tiles #b229-#b230
                                  ; (used for Sam's disguises)
 56807 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b103
 56808 DEFB 4                     ; Graphic data for sprite tile #b232 (used
                                  ; for Sam's disguises)
 56809 DEFB 188,186,188,186       ; Sprite tile references for animatory states
                                  ; #b104-#b108
 56813 DEFB 60,126                ; Graphic data for sprite tiles #b237-#b238
                                  ; (used for Sam's disguises)
 56815 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b111
 56816 DEFB 72                    ; Graphic data for sprite tile #b240 (used
                                  ; for Sam's disguises)
 56817 DEFB 197,190,197,190,0,0,0 ; Sprite tile references for animatory states
                                  ; #b112-#b119

; Unused
s56824 DEFS 8

@defs=56832:32
; Character buffer for character #b222
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by one of the two policemen in
; demo mode and game modes 1-3, and is unused in game mode 4. See #R56864 for
; more details.
@label=CBUFCOP1
b56832 DEFS 32

; Initialisation parameters for character #b222
;
; The first set of parameters is used in demo mode.
@label=C222MODE0
b56864 DEFB 16       ; Animatory state (#AS16: policeman)
 56865 DEFB 20,34    ; Location (sidewalk outside the right-hand shop under the
                     ; apartments next to no. 74)
 56867 DEFB 4        ; z-coordinate (outside)
 56868 DEFW 64918    ; Command list: Patrol duty (demo mode)
; The next set of parameters is used in game mode 1.
@label=C222MODE1
 56870 DEFB 16       ; Animatory state (#AS16: policeman)
 56871 DEFB 20,34    ; Location (sidewalk outside the right-hand shop under the
                     ; apartments next to no. 74)
 56873 DEFB 4        ; z-coordinate (outside)
 56874 DEFW 64756    ; Command list: Patrol duty
; The next set of parameters is used in game mode 2.
@label=C222MODE2
 56876 DEFB 16       ; Animatory state (#AS16: policeman)
 56877 DEFB 20,34    ; Location (sidewalk outside the right-hand shop under the
                     ; apartments next to no. 74)
 56879 DEFB 4        ; z-coordinate (outside)
 56880 DEFW 64756    ; Command list: Patrol duty
; The next set of parameters is used in game mode 3.
@label=C222MODE3
 56882 DEFB 16       ; Animatory state (#AS16: policeman)
 56883 DEFB 20,34    ; Location (sidewalk outside the right-hand shop under the
                     ; apartments next to no. 74)
 56885 DEFB 4        ; z-coordinate (outside)
 56886 DEFW 64756    ; Command list: Patrol duty
; The next set of parameters is used in game mode 4.
@label=C222MODE4
 56888 DEFB 118      ; Animatory state (#AS118: cat)
 56889 DEFB 0,45     ; Location (out of sight)
 56891 DEFB 8        ; z-coordinate (invisible)
 56892 DEFW 65172    ; Command list: Do nothing

; Sprite tile references used by Sam in disguise
;
; Used by the routine at #R63838. When Sam changes disguise, the sprite tiles
; with the references listed here must be modified.
@label=GUISEREFS
b56894 DEFB 2,3,4,170,183,6,7,175,176,16,17,18,19,122,123
 56909 DEFB 0                                             ; End marker

; Unused
s56910 DEFS 48

; Sprite tile references (tile 7, animatory states #b0-#b119) and graphic data
; (mask byte 4/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b56958 DEFB 253,82,247              ; Graphic data for sprite tiles #b126-#b128
                                    ; (used for Sam's disguises)
 56961 DEFB 19,6,19,6,19,17,249     ; Sprite tile references for animatory
                                    ; states #b0-#b7
 56968 DEFB 239                     ; Graphic data for sprite tile #b136 (used
                                    ; for Sam's disguises)
 56969 DEFB 243,240                 ; Sprite tile references for animatory
                                    ; states #b8-#b10
 56971 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b11
 56972 DEFB 127,199,231             ; Graphic data for sprite tiles #b140-#b142
                                    ; (used for Sam's disguises)
 56975 DEFB 240                     ; Sprite tile reference for animatory state
                                    ; #b15
 56976 DEFB 213                     ; Graphic data for sprite tile #b144 (used
                                    ; for Sam's disguises)
 56977 DEFB 69,63,69,63             ; Sprite tile references for animatory
                                    ; states #b16-#b20
 56981 DEFB 255,252                 ; Graphic data for sprite tiles #b149-#b150
                                    ; (used for Sam's disguises)
 56983 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b23
 56984 DEFB 247                     ; Graphic data for sprite tile #b152 (used
                                    ; for Sam's disguises)
 56985 DEFB 69,63,69                ; Sprite tile references for animatory
                                    ; states #b24-#b27
 56988 DEFB 63                      ; Sprite tile reference for unused
                                    ; animatory state #b28
 56989 DEFB 66,126                  ; Graphic data for sprite tiles #b157-#b158
                                    ; (used for Sam's disguises)
 56991 DEFB 243                     ; Sprite tile reference for animatory state
                                    ; #b31
 56992 DEFB 255                     ; Graphic data for sprite tile #b160 (used
                                    ; for Sam's disguises)
 56993 DEFB 117,111,117,111         ; Sprite tile references for animatory
                                    ; states #b32-#b36
 56997 DEFB 108,226                 ; Graphic data for sprite tiles #b165-#b166
                                    ; (used for Sam's disguises)
 56999 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b39
 57000 DEFB 254                     ; Graphic data for sprite tile #b168 (used
                                    ; for Sam's disguises)
 57001 DEFB 117,111,117,111         ; Sprite tile references for animatory
                                    ; states #b40-#b44
 57005 DEFB 244,47,222,226          ; Graphic data for sprite tiles #b173-#b176
                                    ; (used for Sam's disguises)
 57009 DEFB 35,28,35,128            ; Sprite tile references for animatory
                                    ; states #b48-#b52
 57013 DEFB 212                     ; Graphic data for sprite tile #b181 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 57014 DEFB 0,249                   ; Sprite tile references for animatory
                                    ; states #b54-#b55
 57016 DEFB 238                     ; Graphic data for sprite tile #b184 (used
                                    ; for Sam's disguises)
 57017 DEFB 51,43,51,133            ; Sprite tile references for animatory
                                    ; states #b56-#b60
 57021 DEFB 84                      ; Graphic data for sprite tile #b189 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 57022 DEFB 0,249                   ; Sprite tile references for animatory
                                    ; states #b62-#b63
 57024 DEFB 47                      ; Graphic data for sprite tile #b192 (used
                                    ; for Sam's disguises)
 57025 DEFB 100,95,100,95           ; Sprite tile references for unused
                                    ; animatory states #b64-#b68
 57029 DEFB 1                       ; Graphic data for sprite tile #b197 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 57030 DEFB 0                       ; Sprite tile reference for animatory state
                                    ; #b70
 57031 DEFB 249                     ; Sprite tile reference for unused
                                    ; animatory state #b71
 57032 DEFB 68                      ; Graphic data for sprite tile #b200 (used
                                    ; for Sam's disguises)
 57033 DEFB 83,78,83,136            ; Sprite tile references for animatory
                                    ; states #b72-#b76
 57037 DEFB 163                     ; Graphic data for sprite tile #b205 (used
                                    ; by Sam when he's rolling or
                                    ; somersaulting)
 57038 DEFB 0                       ; Sprite tile reference for unused
                                    ; animatory state #b78
 57039 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b79
 57040 DEFB 191                     ; Graphic data for sprite tile #b208 (used
                                    ; for Sam's disguises)
 57041 DEFB 157,150,157,150         ; Sprite tile references for animatory
                                    ; states #b80-#b84
 57045 DEFB 232,231                 ; Graphic data for sprite tiles #b213-#b214
                                    ; (used for Sam's disguises)
 57047 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b87
 57048 DEFB 131                     ; Graphic data for sprite tile #b216 (used
                                    ; for Sam's disguises)
 57049 DEFB 157,150,157,150         ; Sprite tile references for animatory
                                    ; states #b88-#b92
 57053 DEFB 247,239                 ; Graphic data for sprite tiles #b221-#b222
                                    ; (used for Sam's disguises)
 57055 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b95
 57056 DEFB 223                     ; Graphic data for sprite tile #b224 (used
                                    ; for Sam's disguises)
 57057 DEFB 83,78,83,136            ; Sprite tile references for animatory
                                    ; states #b96-#b100
 57061 DEFB 142,127                 ; Graphic data for sprite tiles #b229-#b230
                                    ; (used for Sam's disguises)
 57063 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b103
 57064 DEFB 244                     ; Graphic data for sprite tile #b232 (used
                                    ; for Sam's disguises)
 57065 DEFB 178,172,178,172         ; Sprite tile references for animatory
                                    ; states #b104-#b108
 57069 DEFB 61,126                  ; Graphic data for sprite tiles #b237-#b238
                                    ; (used for Sam's disguises)
 57071 DEFB 249                     ; Sprite tile reference for animatory state
                                    ; #b111
 57072 DEFB 75                      ; Graphic data for sprite tile #b240 (used
                                    ; for Sam's disguises)
 57073 DEFB 199,193,199,193,0,0,249 ; Sprite tile references for animatory
                                    ; states #b112-#b119

; Unused
s57080 DEFS 8

@defs=57088:32
; Character buffer for character #b223
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by one of the two policemen in
; game modes 1-3, and is unused in demo mode and game mode 4. See #R57120 for
; more details.
b57088 DEFS 32

; Initialisation parameters for character #b223
;
; The first set of parameters is used in demo mode.
@label=C223MODE0
b57120 DEFB 118      ; Animatory state (#AS118: cat)
 57121 DEFB 0,45     ; Location (out of sight)
 57123 DEFB 8        ; z-coordinate (invisible)
 57124 DEFW 65172    ; Command list: Do nothing
; The next set of parameters is used in game mode 1.
@label=C223MODE1
 57126 DEFB 146      ; Animatory state (#AS146: policeman)
 57127 DEFB 80,34    ; Location (sidewalk outside the hotel doors)
 57129 DEFB 4        ; z-coordinate (outside)
 57130 DEFW 64756    ; Command list: Patrol duty
; The next set of parameters is used in game mode 2.
@label=C223MODE2
 57132 DEFB 146      ; Animatory state (#AS146: policeman)
 57133 DEFB 80,34    ; Location (sidewalk outside the hotel doors)
 57135 DEFB 4        ; z-coordinate (outside)
 57136 DEFW 64756    ; Command list: Patrol duty
; The next set of parameters is used in game mode 3.
@label=C223MODE3
 57138 DEFB 146      ; Animatory state (#AS146: policeman)
 57139 DEFB 80,34    ; Location (sidewalk outside the hotel doors)
 57141 DEFB 4        ; z-coordinate (outside)
 57142 DEFW 64756    ; Command list: Patrol duty
; The next set of parameters is used in game mode 4.
@label=C223MODE4
 57144 DEFB 118      ; Animatory state (#AS118: cat)
 57145 DEFB 0,45     ; Location (out of sight)
 57147 DEFB 8        ; z-coordinate (invisible)
 57148 DEFW 65172    ; Command list: Do nothing

; Sprite tile references for Sam in disguise 0
;
; Used by the routine at #R63838.
@label=GUISE0REFS
b57150 DEFB 80,82,84,86,88
 57155 DEFB 90,92,94,96,98
 57160 DEFB 100,102,104,106,108

; Unused
s57165 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 1/8)
;
; Used by the routine at #R63838.
@label=GUISEDATA1
b57168 DEFB 0,255,60,189,0,255,0,255,0,254,192,192,128,191,0,255
 57184 DEFB 0,255,3,251,192,223,12,236,8,11,0,255,18,210,0,255
 57200 DEFB 0,255,0,255,0,255,8,248,16,31,129,129,60,189

; Sprite tile references (tile 8, animatory states #b0-#b119) and graphic data
; (UDG byte 5/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b57214 DEFB 1,18,6                    ; Graphic data for sprite tiles
                                      ; #b126-#b128 (used for Sam's disguises)
 57217 DEFB 21,9,21,9,21,19,253       ; Sprite tile references for animatory
                                      ; states #b0-#b7
 57224 DEFB 96                        ; Graphic data for sprite tile #b136
                                      ; (used for Sam's disguises)
 57225 DEFB 240,243                   ; Sprite tile references for animatory
                                      ; states #b8-#b10
 57227 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b11
 57228 DEFB 0,4,96                    ; Graphic data for sprite tiles
                                      ; #b140-#b142 (used for Sam's disguises)
 57231 DEFB 239                       ; Sprite tile reference for animatory
                                      ; state #b15
 57232 DEFB 17                        ; Graphic data for sprite tile #b144
                                      ; (used for Sam's disguises)
 57233 DEFB 71,64,71,64               ; Sprite tile references for animatory
                                      ; states #b16-#b20
 57237 DEFB 0,0                       ; Graphic data for sprite tiles
                                      ; #b149-#b150 (used for Sam's disguises)
 57239 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b23
 57240 DEFB 1                         ; Graphic data for sprite tile #b152
                                      ; (used for Sam's disguises)
 57241 DEFB 71,64,71                  ; Sprite tile references for animatory
                                      ; states #b24-#b27
 57244 DEFB 64                        ; Sprite tile reference for unused
                                      ; animatory state #b28
 57245 DEFB 70,70                     ; Graphic data for sprite tiles
                                      ; #b157-#b158 (used for Sam's disguises)
 57247 DEFB 244                       ; Sprite tile reference for animatory
                                      ; state #b31
 57248 DEFB 0                         ; Graphic data for sprite tile #b160
                                      ; (used for Sam's disguises)
 57249 DEFB 119,113,121,113           ; Sprite tile references for animatory
                                      ; states #b32-#b36
 57253 DEFB 144,194                   ; Graphic data for sprite tiles
                                      ; #b165-#b166 (used for Sam's disguises)
 57255 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b39
 57256 DEFB 0                         ; Graphic data for sprite tile #b168
                                      ; (used for Sam's disguises)
 57257 DEFB 119,113,121,113           ; Sprite tile references for animatory
                                      ; states #b40-#b44
 57261 DEFB 4,96,28,70                ; Graphic data for sprite tiles
                                      ; #b173-#b176 (used for Sam's disguises)
 57265 DEFB 37,30,37,131              ; Sprite tile references for animatory
                                      ; states #b48-#b52
 57269 DEFB 52                        ; Graphic data for sprite tile #b181
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 57270 DEFB 0,253                     ; Sprite tile references for animatory
                                      ; states #b54-#b55
 57272 DEFB 4                         ; Graphic data for sprite tile #b184
                                      ; (used for Sam's disguises)
 57273 DEFB 53,45,57,134              ; Sprite tile references for animatory
                                      ; states #b56-#b60
 57277 DEFB 242                       ; Graphic data for sprite tile #b189
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 57278 DEFB 0,253                     ; Sprite tile references for animatory
                                      ; states #b62-#b63
 57280 DEFB 96                        ; Graphic data for sprite tile #b192
                                      ; (used for Sam's disguises)
 57281 DEFB 102,97,106,97             ; Sprite tile references for unused
                                      ; animatory states #b64-#b68
 57285 DEFB 2                         ; Graphic data for sprite tile #b197
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 57286 DEFB 0                         ; Sprite tile reference for animatory
                                      ; state #b70
 57287 DEFB 253                       ; Sprite tile reference for unused
                                      ; animatory state #b71
 57288 DEFB 72                        ; Graphic data for sprite tile #b200
                                      ; (used for Sam's disguises)
 57289 DEFB 85,79,88,79               ; Sprite tile references for animatory
                                      ; states #b72-#b76
 57293 DEFB 66                        ; Graphic data for sprite tile #b205
                                      ; (used by Sam when he's rolling or
                                      ; somersaulting)
 57294 DEFB 0                         ; Sprite tile reference for unused
                                      ; animatory state #b78
 57295 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b79
 57296 DEFB 128                       ; Graphic data for sprite tile #b208
                                      ; (used for Sam's disguises)
 57297 DEFB 159,153,159,153           ; Sprite tile references for animatory
                                      ; states #b80-#b84
 57301 DEFB 9,231                     ; Graphic data for sprite tiles
                                      ; #b213-#b214 (used for Sam's disguises)
 57303 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b87
 57304 DEFB 130                       ; Graphic data for sprite tile #b216
                                      ; (used for Sam's disguises)
 57305 DEFB 159,153,159,153           ; Sprite tile references for animatory
                                      ; states #b88-#b92
 57309 DEFB 6,96                      ; Graphic data for sprite tiles
                                      ; #b221-#b222 (used for Sam's disguises)
 57311 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b95
 57312 DEFB 64                        ; Graphic data for sprite tile #b224
                                      ; (used for Sam's disguises)
 57313 DEFB 144,142,146,142           ; Sprite tile references for animatory
                                      ; states #b96-#b100
 57317 DEFB 158,112                   ; Graphic data for sprite tiles
                                      ; #b229-#b230 (used for Sam's disguises)
 57319 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b103
 57320 DEFB 4                         ; Graphic data for sprite tile #b232
                                      ; (used for Sam's disguises)
 57321 DEFB 180,174,182,174           ; Sprite tile references for animatory
                                      ; states #b104-#b108
 57325 DEFB 36,102                    ; Graphic data for sprite tiles
                                      ; #b237-#b238 (used for Sam's disguises)
 57327 DEFB 253                       ; Sprite tile reference for animatory
                                      ; state #b111
 57328 DEFB 136                       ; Graphic data for sprite tile #b240
                                      ; (used for Sam's disguises)
 57329 DEFB 201,195,203,195,206,0,253 ; Sprite tile references for animatory
                                      ; states #b112-#b119

; Unused
s57336 DEFS 8

@defs=57344:32
; Character buffer for character #b224
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by the following characters:
; .
; #TABLE(default,centre)
; { =h Game mode(s) | =h Character }
; { 0               | Gangster }
; { 1               | Gangster at no. 15 }
; { 2, 3            | Gangster outside the police station }
; { 4               | Gangster who drops Sam off the apartment building }
; TABLE#
; .
; See #R57376 for more details.
b57344 DEFS 32

; Initialisation parameters for character #b224
;
; The first set of parameters is used in demo mode.
@label=C224MODE0
b57376 DEFB 160      ; Animatory state (#AS160: gangster)
 57377 DEFB 100,34   ; Location (sidewalk at the right edge of the hotel)
 57379 DEFB 4        ; z-coordinate (outside)
 57380 DEFW 65034    ; Command list: Hotel walkabout
; The next set of parameters is used in game mode 1.
@label=C224MODE1
 57382 DEFB 160      ; Animatory state (#AS160: gangster)
 57383 DEFB 248,25   ; Location (second floor of no. 15)
 57385 DEFB 1        ; z-coordinate (indoors)
 57386 DEFW 25066    ; Command list: Keep guard at no. 15
; The next set of parameters is used in game mode 2.
@label=C224MODE2
 57388 DEFB 160      ; Animatory state (#AS160: gangster)
 57389 DEFB 147,34   ; Location (sidewalk outside the right-hand jail cell)
 57391 DEFB 4        ; z-coordinate (outside)
 57392 DEFW 64902    ; Command list: Keep guard outside the police station
; The next set of parameters is used in game mode 3.
@label=C224MODE3
 57394 DEFB 160      ; Animatory state (#AS160: gangster)
 57395 DEFB 147,34   ; Location (sidewalk outside the right-hand jail cell)
 57397 DEFB 4        ; z-coordinate (outside)
 57398 DEFW 64902    ; Command list: Keep guard outside the police station
; The next set of parameters is used in game mode 4.
@label=C224MODE4
 57400 DEFB 160      ; Animatory state (#AS160: gangster)
 57401 DEFB 147,34   ; Location (sidewalk outside the right-hand jail cell)
 57403 DEFB 4        ; z-coordinate (outside)
 57404 DEFW 64878    ; Command list: Chase Sam for ever

; Sprite tile references for Sam in disguise 1
;
; Used by the routine at #R63838.
@label=GUISE1REFS
b57406 DEFB 112,122,149,110,88
 57411 DEFB 90,92,114,116,118
 57416 DEFB 120,102,104,106,108

; Unused
s57421 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 2/8)
;
; Used by the routine at #R63838.
b57424 DEFB 0,255,34,34,0,255,0,255,0,254,192,192,64,95,0,255
 57440 DEFB 0,255,2,242,32,47,12,236,4,5,0,255,17,209,0,255
 57456 DEFB 0,255,0,255,0,255,4,244,32,47,66,66,42,42

; Sprite tile references (tile 9, animatory states #b0-#b119) and graphic data
; (mask byte 5/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b57470 DEFB 253,18,246            ; Graphic data for sprite tiles #b126-#b128
                                  ; (used for Sam's disguises)
 57473 DEFB 23,12,25,12,228,230,0 ; Sprite tile references for animatory states
                                  ; #b0-#b7
 57480 DEFB 111                   ; Graphic data for sprite tile #b136 (used
                                  ; for Sam's disguises)
 57481 DEFB 242,247               ; Sprite tile references for animatory states
                                  ; #b8-#b10
 57483 DEFB 0                     ; Sprite tile reference for unused animatory
                                  ; state #b11
 57484 DEFB 255,196,111           ; Graphic data for sprite tiles #b140-#b142
                                  ; (used for Sam's disguises)
 57487 DEFB 244                   ; Sprite tile reference for animatory state
                                  ; #b15
 57488 DEFB 209                   ; Graphic data for sprite tile #b144 (used
                                  ; for Sam's disguises)
 57489 DEFB 73,65,76,65           ; Sprite tile references for animatory states
                                  ; #b16-#b20
 57493 DEFB 255,252               ; Graphic data for sprite tiles #b149-#b150
                                  ; (used for Sam's disguises)
 57495 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b23
 57496 DEFB 249                   ; Graphic data for sprite tile #b152 (used
                                  ; for Sam's disguises)
 57497 DEFB 73,65,76              ; Sprite tile references for animatory states
                                  ; #b24-#b27
 57500 DEFB 65                    ; Sprite tile reference for unused animatory
                                  ; state #b28
 57501 DEFB 70,70                 ; Graphic data for sprite tiles #b157-#b158
                                  ; (used for Sam's disguises)
 57503 DEFB 239                   ; Sprite tile reference for animatory state
                                  ; #b31
 57504 DEFB 255                   ; Graphic data for sprite tile #b160 (used
                                  ; for Sam's disguises)
 57505 DEFB 104,98,108,98         ; Sprite tile references for animatory states
                                  ; #b32-#b36
 57509 DEFB 148,194               ; Graphic data for sprite tiles #b165-#b166
                                  ; (used for Sam's disguises)
 57511 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b39
 57512 DEFB 255                   ; Graphic data for sprite tile #b168 (used
                                  ; for Sam's disguises)
 57513 DEFB 104,98,108,98         ; Sprite tile references for animatory states
                                  ; #b40-#b44
 57517 DEFB 244,111,220,70        ; Graphic data for sprite tiles #b173-#b176
                                  ; (used for Sam's disguises)
 57521 DEFB 39,31,39,31           ; Sprite tile references for animatory states
                                  ; #b48-#b52
 57525 DEFB 180                   ; Graphic data for sprite tile #b181 (used by
                                  ; Sam when he's rolling or somersaulting)
 57526 DEFB 0,0                   ; Sprite tile references for animatory states
                                  ; #b54-#b55
 57528 DEFB 244                   ; Graphic data for sprite tile #b184 (used
                                  ; for Sam's disguises)
 57529 DEFB 55,47,59,47           ; Sprite tile references for animatory states
                                  ; #b56-#b60
 57533 DEFB 242                   ; Graphic data for sprite tile #b189 (used by
                                  ; Sam when he's rolling or somersaulting)
 57534 DEFB 236,0                 ; Sprite tile references for animatory states
                                  ; #b62-#b63
 57536 DEFB 111                   ; Graphic data for sprite tile #b192 (used
                                  ; for Sam's disguises)
 57537 DEFB 104,98,108,98         ; Sprite tile references for unused animatory
                                  ; states #b64-#b68
 57541 DEFB 2                     ; Graphic data for sprite tile #b197 (used by
                                  ; Sam when he's rolling or somersaulting)
 57542 DEFB 237                   ; Sprite tile reference for animatory state
                                  ; #b70
 57543 DEFB 0                     ; Sprite tile reference for unused animatory
                                  ; state #b71
 57544 DEFB 72                    ; Graphic data for sprite tile #b200 (used
                                  ; for Sam's disguises)
 57545 DEFB 39,86,90,86           ; Sprite tile references for animatory states
                                  ; #b72-#b76
 57549 DEFB 66                    ; Graphic data for sprite tile #b205 (used by
                                  ; Sam when he's rolling or somersaulting)
 57550 DEFB 0                     ; Sprite tile reference for unused animatory
                                  ; state #b78
 57551 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b79
 57552 DEFB 191                   ; Graphic data for sprite tile #b208 (used
                                  ; for Sam's disguises)
 57553 DEFB 39,86,90,86           ; Sprite tile references for animatory states
                                  ; #b80-#b84
 57557 DEFB 233,231               ; Graphic data for sprite tiles #b213-#b214
                                  ; (used for Sam's disguises)
 57559 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b87
 57560 DEFB 130                   ; Graphic data for sprite tile #b216 (used
                                  ; for Sam's disguises)
 57561 DEFB 39,86,90,86           ; Sprite tile references for animatory states
                                  ; #b88-#b92
 57565 DEFB 246,111               ; Graphic data for sprite tiles #b221-#b222
                                  ; (used for Sam's disguises)
 57567 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b95
 57568 DEFB 95                    ; Graphic data for sprite tile #b224 (used
                                  ; for Sam's disguises)
 57569 DEFB 39,86,90,86           ; Sprite tile references for animatory states
                                  ; #b96-#b100
 57573 DEFB 158,127               ; Graphic data for sprite tiles #b229-#b230
                                  ; (used for Sam's disguises)
 57575 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b103
 57576 DEFB 244                   ; Graphic data for sprite tile #b232 (used
                                  ; for Sam's disguises)
 57577 DEFB 73,65,76,65           ; Sprite tile references for animatory states
                                  ; #b104-#b108
 57581 DEFB 37,102                ; Graphic data for sprite tiles #b237-#b238
                                  ; (used for Sam's disguises)
 57583 DEFB 0                     ; Sprite tile reference for animatory state
                                  ; #b111
 57584 DEFB 139                   ; Graphic data for sprite tile #b240 (used
                                  ; for Sam's disguises)
 57585 DEFB 73,65,76,65,213,209,0 ; Sprite tile references for animatory states
                                  ; #b112-#b119

; Unused
s57592 DEFS 8

@defs=57600:32
; Character buffer for character #b225
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by the Fat Man in game mode 2,
; and by Lana in game mode 3; it is unused in demo mode and game modes 1 and 4.
; See #R57632 for more details.
@label=CBUF225
b57600 DEFS 32

; Initialisation parameters for character #b225
;
; The first set of parameters is used in demo mode.
@label=C225MODE0
b57632 DEFB 118      ; Animatory state (#AS118: cat)
 57633 DEFB 0,45     ; Location (out of sight)
 57635 DEFB 8        ; z-coordinate (invisible)
 57636 DEFW 65172    ; Command list: Do nothing
; The next set of parameters is used in game mode 1.
@label=C225MODE1
 57638 DEFB 118      ; Animatory state (#AS118: cat)
 57639 DEFB 0,45     ; Location (out of sight)
 57641 DEFB 4        ; z-coordinate (outside)
 57642 DEFW 65172    ; Command list: Do nothing
; The next set of parameters is used in game mode 2.
@label=C225MODE2
 57644 DEFB 56       ; Animatory state (#AS56: Fat Man)
 57645 DEFB 150,34   ; Location (sidewalk at the left edge of no. 27)
 57647 DEFB 4        ; z-coordinate (outside)
 57648 DEFW 64928    ; Command list: Control the fat man
; The next set of parameters is used in game mode 3.
@label=C225MODE3
 57650 DEFB 48       ; Animatory state (#AS48: Lana)
 57651 DEFB 180,31   ; Location (first floor of the apartment building next to
                     ; no. 19, left-hand side)
 57653 DEFB 1        ; z-coordinate (indoors)
 57654 DEFW 64940    ; Command list: Go to Sam's office
; The next set of parameters is used in game mode 4.
@label=C225MODE4
 57656 DEFB 118      ; Animatory state (#AS118: cat)
 57657 DEFB 0,45     ; Location (out of sight)
 57659 DEFB 8        ; z-coordinate (invisible)
 57660 DEFW 65172    ; Command list: Do nothing

; Sprite tile references for Sam in disguise 2
;
; Used by the routine at #R63838.
@label=GUISE2REFS
b57662 DEFB 80,124,84,86,126
 57667 DEFB 127,92,94,96,128
 57672 DEFB 136,144,104,106,152

; Unused
s57677 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 3/8)
;
; Used by the routine at #R63838.
b57680 DEFB 0,254,255,255,0,127,0,255,0,254,194,194,64,95,0,255
 57696 DEFB 0,255,15,239,240,247,12,236,36,37,0,159,15,239,0,255
 57712 DEFB 0,255,0,255,0,255,4,244,96,111,70,70,213,213

; Sprite tile references (tile 10, animatory states #b0-#b119) and graphic data
; (UDG byte 6/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b57726 DEFB 0,163,6         ; Graphic data for sprite tiles #b126-#b128 (used
                            ; for Sam's disguises)
 57729 DEFB 0,0,0,0,0,0,248 ; Sprite tile references for animatory states
                            ; #b0-#b7
 57736 DEFB 160             ; Graphic data for sprite tile #b136 (used for
                            ; Sam's disguises)
 57737 DEFB 0,0             ; Sprite tile references for animatory states
                            ; #b8-#b10
 57739 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b11
 57740 DEFB 0,62,160        ; Graphic data for sprite tiles #b140-#b142 (used
                            ; for Sam's disguises)
 57743 DEFB 243             ; Sprite tile reference for animatory state #b15
 57744 DEFB 10              ; Graphic data for sprite tile #b144 (used for
                            ; Sam's disguises)
 57745 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b16-#b20
 57749 DEFB 0,3             ; Graphic data for sprite tiles #b149-#b150 (used
                            ; for Sam's disguises)
 57751 DEFB 248             ; Sprite tile reference for animatory state #b23
 57752 DEFB 0               ; Graphic data for sprite tile #b152 (used for
                            ; Sam's disguises)
 57753 DEFB 0,0,0           ; Sprite tile references for animatory states
                            ; #b24-#b27
 57756 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b28
 57757 DEFB 74,234          ; Graphic data for sprite tiles #b157-#b158 (used
                            ; for Sam's disguises)
 57759 DEFB 240             ; Sprite tile reference for animatory state #b31
 57760 DEFB 0               ; Graphic data for sprite tile #b160 (used for
                            ; Sam's disguises)
 57761 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b32-#b36
 57765 DEFB 107,131         ; Graphic data for sprite tiles #b165-#b166 (used
                            ; for Sam's disguises)
 57767 DEFB 248             ; Sprite tile reference for animatory state #b39
 57768 DEFB 0               ; Graphic data for sprite tile #b168 (used for
                            ; Sam's disguises)
 57769 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b40-#b44
 57773 DEFB 4,160,8,74      ; Graphic data for sprite tiles #b173-#b176 (used
                            ; for Sam's disguises)
 57777 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b48-#b52
 57781 DEFB 38              ; Graphic data for sprite tile #b181 (used by Sam
                            ; when he's rolling or somersaulting)
@bfix=DEFB 0,0
 57782 DEFB 0,248           ; Sprite tile references for animatory states
                            ; #b54-#b55
 57784 DEFB 4               ; Graphic data for sprite tile #b184 (used for
                            ; Sam's disguises)
 57785 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b56-#b60
 57789 DEFB 161             ; Graphic data for sprite tile #b189 (used by Sam
                            ; when he's rolling or somersaulting)
 57790 DEFB 0,248           ; Sprite tile references for animatory states
                            ; #b62-#b63
 57792 DEFB 160             ; Graphic data for sprite tile #b192 (used for
                            ; Sam's disguises)
 57793 DEFB 0,0,0,0         ; Sprite tile references for unused animatory
                            ; states #b64-#b68
 57797 DEFB 2               ; Graphic data for sprite tile #b197 (used by Sam
                            ; when he's rolling or somersaulting)
 57798 DEFB 0               ; Sprite tile reference for animatory state #b70
 57799 DEFB 248             ; Sprite tile reference for unused animatory state
                            ; #b71
 57800 DEFB 72              ; Graphic data for sprite tile #b200 (used for
                            ; Sam's disguises)
 57801 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b72-#b76
 57805 DEFB 4               ; Graphic data for sprite tile #b205 (used by Sam
                            ; when he's rolling or somersaulting)
 57806 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b78
 57807 DEFB 248             ; Sprite tile reference for animatory state #b79
 57808 DEFB 64              ; Graphic data for sprite tile #b208 (used for
                            ; Sam's disguises)
 57809 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b80-#b84
 57813 DEFB 9,247           ; Graphic data for sprite tiles #b213-#b214 (used
                            ; for Sam's disguises)
 57815 DEFB 248             ; Sprite tile reference for animatory state #b87
 57816 DEFB 131             ; Graphic data for sprite tile #b216 (used for
                            ; Sam's disguises)
 57817 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b88-#b92
 57821 DEFB 6,160           ; Graphic data for sprite tiles #b221-#b222 (used
                            ; for Sam's disguises)
@bfix=DEFB 0
 57823 DEFB 248             ; Sprite tile reference for animatory state #b95
 57824 DEFB 64              ; Graphic data for sprite tile #b224 (used for
                            ; Sam's disguises)
 57825 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b96-#b100
 57829 DEFB 159,112         ; Graphic data for sprite tiles #b229-#b230 (used
                            ; for Sam's disguises)
 57831 DEFB 248             ; Sprite tile reference for animatory state #b103
 57832 DEFB 4               ; Graphic data for sprite tile #b232 (used for
                            ; Sam's disguises)
 57833 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b104-#b108
 57837 DEFB 52,106          ; Graphic data for sprite tiles #b237-#b238 (used
                            ; for Sam's disguises)
 57839 DEFB 248             ; Sprite tile reference for animatory state #b111
 57840 DEFB 132             ; Graphic data for sprite tile #b240 (used for
                            ; Sam's disguises)
 57841 DEFB 0,0,0,0,0,0,248 ; Sprite tile references for animatory states
                            ; #b112-#b119

; Unused
s57848 DEFS 8

@defs=57856:32
; Character buffer for character #b226
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by Daisy in demo mode and game
; modes 1-3, and is unused in game mode 4. See #R57888 for more details.
b57856 DEFS 32

; Initialisation parameters for character #b226
;
; The first set of parameters is used in demo mode.
@label=C226MODE0
b57888 DEFB 200      ; Animatory state (#AS200: Daisy)
 57889 DEFB 189,7    ; Location (roof of the apartment building next to no. 19)
 57891 DEFB 1        ; z-coordinate (indoors)
 57892 DEFW 65174    ; Command list: Walk up and down for ever
; The next set of parameters is used in game mode 1.
@label=C226MODE1
 57894 DEFB 200      ; Animatory state (#AS200: Daisy)
 57895 DEFB 233,25   ; Location (second floor of no. 17, near the rightmost
                     ; window)
 57897 DEFB 1        ; z-coordinate (indoors)
 57898 DEFW 65076    ; Command list: Control Daisy
; The next set of parameters is used in game mode 2.
@label=C226MODE2
 57900 DEFB 200      ; Animatory state (#AS200: Daisy)
 57901 DEFB 233,25   ; Location (second floor of no. 17, near the rightmost
                     ; window)
 57903 DEFB 1        ; z-coordinate (indoors)
 57904 DEFW 65076    ; Command list: Control Daisy
; The next set of parameters is used in game mode 3.
@label=C226MODE3
 57906 DEFB 200      ; Animatory state (#AS200: Daisy)
 57907 DEFB 233,25   ; Location (second floor of no. 17, near the rightmost
                     ; window)
 57909 DEFB 1        ; z-coordinate (indoors)
 57910 DEFW 65076    ; Command list: Control Daisy
; The next set of parameters is used in game mode 4.
@label=C226MODE4
 57912 DEFB 118      ; Animatory state (#AS118: cat)
 57913 DEFB 0,45     ; Location (out of sight)
 57915 DEFB 8        ; z-coordinate (invisible)
 57916 DEFW 65172    ; Command list: Do nothing

; Sprite tile references for Sam in disguise 3
;
; Used by the routine at #R63838.
@label=GUISE3REFS
b57918 DEFB 168,176,84,160,88
 57923 DEFB 90,92,160,160,184
 57928 DEFB 192,102,104,108,108

; Unused
s57933 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 4/8)
;
; Used by the routine at #R63838.
b57936 DEFB 0,255,126,126,0,255,0,255,0,254,130,130,64,95,0,255
 57952 DEFB 0,255,7,247,224,239,8,232,36,37,96,111,6,246,0,255
 57968 DEFB 0,255,0,255,0,255,7,247,224,239,126,126,126,126

; Sprite tile references (tile 11, animatory states #b0-#b119) and graphic data
; (mask byte 6/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b57982 DEFB 254,163,246     ; Graphic data for sprite tiles #b126-#b128 (used
                            ; for Sam's disguises)
 57985 DEFB 0,4,0,4,0,0,252 ; Sprite tile references for animatory states
                            ; #b0-#b7
 57992 DEFB 175             ; Graphic data for sprite tile #b136 (used for
                            ; Sam's disguises)
 57993 DEFB 246,0           ; Sprite tile references for animatory states
                            ; #b8-#b10
 57995 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b11
 57996 DEFB 255,190,175     ; Graphic data for sprite tiles #b140-#b142 (used
                            ; for Sam's disguises)
 57999 DEFB 245             ; Sprite tile reference for animatory state #b15
 58000 DEFB 234             ; Graphic data for sprite tile #b144 (used for
                            ; Sam's disguises)
 58001 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b16-#b20
 58005 DEFB 255,251         ; Graphic data for sprite tiles #b149-#b150 (used
                            ; for Sam's disguises)
 58007 DEFB 252             ; Sprite tile reference for animatory state #b23
 58008 DEFB 254             ; Graphic data for sprite tile #b152 (used for
                            ; Sam's disguises)
 58009 DEFB 0,0,0           ; Sprite tile references for animatory states
                            ; #b24-#b27
 58012 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b28
 58013 DEFB 74,234          ; Graphic data for sprite tiles #b157-#b158 (used
                            ; for Sam's disguises)
 58015 DEFB 241             ; Sprite tile reference for animatory state #b31
 58016 DEFB 255             ; Graphic data for sprite tile #b160 (used for
                            ; Sam's disguises)
 58017 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b32-#b36
 58021 DEFB 107,131         ; Graphic data for sprite tiles #b165-#b166 (used
                            ; for Sam's disguises)
 58023 DEFB 252             ; Sprite tile reference for animatory state #b39
 58024 DEFB 255             ; Graphic data for sprite tile #b168 (used for
                            ; Sam's disguises)
 58025 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b40-#b44
 58029 DEFB 244,175,232,74  ; Graphic data for sprite tiles #b173-#b176 (used
                            ; for Sam's disguises)
 58033 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b48-#b52
 58037 DEFB 166             ; Graphic data for sprite tile #b181 (used by Sam
                            ; when he's rolling or somersaulting)
 58038 DEFB 0,252           ; Sprite tile references for animatory states
                            ; #b54-#b55
 58040 DEFB 244             ; Graphic data for sprite tile #b184 (used for
                            ; Sam's disguises)
 58041 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b56-#b60
 58045 DEFB 173             ; Graphic data for sprite tile #b189 (used by Sam
                            ; when he's rolling or somersaulting)
 58046 DEFB 0,252           ; Sprite tile references for animatory states
                            ; #b62-#b63
 58048 DEFB 175             ; Graphic data for sprite tile #b192 (used for
                            ; Sam's disguises)
 58049 DEFB 0,0,0,0         ; Sprite tile references for unused animatory
                            ; states #b64-#b68
 58053 DEFB 2               ; Graphic data for sprite tile #b197 (used by Sam
                            ; when he's rolling or somersaulting)
 58054 DEFB 0               ; Sprite tile reference for animatory state #b70
 58055 DEFB 252             ; Sprite tile reference for unused animatory state
                            ; #b71
 58056 DEFB 72              ; Graphic data for sprite tile #b200 (used for
                            ; Sam's disguises)
 58057 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b72-#b76
 58061 DEFB 5               ; Graphic data for sprite tile #b205 (used by Sam
                            ; when he's rolling or somersaulting)
 58062 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b78
 58063 DEFB 252             ; Sprite tile reference for animatory state #b79
 58064 DEFB 95              ; Graphic data for sprite tile #b208 (used for
                            ; Sam's disguises)
 58065 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b80-#b84
 58069 DEFB 233,247         ; Graphic data for sprite tiles #b213-#b214 (used
                            ; for Sam's disguises)
 58071 DEFB 252             ; Sprite tile reference for animatory state #b87
 58072 DEFB 131             ; Graphic data for sprite tile #b216 (used for
                            ; Sam's disguises)
 58073 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b88-#b92
 58077 DEFB 246,175         ; Graphic data for sprite tiles #b221-#b222 (used
                            ; for Sam's disguises)
 58079 DEFB 252             ; Sprite tile reference for animatory state #b95
 58080 DEFB 95              ; Graphic data for sprite tile #b224 (used for
                            ; Sam's disguises)
 58081 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b96-#b100
 58085 DEFB 159,127         ; Graphic data for sprite tiles #b229-#b230 (used
                            ; for Sam's disguises)
 58087 DEFB 252             ; Sprite tile reference for animatory state #b103
 58088 DEFB 244             ; Graphic data for sprite tile #b232 (used for
                            ; Sam's disguises)
 58089 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b104-#b108
 58093 DEFB 53,106          ; Graphic data for sprite tiles #b237-#b238 (used
                            ; for Sam's disguises)
 58095 DEFB 252             ; Sprite tile reference for animatory state #b111
 58096 DEFB 133             ; Graphic data for sprite tile #b240 (used for
                            ; Sam's disguises)
 58097 DEFB 0,0,0,0,0,0,252 ; Sprite tile references for animatory states
                            ; #b112-#b119

; Unused
s58104 DEFS 8

@defs=58112:32
; Character buffer for character #b227
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by the sniper in game modes 1-4,
; and is unused in demo mode. See #R58144 for more details.
b58112 DEFS 32

; Initialisation parameters for character #b227
;
; The first set of parameters is used in demo mode.
@label=C227MODE0
b58144 DEFB 118      ; Animatory state (#AS118: cat)
 58145 DEFB 0,45     ; Location (out of sight)
 58147 DEFB 8        ; z-coordinate (invisible)
 58148 DEFW 65172    ; Command list: Do nothing
; The next set of parameters is used in game mode 1.
@label=C227MODE1
 58150 DEFB 54       ; Animatory state (#AS54: sniper)
 58151 DEFB 0,50     ; Location (out of sight)
 58153 DEFB 2        ; z-coordinate (behind people on the sidewalk)
 58154 DEFW 64890    ; Command list: Control the sniper
; The next set of parameters is used in game mode 2.
@label=C227MODE2
 58156 DEFB 54       ; Animatory state (#AS54: sniper)
 58157 DEFB 0,50     ; Location (out of sight)
 58159 DEFB 2        ; z-coordinate (behind people on the sidewalk)
 58160 DEFW 64890    ; Command list: Control the sniper
; The next set of parameters is used in game mode 3.
@label=C227MODE3
 58162 DEFB 54       ; Animatory state (#AS54: sniper)
 58163 DEFB 0,50     ; Location (out of sight)
 58165 DEFB 2        ; z-coordinate (behind people on the sidewalk)
 58166 DEFW 64890    ; Command list: Control the sniper
; The next set of parameters is used in game mode 4.
@label=C227MODE4
 58168 DEFB 54       ; Animatory state (#AS54: sniper)
 58169 DEFB 0,50     ; Location (out of sight)
 58171 DEFB 2        ; z-coordinate (behind people on the sidewalk)
 58172 DEFW 64890    ; Command list: Control the sniper

; Sprite tile references for Sam in disguise 4
;
; Used by the routine at #R63838.
@label=GUISE4REFS
b58174 DEFB 112,200,208,86,88
 58179 DEFB 216,224,94,96,232
 58184 DEFB 240,102,237,106,108

; Unused
s58189 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 5/8)
;
; Used by the routine at #R63838.
b58192 DEFB 0,255,102,102,0,255,0,255,0,254,130,130,64,95,0,255
 58208 DEFB 0,255,6,246,96,111,8,232,36,37,144,151,0,248,0,255
 58224 DEFB 0,255,0,255,0,255,6,246,96,111,102,102,102,102

; Sprite tile references (tile 12, animatory states #b0-#b119) and graphic data
; (UDG byte 7/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b58238 DEFB 0,66,7          ; Graphic data for sprite tiles #b126-#b128 (used
                            ; for Sam's disguises)
 58241 DEFB 0,7,0,7,0,0,0   ; Sprite tile references for animatory states
                            ; #b0-#b7
 58248 DEFB 48              ; Graphic data for sprite tile #b136 (used for
                            ; Sam's disguises)
 58249 DEFB 245,241         ; Sprite tile references for animatory states
                            ; #b8-#b10
 58251 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b11
 58252 DEFB 0,5,48          ; Graphic data for sprite tiles #b140-#b142 (used
                            ; for Sam's disguises)
 58255 DEFB 0               ; Sprite tile reference for animatory state #b15
 58256 DEFB 4               ; Graphic data for sprite tile #b144 (used for
                            ; Sam's disguises)
 58257 DEFB 0,13,0,13       ; Sprite tile references for animatory states
                            ; #b16-#b20
 58261 DEFB 0,0             ; Graphic data for sprite tiles #b149-#b150 (used
                            ; for Sam's disguises)
 58263 DEFB 0               ; Sprite tile reference for animatory state #b23
 58264 DEFB 0               ; Graphic data for sprite tile #b152 (used for
                            ; Sam's disguises)
 58265 DEFB 0,13,0          ; Sprite tile references for animatory states
                            ; #b24-#b27
 58268 DEFB 13              ; Sprite tile reference for unused animatory state
                            ; #b28
 58269 DEFB 115,83          ; Graphic data for sprite tiles #b157-#b158 (used
                            ; for Sam's disguises)
 58271 DEFB 0               ; Sprite tile reference for animatory state #b31
 58272 DEFB 0               ; Graphic data for sprite tile #b160 (used for
                            ; Sam's disguises)
 58273 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b32-#b36
 58277 DEFB 40,130          ; Graphic data for sprite tiles #b165-#b166 (used
                            ; for Sam's disguises)
 58279 DEFB 0               ; Sprite tile reference for animatory state #b39
 58280 DEFB 0               ; Graphic data for sprite tile #b168 (used for
                            ; Sam's disguises)
 58281 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b40-#b44
 58285 DEFB 7,48,8,115      ; Graphic data for sprite tiles #b173-#b176 (used
                            ; for Sam's disguises)
 58289 DEFB 0,29,0,29       ; Sprite tile references for animatory states
                            ; #b48-#b52
 58293 DEFB 47              ; Graphic data for sprite tile #b181 (used by Sam
                            ; when he's rolling or somersaulting)
 58294 DEFB 0,0             ; Sprite tile references for animatory states
                            ; #b54-#b55
 58296 DEFB 7               ; Graphic data for sprite tile #b184 (used for
                            ; Sam's disguises)
 58297 DEFB 0,13,0,13       ; Sprite tile references for animatory states
                            ; #b56-#b60
 58301 DEFB 160             ; Graphic data for sprite tile #b189 (used by Sam
                            ; when he's rolling or somersaulting)
 58302 DEFB 0,0             ; Sprite tile references for animatory states
                            ; #b62-#b63
 58304 DEFB 48              ; Graphic data for sprite tile #b192 (used for
                            ; Sam's disguises)
 58305 DEFB 0,29,0,29       ; Sprite tile references for unused animatory
                            ; states #b64-#b68
 58309 DEFB 252             ; Graphic data for sprite tile #b197 (used by Sam
                            ; when he's rolling or somersaulting)
 58310 DEFB 0               ; Sprite tile reference for animatory state #b70
 58311 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b71
 58312 DEFB 184             ; Graphic data for sprite tile #b200 (used for
                            ; Sam's disguises)
 58313 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b72-#b76
 58317 DEFB 8               ; Graphic data for sprite tile #b205 (used by Sam
                            ; when he's rolling or somersaulting)
 58318 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b78
 58319 DEFB 0               ; Sprite tile reference for animatory state #b79
 58320 DEFB 64              ; Graphic data for sprite tile #b208 (used for
                            ; Sam's disguises)
 58321 DEFB 0,151,0,151     ; Sprite tile references for animatory states
                            ; #b80-#b84
 58325 DEFB 8,102           ; Graphic data for sprite tiles #b213-#b214 (used
                            ; for Sam's disguises)
 58327 DEFB 0               ; Sprite tile reference for animatory state #b87
 58328 DEFB 130             ; Graphic data for sprite tile #b216 (used for
                            ; Sam's disguises)
 58329 DEFB 0,151,0,151     ; Sprite tile references for animatory states
                            ; #b88-#b92
 58333 DEFB 7,48            ; Graphic data for sprite tiles #b221-#b222 (used
                            ; for Sam's disguises)
 58335 DEFB 0               ; Sprite tile reference for animatory state #b95
 58336 DEFB 64              ; Graphic data for sprite tile #b224 (used for
                            ; Sam's disguises)
 58337 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b96-#b100
 58341 DEFB 134,96          ; Graphic data for sprite tiles #b229-#b230 (used
                            ; for Sam's disguises)
 58343 DEFB 0               ; Sprite tile reference for animatory state #b103
 58344 DEFB 11              ; Graphic data for sprite tile #b232 (used for
                            ; Sam's disguises)
 58345 DEFB 0,13,0,13       ; Sprite tile references for animatory states
                            ; #b104-#b108
 58349 DEFB 36,115          ; Graphic data for sprite tiles #b237-#b238 (used
                            ; for Sam's disguises)
 58351 DEFB 0               ; Sprite tile reference for animatory state #b111
 58352 DEFB 132             ; Graphic data for sprite tile #b240 (used for
                            ; Sam's disguises)
 58353 DEFB 0,13,0,13,0,0,0 ; Sprite tile references for animatory states
                            ; #b112-#b119

; Unused
s58360 DEFS 8

@defs=58368:32
; Character buffer for character #b228
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by a banknote in all game modes.
; See #R58400 for more details.
b58368 DEFS 32

; Initialisation parameters for character #b228
;
; The first set of parameters is used in demo mode.
@label=C228MODE0
b58400 DEFB 62       ; Animatory state (#AS62: banknote)
 58401 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58403 DEFB 4        ; z-coordinate (outside)
 58404 DEFW 64886    ; Command list: Control a banknote
; The next set of parameters is used in game mode 1.
@label=C228MODE1
 58406 DEFB 62       ; Animatory state (#AS62: banknote)
 58407 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58409 DEFB 4        ; z-coordinate (outside)
 58410 DEFW 64886    ; Command list: Control a banknote
; The next set of parameters is used in game mode 2.
@label=C228MODE2
 58412 DEFB 62       ; Animatory state (#AS62: banknote)
 58413 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58415 DEFB 4        ; z-coordinate (outside)
 58416 DEFW 64886    ; Command list: Control a banknote
; The next set of parameters is used in game mode 3.
@label=C228MODE3
 58418 DEFB 62       ; Animatory state (#AS62: banknote)
 58419 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58421 DEFB 4        ; z-coordinate (outside)
 58422 DEFW 64886    ; Command list: Control a banknote
; The next set of parameters is used in game mode 4.
@label=C228MODE4
 58424 DEFB 62       ; Animatory state (#AS62: banknote)
 58425 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58427 DEFB 4        ; z-coordinate (outside)
 58428 DEFW 64888    ; Command list: Control a banknote (unless Sam's got the
                     ; hook)

; Sprite tile references for Sam in disguise 5
;
; Used by the routine at #R63838.
@label=GUISE5REFS
b58430 DEFB 80,238,84,86,88
 58435 DEFB 229,230,94,96,221
 58440 DEFB 222,213,214,106,108

; Unused
s58445 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 6/8)
;
; Used by the routine at #R63838.
b58448 DEFB 0,255,106,106,0,255,0,255,0,254,131,131,64,95,0,255
 58464 DEFB 0,255,6,246,160,175,8,232,52,53,104,107,0,254,0,255
 58480 DEFB 0,255,0,255,0,255,6,246,160,175,106,106,106,106

; Sprite tile references (tile 13, animatory states #b0-#b119) and graphic data
; (mask byte 7/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b58494 DEFB 254,66,247      ; Graphic data for sprite tiles #b126-#b128 (used
                            ; for Sam's disguises)
 58497 DEFB 0,10,0,10,0,0,0 ; Sprite tile references for animatory states
                            ; #b0-#b7
 58504 DEFB 55              ; Graphic data for sprite tile #b136 (used for
                            ; Sam's disguises)
 58505 DEFB 239,244         ; Sprite tile references for animatory states
                            ; #b8-#b10
 58507 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b11
 58508 DEFB 127,197,55      ; Graphic data for sprite tiles #b140-#b142 (used
                            ; for Sam's disguises)
 58511 DEFB 247             ; Sprite tile reference for animatory state #b15
 58512 DEFB 228             ; Graphic data for sprite tile #b144 (used for
                            ; Sam's disguises)
 58513 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b16-#b20
 58517 DEFB 127,252         ; Graphic data for sprite tiles #b149-#b150 (used
                            ; for Sam's disguises)
 58519 DEFB 0               ; Sprite tile reference for animatory state #b23
 58520 DEFB 254             ; Graphic data for sprite tile #b152 (used for
                            ; Sam's disguises)
 58521 DEFB 0,0,0           ; Sprite tile references for animatory states
                            ; #b24-#b27
 58524 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b28
 58525 DEFB 115,83          ; Graphic data for sprite tiles #b157-#b158 (used
                            ; for Sam's disguises)
 58527 DEFB 242             ; Sprite tile reference for animatory state #b31
 58528 DEFB 255             ; Graphic data for sprite tile #b160 (used for
                            ; Sam's disguises)
 58529 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b32-#b36
 58533 DEFB 168,130         ; Graphic data for sprite tiles #b165-#b166 (used
                            ; for Sam's disguises)
 58535 DEFB 0               ; Sprite tile reference for animatory state #b39
 58536 DEFB 255             ; Graphic data for sprite tile #b168 (used for
                            ; Sam's disguises)
 58537 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b40-#b44
 58541 DEFB 231,55,232,115  ; Graphic data for sprite tiles #b173-#b176 (used
                            ; for Sam's disguises)
 58545 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b48-#b52
 58549 DEFB 175             ; Graphic data for sprite tile #b181 (used by Sam
                            ; when he's rolling or somersaulting)
 58550 DEFB 0,0             ; Sprite tile references for animatory states
                            ; #b54-#b55
 58552 DEFB 247             ; Graphic data for sprite tile #b184 (used for
                            ; Sam's disguises)
 58553 DEFB 0,29,0,29       ; Sprite tile references for animatory states
                            ; #b56-#b60
 58557 DEFB 174             ; Graphic data for sprite tile #b189 (used by Sam
                            ; when he's rolling or somersaulting)
 58558 DEFB 0,0             ; Sprite tile references for animatory states
                            ; #b62-#b63
 58560 DEFB 55              ; Graphic data for sprite tile #b192 (used for
                            ; Sam's disguises)
 58561 DEFB 0,0,0,0         ; Sprite tile references for unused animatory
                            ; states #b64-#b68
 58565 DEFB 253             ; Graphic data for sprite tile #b197 (used by Sam
                            ; when he's rolling or somersaulting)
 58566 DEFB 0               ; Sprite tile reference for animatory state #b70
 58567 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b71
 58568 DEFB 184             ; Graphic data for sprite tile #b200 (used for
                            ; Sam's disguises)
 58569 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b72-#b76
 58573 DEFB 9               ; Graphic data for sprite tile #b205 (used by Sam
                            ; when he's rolling or somersaulting)
 58574 DEFB 0               ; Sprite tile reference for unused animatory state
                            ; #b78
 58575 DEFB 0               ; Sprite tile reference for animatory state #b79
 58576 DEFB 95              ; Graphic data for sprite tile #b208 (used for
                            ; Sam's disguises)
 58577 DEFB 0,13,0,13       ; Sprite tile references for animatory states
                            ; #b80-#b84
 58581 DEFB 232,102         ; Graphic data for sprite tiles #b213-#b214 (used
                            ; for Sam's disguises)
 58583 DEFB 0               ; Sprite tile reference for animatory state #b87
 58584 DEFB 130             ; Graphic data for sprite tile #b216 (used for
                            ; Sam's disguises)
 58585 DEFB 0,13,0,13       ; Sprite tile references for animatory states
                            ; #b88-#b92
 58589 DEFB 247,55          ; Graphic data for sprite tiles #b221-#b222 (used
                            ; for Sam's disguises)
 58591 DEFB 0               ; Sprite tile reference for animatory state #b95
 58592 DEFB 95              ; Graphic data for sprite tile #b224 (used for
                            ; Sam's disguises)
 58593 DEFB 0,0,0,0         ; Sprite tile references for animatory states
                            ; #b96-#b100
 58597 DEFB 134,111         ; Graphic data for sprite tiles #b229-#b230 (used
                            ; for Sam's disguises)
 58599 DEFB 0               ; Sprite tile reference for animatory state #b103
 58600 DEFB 235             ; Graphic data for sprite tile #b232 (used for
                            ; Sam's disguises)
 58601 DEFB 0,29,0,29       ; Sprite tile references for animatory states
                            ; #b104-#b108
 58605 DEFB 37,115          ; Graphic data for sprite tiles #b237-#b238 (used
                            ; for Sam's disguises)
 58607 DEFB 0               ; Sprite tile reference for animatory state #b111
 58608 DEFB 133             ; Graphic data for sprite tile #b240 (used for
                            ; Sam's disguises)
 58609 DEFB 0,0,0,0,0,207,0 ; Sprite tile references for animatory states
                            ; #b112-#b119

; Unused
s58616 DEFS 8

@defs=58624:32
; Character buffer for character #b229
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by a banknote in all game modes
; (see #R58656 for more details), but is also reserved for use by the hook when
; necessary (see #R25420).
@label=CBUF229
b58624 DEFS 32

; Initialisation parameters for character #b229
;
; The first set of parameters is used in demo mode.
@label=C229MODE0
b58656 DEFB 62       ; Animatory state (#AS62: banknote)
 58657 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58659 DEFB 4        ; z-coordinate (outside)
 58660 DEFW 64888    ; Command list: Control a banknote (unless Sam's got the
                     ; hook)
; The next set of parameters is used in game mode 1.
@label=C229MODE1
 58662 DEFB 62       ; Animatory state (#AS62: banknote)
 58663 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58665 DEFB 4        ; z-coordinate (outside)
 58666 DEFW 64888    ; Command list: Control a banknote (unless Sam's got the
                     ; hook)
; The next set of parameters is used in game mode 2.
@label=C229MODE2
 58668 DEFB 62       ; Animatory state (#AS62: banknote)
 58669 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58671 DEFB 4        ; z-coordinate (outside)
 58672 DEFW 64888    ; Command list: Control a banknote (unless Sam's got the
                     ; hook)
; The next set of parameters is used in game mode 3.
@label=C229MODE3
 58674 DEFB 62       ; Animatory state (#AS62: banknote)
 58675 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58677 DEFB 4        ; z-coordinate (outside)
 58678 DEFW 64888    ; Command list: Control a banknote (unless Sam's got the
                     ; hook)
; The next set of parameters is used in game mode 4.
@label=C229MODE4
 58680 DEFB 62       ; Animatory state (#AS62: banknote)
 58681 DEFB 0,34     ; Location (sidewalk at the far left of town)
 58683 DEFB 4        ; z-coordinate (outside)
 58684 DEFW 64888    ; Command list: Control a banknote (unless Sam's got the
                     ; hook)

; Sprite tile references for Sam in disguise 6
;
; Used by the routine at #R63838.
@label=GUISE6REFS
b58686 DEFB 112,157,149,160,126
 58691 DEFB 166,92,160,160,173
 58696 DEFB 174,175,104,106,152

; Unused
s58701 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 7/8)
;
; Used by the routine at #R63838.
b58704 DEFB 0,255,115,115,0,127,0,255,0,254,130,130,64,95,0,255
 58720 DEFB 0,255,7,247,48,55,8,232,36,37,40,42,0,254,0,129
 58736 DEFB 0,254,0,248,0,31,7,231,48,55,115,115,115,115

; Sprite tile references (tile 14, animatory states #b0-#b119) and graphic data
; (UDG byte 8/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b58750 DEFB 1,28,11           ; Graphic data for sprite tiles #b126-#b128 (used
                              ; for Sam's disguises)
 58753 DEFB 0,13,0,13,0,0,0   ; Sprite tile references for animatory states
                              ; #b0-#b7
 58760 DEFB 8                 ; Graphic data for sprite tile #b136 (used for
                              ; Sam's disguises)
 58761 DEFB 0,0               ; Sprite tile references for animatory states
                              ; #b8-#b10
 58763 DEFB 0                 ; Sprite tile reference for unused animatory
                              ; state #b11
 58764 DEFB 128,11,8          ; Graphic data for sprite tiles #b140-#b142 (used
                              ; for Sam's disguises)
 58767 DEFB 246               ; Sprite tile reference for animatory state #b15
 58768 DEFB 17                ; Graphic data for sprite tile #b144 (used for
                              ; Sam's disguises)
 58769 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b16-#b20
 58773 DEFB 128,0             ; Graphic data for sprite tiles #b149-#b150 (used
                              ; for Sam's disguises)
 58775 DEFB 0                 ; Sprite tile reference for animatory state #b23
 58776 DEFB 1                 ; Graphic data for sprite tile #b152 (used for
                              ; Sam's disguises)
 58777 DEFB 0,0,0             ; Sprite tile references for animatory states
                              ; #b24-#b27
 58780 DEFB 0                 ; Sprite tile reference for unused animatory
                              ; state #b28
 58781 DEFB 240,176           ; Graphic data for sprite tiles #b157-#b158 (used
                              ; for Sam's disguises)
 58783 DEFB 0                 ; Sprite tile reference for animatory state #b31
 58784 DEFB 0                 ; Graphic data for sprite tile #b160 (used for
                              ; Sam's disguises)
 58785 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b32-#b36
 58789 DEFB 37,92             ; Graphic data for sprite tiles #b165-#b166 (used
                              ; for Sam's disguises)
 58791 DEFB 0                 ; Sprite tile reference for animatory state #b39
 58792 DEFB 0                 ; Graphic data for sprite tile #b168 (used for
                              ; Sam's disguises)
 58793 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b40-#b44
 58797 DEFB 15,8,21,176       ; Graphic data for sprite tiles #b173-#b176 (used
                              ; for Sam's disguises)
 58801 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b48-#b52
 58805 DEFB 44                ; Graphic data for sprite tile #b181 (used by Sam
                              ; when he's rolling or somersaulting)
 58806 DEFB 0,0               ; Sprite tile references for animatory states
                              ; #b54-#b55
 58808 DEFB 11                ; Graphic data for sprite tile #b184 (used for
                              ; Sam's disguises)
 58809 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b56-#b60
 58813 DEFB 192               ; Graphic data for sprite tile #b189 (used by Sam
                              ; when he's rolling or somersaulting)
 58814 DEFB 0,0               ; Sprite tile references for animatory states
                              ; #b62-#b63
 58816 DEFB 8                 ; Graphic data for sprite tile #b192 (used for
                              ; Sam's disguises)
 58817 DEFB 0,0,0,0           ; Sprite tile references for unused animatory
                              ; states #b64-#b68
 58821 DEFB 0                 ; Graphic data for sprite tile #b197 (used by Sam
                              ; when he's rolling or somersaulting)
 58822 DEFB 0                 ; Sprite tile reference for animatory state #b70
 58823 DEFB 0                 ; Sprite tile reference for unused animatory
                              ; state #b71
 58824 DEFB 136               ; Graphic data for sprite tile #b200 (used for
                              ; Sam's disguises)
 58825 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b72-#b76
 58829 DEFB 176               ; Graphic data for sprite tile #b205 (used by Sam
                              ; when he's rolling or somersaulting)
 58830 DEFB 0                 ; Sprite tile reference for unused animatory
                              ; state #b78
 58831 DEFB 0                 ; Sprite tile reference for animatory state #b79
 58832 DEFB 32                ; Graphic data for sprite tile #b208 (used for
                              ; Sam's disguises)
 58833 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b80-#b84
 58837 DEFB 21,206            ; Graphic data for sprite tiles #b213-#b214 (used
                              ; for Sam's disguises)
 58839 DEFB 0                 ; Sprite tile reference for animatory state #b87
 58840 DEFB 92                ; Graphic data for sprite tile #b216 (used for
                              ; Sam's disguises)
 58841 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b88-#b92
 58845 DEFB 11,8              ; Graphic data for sprite tiles #b221-#b222 (used
                              ; for Sam's disguises)
 58847 DEFB 0                 ; Sprite tile reference for animatory state #b95
 58848 DEFB 128               ; Graphic data for sprite tile #b224 (used for
                              ; Sam's disguises)
 58849 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b96-#b100
 58853 DEFB 92,224            ; Graphic data for sprite tiles #b229-#b230 (used
                              ; for Sam's disguises)
 58855 DEFB 0                 ; Sprite tile reference for animatory state #b103
 58856 DEFB 8                 ; Graphic data for sprite tile #b232 (used for
                              ; Sam's disguises)
 58857 DEFB 0,0,0,0           ; Sprite tile references for animatory states
                              ; #b104-#b108
 58861 DEFB 200,176           ; Graphic data for sprite tiles #b237-#b238 (used
                              ; for Sam's disguises)
 58863 DEFB 0                 ; Sprite tile reference for animatory state #b111
 58864 DEFB 130               ; Graphic data for sprite tile #b240 (used for
                              ; Sam's disguises)
 58865 DEFB 0,0,0,0,214,210,0 ; Sprite tile references for animatory states
                              ; #b112-#b119

; Unused
s58872 DEFS 8

@defs=58880:32
; Character buffer for Sam
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how the buffer is used. This buffer is used by Sam in all game modes. See
; #R58912 for more details.
@label=SAMCBUF
b58880 DEFS 32

; Initialisation parameters for Sam
;
; Used by the routine at #R63662. Note that the last byte in each set of
; parameters is effectively unused, but because it is non-zero, the routine at
; #R63614 will needlessly copy the whole set of parameters into bytes #b0, #b1,
; #b2, #b4, #b23 and #b24 of Sam's buffer; the parameters are correctly used to
; initialise Sam upon return from that routine by the routine at #R63662.
; .
; The first set of parameters is used in demo mode.
@label=SAMMODE0
b58912 DEFB 0        ; Unused
 58913 DEFB 34       ; LSB of the address of the screen refresh buffer byte
                     ; that corresponds to the top row of the cutscene window
                     ; (see #R30822); combined with the coordinates below, this
                     ; places the top-left corner of the cutscene window at
                     ; (224,19) with Sam at (229,19) (in his office)
 58914 DEFB 208      ; New x-coordinate for the leftmost column of the play
                     ; area on screen
 58915 DEFB 14       ; New y-coordinate for the topmost row of the play area on
                     ; screen
 58916 DEFB 32       ; Message #R26880(#b32): '...I'M WORKING ON A CASE RIGHT
                     ; NOW...'
 58917 DEFB 1        ; Unused
; The next set of parameters is used in game mode 1.
@label=SAMMODE1
 58918 DEFB 0        ; Unused
 58919 DEFB 34       ; LSB of the address of the screen refresh buffer byte
                     ; that corresponds to the top row of the cutscene window
                     ; (see #R30822); combined with the coordinates below, this
                     ; places the top-left corner of the cutscene window at
                     ; (224,19) with Sam at (229,19) (in his office)
 58920 DEFB 208      ; New x-coordinate for the leftmost column of the play
                     ; area on screen
 58921 DEFB 14       ; New y-coordinate for the topmost row of the play area on
                     ; screen
 58922 DEFB 33       ; Message #R26925(#b33): '...SO BEGAN THE CASE OF THE BALI
                     ; BUDGIE'
 58923 DEFB 1        ; Unused
; The next set of parameters is used in game mode 2.
@label=SAMMODE2
 58924 DEFB 0        ; Unused
 58925 DEFB 34       ; LSB of the address of the screen refresh buffer byte
                     ; that corresponds to the top row of the cutscene window
                     ; (see #R30822); combined with the coordinates below, this
                     ; places the top-left corner of the cutscene window at
                     ; (240,19) with Sam at (245,19) (third floor of no. 15)
 58926 DEFB 224      ; New x-coordinate for the leftmost column of the play
                     ; area on screen
 58927 DEFB 14       ; New y-coordinate for the topmost row of the play area on
                     ; screen
 58928 DEFB 62       ; Message #R32171(#b62): 'IT ALL WENT BLACK. AS I FELL
                     ; SOMEONE FAT PUSHED PAST ME...'
 58929 DEFB 1        ; Unused
; The next set of parameters is used in game mode 3.
@label=SAMMODE3
 58930 DEFB 0        ; Unused
 58931 DEFB 32       ; LSB of the address of the screen refresh buffer byte
                     ; that corresponds to the top row of the cutscene window
                     ; (see #R30822); combined with the coordinates below, this
                     ; places the top-left corner of the cutscene window at
                     ; (0,7) with Sam at (5,7) (on the roof of the apartment
                     ; building next to no. 74)
 58932 DEFB 0        ; New x-coordinate for the leftmost column of the play
                     ; area on screen
 58933 DEFB 2        ; New y-coordinate for the topmost row of the play area on
                     ; screen
 58934 DEFB 67       ; Message #R24069(#b67): 'SOMEONE HIT ME. I PLAYED DEAD.
                     ; TWO MEN WALKED OFF...'
 58935 DEFB 1        ; Unused
; The next set of parameters is used in game mode 4.
@label=SAMMODE4
 58936 DEFB 0        ; Unused
 58937 DEFB 34       ; LSB of the address of the screen refresh buffer byte
                     ; that corresponds to the top row of the cutscene window
                     ; (see #R30822); combined with the coordinates below, this
                     ; places the top-left corner of the cutscene window at
                     ; (224,19) with Sam at (229,19) (in his office)
 58938 DEFB 208      ; New x-coordinate for the leftmost column of the play
                     ; area on screen
 58939 DEFB 14       ; New y-coordinate for the topmost row of the play area on
                     ; screen
 58940 DEFB 74       ; Message #R24425(#b74): 'SHE'S IN JAIL NOW. ANOTHER CASE
                     ; SOLVED...'
 58941 DEFB 1        ; Unused

; Sprite tile references for Sam in disguise 7
;
; Used by the routine at #R63838.
@label=GUISE7REFS
b58942 DEFB 150,158,140,110,88
 58947 DEFB 90,92,114,116,141
 58952 DEFB 142,102,104,165,108

; Unused
s58957 DEFS 3

; Sprite tile graphic data for Sam in disguise (byte pairs 8/8)
;
; Used by the routine at #R63838.
b58960 DEFB 0,254,176,176,128,191,0,195,1,253,92,92,128,191,0,252
 58976 DEFB 0,63,11,235,8,11,21,213,200,203,37,165,1,253,126,126
 58992 DEFB 0,254,7,247,224,239,11,235,8,11,176,176,176,176

; Sprite tile graphic data (mask byte 8/8)
;
; Used by the routines at #R25618, #R59635 and #R63838.
b59006 DEFB 253,28,235             ; Graphic data for sprite tiles #b126-#b128
                                   ; (used for Sam's disguises)
 59009 DEFB 204,196,6,240,80,24,92 ; Unused
 59016 DEFB 11                     ; Graphic data for sprite tile #b136 (used
                                   ; for Sam's disguises)
 59017 DEFB 0,0,255                ; Unused
 59020 DEFB 191,235,11             ; Graphic data for sprite tiles #b140-#b142
                                   ; (used for Sam's disguises)
 59023 DEFB 0                      ; Unused
 59024 DEFB 209                    ; Graphic data for sprite tile #b144 (used
                                   ; for Sam's disguises)
 59025 DEFB 196,219,140,128        ; Unused
 59029 DEFB 191,254                ; Graphic data for sprite tiles #b149-#b150
                                   ; (used for Sam's disguises)
 59031 DEFB 255                    ; Unused
 59032 DEFB 253                    ; Graphic data for sprite tile #b152 (used
                                   ; for Sam's disguises)
 59033 DEFB 1,15,17,222            ; Unused
 59037 DEFB 240,176                ; Graphic data for sprite tiles #b157-#b158
                                   ; (used for Sam's disguises)
 59039 DEFB 0                      ; Unused
 59040 DEFB 255                    ; Graphic data for sprite tile #b160 (used
                                   ; for Sam's disguises)
 59041 DEFB 8,134,140,154          ; Unused
 59045 DEFB 165,92                 ; Graphic data for sprite tiles #b165-#b166
                                   ; (used for Sam's disguises)
 59047 DEFB 46                     ; Unused
 59048 DEFB 254                    ; Graphic data for sprite tile #b168 (used
                                   ; for Sam's disguises)
 59049 DEFB 90,111,118,207         ; Unused
 59053 DEFB 239,11,213,176         ; Graphic data for sprite tiles #b173-#b176
                                   ; (used for Sam's disguises)
 59057 DEFB 0,250,254,192          ; Unused
 59061 DEFB 172                    ; Graphic data for sprite tile #b181 (used
                                   ; by Sam when he's rolling or somersaulting)
 59062 DEFB 0,0                    ; Unused
 59064 DEFB 235                    ; Graphic data for sprite tile #b184 (used
                                   ; for Sam's disguises)
 59065 DEFB 0,0,0,0                ; Unused
 59069 DEFB 223                    ; Graphic data for sprite tile #b189 (used
                                   ; by Sam when he's rolling or somersaulting)
 59070 DEFB 0,0                    ; Unused
 59072 DEFB 11                     ; Graphic data for sprite tile #b192 (used
                                   ; for Sam's disguises)
 59073 DEFB 0,0,0,0                ; Unused
 59077 DEFB 3                      ; Graphic data for sprite tile #b197 (used
                                   ; by Sam when he's rolling or somersaulting)
 59078 DEFB 0,0                    ; Unused
 59080 DEFB 136                    ; Graphic data for sprite tile #b200 (used
                                   ; for Sam's disguises)
 59081 DEFB 0,0,0,0                ; Unused
 59085 DEFB 176                    ; Graphic data for sprite tile #b205 (used
                                   ; by Sam when he's rolling or somersaulting)
 59086 DEFB 0,0                    ; Unused
 59088 DEFB 47                     ; Graphic data for sprite tile #b208 (used
                                   ; for Sam's disguises)
 59089 DEFB 0,0,0,0                ; Unused
 59093 DEFB 213,206                ; Graphic data for sprite tiles #b213-#b214
                                   ; (used for Sam's disguises)
 59095 DEFB 0                      ; Unused
 59096 DEFB 92                     ; Graphic data for sprite tile #b216 (used
                                   ; for Sam's disguises)
 59097 DEFB 0,0,0,0                ; Unused
 59101 DEFB 235,11                 ; Graphic data for sprite tiles #b221-#b222
                                   ; (used for Sam's disguises)
 59103 DEFB 0                      ; Unused
 59104 DEFB 191                    ; Graphic data for sprite tile #b224 (used
                                   ; for Sam's disguises)
 59105 DEFB 0,0,0,0                ; Unused
 59109 DEFB 92,239                 ; Graphic data for sprite tiles #b229-#b230
                                   ; (used for Sam's disguises)
 59111 DEFB 0                      ; Unused
 59112 DEFB 232                    ; Graphic data for sprite tile #b232 (used
                                   ; for Sam's disguises)
 59113 DEFB 0,0,0,0                ; Unused
 59117 DEFB 203,176                ; Graphic data for sprite tiles #b237-#b238
                                   ; (used for Sam's disguises)
 59119 DEFB 0                      ; Unused
 59120 DEFB 130                    ; Graphic data for sprite tile #b240 (used
                                   ; for Sam's disguises)

; Unused
s59121 DEFS 15

; Copy a play area tile into the back buffer
;
; Used by the routine at #R59148.
;
; HL Play area tile base address
@label=COPYTILE
c59136 LD DE,40990   ; The first byte of the back buffer is at #R40990
; This entry point is also used by the routine at #R59148 (with #REGhl=#R40990
; and #REGde holding a display file address) to copy the tile from the back
; buffer to the screen.
*59139 LD B,8        ; There are 8 bytes to copy
*59141 LD A,(HL)     ; {Copy the 8 tile bytes to the back buffer or the screen
 59142 LD (DE),A     ;
 59143 INC H         ;
 59144 INC D         ;
 59145 DJNZ 59141    ; }
; The address of this entry point is placed into bytes #b8 and #b9 of a
; policeman's buffer by the routine at #R24832, and is also found in the
; command lists at #R64940 and #R65172.
@refs=61948
@label=DONOWT
*59147 RET           ;

; Print a tile
;
; Used by the routines at #R26075, #R59406, #R59461, #R59516, #R59575 and
; #R60032. Copies a background tile of the play area into the back buffer at
; #R40990, superimposes character sprite tiles and a foreground tile as
; appropriate, and then copies the resultant tile to the screen. Also sets the
; corresponding attribute byte.
;
; H Screen row number (0-19)
; L Screen column number (0-31)
@label=PRINTTILE
c59148 PUSH HL       ; Put the screen coordinates onto the stack
 59149 LD A,H        ; {Compute the corresponding display file address in
 59150 AND 7         ; #REGhl
 59152 RRCA          ;
 59153 RRCA          ;
 59154 RRCA          ;
 59155 ADD A,L       ;
 59156 LD L,A        ;
 59157 LD A,H        ;
 59158 AND 24        ;
 59160 ADD A,64      ;
 59162 LD H,A        ; }
 59163 EX (SP),HL    ; Put the display file address onto the stack and get the
                     ; screen coordinates back in #REGhl
 59164 LD DE,(32766) ; #REGde=play area coordinates of the top-left corner of
                     ; the screen
 59168 ADD HL,DE     ; #REGhl=play area coordinates of the tile to be printed
 59169 PUSH HL       ; Push these coordinates onto the stack...
 59170 EXX           ;
 59171 POP DE        ; ...and pop them into #REGde'
 59172 EXX           ;
; In order to find the graphic data and attribute byte for the play area
; tile(s) to be printed at (X,Y), we need the T and T' values for that
; location; these values can be found in turn from the Z, Z' and Z'' values for
; the location.
; .
; The Z value (#b0<=Z<=#b101) for the play area location (X,Y) is found in byte
; INT(X/8) of page #b184+INT(Y/6). Then the Z' value is found in byte Z of page
; #R48896(#b191), and the Z'' value in byte #b128+Z of page #b184+X%8.
; .
; Z'' and bit 7-(X%8) of Z' determine the address, P, of the T value for the
; play area location (X,Y): Z'' is the LSB, and the MSB is either #b160+2*(Y%6)
; or #b172+2*(Y%6), depending on whether bit 7-(X%8) of Z' is reset or set. The
; address of the T' value is P+256.
 59173 LD A,H        ; #REGa=Y, the play area y-coordinate (2-39)
 59174 LD D,183      ; {Set #REGd=#b184+INT(Y/6) (#b184-#b190)
*59176 INC D         ;
 59177 SUB 6         ;
 59179 JR NC,59176   ; }
 59181 ADD A,86      ; #b80<=#REGa<=#b85
 59183 ADD A,A       ; #REGa=#b160, #b162, #b164, #b166, #b168 or #b170
 59184 LD B,A        ; #REGb=#b160+2*(Y%6)
 59185 LD A,L        ; #REGa=X, the play area x-coordinate (0-255)
 59186 AND 248       ; Keep only bits 3-7
 59188 RRA           ; {Slide them down into bits 0-4; now #REGa=INT(X/8)
 59189 RRCA          ;
 59190 RRCA          ; }
 59191 LD E,A        ; Point #REGde at the Z value for the play area location
                     ; (X,Y)
 59192 LD A,L        ; #REGa=X, the play area x-coordinate (0-255)
 59193 AND 7         ; Keep only bits 0-2; now #REGa=X%8
 59195 PUSH AF       ; Save this value briefly
@ssub=ADD A,40981/256
 59196 ADD A,160     ; #b160<=#REGa<=#b167
 59198 LD H,A        ; #REGh=#b160+(X%8)
@ssub=LD L,40981%256
 59199 LD L,21       ; Point #REGhl at byte #b21 of page #b160+(X%8)
 59201 LD C,(HL)     ; Now #REGc=#b128 (if X%8=0), #b64, #b32, #b16, #b8, #b4,
                     ; #b2, or #b1 (if X%8=7)
 59202 LD A,(DE)     ; #REGa=Z (value of byte INT(X/8) of page #b184+INT(Y/6))
 59203 LD L,A        ; #REGl=Z (#b0-#b101)
@ssub=LD H,48896/256
 59204 LD H,191      ; Point #REGhl at the table of Z' values at #R48896
 59206 LD A,(HL)     ; #REGa=Z' (#b0, #b1, #b3, #b7, #b14, #b31, #b128, #b134,
                     ; #b199, #b215, #b240, #b252, or #b255)
 59207 AND C         ; Is bit 7-(X%8) of Z' set?
 59208 JR Z,59214    ; Jump if not
 59210 LD A,B        ; {Otherwise set #REGb=#b172+2*(Y%6)
 59211 ADD A,12      ;
 59213 LD B,A        ; }
*59214 SET 7,L       ; #REGl=#b128+Z (#b128-#b229)
 59216 POP AF        ; #REGa=X%8
 59217 ADD A,184     ; {#REGh=#b184+X%8
 59219 LD H,A        ; }
 59220 LD C,(HL)     ; #REGc=Z'' (value of byte #b128+Z of page #b184+X%8)
 59221 SET 5,E       ; #REGe=#b32+INT(X/8)
 59223 LD A,(DE)     ; #REGa=value of byte #b32+INT(X/8) of page #b184+INT(Y/6)
 59224 LD L,A        ; #REGl=attribute byte address LSB (#b0-#b27)
 59225 LD A,E        ; #REGa=#b32+INT(X/8)
 59226 XOR 96        ; #REGa=#b64+INT(X/8)
 59228 LD E,A        ; Point #REGde at the window flags for the play area
                     ; location (X,Y)
 59229 LD A,(BC)     ; #REGa=T (value of byte Z'' of page #b160+2*(Y%6) or
                     ; #b172+2*(Y%6))
; #HTML(<span id="tValue" />) We have collected the T value for the play area
; location (X,Y). Bits 7 and 6 of T have the following meanings:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Value | =h Meaning }
; { 11       | This location has a background tile and a transparent foreground
;              tile }
; { 10       | This location has a blank background tile and a transparent
;              foreground tile (used by windows and house number signs) }
; { 01       | This location has an opaque foreground tile only (characters
;              with a z-coordinate of 1 will appear behind it) }
; { 00       | This location has a background tile only (characters with a
;              z-coordinate of 1 will appear in front of it) }
; TABLE#
; .
; When bits 7 and 6 of T are both set (11), bits 2-5 of T and bit 7 of T'
; indicate the LSB of the address of the background tile's graphic data; the
; MSB is always #b128. The LSBs of the addresses of the graphic data for the
; two half-tiles that make up the foreground tile are derived from bits 0-6 of
; T'; the MSBs are always #b128.
; .
; When bit 7 of T is set and bit 6 is reset (10), bits 3-5 are unused, and bit
; 2 is set only if the right-hand window of a pair is at this location. The
; LSBs of the addresses of the graphic data for the two half-tiles that make up
; the foreground tile are derived from T' (#b0-#b31) and the window flags; the
; MSBs are always #b128.
; .
; When bit 7 of T is reset, bit 5 is unused (always reset), and bits 2-4
; indicate the MSB of the address of the tile's graphic data (#b128, #b136,
; #b144, #b152 or #b160); the LSB is equal to T'.
; .
; Finally, bits 1 and 0 of T indicate the MSB of the address of the tile's
; attribute byte (#b168, #b169, #b170 or #b171); the LSB (#b0-#b27, already
; collected in #REGl at this point) is found in byte #b32+INT(X/8) of page
; #b184+INT(Y/6).
 59230 AND 3         ; Keep only bits 0 and 1 of T
 59232 ADD A,168     ; #b168<=#REGa<=#b171
 59234 LD H,A        ; #b168<=#REGh<=#b171
 59235 LD A,(HL)     ; #REGa=play area tile attribute byte
 59236 LD (43038),A  ; Save it at #R43038 for later retrieval
 59239 LD A,(BC)     ; #REGa=T
 59240 INC B         ; #REGb=#b161+2*(Y%6) or #b173+2*(Y%6); now #REGbc points
                     ; at the T' value
 59241 RLCA          ; Does this play area location have a background tile and
                     ; a foreground tile?
 59242 JR NC,59324   ; Jump if not
; The play area location under consideration has a background tile and a
; foreground tile.
 59244 BIT 7,A       ; Is there a window or a house number sign here?
 59246 JR NZ,59268   ; Jump if not
; There is a window or a house number sign at this location.
 59248 CALL 63450    ; Collect the window flags
 59251 JR Z,59259    ; Jump unless we are dealing with the right-hand window of
                     ; a pair
 59253 AND 35        ; Keep only bits 5 (light indicator), 1 and 0 (decoration
                     ; indicator) of the window flags
 59255 ADD A,96      ; Set bit 7 if the light is off (i.e. copy bit 5 into bit
                     ; 7)
 59257 RRCA          ; {Move bits 1 and 0 (decoration indicator) into bits 7
 59258 RRCA          ; and 6, and the light indicator back into bit 5}
*59259 AND 224       ; Keep only bits 5 (light indicator), 6 and 7 (decoration
                     ; indicator) of the window flags
 59261 LD E,A        ; Copy these bits to #REGe
 59262 LD A,(BC)     ; #REGa=T' (#b0-#b31 for window tiles and house number
                     ; sign tiles)
 59263 OR E          ; #REGa=foreground tile identifier
 59264 LD L,159      ; Use tile #b159 in page #b128 (which is blank) as the
                     ; background tile
 59266 JR 59281      ;
; There is no window or house number sign at this location, and it has a
; background tile and a transparent foreground tile.
*59268 AND 120       ; {Keep only bits 2-5 of T
 59270 RRA           ; }
 59271 SCF           ; {Shift bits 2-5 into bits 1-4 and set bit 7
 59272 RRA           ; }
 59273 LD L,A        ; #REGl=background tile reference (even number >= #b128)
 59274 LD A,(BC)     ; #REGa=T'
 59275 RLCA          ; Is bit 7 of T' set?
 59276 JR NC,59279   ; Jump if not
 59278 INC L         ; Increment the background tile reference (to an odd
                     ; number >= #b129)
*59279 SCF           ; {#REGa=T' with bit 7 set
 59280 RRA           ; }
*59281 LD E,A        ; #REGe=foreground tile identifier
 59282 LD H,128      ; Point #REGhl at the background tile graphic data
; Now #REGhl holds the base address of the background tile graphic data.
 59284 PUSH DE       ; Save the foreground tile identifier (in #REGe)
 59285 CALL 59136    ; Copy the background tile into the back buffer at #R40990
 59288 LD A,1        ; {Superimpose sprite tiles for characters who are indoors
 59290 CALL 59640    ; (z=1)}
 59293 POP BC        ; Restore the foreground tile identifier to #REGc
; Now we superimpose the foreground tile. The 16 graphic and mask bytes for the
; foreground tile are found in two groups of 8 bytes in pages #b128-#b135.
 59294 LD B,192      ; The LSB of the first group of 8 bytes is found in page
                     ; #R49152(#b192)
 59296 LD DE,40990   ; Point #REGde at the back buffer at #R40990
 59299 LD A,(BC)     ; #REGa=LSB of the first group of 8 bytes
*59300 LD L,A        ; Copy the LSB to #REGl
 59301 LD H,128      ; Point #REGhl at the first byte (a graphic byte) in the
                     ; group
 59303 LD B,4        ; There are 4 pairs of bytes per group
*59305 LD A,(DE)     ; #REGa=back buffer byte
 59306 OR (HL)       ; #S/OR/ on the graphic byte
 59307 INC H         ; Point #REGhl at the corresponding mask byte
 59308 AND (HL)      ; #S/AND/ on the mask byte
 59309 INC H         ; Point #REGhl at the next graphic byte
 59310 LD (DE),A     ; Replace the back buffer byte
 59311 INC D         ; Point #REGde at the next back buffer byte
 59312 DJNZ 59305    ; Jump back until all 8 bytes have been done
 59314 LD B,193      ; The LSB of the second group of 8 bytes is found in page
                     ; #R49408(#b193)
 59316 LD A,(BC)     ; #REGa=LSB of the second group of 8 bytes
 59317 INC C         ; Set the zero flag if we've just done the second group
 59318 LD C,255      ; Signal: the second group is next
 59320 JR NZ,59300   ; Jump back until both groups have been done
 59322 JR 59342      ;
; The play area location under consideration has only one tile: either a
; background tile (if bit 6 of T is reset), or an opaque foreground tile (bit 6
; of T set).
*59324 AND 184       ; Keep only bits 3-5 and 7 (bits 2-4 and 6 of T)
 59326 RLCA          ; Copy bit 6 of T into the carry flag
 59327 PUSH AF       ; Save the carry flag
 59328 SCF           ; {Now #REGa has bit 7 set, and a copy of bits 2-4 of T in
 59329 RRA           ; bits 3-5}
 59330 LD H,A        ; #REGh=#b128, #b136, #b144, #b152 or #b160
 59331 LD A,(BC)     ; #REGa=T'
 59332 LD L,A        ; Point #REGhl at the tile graphic data
 59333 CALL 59136    ; Copy the tile into the back buffer at #R40990
 59336 POP AF        ; Restore the carry flag
 59337 LD A,1        ; {Superimpose sprite tiles for characters who are indoors
 59339 CALL NC,59640 ; (z=1) if we're dealing with a background tile}
; Now we can superimpose sprite tiles for characters who are in the foreground.
*59342 LD A,2        ; {Superimpose sprite tiles for characters who are between
 59344 CALL 59635    ; a building and the sidewalk (z=2), and then for
                     ; characters who are on the sidewalk or road (z=4)}
; The tile in the back buffer is now ready to be drawn.
 59347 POP DE        ; #REGde=display file address
 59348 LD C,E        ; #REGc=corresponding attribute file address LSB
 59349 LD A,D        ; #REGa=display file address MSB (#b64, #b72 or #b80)
 59350 LD HL,40990   ; Point #REGhl at the back buffer containing the tile to
                     ; be drawn
 59353 RRCA          ; {#REGa=#b88, #b89 or #b90
 59354 RRCA          ;
 59355 RRCA          ;
 59356 ADD A,80      ; }
 59358 LD B,A        ; Point #REGbc at the appropriate byte of the attribute
                     ; file
 59359 LD A,(43038)  ; Collect the attribute byte saved earlier at #R43038
 59362 LD (BC),A     ; Copy it to the attribute file
 59363 JP 59139      ; Copy the tile to the display file

; Unused
s59366 DEFS 2

; Move a row of the screen left, right, up or down
;
; Used by the routines at #R59406 (to move a row left), #R59461 (to move a row
; right), #R59516 (to move a row up) and #R59575 (to move a row down).
;
; DE Destination attribute file address
; HL Source attribute file address
@label=MOVEROW
c59368 XOR A         ; Set #REGa=0 initially to indicate that we are copying a
                     ; row of attribute bytes first
*59369 PUSH HL       ; Save the source attribute file address
 59370 PUSH DE       ; Save the destination attribute file address
@label=MOVEROWBC
 59371 LD BC,31      ; The operand of this instruction is set to #w31 by the
                     ; routines at #R59406 and #R59461, and to #w32 by the
                     ; routines at #R59516, #R59575 and #R64618
@label=MOVEROWLD
 59374 LDDR          ; This instruction is set to #S/LDIR/ by the routines at
                     ; #R59406, #R59516, #R59575 and #R64618, and to #S/LDDR/
                     ; by the routine at #R59461; it copies the source row of
                     ; attribute bytes or pixels to the destination row
 59376 POP DE        ; Restore the destination attribute file address to #REGde
 59377 POP HL        ; Restore the source attribute file address to #REGhl
 59378 AND A         ; Have we just copied a row of attribute bytes?
 59379 JR Z,59387    ; Jump if so to point #REGde and #REGhl at the
                     ; corresponding display file bytes
 59381 INC D         ; {Otherwise point #REGde and #REGhl at the next
 59382 INC H         ; destination and source rows of pixels}
 59383 DEC A         ; Have we copied 8 rows of pixels yet?
 59384 JR NZ,59369   ; Jump back if not
 59386 RET           ;
*59387 LD A,H        ; {Set #REGhl to the display file address that corresponds
 59388 AND 11        ; to the source attribute file address
 59390 ADD A,A       ;
 59391 ADD A,A       ;
 59392 ADD A,A       ;
 59393 LD H,A        ; }
 59394 LD A,D        ; {Set #REGde to the display file address that corresponds
 59395 AND 11        ; to the destination attribute file address
 59397 ADD A,A       ;
 59398 ADD A,A       ;
 59399 ADD A,A       ;
 59400 LD D,A        ; }
 59401 LD A,8        ; There are 8 rows of pixels to copy
 59403 JR 59369      ; Jump back to copy them

; Unused
s59405 DEFB 0

; Scroll the screen left 8 columns
;
; Used by the routine at #R61882.
@label=LSCROLL8
@ssub=LD HL,59371+1
c59406 LD HL,59372   ; {Set the instruction at #R59371 to '#S/LD BC/,#nn31'
 59409 LD (HL),31    ; }
@ssub=LD L,59375%256
 59411 LD L,239      ; {Set the instruction at #R59374 to '#S/LDIR/'
 59413 LD (HL),176   ; }
 59415 LD B,8        ; There are 8 columns to scroll on
*59417 PUSH BC       ; Save the column counter
 59418 LD B,20       ; There are 20 rows to be scrolled left
@nowarn
 59420 LD HL,22529   ; Point #REGhl at the attribute byte for the cell at
                     ; screen coordinates (1,0)
*59423 LD D,H        ; {Point #REGde at the attribute byte for the adjacent
 59424 LD E,L        ; cell on the left
 59425 DEC E         ; }
 59426 PUSH BC       ; Save the row counter
 59427 PUSH HL       ; Save the source attribute file address
 59428 CALL 59368    ; Shift this row of the screen left
 59431 POP HL        ; Restore the source attribute file address to #REGhl
 59432 LD C,32       ; {Point #REGhl at the next row down in the attribute file
 59434 ADD HL,BC     ; }
 59435 POP BC        ; Restore the row counter to #REGb
 59436 DJNZ 59423    ; Jump back until all 20 rows have been scrolled left
 59438 LD HL,32766   ; #R32766 holds the x-coordinate of the leftmost column of
                     ; the play area on screen
 59441 INC (HL)      ; Increment this x-coordinate
 59442 LD HL,4895    ; #REGl=31 (rightmost screen column), #REGh=19 (bottom row
                     ; of the screen)
*59445 PUSH HL       ; Save the screen coordinates
 59446 CALL 59148    ; Print a tile at screen coordinates (31,#REGh)
 59449 POP HL        ; Restore the screen coordinates to #REGhl
 59450 DEC H         ; Have we printed every tile in the column yet?
 59451 JP P,59445    ; Jump back if not
 59454 POP BC        ; Restore the column counter to #REGb
 59455 DJNZ 59417    ; Jump back until 8 columns have been scrolled on
 59457 RET           ;

; Unused
s59458 DEFS 3

; Scroll the screen right 8 columns
;
; Used by the routine at #R61838.
@label=RSCROLL8
@ssub=LD HL,59371+1
c59461 LD HL,59372   ; {Set the instruction at #R59371 to '#S/LD BC/,#nn31'
 59464 LD (HL),31    ; }
@ssub=LD L,59375%256
 59466 LD L,239      ; {Set the instruction at #R59374 to '#S/LDDR/'
 59468 LD (HL),184   ; }
 59470 LD B,8        ; There are 8 columns to scroll on
*59472 PUSH BC       ; Save the column counter
 59473 LD B,20       ; There are 20 rows to be scrolled right
@nowarn
 59475 LD HL,22558   ; Point #REGhl at the attribute byte for the cell at
                     ; screen coordinates (0,0)
*59478 LD D,H        ; {Point #REGde at the attribute byte for the adjacent
 59479 LD E,L        ; cell on the right
 59480 INC E         ; }
 59481 PUSH BC       ; Save the row counter
 59482 PUSH HL       ; Save the source attribute file address
 59483 CALL 59368    ; Shift this row of the screen right
 59486 POP HL        ; Restore the source attribute file address to #REGhl
 59487 LD C,32       ; {Point #REGhl at the next row down in the attribute file
 59489 ADD HL,BC     ; }
 59490 POP BC        ; Restore the row counter to #REGb
 59491 DJNZ 59478    ; Jump back until all 20 rows have been scrolled right
 59493 LD HL,32766   ; #R32766 holds the x-coordinate of the leftmost column of
                     ; the play area on screen
 59496 DEC (HL)      ; Decrement this x-coordinate
 59497 LD HL,4864    ; #REGl=0 (leftmost screen column), #REGh=19 (bottom row
                     ; of the screen)
*59500 PUSH HL       ; Save the screen coordinates
 59501 CALL 59148    ; Print a tile at screen coordinates (0,#REGh)
 59504 POP HL        ; Restore the screen coordinates to #REGhl
 59505 DEC H         ; Have we printed every tile in the column yet?
 59506 JP P,59500    ; Jump back if not
 59509 POP BC        ; Restore the column counter to #REGb
 59510 DJNZ 59472    ; Jump back until 8 columns have been scrolled on
 59512 RET           ;

; Unused
s59513 DEFS 3

; Scroll the screen up 6 rows
;
; Used by the routine at #R60539.
@label=USCROLL6
@ssub=LD HL,59371+1
c59516 LD HL,59372   ; {Set the instruction at #R59371 to '#S/LD BC/,#nn32'
 59519 LD (HL),32    ; }
@ssub=LD L,59375%256
 59521 LD L,239      ; {Set the instruction at #R59374 to '#S/LDIR/'
 59523 LD (HL),176   ; }
 59525 LD B,6        ; 6 rows will be scrolled on
*59527 PUSH BC       ; Save the primary screen row counter
; This entry point is used by the routine at #R64618.
*59528 LD B,19       ; There are 19 screen rows to move up
@nowarn
 59530 LD DE,22528   ; #REGde=destination attribute file address (top row)
@nowarn
 59533 LD HL,22560   ; #REGhl=source attribute file address (second row from
                     ; the top)
*59536 PUSH BC       ; Save the secondary screen row counter
 59537 PUSH HL       ; Save the source attribute file address
 59538 PUSH DE       ; Save the destination attribute file address
 59539 CALL 59368    ; Move one screen row up
 59542 POP HL        ; #REGhl=source attribute file address
 59543 LD C,32       ; {Point #REGhl at the next row down in the attribute file
 59545 ADD HL,BC     ; }
 59546 EX DE,HL      ; Transfer this address to #REGde
 59547 POP HL        ; #REGhl=destination attribute file address
 59548 ADD HL,BC     ; Point #REGhl at the next row down in the attribute file
 59549 POP BC        ; Restore the secondary screen row counter to #REGb
 59550 DJNZ 59536    ; Jump back until all 19 screen rows have been moved up
@label=PRINTROW19
 59552 LD HL,32767   ; #R32767 holds the y-coordinate of the topmost row of the
                     ; play area on screen
 59555 INC (HL)      ; Increment this
 59556 LD HL,4895    ; #REGl=31 (rightmost screen column), #REGh=19 (bottom row
                     ; of the screen)
*59559 PUSH HL       ; Save the screen coordinates briefly
 59560 CALL 59148    ; Print a tile at screen coordinates (#REGl,19)
 59563 POP HL        ; Restore the screen coordinates to #REGhl
 59564 DEC L         ; Have we printed every tile in the row yet?
 59565 JP P,59559    ; Jump back if not
 59568 POP BC        ; Restore the primary screen row counter to #REGb
 59569 DJNZ 59527    ; Jump back until 6 rows have been scrolled on
 59571 RET           ;

; Unused
s59572 DEFS 3

; Scroll the screen down 6 rows
;
; Used by the routine at #R60539.
@label=DSCROLL6
@ssub=LD HL,59371+1
c59575 LD HL,59372   ; {Set the instruction at #R59371 to '#S/LD BC/,#nn32'
 59578 LD (HL),32    ; }
@ssub=LD L,59375%256
 59580 LD L,239      ; {Set the instruction at #R59374 to '#S/LDIR/'
 59582 LD (HL),176   ; }
 59584 LD B,6        ; 6 rows will be scrolled on
*59586 PUSH BC       ; Save the primary screen row counter
; This entry point is used by the routine at #R64618.
*59587 LD B,19       ; There are 19 screen rows to move down
@nowarn
 59589 LD DE,23136   ; #REGde=destination attribute file address (bottom row)
@nowarn
 59592 LD HL,23104   ; #REGhl=source attribute file address (second row from
                     ; the bottom)
*59595 PUSH BC       ; Save the secondary screen row counter
 59596 PUSH HL       ; Save the source attribute file address
 59597 PUSH DE       ; Save the destination attribute file address
 59598 CALL 59368    ; Move one screen row down
 59601 POP HL        ; #REGhl=source attribute file address
 59602 LD BC,65504   ; {Point #REGhl at the next row up in the attribute file
 59605 ADD HL,BC     ; }
 59606 EX DE,HL      ; Transfer this address to #REGde
 59607 POP HL        ; #REGhl=destination attribute file address
 59608 ADD HL,BC     ; Point #REGhl at the next row up in the attribute file
 59609 POP BC        ; Restore the secondary screen row counter to #REGb
 59610 DJNZ 59595    ; Jump back until all 19 screen rows have been moved down
@label=PRINTROW0
 59612 LD HL,32767   ; #R32767 holds the y-coordinate of the topmost row of the
                     ; play area on screen
 59615 DEC (HL)      ; Decrement this
 59616 LD HL,31      ; #REGl=31 (rightmost screen column), #REGh=0 (top row of
                     ; the screen)
*59619 PUSH HL       ; Save the screen coordinates briefly
 59620 CALL 59148    ; Print a tile at screen coordinates (#REGl,0)
 59623 POP HL        ; Restore the screen coordinates to #REGhl
 59624 DEC L         ; Have we printed every tile in the row yet?
 59625 JP P,59619    ; Jump back if not
 59628 POP BC        ; Restore the primary screen row counter to #REGb
 59629 DJNZ 59586    ; Jump back until 6 rows have been scrolled on
 59631 RET           ;

; Unused
s59632 DEFS 3

; Superimpose sprite tiles onto a tile of the play area
;
; Used by the routine at #R59148. If any part of a character's sprite needs to
; be printed at the row and column specified by #REGde', the appropriate tile
; is located and superimposed onto the contents of the buffer at #R40990.
;
; A 2
; D' Play area y-coordinate
; E' Play area x-coordinate
@label=GETTILE
c59635 CALL 59640    ; Superimpose sprite tiles for characters whose
                     ; z-coordinate is 2 (between a building and the sidewalk)
 59638 LD A,4        ; Prepare to superimpose sprite tiles for characters whose
                     ; z-coordinate is 4 (on the sidewalk or road)
; This entry point is used by the routine at #R59148 with #REGa=1 (to
; superimpose sprite tiles for characters who are indoors).
*59640 EXX           ;
 59641 LD C,A        ; #REGc'=1 (indoors), 2 (between buildings and the
                     ; sidewalk) or 4 (on the sidewalk or road)
@ssub=LD H,55040/256
 59642 LD H,215      ; #b215 is the first character
*59644 LD L,4        ; Point #REGhl' at byte #b4 of the character's buffer
 59646 LD A,(HL)     ; #REGa=character's z-coordinate (1, 2, 4 or 8)
 59647 AND C         ; Reset the zero flag if the character's sprite should be
                     ; printed
; This entry point is used by the routine at #R26002 with #REGh=#b230 (Sam),
; #REGde holding the play area coordinates of a bullet, and the zero flag reset
; unless Sam's indoors.
*59648 JR Z,59742    ; Consider the next character if this one should not be
                     ; printed
 59650 LD L,0        ; Point #REGhl' at byte #b0 of the character's buffer
 59652 LD A,(HL)     ; #REGa=character's animatory state
 59653 AND 127       ; Drop the direction bit (bit 7)
 59655 CP 120        ; Is this character's animatory state >= #b120?
 59657 JR NC,59717   ; Jump if so
; The character's animatory state is < #b120, which means he has a 5x3 sprite.
 59659 INC L         ; #REGl'=#b1
 59660 INC A         ; #REGa=character's animatory state + 1
 59661 AND 7         ; Reduce this modulo 8
 59663 LD A,E        ; #REGa=X, the play area x-coordinate (0-255)
 59664 JR Z,59692    ; Jump if the character's animatory state is congruent to
                     ; 7 mod 8
; The character's animatory state is congruent to 0-6 mod 8, which means he has
; a sprite with 5 rows and 3 columns. Check whether any part of the sprite
; impinges on the tile at (X,Y).
 59666 SUB (HL)      ; Subtract the character's x-coordinate
 59667 CP 3          ; Does any part of the sprite impinge on column X?
 59669 JR NC,59742   ; Jump if not
 59671 DEC L         ; #REGl'=#b0
 59672 BIT 7,(HL)    ; Is the character facing left?
 59674 JR Z,59679    ; Jump if so
 59676 CPL           ; {Set #REGa to 2-#REGa if the character is facing right
 59677 ADD A,3       ; }
*59679 LD B,A        ; #REGb'=0, 1 or 2 (the column of the character's sprite
                     ; at (X,Y))
 59680 ADD A,A       ; {#REGa=5*#REGb
 59681 ADD A,A       ;
 59682 ADD A,B       ; }
 59683 LD B,A        ; #REGb'=0, 5 or 10
 59684 LD L,2        ; Point #REGhl' at byte #b2 of the character's buffer
 59686 LD A,D        ; #REGa=Y, the play area y-coordinate (2-39)
 59687 SUB (HL)      ; Subtract the character's y-coordinate
 59688 CP 5          ; Set the carry flag if the sprite impinges on row Y
 59690 JR 59740      ;
; The character's animatory state is congruent to 7 mod 8, which means he has a
; sprite with 3 rows and 5 columns. Check whether any part of the sprite
; impinges on the tile at (X,Y).
*59692 SUB (HL)      ; Subtract the character's x-coordinate
 59693 CP 5          ; Does any part of the character impinge on column X?
 59695 JR NC,59742   ; Jump if not
 59697 DEC L         ; #REGl'=#b0
 59698 BIT 7,(HL)    ; Is the character facing left?
 59700 JR Z,59705    ; Jump if so
 59702 CPL           ; {Set #REGa=4-#REGa if the character is facing right
 59703 ADD A,5       ; }
*59705 LD B,A        ; #REGb'=0, 1, 2, 3 or 4 (the column of the sprite at
                     ; (X,Y))
 59706 ADD A,A       ; {#REGa=3*#REGb'
 59707 ADD A,B       ; }
 59708 LD B,A        ; #REGb'=0, 3, 6, 9 or 12
 59709 LD L,2        ; Point #REGhl' at byte #b2 of the character's buffer
 59711 LD A,D        ; #REGa=Y, the play area y-coordinate (2-39)
 59712 SUB (HL)      ; Subtract the character's y-coordinate
 59713 CP 3          ; Set the carry flag if the sprite impinges on row Y
 59715 JR 59740      ;
; The character's animatory state is >= #b120, which means he has a sprite with
; 2 rows and 2 columns. Check whether any part of the sprite impinges on the
; tile at (X,Y).
*59717 LD L,1        ; Point #REGhl' at byte #b1 of the character's buffer
 59719 LD A,E        ; #REGa=X, the play area x-coordinate (0-255)
 59720 SUB (HL)      ; Subtract the character's x-coordinate
 59721 CP 2          ; Does any part of the sprite impinge on column X?
 59723 JR NC,59742   ; Consider the next character if not
 59725 DEC L         ; #REGl'=#b0
 59726 BIT 7,(HL)    ; Is the character facing left?
 59728 JR Z,59732    ; Jump if so
 59730 XOR 1         ; Set #REGa=1-#REGa
*59732 ADD A,A       ; #REGa=0 or 2
 59733 LD B,A        ; #REGb'=0 or 2
 59734 LD L,2        ; Point #REGhl' at byte #b2 of the character's buffer
 59736 LD A,D        ; #REGa=Y, the play area y-coordinate (2-39)
 59737 SUB (HL)      ; Subtract the character's y-coordinate
 59738 CP 2          ; Set the carry flag if the sprite impinges on row Y
*59740 JR C,59750    ; Jump if the sprite impinges on row Y
*59742 INC H         ; Next character
 59743 LD A,H        ; #REGa=character number
@ssub=CP 58880/256+1
 59744 CP 231        ; Have we done all the characters (#b215-#b230)?
 59746 JR NZ,59644   ; Jump back if not
 59748 EXX           ;
 59749 RET           ;
; The character's sprite impinges on the tile at coordinates (X,Y).
*59750 ADD A,B       ; #REGa=0-14 (index of the sprite tile at (X,Y))
 59751 ADD A,215     ; #b215<=#REGa<=#b229
 59753 EXX           ;
 59754 LD H,A        ; #b215<=#REGh<=#b229
 59755 EXX           ;
 59756 LD L,0        ; Point #REGhl' at byte #b0 of the character's buffer
 59758 LD A,(HL)     ; #REGa=character's animatory state
 59759 AND 7         ; Keep only bits 0-2
 59761 LD A,(HL)     ; #REGa=character's animatory state
 59762 JR NZ,59766   ; Jump if the animatory state is congruent to 1-7 mod 8
 59764 ADD A,2       ; Add 2 if the animatory state is congruent to 0 mod 8
*59766 OR 128        ; #REGa>=#b129
 59768 EXX           ;
 59769 LD L,A        ; #REGl>=#b129, #b215<=#REGh<=#b229
 59770 LD A,(HL)     ; #REGa=sprite tile reference (#b0-#b214, #b217-#b255)
 59771 LD E,A        ; Copy this to #REGe
 59772 AND A         ; Set the zero flag if this is the blank tile
 59773 EXX           ;
 59774 JR Z,59742    ; Jump back to consider the next character if the sprite
                     ; tile is blank
; A tile of this character's sprite needs to be printed at (X,Y). The apparent
; intention of the next section of code is to treat animatory states
; #AS120(#b120-#b127/#b248-#b255) (used only by the hook) specially, but the
; next instruction copies #REGl' (which holds 0) instead of #REGl (which holds
; the adjusted animatory state) into #REGa.
 59776 LD A,L        ; #REGa=0
 59777 CP 248        ; This instruction sets the carry flag
 59779 EXX           ;
 59780 JR C,59791    ; This jump is always made
; The next section of code is never executed.
 59782 LD H,219      ; Point #REGhl at one of the eight bytes at #R56312 (which
                     ; are all zero)
 59784 LD A,(HL)     ; Pick up the byte
 59785 AND A         ; Set the zero flag
 59786 JR Z,59791    ; This jump would always be made
 59788 LD (43038),A  ; Update the attribute byte stored at #R43038
; Normal service resumes here.
*59791 EXX           ;
 59792 LD A,(HL)     ; #REGa=character's animatory state
 59793 EXX           ;
 59794 LD D,199      ; Point #REGde at the graphic data for the sprite tile
 59796 LD HL,40990   ; Point #REGhl at the back buffer at #R40990
 59799 RLCA          ; Is the character facing right?
 59800 JR C,59817    ; Jump if so
; The character is facing left, so we can use the tile as-is (there is no need
; to flip it).
 59802 EX DE,HL      ; Now #REGde points at the back buffer, and #REGhl points
                     ; at the graphic data for the sprite tile
*59803 LD A,(DE)     ; Pick up a graphic byte from the back buffer
 59804 OR (HL)       ; #S/OR/ on the sprite tile graphic byte
 59805 INC H         ; Point #REGhl at the sprite tile mask byte
 59806 AND (HL)      ; #S/AND/ on the sprite tile mask byte
 59807 LD (DE),A     ; Update the back buffer byte
 59808 INC H         ; Point #REGhl at the next graphic byte of the sprite tile
 59809 INC D         ; Point #REGde at the next byte of the back buffer
 59810 BIT 3,D       ; Have we finished all 8 bytes?
 59812 JR Z,59803    ; Jump back if not
 59814 EX DE,HL      ; This instruction is redundant
 59815 JR 59836      ; Consider the next character
; The character is facing right, so we need to flip the tile.
@ssub=LD B,32256/256
*59817 LD B,126      ; The table of mirror bytes is in #R32256(page #b126)
*59819 LD A,(DE)     ; Pick up a sprite tile graphic byte
 59820 LD C,A        ; Copy it to #REGc
 59821 LD A,(BC)     ; #REGa=mirror image of the sprite tile graphic byte
 59822 OR (HL)       ; #S/OR/ on the back buffer graphic byte
 59823 LD (HL),A     ; Store the result in the back buffer
 59824 INC D         ; Point #REGde at the sprite tile mask byte
 59825 LD A,(DE)     ; Pick this up in #REGa
 59826 LD C,A        ; Copy it to #REGc
 59827 LD A,(BC)     ; #REGa=mirror image of the sprite tile mask byte
 59828 AND (HL)      ; #S/AND/ on the back buffer graphic byte
 59829 LD (HL),A     ; Store the result in the back buffer
 59830 INC D         ; Point #REGde at the next graphic byte of the sprite tile
 59831 INC H         ; Point #REGhl at the next byte of the back buffer
 59832 BIT 3,H       ; Have we finished all 8 bytes?
 59834 JR Z,59819    ; Jump back if not
*59836 EXX           ;
 59837 JR 59742      ; Jump back to consider the next character

; Unused
;
; #IF({asm}<1)(Remnants of an old version of the routine at #R59635.)
@isub=|DEFB 203,92,40,239,217,24,159,0,0
u59839 BIT 3,H
 59841 JR Z,59826
 59843 EXX
 59844 JR 59749
 59846 DEFS 2

; Update the SRB for a character's current animatory state and location
;
; Used by the routines at #R25118, #R25420, #R25789, #R29149, #R30989, #R31204,
; #R31476, #R31670, #R60293, #R60347, #R60506, #R62264, #R62325, #R63281,
; #R63558, #R63954, #R64005, #R64131, #R64218 and #R64227. Updates the
; #R32512(screen refresh buffer) (SRB) for a character's current animatory
; state and location. Returns with the character's current coordinates in
; #REGde and animatory state in #REGa.
;
; H Character number (#b215-#b230)
@label=UPDATESRB
c59848 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 59850 LD D,(HL)     ; #REGd=character's y-coordinate
 59851 DEC L         ; #REGl=#b1
 59852 LD E,(HL)     ; #REGe=character's x-coordinate
 59853 DEC L         ; #REGl=#b0
 59854 PUSH DE       ; Save the character's coordinates briefly
 59855 CALL 59868    ; Set the appropriate bits in the SRB for the character's
                     ; current animatory state and location
 59858 POP DE        ; Restore the character's coordinates to #REGde
 59859 LD A,(HL)     ; #REGa=character's animatory state
 59860 RET           ;

; Update a character's animatory state and location and update the SRB
;
; Used by the routines at #R25420, #R25789, #R26224, #R29149, #R30989, #R31204,
; #R31476, #R31670, #R31713, #R60347, #R60506, #R62264, #R62325, #R63281,
; #R63558, #R63954, #R64131 and #R64227. Sets the new animatory state and
; location of a character, and updates the #R32512(screen refresh buffer) (SRB)
; accordingly.
;
; A New animatory state
; D New y-coordinate
; E New x-coordinate
; H Character number (#b215-#b230)
@label=UPDATEAS
c59861 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 59863 LD (HL),D     ; Fill in the new y-coordinate
 59864 DEC L         ; #REGl=#b1
 59865 LD (HL),E     ; Fill in the new x-coordinate
 59866 DEC L         ; #REGl=#b0
 59867 LD (HL),A     ; Fill in the new animatory state
; This entry point is used by the routine at #R59848.
*59868 LD BC,514     ; #REGb=2, #REGc=2
 59871 LD A,(HL)     ; #REGa=character's animatory state
 59872 AND 127       ; Clear the 'direction' bit (bit 7)
 59874 ADD A,136     ; Is the animatory state >= #AS120?
 59876 JR C,59889    ; Jump if so
 59878 LD BC,1283    ; #REGb=5, #REGc=3
 59881 INC A         ; {Is the animatory state equal to 7 mod 8?
 59882 AND 7         ; }
 59884 JR NZ,59889   ; Jump if not
 59886 LD BC,773     ; #REGb=3, #REGc=5
; Now #REGb holds the height of the sprite in tiles, and #REGc holds the width.
*59889 LD A,(32767)  ; #REGa=Y, the y-coordinate of the topmost row of the play
                     ; area on screen (2-20)
 59892 SUB B         ; #REGa=Y-#REGb
 59893 JR C,59897    ; Jump if #REGb>Y
 59895 CP D          ; Is the character entirely above the portion of the play
                     ; area currently on screen?
 59896 RET NC        ; Return if so
*59897 ADD A,B       ; #REGa=Y
 59898 ADD A,19      ; #REGa=y-coordinate of the bottom row of the play area on
                     ; screen (21-39)
 59900 SUB D         ; Is the character entirely below the portion of the play
                     ; area currently on screen?
 59901 RET C         ; Return if so
 59902 CPL           ; {#REGa=4*(#REGd-Y+4)
 59903 ADD A,24      ;
 59905 ADD A,A       ;
 59906 ADD A,A       ; }
 59907 LD D,A        ; Copy this value (0, 4, 8, 12,...92) to #REGd
 59908 LD A,(32766)  ; #REGa=X, the x-coordinate of the leftmost column of the
                     ; play area on screen
 59911 SUB C         ; #REGa=X-#REGc
 59912 JR C,59916    ; Jump if #REGc>X
 59914 CP E          ; Is the character entirely off-screen to the left?
 59915 RET NC        ; Return if so
*59916 ADD A,C       ; #REGa=X
 59917 ADD A,31      ; #REGa=x-coordinate of the rightmost column of the play
                     ; area on screen
 59919 SUB E         ; Is the character entirely off-screen to the right?
 59920 RET C         ; Return if so
; If we get here, then the character's sprite (or at least a portion of it) is
; on-screen.
 59921 CPL           ; {#REGa=#REGe-X: the character's screen x-coordinate (-4
 59922 ADD A,32      ; to 31)}
 59924 PUSH AF       ; Save this temporarily
 59925 LD A,(HL)     ; #REGa=character's animatory state
 59926 AND 7         ; Set the zero flag if the animatory state is 0 mod 8
 59928 LD A,(HL)     ; #REGa=character's animatory state
 59929 JR NZ,59933   ; Jump unless the animatory state is 0 mod 8
 59931 ADD A,2       ; Add 2 if the animatory state is congruent to 0 mod 8
*59933 PUSH BC       ; Push the sprite dimensions onto the stack
 59934 EXX           ;
 59935 POP BC        ; Retrieve the sprite dimensions in #REGbc'
 59936 LD H,215      ; Page #b215 holds sprite tile references for the top-left
                     ; tile (tile 0) in the left-facing sprites
 59938 LD D,B        ; #REGd'=sprite height (2, 3 or 5)
 59939 RLCA          ; {Set bit 7 of #REGa, and set the carry flag if the
 59940 SCF           ; character is facing right
 59941 RRA           ; }
 59942 LD L,A        ; #REGl'=character's animatory state (with bit 7 set)
 59943 JR NC,59956   ; Jump if the character is facing left
 59945 XOR A         ; {#REGd'=-#REGb' (negative sprite height)
 59946 SUB B         ;
 59947 LD D,A        ; }
 59948 LD E,C        ; {#REGe'=#REGc'-1 (sprite width minus 1)
 59949 DEC E         ; }
 59950 LD A,H        ; #REGa=#b215 (page containing references for sprite tile
                     ; 0)
*59951 ADD A,B       ; {#REGa=#b215+#REGb'*(#REGc'-1)
 59952 DEC E         ;
 59953 JR NZ,59951   ; }
 59955 LD H,A        ; Copy this value to #REGh'
; Now #REGhl' points at the sprite tile reference for the top-left tile in the
; character's sprite.
*59956 POP AF        ; Restore the character's screen x-coordinate to #REGa
 59957 LD E,A        ; Copy it to #REGe'
 59958 JR C,59967    ; Jump if #REGe'>=0 (meaning that the leftmost tiles in
                     ; the character's sprite are on-screen)
 59960 LD A,H        ; {#REGa=#REGh'-#REGd'*#REGe' (sprite tile reference page
*59961 ADD A,D       ; number); #REGc'=#REGc'+#REGe'
 59962 DEC C         ;
 59963 INC E         ;
 59964 JR NZ,59961   ; }
 59966 LD H,A        ; Copy the sprite tile reference page number to #REGh'
; Now #REGhl' points at the sprite tile reference for the tile in the top row
; and the leftmost column of the character's sprite that is on-screen. #REGc'
; holds the number of tile columns of the character's sprite that are to the
; right of the left edge of the screen.
*59967 LD A,E        ; #REGa=leftmost column of the screen occupied by the
                     ; sprite (0-31)
 59968 EXX           ;
 59969 LD E,A        ; #REGe=leftmost column of the screen occupied by the
                     ; sprite
 59970 AND 7         ; {Point #REGbc at byte #b21 of page #b160+(#REGe%8)
@ssub=ADD A,40981/256
 59972 ADD A,160     ;
 59974 LD B,A        ;
@ssub=LD C,40981%256
 59975 LD C,21       ; }
 59977 LD A,(BC)     ; Pick up the contents in #REGa
 59978 LD C,A        ; Copy them to #REGc
; Now #REGc holds #b1, #b2, #b4, #b8, #b16, #b32, #b64 or #b128. The bit set in
; #REGc corresponds to the bit that needs to be set in the relevant byte of the
; screen refresh buffer (SRB).
 59979 LD A,E        ; #REGa=leftmost column of the screen occupied by the
                     ; sprite (0-31)
 59980 RRCA          ; {Set #REGa to the LSB of the first byte of the SRB that
 59981 RRCA          ; needs to be modified: #REGd+INT(#REGe/8)
 59982 RRCA          ;
 59983 AND 3         ;
 59985 ADD A,D       ; }
 59986 LD B,A        ; Copy this LSB to #REGb
@ssub=LD D,32512/256
 59987 LD D,127      ; The SRB is in page #b127
 59989 EXX           ;
; Here we enter a loop to set the appropriate bits in the SRB. At this point
; #REGb' holds the number of tile rows in the sprite (2, 3, or 5) and #REGc'
; holds the number of tile columns of the sprite that are to the right of the
; left edge of the screen.
*59990 PUSH BC       ; Save the tile row and column counters temporarily
 59991 LD E,0        ; Start at sprite tile row 0 (top row)
*59993 LD A,(HL)     ; Pick up the sprite tile reference in #REGa
 59994 AND A         ; Is this the 'null' tile (blank square)?
 59995 JR Z,60007    ; Jump if so (no need to set a bit in the SRB)
 59997 LD A,E        ; #REGa=sprite tile row number (0-4)
 59998 EXX           ;
 59999 ADD A,A       ; {Multiply by 4 (the number of bytes of the SRB that
 60000 ADD A,A       ; correspond to one row of the screen)}
 60001 ADD A,B       ; {Point #REGde at the relevant byte of the SRB
 60002 LD E,A        ; }
 60003 LD A,(DE)     ; Pick up the SRB byte in #REGa
 60004 OR C          ; Make sure the appropriate bit is set
 60005 LD (DE),A     ; Restore the SRB byte with the appropriate bit set
 60006 EXX           ;
*60007 INC H         ; Point #REGhl' at the reference for the next tile in the
                     ; sprite (one row down)
 60008 INC E         ; Next row down in this column of the sprite
 60009 DJNZ 59993    ; Jump back until we've set all the SRB bits for this tile
                     ; column of the sprite
 60011 LD A,H        ; {Point #REGhl' at the reference for the tile in the top
 60012 ADD A,D       ; row of the next column of the sprite
 60013 POP BC        ;
 60014 SUB B         ;
 60015 LD H,A        ; }
 60016 EXX           ;
 60017 RRC C         ; Move the SRB marker bit in #REGc one place to the right
                     ; (possibly wrapping round to bit 7)
 60019 JR NC,60026   ; Jump if there are still bits to be set in the current
                     ; SRB byte
 60021 INC B         ; Otherwise move along to the next byte in the SRB
 60022 LD A,B        ; #REGa=LSB of the next SRB byte
 60023 AND 3         ; Does the next SRB byte correspond to a segment in the
                     ; leftmost 8 columns of the screen (i.e. have we wrapped
                     ; around from right to left)?
 60025 RET Z         ; Return if so (any remaining sprite tile columns are
                     ; off-screen to the right)
*60026 EXX           ;
 60027 DEC C         ; Next sprite tile column
 60028 JR NZ,59990   ; Jump back until the relevant SRB bits for every sprite
                     ; tile column have been set
 60030 EXX           ;
 60031 RET           ;

; Update the display
;
; Used by the routines at #R30822, #R30989, #R60539, #R61483, #R61630 and
; #R64338. Goes through the #R32512(screen refresh buffer) (SRB) and for every
; set bit found, updates the corresponding character square on-screen.
@label=UPDATESCR
c60032 LD B,80       ; 20 screen rows, 4 bytes (32 bits) per row
@ssub=LD HL,32512+16
 60034 LD HL,32528   ; Point #REGhl at the start of the portion of the
                     ; #R32512(screen refresh buffer) that corresponds to the
                     ; visible part of the play area
*60037 LD A,(HL)     ; Pick up a byte from the screen refresh buffer
 60038 AND A         ; Does anything need updating in this particular 8-tile
                     ; segment?
 60039 JR Z,60078    ; Jump if not
 60041 PUSH BC       ; Save the SRB byte counter
 60042 LD A,L        ; {For this particular byte of the SRB, compute the
 60043 SUB 16        ; corresponding screen row number (0-19) in #REGd
 60045 AND 252       ;
 60047 RRCA          ;
 60048 RRCA          ;
 60049 LD D,A        ; }
 60050 LD A,L        ; {Also for this particular SRB byte, compute the column
 60051 AND 3         ; of the screen (0, 8, 16 or 24) corresponding to bit 7
 60053 ADD A,A       ;
 60054 ADD A,A       ;
 60055 ADD A,A       ; }
 60056 DEC A         ; {Initialise #REGe, which will hold the screen column
 60057 LD E,A        ; number of the character square to be checked}
*60058 INC E         ; Set #REGde to the screen coordinates of the next
                     ; character square to be checked
 60059 SLA (HL)      ; Does this character square need updating?
 60061 JR C,60067    ; Jump if so
 60063 JR NZ,60058   ; Jump back if there are still non-zero bits left in this
                     ; SRB byte
 60065 JR 60077      ; Jump forward to consider the next SRB byte
; We found a set bit in the current SRB byte. Print the corresponding character
; square.
*60067 PUSH HL       ; Save the SRB pointer
 60068 PUSH DE       ; Save the screen (row,column) pointer
 60069 EX DE,HL      ; Switch the screen (row,column) pointer to #REGhl
 60070 CALL 59148    ; Print the character square at this row and column
 60073 POP DE        ; Restore the screen (row,column) pointer to #REGde
 60074 POP HL        ; Restore the SRB pointer to #REGhl
 60075 JR 60058      ; Examine the next bit of the current SRB byte
; There are no set bits remaining in the current SRB byte. Move to the next SRB
; byte.
*60077 POP BC        ; Restore the SRB byte counter to #REGb
*60078 INC L         ; Point #REGhl at the next SRB byte
 60079 DJNZ 60037    ; Jump back until all 80 SRB bytes have been dealt with
 60081 RET           ;

; Get the keypress offset of the last key pressed (1)
;
; Used by the routine at #R31126. Returns with the zero flag set if no game
; keys were pressed. Otherwise returns with #REGa holding the value from the
; #R49968(keypress offset table) corresponding to the last key pressed or
; joystick movement made. This offset (an odd number from #b1 to #b39) points
; at an entry in the table of keypress handling routines at #R60672.
@label=KEYOFFSET1
c60082 CALL 60121    ; Collect the ASCII code of the last key pressed in #REGa
 60085 JR NZ,60146   ; Jump if a key was pressed
 60087 LD A,(32762)  ; Collect the input device indicator from #R32762
 60090 AND A         ; Are we using the Kempston joystick?
 60091 RET Z         ; Return with the zero flag set if not
; We are using the Kempston joystick.
 60092 IN A,(31)     ; Take a reading from the joystick port
 60094 AND 31        ; Any input from the joystick?
 60096 RET Z         ; Return if not
 60097 LD L,80       ; #b80='P' (RIGHT)
 60099 RRCA          ; Was the joystick moved right?
 60100 JR C,60147    ; Jump if so
 60102 DEC L         ; #REGl=#b79='O' (LEFT)
 60103 RRCA          ; Was the joystick moved left?
 60104 JR C,60147    ; Jump if so
 60106 LD L,65       ; #b65='A' (DOWN)
 60108 RRCA          ; Was the joystick moved down?
 60109 JR C,60147    ; Jump if so
 60111 LD L,81       ; #b81='Q' (UP)
 60113 RRCA          ; Was the joystick moved up?
 60114 JR C,60147    ; Jump if so
 60116 LD L,107      ; #b107='k' (knock on or open a door)
 60118 JR 60147      ; Collect and return the keypress offset that corresponds
                     ; to the joystick movement

; Unused
s60120 DEFB 0

; Get the ASCII code of the last key pressed
;
; Used by the routines at #R24951, #R31126, #R60082, #R61630 and #R61923.
; Returns with the zero flag set if no key with an ASCII code in the range
; #b48-#b127 was pressed. Otherwise returns with #REGa holding the ASCII code
; of the last key pressed.
@label=READKEY
@nowarn
c60121 LD HL,23611   ; Point #REGhl at the system variable FLAGS
 60124 BIT 5,(HL)    ; Check the keypress flag
 60126 RES 5,(HL)    ; Reset the flag ready for the next keypress
 60128 RET Z         ; Return if no key was pressed
@nowarn
 60129 LD A,(23560)  ; Collect the ASCII code of the key last pressed
 60132 CP 48         ; Is the ASCII code < #b48 ('0')?
 60134 JR C,60139    ; Jump if so
 60136 CP 128        ; Is the ASCII code < #b128?
 60138 RET C         ; Return if so
*60139 XOR A         ; Set the zero flag to indicate that no (relevant) key was
                     ; pressed
 60140 RET           ;

; Unused
u60141 DEFB 0
 60142 CALL 60085
 60145 RET Z

; Get the keypress offset of the last key pressed (2)
;
; Continues from the routine at #R60082. Returns with #REGa holding the entry
; from the #R49968(keypress offset table) corresponding to the key just
; pressed, and the zero flag set if it wasn't a game key.
;
; A ASCII code of the last keypress (#b48-#b127)
@label=KEYOFFSET2
c60146 LD L,A        ; Transfer the ASCII code to #REGl
; This entry point is used by the routine at #R60082 with #REGl holding the
; ASCII code corresponding to the last joystick movement.
@ssub=LD H,49968/256
*60147 LD H,195      ; Point #REGhl at the entry in the #R49968(keypress offset
                     ; table) corresponding to the last keypress or joystick
                     ; movement
 60149 LD A,(HL)     ; Pick up the entry in #REGa
 60150 AND A         ; Set the zero flag if it wasn't a game key
 60151 RET           ;

; Check whether a character is on the sidewalk or road
;
; Used by the routines at #R25789 and #R60179. Returns with the carry flag
; reset if the character has both feet on the ground (the sidewalk or road),
; and with the carry flag set otherwise.
;
; H Character number (#b215-#b230)
@label=RDORSWALK
c60152 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 60154 LD E,(HL)     ; #REGe=character's x-coordinate
 60155 INC L         ; #REGl=#b2
 60156 LD D,(HL)     ; #REGd=character's y-coordinate
 60157 LD L,4        ;
; This entry point is used by the routines at #R25789 and #R60726.
*60159 LD A,D        ; #REGa=y-coordinate for comparison
 60160 CP 34         ; 34 is the y-coordinate of a character on the sidewalk
 60162 RET C         ; Return with the carry flag set if the character is above
                     ; the level of the sidewalk (#REGa<=33)
 60163 RET NZ        ; Return with the carry flag reset if the character is on
                     ; the road (#REGa=35)
; This entry point is used by the routine at #R25420.
*60164 LD A,E        ; #REGa=x-coordinate for comparison
; This entry point is used by the routines at #R25944, #R29361 and #R64338.
*60165 CP 7          ; Is #REGa<=6 (where there is sidewalk)?
 60167 CCF           ; {Return with the carry flag reset if so
 60168 RET NC        ; }
 60169 CP 15         ; Is 7<=#REGa<=14 (where there is no sidewalk)?
 60171 RET C         ; Return with the carry flag set if so
 60172 CP 164        ; Is 15<=#REGa<=163 (where there is sidewalk)?
 60174 CCF           ; {Return with the carry flag reset if so
 60175 RET NC        ; }
 60176 CP 199        ; Set the carry flag if 164<=#REGa<=198 (where there is no
                     ; sidewalk), or reset it if #REGa>=199 (where there is
                     ; sidewalk)
 60178 RET           ;

; Obtain descriptors for a character's current location
;
; Used by the routines at #R28942, #R60347, #R60812, #R62216 and #R64005. Looks
; for a location descriptor that corresponds to the character's current
; location and returns with #REGa and #REGc (and possibly also #REGb) holding
; values derived from that descriptor.
; .
; A location descriptor is a single byte (Q) if the location is on the sidewalk
; or road, or a sequence of two bytes ((Q,Q'), where bit 7 of Q is reset), or a
; sequence of three bytes ((Q,Q',Q''), where bit 7 of Q is set). For the
; location it corresponds to, a descriptor indicates the directions in which a
; character may move, and the directions that would require a change of
; z-coordinate; it may also indicate whether there is a door that can close at
; the location, and whether any movement from the location requires special
; handling by a separate routine (e.g. on the edge of a roof, or just behind
; the jail cell door).
; .
; The single-byte location descriptors (Q) that correspond to locations on the
; sidewalk or road can be found in the table at #R50176. The blocks of two- and
; three-byte location descriptors for locations not on the sidewalk or road are
; organised by x-coordinate; the LSBs and MSBs of their addresses can be found
; in the tables at #R50432 and #R50688.
; .
; The first byte, Q, of a multi-byte location descriptor indicates the
; y-coordinate (y) and z-coordinate(s) (z) of the location to which the
; descriptor corresponds. In a two-byte descriptor (bit 7 of Q reset), bits 1-5
; of Q hold y-4, and z is 2 if bit 6 is set, or 1 otherwise. In a three-byte
; descriptor (bit 7 of Q set), bits 0-4 of Q hold y-4, and z is determined by
; bits 5 and 6: if bit 6 is set, z=1 or 2 (meaning that the location is next to
; the entrance to a building); otherwise, z=2 if bit 5 is set or 1 if it's
; reset.
; .
; This routine returns with #REGa holding the location type indicator (1-5),
; and #REGc and #REGb holding the values derived from the relevant location
; descriptor:
; .
; #TABLE(default,centre,centre,centre)
; { =h #REGa | =h #REGc | =h #REGb | =h Meaning }
; { 1        | Q        | -        | The sidewalk or the road }
; { 3        | Q'       | Q''      | At the (open) entrance to a building }
; { 4        | Q'       | Q''      | Behind or in front of a closed door }
; { 5        | Q'       | Q''      | Location requires special handling }
; { 2        | Q'       | -        | Regular location (none of the above) }
; TABLE#
; .
; The value in #REGc (Q or Q') is the direction descriptor, which indicates the
; directions that are available, and (when #REGa=1 or 5) the directions that
; require special handling:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit | =h Meaning if set }
; { 7      | Access to the left is granted }
; { 6      | Access to the right is granted }
; { 5      | There is a step going up to the left }
; { 4      | There is a step going up to the right }
; { 3      | There is a step going down to the left }
; { 2      | There is a step going down to the right }
; { 1      | Character's z-coordinate will be 2 after going up to the left
;            (when #REGa=1), or moving left requires special handling (when
;            #REGa=5; see #R60485) }
; { 0      | Character's z-coordinate will be 2 after going up to the right
;            (when #REGa=1), or moving right requires special handling (when
;            #REGa=5; see #R60485) }
; TABLE#
; .
; When #REGa=3, #REGb returns holding Q'', the third byte of the location
; descriptor. Bit 0 of this byte is set if there is a door that can close at
; the given location; bits 2-7 indicate whether the adjacent location in the
; corresponding direction is inside (set) or outside (reset) the building, and
; therefore may require a transition of the character's z-coordinate between 1
; and 2 (see #R30396):
; .
; #TABLE(default,centre,:w)
; { =h Bit | =h Direction }
; { 7      | Left }
; { 6      | Right }
; { 5      | Up/left }
; { 4      | Up/right }
; { 3      | Down/left }
; { 2      | Down/right }
; TABLE#
; .
; When #REGa=5, #REGb returns holding Q'', the third byte of the location
; descriptor; this byte determines the address of the routine to handle
; movement to the left or right at a special location (see #R60485).
;
; H Character number (#b215-#b230)
@label=LOCDESCS
c60179 CALL 60152    ; Is the character on the sidewalk or the road?
 60182 JR C,60192    ; Jump if not
 60184 LD (HL),L     ; Set the character's z-coordinate to 4 (on the sidewalk
                     ; or road)
@ssub=LD D,50176/256
 60185 LD D,196      ; {Collect a location descriptor from the table at #R50176
 60187 LD A,(DE)     ; }
 60188 LD C,A        ; Copy the location descriptor to #REGc
 60189 LD A,1        ; #REGa=1 (character is on the sidewalk or the road)
 60191 RET           ;
; The character is not on the sidewalk or the road.
*60192 LD A,(HL)     ; #REGa=character's z-coordinate
 60193 CP 4          ; Is the character outside?
 60195 JR NZ,60199   ; Jump if not
 60197 LD (HL),2     ; Set the character's z-coordinate to 2
*60199 LD A,D        ; #REGa=y, the character's y-coordinate (6-35)
 60200 SUB 4         ; {#REGb=4*(y-4)
 60202 ADD A,A       ;
 60203 ADD A,A       ;
 60204 LD B,A        ; }
 60205 BIT 0,(HL)    ; Is the character indoors?
 60207 JR NZ,60211   ; Jump if so
 60209 SET 7,B       ; #REGb=128+4*(y-4) if the character's z-coordinate is 2
; Now #REGb holds a value indicating the character's y-coordinate (bits 2-6:
; y-4) and z-coordinate (bit 7: z-1).
*60211 EX DE,HL      ; #REGl=character's x-coordinate
@ssub=LD H,50432/256
 60212 LD H,197      ; {Collect an LSB from the table at #R50432
 60214 LD A,(HL)     ; }
 60215 SUB 2         ; Subtract 2 from this LSB
 60217 INC H         ; Point #REGhl at an MSB in the table at #R50688
 60218 LD H,(HL)     ; Pick up the MSB in #REGh
 60219 LD E,L        ; #REGe=character's x-coordinate
 60220 LD L,A        ; Now #REGhl holds 2 less than the address formed by the
                     ; LSB and MSB just collected from the tables at #R50432
                     ; and #R50688
; The loop that iterates over the location descriptors for the character's
; x-coordinate begins here.
*60221 INC L         ; Move #REGhl along the location descriptor table
; This entry point is used by the routine at #R60720.
*60222 INC L         ; Point #REGhl at the first byte of a location descriptor
 60223 JR Z,60229    ; Jump if we reached a page boundary
 60225 LD A,(HL)     ; Pick up the first byte (Q) of the location descriptor
 60226 INC A         ; Have we reached the end of the location descriptors for
                     ; the character's x-coordinate?
 60227 JR NZ,60234   ; Jump if not
; The character is not at any of the locations to which the location
; descriptors for his x-coordinate correspond.
*60229 LD C,192      ; Bits 7 and 6 set: the character can move left or right
                     ; only
 60231 LD A,2        ; #REGa=2: regular location
 60233 RET           ;
; Here we examine a location descriptor and check whether the character is at
; the location to which it corresponds.
*60234 DEC A         ; #REGa=Q (first byte of the location descriptor)
 60235 INC L         ; Point #REGhl at the second byte of the location
                     ; descriptor
 60236 ADD A,A       ; Is bit 7 of Q set (meaning this location is next to the
                     ; entrance to a building or requires special handling)?
 60237 JR C,60246    ; Jump if so
 60239 CP B          ; Is the character at the location to which the location
                     ; descriptor corresponds?
 60240 JR NZ,60222   ; Move along to the next location descriptor if not
 60242 LD C,(HL)     ; #REGc=Q' (second byte of the location descriptor)
 60243 LD A,2        ; #REGa=2: regular location
 60245 RET           ;
; The location descriptor being examined has bit 7 of its first byte set, which
; means that it corresponds to a location that is next to the entrance to a
; building, or a location that requires special handling.
*60246 ADD A,A       ; Is bit 6 of Q set (meaning this location is next to the
                     ; entrance to a building)?
 60247 JR C,60258    ; Jump if so
 60249 CP B          ; Is the character at the location to which the location
                     ; descriptor corresponds?
 60250 JR NZ,60221   ; Move along to the next location descriptor if not
 60252 LD A,5        ; #REGa=5: this location requires special handling
*60254 LD C,(HL)     ; {Collect the second and third bytes of the location
 60255 INC L         ; descriptor (Q' and Q'') in #REGc and #REGb
 60256 LD B,(HL)     ; }
 60257 RET           ;
; The location descriptor being examined has bits 7 and 6 of its first byte
; set, which means that it corresponds to a location that is next to the
; entrance to a building (where a character's z-coordinate may be 1 or 2).
*60258 LD C,B        ; {#REGc=4*(y-4) (where y is the character's y-coordinate)
 60259 RES 7,C       ; }
 60261 CP C          ; Is the character at the location to which the location
                     ; descriptor corresponds?
 60262 JR NZ,60221   ; Move along to the next location descriptor if not
; The character is standing next to the entrance to a building. Check whether a
; closed door is in his way.
 60264 INC L         ; Point #REGhl at the third byte of the location
                     ; descriptor
 60265 BIT 0,(HL)    ; Is there a door at this location?
 60267 JR Z,60286    ; Jump if not
 60269 LD A,E        ; #REGa=x, the character's x-coordinate
 60270 INC A         ; {#REGa=INT((x+1)/8)
 60271 RRCA          ;
 60272 RRCA          ;
 60273 RRCA          ;
 60274 AND 31        ; }
 60276 PUSH HL       ; Save the location descriptor pointer briefly
 60277 LD L,A        ; {Point #REGhl at the entry in the table of Z values at
 60278 LD H,189      ; #R48384 that corresponds to the door}
 60280 BIT 2,(HL)    ; Set the zero flag if the door is open
 60282 POP HL        ; Restore the location descriptor pointer to #REGhl
 60283 JP NZ,60720   ; Jump if the door is closed to find the location
                     ; descriptor that corresponds to the character's
                     ; z-coordinate (1=behind the door, 2=in front of it)
*60286 LD A,3        ; #REGa=3: the character is standing next to the open
                     ; entrance to a building
 60288 DEC L         ; Point #REGhl at the second byte of the location
                     ; descriptor
 60289 JR 60254      ; Jump back to collect the second and third bytes (Q' and
                     ; Q'') in #REGc and #REGb

; Unused
s60291 DEFS 2

; Make a character stand up if he's lying down
;
; Used by the routines at #R60315, #R60334 and #R60347. Makes a character stand
; up if he's lying down, and returns with the carry flag set if the character
; was lying down.
;
; H Character number (#b215-#b230)
@label=STANDUP
c60293 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 60295 LD A,(HL)     ; #REGa=character's animatory state
 60296 INC A         ; {Set the zero flag if the animatory state is congruent
 60297 AND 7         ; to 7 mod 8 (the sprite has 3 rows and 5 columns)}
 60299 RET NZ        ; Return (with the carry flag reset) if the character's
                     ; sprite has 5 rows and 3 columns
; This entry point is used by the routines at #R64005 and #R64338.
*60300 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 60303 BIT 7,A       ; Is the character facing left?
 60305 JR Z,60309    ; Jump if so
 60307 INC E         ; {Add 2 to the character's x-coordinate
 60308 INC E         ; }
*60309 DEC D         ; {Subtract 2 from the character's y-coordinate
 60310 DEC D         ; }
 60311 AND 248       ; #REGa=character's base animatory state (standing
                     ; upright)
 60313 JR 60363      ; Update the character's animatory state and location and
                     ; update the SRB, and return with the carry flag set

; Make a character move up
;
; Used by the routines at #R60626, #R62892 and #R62976. Attempts to move a
; character in the following ways, in the given order, depending on the
; directions that are available at the character's current location:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Move    | =h Condition }
; { Up         | There is a step going up in the direction the character is
;                facing }
; { Turn round | There is a step going up in the other direction }
; { Forwards   | There is no step going up }
; { Down       | The character can only step down from his current location }
; TABLE#
;
; H Character number (#b215-#b230)
@label=MOVEUP
c60315 LD DE,41496   ; Point #REGde at the direction indicator table at #R41496
 60318 JR 60323      ;

; Make a character move down
;
; Used by the routines at #R60631, #R62892 and #R62976 to attempt to move a
; character in the following ways, in the given order, depending on the
; directions that are available at the character's current location:
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Move    | =h Condition }
; { Down       | There is a step going down in the direction the character is
;                facing }
; { Turn round | There is a step going down in the other direction }
; { Forwards   | There is no step going down }
; { Up         | The character can only step up from his current location }
; TABLE#
;
; H Character number (#b215-#b230)
@label=MOVEDOWN
c60320 LD DE,42008   ; Point #REGde at the direction indicator table at #R42008
; This entry point is used by the routine at #R60315 with #REGde=#R41496.
*60323 CALL 60293    ; Make the character stand up if he's lying down
 60326 RET C         ; Return if the character was lying down
 60327 BIT 7,(HL)    ; Is the character facing left?
 60329 JR Z,60368    ; Jump if so
 60331 INC D         ; #REGde=#R41752 or #R42264
 60332 JR 60368      ; Move the character and update the SRB accordingly

; Make a character move right
;
; Used by the routines at #R60636, #R62926, #R62976 and #R63209. Turns the
; character round if he's facing left; otherwise moves him right, or up and to
; the right, or down and to the right (in that order of preference).
;
; H Character number (#b215-#b230)
@label=MOVERIGHT
c60334 CALL 60293    ; Make the character stand up if he's lying down
 60337 RET C         ; Return if the character was lying down
 60338 BIT 7,(HL)    ; Is the character facing left?
 60340 JR Z,60358    ; Make him turn round if so
 60342 LD DE,41241   ; Point #REGde at the direction indicator table at #R41241
 60345 JR 60368      ; Move the character and update the SRB accordingly

; Make a character move left
;
; Used by the routines at #R60641, #R62926, #R62976 and #R63209. Turns the
; character round if he's facing right; otherwise moves him left, or up and to
; the left, or down and to the left (in that order of preference, and if
; possible). Returns with the carry flag set unless the character could not
; move.
;
; H Character number (#b215-#b230)
@label=MOVELEFT
c60347 CALL 60293    ; Make the character stand up if he's lying down
 60350 RET C         ; Return if the character was lying down
 60351 BIT 7,(HL)    ; Set the zero flag if the character is facing left
 60353 LD DE,40985   ; Point #REGde at the direction indicator table at #R40985
 60356 JR Z,60368    ; Jump if the character is facing left
; The character is facing right, so we make him turn round first. This entry
; point is also used by the routine at #R60334 to make a character who is
; facing left turn round.
*60358 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 60361 XOR 128       ; Flip bit 7 of the character's animatory state, thus
                     ; turning him round
; This entry point is used by the routine at #R60293.
*60363 CALL 59861    ; Update the character's animatory state and location and
                     ; update the SRB
 60366 SCF           ; Set the carry flag to indicate that the character was
                     ; moved
 60367 RET           ;
; This entry point is used by the routine at #R60315 (with #REGde=#R41496,
; #R41752, #R42008 or #R42264) to move a character up or down, and by the
; routine at #R60334 (with #REGde=#R41241) to make a character move right.
*60368 PUSH HL       ; Save the character buffer pointer briefly
 60369 PUSH DE       ; Save the pointer to the direction indicator table
 60370 CALL 60179    ; Obtain descriptors for the character's current location
 60373 POP HL        ; Point #REGhl at the direction indicator table (#R40985,
                     ; #R41241, #R41496, #R41752, #R42008 or #R42264)
 60374 LD E,A        ; #REGe=location type indicator (1-5; see #R60179)
*60375 LD A,C        ; #REGa=direction descriptor (see #R60179)
 60376 AND (HL)      ; Does this direction indicator correspond to a direction
                     ; that is available at the character's current location?
 60377 JR NZ,60386   ; Jump if so
 60379 INC L         ; Point #REGhl at the next byte in the direction indicator
                     ; table
 60380 BIT 2,L       ; Have we reached the end of the direction indicator
                     ; table?
 60382 JR Z,60375    ; Jump back if not
 60384 POP HL        ; Restore the character buffer pointer to #REGhl
 60385 RET           ; Return with the carry flag reset (the character did not
                     ; move)
; Now #REGa=#b128, #b64, #b32, #b16, #b8 or #b4; the bit set in #REGa indicates
; the direction in which the character has chosen to move next:
; .
; #TABLE(default,centre)
; { =h Bit | =h Direction }
; { 7      | Left }
; { 6      | Right }
; { 5      | Up and to the left }
; { 4      | Up and to the right }
; { 3      | Down and to the left }
; { 2      | Down and to the right }
; TABLE#
*60386 LD D,A        ; #REGd=direction indicator (#b128, #b64, #b32, #b16, #b8
                     ; or #b4)
 60387 POP HL        ; Restore the character buffer pointer to #REGhl
 60388 BIT 7,(HL)    ; Set the zero flag if the character is facing left
 60390 LD A,84       ; #REGa=#b84: bits 6 (right), 4 (up/right) and 2
                     ; (down/right) set
 60392 JR NZ,60395   ; Jump if the character is facing right
 60394 ADD A,A       ; #REGa=#b168: bits 7 (left), 5 (up/left) and 3
                     ; (down/left) set
*60395 AND D         ; Is the character facing the direction in which he wants
                     ; to move?
 60396 JR Z,60358    ; Make him turn round if not
; The character is facing the direction in which he wants to move. Now we
; examine the character's current location to determine whether the desired
; move requires any special handling.
 60398 LD L,4        ; Point #REGhl at byte #b4 of the character's buffer
 60400 LD A,E        ; #REGa=location type indicator for the character's
                     ; current location (1-5; see #R60179)
 60401 DEC A         ; Is the character on the sidewalk or the road?
 60402 JR NZ,60420   ; Jump if not
; The character is on the sidewalk or the road. In this case we need to check
; whether the character is going up a step, and change his z-coordinate
; accordingly.
 60404 LD A,D        ; #REGa=direction indicator (#b128, #b64, #b32, #b16, #b8
                     ; or #b4)
 60405 AND 48        ; Check bits 4 and 5: is the character going to move up a
                     ; step?
 60407 JR Z,60423    ; Jump if not
 60409 RRCA          ; {Slide bits 5 and 4 of #REGa into bits 1 and 0
 60410 RRCA          ;
 60411 RRCA          ;
 60412 RRCA          ; }
 60413 AND C         ; Will going up the step change the character's
                     ; z-coordinate to 2?
 60414 JR Z,60423    ; Jump if not
 60416 LD (HL),2     ; Set the character's z-coordinate to 2
 60418 JR 60423      ;
; The character is not on the sidewalk or the road.
*60420 RRCA          ; Is the location type indicator 3 (at the open entrance
                     ; to a building) or 5 (a location that requires special
                     ; handling)?
 60421 JR NC,60473   ; Jump if so
; Finally we can move the character midstride in the desired direction and
; update the SRB accordingly. This entry point is used by the routines at
; #R31580 and #R64512. The address of this entry point is also found at
; #R40982; it is used to handle a character who is moving from one of a set of
; certain special locations, but it does not actually do anything special.
@refs=60347
*60423 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 60425 LD C,5        ; {Point #REGbc at byte #b5 of the character's buffer
 60427 LD B,H        ; }
 60428 LD A,(HL)     ; #REGa=character's animatory state
 60429 XOR 2         ; #REGa=character's post-midstride animatory state
 60431 LD (BC),A     ; Save this in byte #b5 of the character's buffer
 60432 INC L         ; Point #REGhl at byte #b1 of the character's buffer
 60433 INC C         ; Point #REGbc at byte #b6 of the character's buffer
 60434 RLCA          ; {#REGa=-1 if the character is facing left, 1 if he's
 60435 SBC A,A       ; facing right
 60436 ADD A,A       ;
 60437 CPL           ; }
 60438 ADD A,(HL)    ; Add the character's current x-coordinate to obtain his
                     ; post-midstride x-coordinate
 60439 LD (BC),A     ; Save this in byte #b6 of the character's buffer
 60440 INC L         ; Point #REGhl at byte #b2 of the character's buffer
 60441 INC C         ; Point #REGbc at byte #b7 of the character's buffer
 60442 LD A,D        ; #REGa=direction indicator (#b128, #b64, #b32, #b16, #b8
                     ; or #b4)
 60443 AND 60        ; Is the character going up or down a step?
 60445 JR Z,60454    ; Jump if not
 60447 AND 48        ; Is the character going up a step?
 60449 JR Z,60453    ; Jump if not
 60451 LD A,254      ; #REGa=-2
*60453 INC A         ; #REGa=-1 if the character is going up a step, or 1 if
                     ; he's going down a step
*60454 ADD A,(HL)    ; Add the character's y-coordinate; now the carry flag is
                     ; set if the character will be going up a step
 60455 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 60457 LD (BC),A     ; Save the character's post-midstride y-coordinate in byte
                     ; #b7 of his buffer
 60458 LD A,(HL)     ; #REGa=character's animatory state
 60459 PUSH AF       ; Save the carry flag briefly
 60460 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 60463 POP AF        ; Restore the carry flag
 60464 JR NC,60467   ; Jump unless the character is going up a step
 60466 DEC D         ; #REGd=character's new y-coordinate
*60467 INC A         ; #REGa=character's new animatory state
 60468 CALL 59861    ; Update the character's animatory state and location and
                     ; update the SRB
 60471 SCF           ; Set the carry flag to indicate that the character was
                     ; moved
 60472 RET           ;
; The location type indicator is 3 (at the open entrance to a building) or 5 (a
; location that requires special handling).
*60473 RRCA          ; Is the location type indicator 5 (a location that
                     ; requires special handling)?
 60474 JR NC,60485   ; Jump if so
; The character is standing at the open entrance to a building.
 60476 DEC (HL)      ; Set the zero flag if the character is indoors
 60477 LD (HL),1     ; Set the character's z-coordinate to 1 (indoors)
 60479 LD A,D        ; #REGa=direction indicator (#b128, #b64, #b32, #b16, #b8
                     ; or #b4)
 60480 CALL 30396    ; Adjust the character's z-coordinate according to whether
                     ; he is going to enter or exit the building, and, if
                     ; dealing with Sam, check whether he is entering a house
                     ; without a key
 60483 JR 60423      ; Move the character midstride
; The character is at a location that may require special handling depending on
; the direction in which he is going.
*60485 LD A,D        ; #REGa=direction indicator (#b128, #b64, #b32, #b16, #b8
                     ; or #b4)
 60486 RLCA          ; {Move bits 7 (left) and 6 (right) into bits 1 and 0 for
 60487 RLCA          ; comparison with bits 1 and 0 of the direction descriptor
                     ; in #REGc}
 60488 AND C         ; Is the character moving in a direction that requires
                     ; special handling (e.g. off the edge of a roof)?
 60489 JR Z,60423    ; Jump if not to move the character midstride
; The character's next move requires special handling.
 60491 LD A,B        ; #REGa=Q'', the third byte of the location descriptor
                     ; (1-7; see #R60179)
@ssub=ADD A,40982/256-1
 60492 ADD A,159     ; #REGa=#b160-#b166
 60494 PUSH HL       ; Save the character number briefly
 60495 LD H,A        ; {Collect in #REGhl the special location handler routine
@ssub=LD L,40982%256
 60496 LD L,22       ; address (#R31580, #R60423 or #R64338) from #R40982,
 60498 LD A,(HL)     ; #R41238, #R41494, #R41750, #R42006, #R42262 or #R42518
 60499 INC L         ;
 60500 LD H,(HL)     ;
 60501 LD L,A        ; }
 60502 EX (SP),HL    ; Restore the character number to #REGh, and copy the
                     ; special location handler routine address onto the stack
 60503 RET           ; To #R31580 (if Q''=7), #R60423 (Q''=1) or #R64338
                     ; (Q''=2, 3, 4, 5 or 6)

; Unused
s60504 DEFS 2

; Move a character from the midstride or mid-action position and update the SRB
;
; Used by the routines at #R29149, #R60539, #R62892, #R62926 and #R63128.
; Updates the character's animatory state and location, and updates the
; #R32512(screen refresh buffer) (SRB) accordingly.
;
; H Character number (#b215-#b230)
@label=ENDSTRIDE
c60506 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 60509 LD L,5        ; Point #REGhl at byte #b5 of the character's buffer
 60511 LD A,(HL)     ; A=character's post-midstride/post-action animatory state
 60512 INC L         ; {Collect the character's post-midstride/post-action
 60513 LD E,(HL)     ; coordinates in #REGde from bytes #b6 and #b7 of his
 60514 INC L         ; buffer
 60515 LD D,(HL)     ; }
 60516 LD (HL),0     ; Set byte #b7 of the character's buffer to 0 (to indicate
                     ; that he is neither midstride nor mid-action now)
 60518 JP 59861      ; Update the character's animatory state and location and
                     ; update the SRB

; Make a sound effect
;
; Used by the routines at #R25789, #R30675, #R30989, #R60539, #R60641, #R64218
; and #R64338. Makes the sound effect that is used when 'M' is pressed to
; toggle the message speed, and also by Sam when he is walking, finishes a roll
; or somersault, picks up the hook or budgie, picks up a telephone, is dialling
; a telephone number, hangs up a phone, changes disguise, lowers his arm,
; knocks on a door, blows a fuse, flips a light switch, raises or lowers a
; window blind, throws the hook, or is falling from the roof of a building.
; .
; #AUDIO2(beep.wav)([2532]*6)
@label=SNDEFFECT2
c60521 PUSH BC       ;
 60522 LD A,1        ; BORDER 1 (blue)
 60524 LD C,7        ; Initialise the duration counter
*60526 XOR 16        ; Flip bit 4 (the speaker bit)
 60528 OUT (254),A   ; Change the speaker state
 60530 LD B,192      ; {Perform the pitch delay
*60532 DJNZ 60532    ; }
 60534 DEC C         ; Have we finished the sound effect yet?
 60535 JR NZ,60526   ; Jump back if not
 60537 POP BC        ;
 60538 RET           ;

; Move Sam from the midstride or mid-action position and scroll the screen if
; necessary
;
; Called from the main loop at #R61483, and also used by the routines at
; #R30146 and #R62216.
@label=MVSAM
c60539 CALL 60521    ; Make a sound effect
@ssub=LD H,58880/256
 60542 LD H,230      ; #b230=Sam
 60544 CALL 60506    ; Move Sam from the midstride or mid-action position and
                     ; update the SRB
; This entry point is used by the routines at #R25789, #R31476 and #R64338.
*60547 LD DE,32766   ; #R32766 holds X, the x-coordinate of the leftmost column
                     ; of the play area on screen
 60550 LD L,1        ; Point #REGhl at byte #b1 of Sam's buffer
 60552 LD A,(DE)     ; #REGa=X
 60553 SUB (HL)      ; Subtract Sam's x-coordinate
 60554 JR Z,60560    ; Jump if they are equal
 60556 CP 247        ; Is Sam's x-coordinate >= X+10?
 60558 JR C,60572    ; Jump if so (no need to scroll right)
*60560 LD A,(DE)     ; #REGa=X
 60561 AND A         ; Is X=0?
 60562 JR Z,60587    ; Jump if so (no need to scroll right)
 60564 CALL 60032    ; Update the display
 60567 CALL 61838    ; Cycle a character buffer group forwards and scroll the
                     ; screen right
 60570 JR 60587      ;
*60572 CP 235        ; Is Sam's x-coordinate <= X+21?
 60574 JR NC,60587   ; Jump if so (no need to scroll left)
 60576 LD A,(DE)     ; #REGa=X
 60577 CP 224        ; Is X=224?
 60579 JR Z,60587    ; Jump if so (no need to scroll left)
 60581 CALL 60032    ; Update the display
 60584 CALL 61882    ; Cycle a character buffer group backwards and scroll the
                     ; screen left
; Now that any required horizontal scrolling has been done, it's time to check
; whether any vertical scrolling is required.
*60587 LD DE,32767   ; #R32767 holds Y, the y-coordinate of the topmost row of
                     ; the play area on screen
@ssub=LD HL,58880+2
 60590 LD HL,58882   ; Point #REGhl at byte #b2 of Sam's buffer
 60593 LD A,(DE)     ; {#REGa=Y-3
 60594 SUB 3         ; }
 60596 SUB (HL)      ; Subtract Sam's y-coordinate
 60597 CP 252        ; Is Sam's y-coordinate >= Y+2?
 60599 JR C,60611    ; Jump if so (no need to scroll down)
 60601 LD A,(DE)     ; #REGa=Y
 60602 CP 2          ; Is Y=2?
 60604 RET Z         ; Return if so (no need to scroll down)
 60605 CALL 60032    ; Update the display
 60608 JP 59575      ; Scroll the screen down
*60611 CP 240        ; Is Sam's y-coordinate <= Y+13?
 60613 RET NC        ; Return if so (no need to scroll up)
 60614 LD A,(DE)     ; #REGa=Y
 60615 CP 20         ; Is Y=20?
 60617 RET Z         ; Return if so (no need to scroll up)
 60618 CALL 60032    ; Update the display
 60621 JP 59516      ; Scroll the screen up

; Unused
s60624 DEFS 2

; 'Q' pressed - up
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'Q' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=UP
c60626 CALL 60315    ; Move Sam up (or in the next best direction) if possible
 60629 JR 60644      ; Reset Sam's action timers and make a sound effect

; 'A' pressed - down
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'A' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=DOWN
c60631 CALL 60320    ; Move Sam down (or in the next best direction) if
                     ; possible
 60634 JR 60644      ; Reset Sam's action timers and make a sound effect

; 'P' pressed - right
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'P' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=RIGHT
c60636 CALL 60334    ; Move Sam right (or in the next best direction) if
                     ; possible
 60639 JR 60644      ; Reset Sam's action timers and make a sound effect

; 'O' pressed - left
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'O' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=LEFT
c60641 CALL 60347    ; Move Sam left (or in the next best direction) if
                     ; possible
; This entry point is used by the routines at #R60626, #R60631 and #R60636.
*60644 RET NC        ; Return if Sam could not move in the desired direction
 60645 LD A,(32765)  ; Collect the offset of the last key pressed from #R32765
 60648 BIT 3,A       ; Set the zero flag if a 'fast' key (upper case Q, A, O or
                     ; P) was pressed
 60650 LD B,4        ; 4=fast
 60652 JR Z,60656    ; Jump if a 'fast' key was pressed
; This entry point is used by the routines at #R28635, #R30458, #R31204 and
; #R62192.
*60654 LD B,8        ; 8=slow
*60656 CALL 60521    ; Make a sound effect
 60659 LD L,7        ; Point #REGhl at byte #b7 of Sam's buffer
 60661 LD A,(HL)     ; #REGa=0 if Sam is neither midstride nor mid-action now
 60662 INC L         ; {Set Sam's main action timer in byte #b8 of his buffer
 60663 LD (HL),B     ; to either 4 (fast) or 8 (slow)}
 60664 AND A         ; Is Sam midstride or mid-action?
 60665 RET Z         ; Return if not
 60666 INC L         ; {Set Sam's midstride/mid-action timer in byte #b9 of his
 60667 LD (HL),B     ; buffer to either 4 (fast) or 8 (slow)}
 60668 RET           ;

; Unused
s60669 DEFS 3

; Addresses of keypress handling routines
;
; Used by the main loop at #R61483. Each non-zero entry in the keypress offset
; table at #R49968 points to a routine address in this table.
@label=K_UPF
w60672 DEFW 60626    ; #b1: Up (fast)
@label=K_DOWNF
 60674 DEFW 60631    ; #b3: Down (fast)
@label=K_RIGHTF
 60676 DEFW 60636    ; #b5: Right (fast)
@label=K_LEFTF
 60678 DEFW 60641    ; #b7: Left (fast)
@label=K_UP
 60680 DEFW 60626    ; #b9: Up (slow)
@label=K_DOWN
 60682 DEFW 60631    ; #b11: Down (slow)
@label=K_RIGHT
 60684 DEFW 60636    ; #b13: Right (slow)
@label=K_LEFT
 60686 DEFW 60641    ; #b15: Left (slow)
@label=K_DISGUISE
 60688 DEFW 64218    ; #b17: Change disguise
@label=K_KNOCK
 60690 DEFW 62192    ; #b19: Knock
@label=K_LIGHT
 60692 DEFW 30070    ; #b21: Light on/off
@label=K_BLIND
 60694 DEFW 30092    ; #b23: Raise/lower blind
@label=K_FUSE
 60696 DEFW 29866    ; #b25: Fuse
@label=K_MSGSPEED
 60698 DEFW 28635    ; #b27: Toggle message speed
@label=K_JOYSTICK
 60700 DEFW 24951    ; #b29: Joystick
@label=K_PHONE
 60702 DEFW 30458    ; #b31: Telephone
@label=K_GETOBJECT
 60704 DEFW 31204    ; #b33: Get object
@label=K_USEHOOK
 60706 DEFW 31713    ; #b35: Use hook
@label=K_ROLL
 60708 DEFW 25784    ; #b37: Forward roll
@label=K_SOMSAULT
 60710 DEFW 25789    ; #b39: Somersault
 60712 DEFW 61618    ; #b41: Unused

; Unused
s60714 DEFS 6

; Obtain location descriptors for a character standing next to a closed door
;
; Used by the routine at #R60179. A location descriptor for the character's
; current location has been found, and it corresponds to a location that is
; next to a door that happens to be closed. In this case we process the
; remaining location descriptors for the character's x-coordinate, one of which
; may be specific to the character's z-coordinate (1=behind the closed door, or
; 2=in front of it), and thus provide the appropriate direction descriptors
; (which are returned in #REGc). For an example of where this can happen, see
; the three descriptors in the location descriptor table at #R49952 that
; correspond to the entrance to the shop at the far left of town.
;
; B Character's y-coordinate (bits 2-6: y-4) and z-coordinate (bit 7: z-1)
; E Character's x-coordinate
; HL Address of the third byte of the location descriptor just processed
@label=LOCDESCSD
c60720 CALL 60222    ; Process the remaining location descriptors for the
                     ; character's x-coordinate
 60723 LD A,4        ; #REGa=4: the character is standing behind or in front of
                     ; a closed door
 60725 RET           ;

; Obtain an identifier for a character's current location
;
; Used by the routine at #R31808. Returns with #REGa=#b255 if the character's
; z-coordinate is 2 or 4, and his y-coordinate is less than 31 (meaning he is
; on the fire escape of the apartment building next to no. 19, or falling from
; the roof of a building); with #REGa=#b0 if he's on the sidewalk or the road;
; or with certain bits of #REGa set or reset depending on the location:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit(s) | =h Meaning }
; { =r2 0     | 0: On the floor of a shop or other building }
; {             1: On a staircase between floors, or on the front steps of a
;               building below the first floor, or on the rim of a roof }
; { =r7 1-3   | 000: On the front steps of a building below the first floor }
; {             001: Next to the entrance to a shop or other building (outside)
;               }
; {             010: Shop or first floor of other building (inside) }
; {             011: Second floor of a building }
; {             100: Third floor of a building }
; {             101: Fourth floor of a building (could be the roof) }
; {             110: Fifth floor of a building (could be the roof) }
; { 4-7       | Region ID (see below) }
; TABLE#
; .
; The region ID in bits 4-7 corresponds to a certain shop or other building in
; the play area:
; .
; #TABLE(default,centre)
; { =h Region ID | =h Building }
; { 0001         | Left-hand shop under the apartments next to no. 74 }
; { 0010         | Right-hand shop under the apartments next to no. 74 }
; { 0011         | Shop under no. 17 }
; { 0100         | Shop under no. 15 }
; { 0101         | Apartment building next to no. 74 }
; { 0110         | Police station }
; { 0111         | No. 27 }
; { 1000         | No. 74 }
; { 1001         | Hotel }
; { 1010         | No. 31 }
; { 1011         | No. 19 }
; { 1100         | No. 17 }
; { 1101         | Unused }
; { 1110         | No. 15 }
; { 1111         | Apartment building next to no. 19 }
; TABLE#
; .
; In addition, on return #REGe holds the x-coordinate of the bottom of the
; staircase going up to the floor above, and #REGd holds the x-coordinate of
; the top of the staircase going down to the floor below.
;
; H Character number (#b215-#b230)
@label=LOCID
c60726 LD L,1        ; {#REGe=character's x-coordinate
 60728 LD E,(HL)     ; }
 60729 INC L         ; {#REGd=character's y-coordinate
 60730 LD D,(HL)     ; }
 60731 LD L,4        ; {#REGc=character's z-coordinate
 60733 LD C,(HL)     ; }
; This entry point is used by the routine at #R29072.
*60734 BIT 0,C       ; Is the z-coordinate 1 (indoors)?
 60736 JR NZ,60743   ; Jump if so
 60738 LD A,D        ; #REGa=y-coordinate
 60739 CP 31         ; {#REGa=#b255 if the y-coordinate is less than 31, #b0
 60741 SBC A,A       ; otherwise}
 60742 RET C         ; Return with #REGa=#b255 if the y-coordinate is less than
                     ; 31, and the z-coordinate is 2 or 4
; This entry point is used by the routines at #R31126 and #R31289.
*60743 CALL 60159    ; Check whether the character is on the sidewalk or road
 60746 LD A,0        ; {Return with #REGa=0 if the character is on the sidewalk
 60748 RET NC        ; or road}
; At this point we have determined that the character is on the front steps of
; or inside a building.
 60749 PUSH HL       ; Save the character number
 60750 LD A,37       ; {#REGl=#b10 (if 31<#REGd), #b11 (25<#REGd<=31), #b12
 60752 LD L,9        ; (19<#REGd<=25), #b13 (13<#REGd<=19), #b14 (7<#REGd<=13)
*60754 INC L         ; or #b15 (1<#REGd<=7)
 60755 SUB 6         ;
 60757 CP D          ;
 60758 JR NC,60754   ; }
 60760 SUB D         ; {Set the zero flag if #REGd=7, 13, 19, 25 or 31
 60761 ADD A,6       ; (corresponding to the floor of a building)}
 60763 PUSH AF       ; Save #REGa and the zero flag
@ssub=LD H,61194/256
 60764 LD H,239      ; The region identifier tables are in page #b239
 60766 LD A,E        ; #REGa=x-coordinate
 60767 LD L,(HL)     ; Point #REGhl at one of the tables at #R61200, #R61256,
                     ; #R61296, #R61336, #R61376 and #R61416
*60768 CP (HL)       ; {Find the first entry whose first byte is greater than
 60769 INC HL        ; #REGa (the target x-coordinate)
 60770 INC HL        ;
 60771 INC HL        ;
 60772 INC HL        ;
 60773 JR NC,60768   ; }
 60775 DEC HL        ; {#REGe=fourth byte of the entry (x-coordinate of the
 60776 LD E,(HL)     ; bottom of the staircase going up to the floor above)}
 60777 DEC HL        ; {#REGd=third byte of the entry (x-coordinate of the top
 60778 LD D,(HL)     ; of the staircase going down to the floor below)}
 60779 DEC HL        ; {#REGa=second byte of the entry (location identifier)
 60780 LD A,(HL)     ; }
 60781 CP 80         ; Is the second byte of the entry less than #b80?
 60783 JR NC,60794   ; Jump if not
; The second byte of the entry is less than #b80, which is true only for the
; four entries in the region identifier table at #R61200 that correspond to the
; shops.
 60785 POP AF        ; Restore #REGa and the zero flag (though the values are
                     ; ignored at this point)
*60786 LD A,(HL)     ; #REGa=location identifier
 60787 BIT 0,C       ; Set the zero flag if the z-coordinate is 1 (indoors)
 60789 POP HL        ; Restore the character number to #REGh
 60790 RET NZ        ; Return if the z-coordinate is 1
 60791 SUB 2         ; Reset bit 2 of #REGa, and set bit 1 (to indicate that
                     ; the character is standing outside the door of a shop or
                     ; house)
 60793 RET           ;
; The second byte of the entry (held in #REGa) is at least #b80, which means it
; corresponds to a location other than one of the four shops.
*60794 AND 15        ; Keep only bits 0-3 of the location identifier
 60796 CP 4          ; Is this location on the first floor of a building?
 60798 JR NZ,60804   ; Jump if not
 60800 POP AF        ; Restore #REGa and the zero flag
 60801 JR Z,60786    ; Jump if the y-coordinate corresponds to a floor of a
                     ; building
 60803 PUSH AF       ; Save #REGa and the zero flag again
*60804 POP AF        ; Restore #REGa and the zero flag
 60805 LD A,(HL)     ; #REGa=location identifier
 60806 POP HL        ; Restore the character number to #REGh
 60807 RET Z         ; Return if the y-coordinate corresponds to a floor of a
                     ; building
 60808 INC A         ; Set bit 0 of #REGa to indicate that the character is on
                     ; a staircase between two floors of a building, or on the
                     ; front steps of a building below the first floor, or on
                     ; the rim of a roof
 60809 RET           ;

; Unused
s60810 DEFS 2

; Determine the next move a character should make to reach his destination
;
; Used by the routines at #R29361, #R31126, #R31362 and #R62976. Returns with
; #REGa holding a value that indicates the next move the character should make
; (if any) to reach his destination.
; .
; #TABLE(default,centre)
; { =h #REGa | =h Meaning the character should... }
; { 0        | Do nothing (the character is already at his destination) }
; { 1        | Go right }
; { 2        | Go left }
; { 3        | Go up }
; { 4        | Go down }
; { 5        | Open a door from the inside }
; { 6        | Knock on a door or use a key }
; TABLE#
;
; H Character number (#b215-#b230)
@label=NEXTMOVE
c60812 CALL 31808    ; Deal with the case where the character will soon be
                     ; entering or leaving the hotel; otherwise return here
 60815 LD L,13       ; {Initialise the location/destination indicator in byte
 60817 LD (HL),0     ; #b13 of the character's buffer to 0}
 60819 AND A         ; Is the character on the sidewalk or the road?
 60820 JR NZ,60883   ; Jump if not
 60822 DEC L         ; #REGl=#b12
 60823 LD A,(HL)     ; #REGa=destination location identifier (see #R60726)
 60824 AND A         ; Is the character's destination on the sidewalk or the
                     ; road?
 60825 JR NZ,60842   ; Jump if not
; The next section of code deals with the case where the character can reach
; his destination simply by continuing to move left or right. The routine at
; #R31808 re-enters here (from the opening #S/CALL/ in this routine) if the
; character is on the front steps of the hotel, and his destination is on the
; first floor or the front steps of the hotel.
*60827 LD L,10       ; Point #REGhl at byte #b10 of the character's buffer
 60829 LD E,(HL)     ; #REGe=destination x-coordinate
 60830 LD A,E        ; Copy this to #REGa
 60831 LD L,1        ; {Does the character's x-coordinate match the destination
 60833 CP (HL)       ; x-coordinate?}
 60834 LD A,0        ; {Return with #REGa=0 (do nothing) if so
 60836 RET Z         ; }
 60837 LD A,1        ; {Return with #REGa=1 (go right) if the character's
 60839 RET NC        ; x-coordinate is less than the destination x-coordinate}
 60840 INC A         ; #REGa=2 (go left)
 60841 RET           ;
; The character is on the sidewalk or the road, and his destination is
; somewhere other than the sidewalk or the road. Move the character left or
; right towards the building he's destined for, or make him go up a step if
; he's reached the front steps of the building.
*60842 AND 240       ; Keep only the region identifier bits (bits 4-7) of the
                     ; destination
 60844 RRCA          ; {Shift them into bits 1-4
 60845 RRCA          ;
 60846 RRCA          ; }
@ssub=ADD A,65432%256-2
 60847 ADD A,150     ; #REGa=#b152+2n (n=#b0-#b11, #b13 or #b14)
 60849 LD C,A        ; {Point #REGbc at the entry in the table of building
@ssub=LD B,65432/256
 60850 LD B,255      ; entrance x-coordinates at #R65432 that corresponds to
                     ; the character's destination}
 60852 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 60854 LD A,(BC)     ; Pick up the lower x-coordinate of the building entrance
 60855 LD E,A        ; Copy it to #REGe
 60856 CP (HL)       ; Compare it with the character's x-coordinate
 60857 LD A,L        ; #REGa=1 (go right)
 60858 JR NZ,60865   ; Jump unless the x-coordinates match
 60860 DEC L         ; #REGl=#b0
 60861 BIT 7,(HL)    ; Is the character facing right?
 60863 JR NZ,60877   ; Jump if so
*60865 RET NC        ; Return with #REGa=1 (go right)
 60866 INC C         ; {Pick up the upper x-coordinate of the building entrance
 60867 LD A,(BC)     ; }
 60868 LD E,A        ; Copy it to #REGe
 60869 CP (HL)       ; Compare it with the character's x-coordinate
 60870 LD A,2        ; #REGa=2 (go left)
 60872 RET NZ        ; Return unless the x-coordinates match
 60873 DEC L         ; #REGl=#b0
 60874 BIT 7,(HL)    ; Is the character facing right?
 60876 RET NZ        ; Return with #REGa=2 (go left) if so
*60877 LD L,13       ; {Set byte #b13 of the character's buffer to 1
 60879 INC (HL)      ; (indicating that the character is no longer on the
                     ; sidewalk or the road, and is in the same region as his
                     ; destination)}
 60880 LD A,3        ; #REGa=3 (go up)
 60882 RET           ;
; The character is on neither the sidewalk nor the road.
*60883 INC (HL)      ; Set byte #b13 of the character's buffer to 1 (indicating
                     ; that the character is on neither the sidewalk nor the
                     ; road)
 60884 DEC L         ; #REGl=#b12
 60885 INC A         ; Is the character on the fire escape of the apartment
                     ; building next to no. 19?
 60886 JR NZ,60925   ; Jump if not
; The character is on the fire escape of the apartment building next to no. 19.
 60888 LD A,(HL)     ; #REGa=destination location identifier (see #R60726)
 60889 INC A         ; Set the zero flag if the destination is on the fire
                     ; escape
 60890 SCF           ; Set the carry flag: the character will go back up the
                     ; fire escape (if his destination is not on the fire
                     ; escape)
 60891 JR NZ,60900   ; Jump if the destination is not on the fire escape
 60893 DEC L         ; #REGl=#b11
 60894 LD A,(HL)     ; #REGa=character's destination y-coordinate
 60895 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 60897 CP (HL)       ; Does the character's y-coordinate match that of his
                     ; destination?
 60898 JR Z,60827    ; If so, move the character left or right towards his
                     ; destination
*60900 PUSH AF       ; Save the carry flag briefly
 60901 PUSH HL       ; Save the character number briefly
 60902 CALL 60179    ; Obtain descriptors for the character's current location
 60905 POP HL        ; Restore the character number to #REGh
 60906 POP AF        ; Restore the carry flag
 60907 LD A,C        ; Copy the direction descriptor bits (see #R60179) to
                     ; #REGa
 60908 JR NC,60917   ; Jump if the character's y-coordinate is less than that
                     ; of his destination
; The character is on the fire escape of the apartment building next to no. 19,
; and his destination is either not on the fire escape, or somewhere further up
; the fire escape. In this case the character will go up the fire escape.
 60910 AND 16        ; Set the zero flag unless the character is next to a step
                     ; going up to the right
 60912 LD A,3        ; #REGa=3 (go up)
 60914 RET NZ        ; Return if the character is next to a step going up to
                     ; the right
 60915 DEC A         ; #REGa=2 (go left)
 60916 RET           ;
; The character is on the fire escape of the apartment building next to no. 19,
; and his destination is somewhere further down the fire escape. In this case
; the character will go down the fire escape.
*60917 AND 8         ; Set the zero flag unless the character is next to a step
                     ; going down to the left
 60919 LD A,4        ; #REGa=4 (go down)
 60921 RET NZ        ; Return if the character is next to a step going down to
                     ; the left
 60922 LD A,1        ; #REGa=1 (go right)
 60924 RET           ;
; The character is on neither the sidewalk nor the road, nor on the fire escape
; of the apartment building next to no. 19.
*60925 DEC A         ; #REGa=identifier for the character's current location
                     ; (see #R60726)
 60926 LD B,(HL)     ; #REGb=destination location identifier (see #R60726)
 60927 INC B         ; Is the destination on the fire escape of the apartment
                     ; building next to no. 19?
 60928 JR NZ,60937   ; Jump if not
 60930 CP 253        ; Is the character on the rim of the roof of the apartment
                     ; building next to no. 19?
 60932 JR NZ,60937   ; Jump if not
 60934 LD A,4        ; #REGa=4 (go down)
 60936 RET           ;
; The character is on neither the sidewalk nor the road, nor on the fire escape
; of the apartment building next to no. 19; in addition, either his destination
; is not on the fire escape, or he is not on the rim of the roof of the
; apartment building next to no. 19.
*60937 LD B,A        ; #REGb=identifier for the character's current location
                     ; (see #R60726)
 60938 AND 240       ; Keep only the region identifier bits (bits 4-7)
 60940 LD C,A        ; Copy them to #REGc
 60941 LD A,(HL)     ; Collect the destination location identifier from byte
                     ; #b12 of the character's buffer
 60942 AND 240       ; Keep only the region identifier bits (bits 4-7)
 60944 CP C          ; Is the character in the same region as his destination?
 60945 JP NZ,61100   ; Jump if not
; The character is in the same region as his destination.
 60948 LD A,B        ; #REGa=identifier for the character's current location
                     ; (see #R60726)
 60949 CP (HL)       ; Compare it with the identifier for the character's
                     ; destination
 60950 JR NZ,60966   ; Jump unless they match
; The character is in the same region as his destination, and also on the same
; floor.
 60952 LD L,11       ; {#REGa=character's destination y-coordinate
 60954 LD A,(HL)     ; }
 60955 LD L,2        ; {Compare this with the character's current y-coordinate
 60957 CP (HL)       ; }
 60958 JP Z,60827    ; If they match, move the character left or right towards
                     ; his destination
 60961 LD A,3        ; #REGa=3 (go up)
 60963 RET C         ; Return if the character's current y-coordinate is
                     ; greater than that of his destination
 60964 INC A         ; #REGa=4 (go down)
 60965 RET           ;
; The character is in the same region as his destination, but either on a
; different floor, or outside the entrance to a shop or building when the
; destination is on the first floor inside (or vice versa).
*60966 JR C,61036    ; Jump if the character is below his destination
 60968 AND 15        ; Keep only bits 0-3 of the identifier for the character's
                     ; current location
 60970 CP 4          ; Is the character in a shop or on the first floor of a
                     ; building (inside)?
 60972 JR NZ,61022   ; Jump if not
 60974 LD A,(HL)     ; #REGa=destination location identifier
 60975 AND 15        ; Keep only bits 0-3
 60977 CP 2          ; Set the zero flag if the destination is outside the
                     ; entrance
 60979 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 60981 JR NZ,61001   ; Jump unless the destination is outside the entrance
 60983 LD A,(HL)     ; #REGa=character's x-coordinate
 60984 LD L,10       ; {Does it match the destination x-coordinate?
 60986 CP (HL)       ; }
 60987 JR NZ,60999   ; Jump if not
 60989 PUSH DE       ; Save the staircase endpoint x-coordinates briefly
 60990 PUSH HL       ; Save the character number briefly
 60991 CALL 60179    ; Obtain descriptors for the character's current location
 60994 POP HL        ; Restore the character number to #REGh
 60995 POP DE        ; Restore the staircase endpoint x-coordinates to #REGde
 60996 SUB 3         ; Is the character standing at the (open) entrance to a
                     ; building?
 60998 RET Z         ; Return with #REGa=0 (do nothing) if so
*60999 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
*61001 LD A,(HL)     ; #REGa=character's x-coordinate
 61002 CP D          ; Is the character standing at the top of the steps down
                     ; to the sidewalk or the floor below?
 61003 JR NZ,61017   ; If not, send the character towards the top of the steps
 61005 PUSH HL       ; Save the character number briefly
 61006 CALL 60179    ; Obtain descriptors for the character's current location
 61009 POP HL        ; Restore the character number to #REGh
 61010 INC A         ; {Is the character standing next to the open entrance to
 61011 CP 4          ; a building?}
 61013 RET Z         ; Return with #REGa=4 (go down) if so
 61014 LD A,5        ; #REGa=5 (open the door)
 61016 RET           ;
*61017 LD A,1        ; #REGa=1 (go right)
 61019 RET C         ;
 61020 INC A         ; #REGa=2 (go left)
 61021 RET           ;
; Either the character is in the same region as his destination, but above it,
; and not in a shop or on the first floor of a building (inside); or the
; character is not in the same region as his destination, and is inside a
; building somewhere above the first floor.
*61022 BIT 0,A       ; Set the zero flag unless the character is on a staircase
                     ; between floors
 61024 LD A,4        ; #REGa=4 (go down)
 61026 RET NZ        ; Return if the character is on a staircase between floors
 61027 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 61029 LD A,(HL)     ; #REGa=character's x-coordinate
 61030 CP D          ; Compare it with the x-coordinate of the top of the
                     ; staircase leading down to the floor below
 61031 LD A,4        ; #REGa=4 (go down)
 61033 RET Z         ; Return if the character is standing at the top of the
                     ; staircase leading down to the floor below
 61034 JR 61017      ; Send the character towards the top of the staircase
; The character is in the same region as his destination, but below it.
*61036 CALL 28803    ; Deal with the case where the character is on the roof of
                     ; the police station or the apartment building next to no.
                     ; 19 and is destined for the edge of that roof; otherwise
                     ; return here
 61039 NOP           ;
 61040 JR NZ,61084   ; Jump unless the character is standing outside the
                     ; entrance to a shop or other building
 61042 LD A,(HL)     ; #REGa=destination location identifier (see #R60726)
 61043 AND 15        ; Keep only bits 0-3
 61045 CP 4          ; Set the zero flag if the destination is inside the shop
                     ; or on the first floor of the building outside the
                     ; entrance to which the character is standing
 61047 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 61049 JR NZ,61067   ; Jump unless the destination is inside the shop or on the
                     ; first floor of the building outside the entrance to
                     ; which the character is standing
 61051 LD A,(HL)     ; #REGa=character's x-coordinate
 61052 LD L,10       ; {Compare this with the destination x-coordinate
 61054 CP (HL)       ; }
 61055 JR NZ,61067   ; Jump unless they match
 61057 PUSH DE       ; Save the staircase endpoint x-coordinates briefly
 61058 PUSH HL       ; Save the character number briefly
 61059 CALL 60179    ; Obtain descriptors for the character's current location
 61062 POP HL        ; Restore the character number to #REGh
 61063 POP DE        ; Restore the staircase endpoint x-coordinates to #REGde
 61064 SUB 3         ; Is the entrance next to which the character is standing
                     ; open?
 61066 RET Z         ; Return with #REGa=0 (do nothing) if so
*61067 NOP           ;
; The character is standing outside the entrance to a shop or other building,
; and his destination is somewhere inside that shop or building.
 61068 CALL 63749    ; Is the character standing at the right spot to enter the
                     ; building or knock on the door?
 61071 JR NZ,61096   ; Jump if not
 61073 PUSH HL       ; Save the character number briefly
 61074 CALL 60179    ; Obtain descriptors for the character's current location
 61077 POP HL        ; Restore the character number to #REGh
 61078 CP 3          ; Set the zero flag if the entrance is open
 61080 JP 63774      ; Check whether the character should enter the building or
                     ; knock first
 61083 NOP           ; This instruction is never executed
; If we get here, then either the character is in the same region as his
; destination, but below it, and is not standing outside the entrance to a shop
; or other building; or the character is inside or on the roof of the police
; station and heading for no. 27 (or vice versa), and will be going via the
; roofs (instead of going down to the sidewalk).
*61084 BIT 0,A       ; Bit 0 of #REGa is set if the character is on a staircase
 61086 LD A,3        ; #REGa=3 (go up)
 61088 RET NZ        ; Return if the character is on a staircase
 61089 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 61091 LD A,(HL)     ; #REGa=character's x-coordinate
 61092 CP E          ; Compare this with the x-coordinate of the bottom of the
                     ; staircase leading to the floor above
 61093 LD A,3        ; {Return with #REGa=3 (go up) if the character is at the
 61095 RET Z         ; bottom of the staircase leading to the floor above}
*61096 LD A,L        ; {Return with #REGa=1 (go right) if the character is to
 61097 RET C         ; the left of either the bottom of the staircase leading
                     ; to the floor above, or the correct spot at which to
                     ; enter the building or knock on the door}
 61098 INC A         ; #REGa=2 (go left)
 61099 RET           ;
; The character is not in the same region as his destination.
*61100 INC L         ; {Set byte #b13 of the character's buffer to 2 (to
 61101 INC (HL)      ; indicate that the character is not on the sidewalk or
                     ; the road, and is heading for some region other than the
                     ; one he's in)}
 61102 DEC L         ; #REGl=#b12
 61103 CP 96         ; Is the character going to the police station?
 61105 JR Z,61118    ; Jump if so
 61107 CP 112        ; Is the character going to no. 27?
 61109 JR NZ,61130   ; Jump if not
; The character is going to no. 27, and is not in the same region as that
; building.
 61111 LD A,C        ; #REGa=region identifier for the character's current
                     ; location
 61112 CP 96         ; Is the character inside or on the roof of the police
                     ; station?
 61114 JR NZ,61130   ; Jump if not
 61116 JR 61123      ;
; The character is going to the police station, and is not in the same region
; as that building.
*61118 LD A,C        ; #REGa=region identifier for the character's current
                     ; location
 61119 CP 112        ; Is the character inside or on the roof of no. 27?
 61121 JR NZ,61130   ; Jump if not
; The character is either inside or on the roof of no. 27 and heading for the
; police station, or inside or on the roof of the police station and heading
; for no. 27.
*61123 LD A,B        ; #REGa=identifier for the character's current location
                     ; (#b96-#b109 if it's the police station, or #b112-#b125
                     ; if it's no. 27; see #R60726)
 61124 ADD A,(HL)    ; Add the destination location identifier
 61125 CP 225        ; Reset the carry flag if it would be quicker to go via
                     ; the roofs than back down to the sidewalk
 61127 LD A,B        ; #REGa=identifier for the character's current location
                     ; (see #R60726)
 61128 JR NC,61084   ; Jump if it would be quicker to go via the roofs than
                     ; back down to the sidewalk
; The character is not in the same region as his destination. Figure out his
; next move towards the destination via the sidewalk.
*61130 LD A,B        ; #REGa=identifier for the character's current location
                     ; (see #R60726)
 61131 AND 15        ; Keep only bits 0-3
 61133 CP 4          ; Is the character inside a shop or on the first floor of
                     ; a building (inside)?
 61135 JP Z,60999    ; If so, send him towards the entrance
 61138 CP 1          ; Is the character on the front steps of a building below
                     ; the first floor?
 61140 JP NZ,61022   ; If not, send the character towards the top of the
                     ; staircase leading down to the floor below
; The character is not in the same region as his destination, and is on the
; front steps of a building below the first floor. Figure out which direction
; to take down the steps towards the destination.
 61143 PUSH HL       ; Save the character number briefly
 61144 CALL 60179    ; Obtain descriptors for the character's current location
 61147 POP HL        ; Restore the character number to #REGh
 61148 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 61150 LD A,(HL)     ; #REGa=character's x-coordinate
 61151 LD L,10       ; {Compare this with the character's destination
 61153 CP (HL)       ; x-coordinate}
 61154 LD A,C        ; Copy the direction descriptor bits (see #R60179) to
                     ; #REGa
 61155 JR NC,61173   ; Jump if the character's x-coordinate is greater than or
                     ; equal to the destination x-coordinate
 61157 AND 4         ; Is the character next to a step going down to the right?
 61159 JR NZ,61164   ; Jump if not
*61161 LD A,4        ; #REGa=4 (go down)
 61163 RET           ;
*61164 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 61166 BIT 7,(HL)    ; Is the character facing right?
 61168 JR NZ,61161   ; Jump if so to set #REGa=4 (go down)
 61170 LD A,1        ; #REGa=1 (go right)
 61172 RET           ;
*61173 AND 8         ; Is the character standing next to a step going down to
                     ; the left?
 61175 JR Z,61161    ; Jump if not to set #REGa=4 (go down)
 61177 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 61179 BIT 7,(HL)    ; Is the character facing left?
 61181 JR Z,61161    ; Jump if so to set #REGa=4 (go down)
 61183 LD A,2        ; #REGa=2 (go left)
 61185 RET           ;

; Unused
s61186 DEFS 8

; Region identifier tables
;
; Used by the routine at #R60726. The first six bytes here are the LSBs of the
; addresses of the tables that follow at #R61200, #R61256, #R61296, #R61336,
; #R61376 and #R61416.
@label=REGIDS
@ssub=DEFB 61200%256
b61194 DEFB 16              ; LSB of #R61200
@ssub=DEFB 61256%256
 61195 DEFB 72              ; LSB of #R61256
@ssub=DEFB 61296%256
 61196 DEFB 112             ; LSB of #R61296
@ssub=DEFB 61336%256
 61197 DEFB 152             ; LSB of #R61336
@ssub=DEFB 61376%256
 61198 DEFB 192             ; LSB of #R61376
@ssub=DEFB 61416%256
 61199 DEFB 232             ; LSB of #R61416
; Each of the six tables that follow corresponds to a range of y-coordinates in
; the play area. Each 4-byte entry in those tables corresponds to a range of
; x-coordinates:
; .
; #TABLE(default,centre)
; { =h Byte | =h Meaning }
; { 1       | x-coordinate upper bound }
; { 2       | Location identifier }
; { 3       | x-coordinate of the top of the staircase going down }
; { 4       | x-coordinate of the bottom of the staircase going up }
; TABLE#
; .
; The first table corresponds to y-coordinates 32 and 33 (shops and doorsteps).
@label=REGIDS0
 61200 DEFB 7,20,0,0        ; 0<=x<=6: Left-hand shop under the apartments next
                            ; to no. 74
 61204 DEFB 15,80,12,12     ; 7<=x<=14: Stairwell of the apartment building
                            ; next to no. 74
 61208 DEFB 23,36,16,16     ; 15<=x<=22: Right-hand shop under the apartments
                            ; next to no. 74
 61212 DEFB 55,128,43,43    ; 23<=x<=54: No. 74
 61216 DEFB 103,144,77,77   ; 55<=x<=102: Hotel
 61220 DEFB 119,160,115,115 ; 103<=x<=118: No. 31
 61224 DEFB 151,96,138,138  ; 119<=x<=150: Police station
 61228 DEFB 159,112,156,156 ; 151<=x<=158: No. 27
 61232 DEFB 207,240,196,196 ; 159<=x<=206: Apartment building next to no. 19
 61236 DEFB 223,176,211,211 ; 207<=x<=222: No. 19
 61240 DEFB 231,52,224,224  ; 223<=x<=230: Shop under no. 17
 61244 DEFB 239,192,236,236 ; 231<=x<=238: No. 17 (door)
 61248 DEFB 247,68,240,240  ; 239<=x<=246: Shop under no. 15
 61252 DEFB 255,224,252,252 ; 247<=x<=254: No. 15 (door)
; The next table corresponds to y-coordinates 26-31 (first floor).
@label=REGIDS1
 61256 DEFB 23,84,12,13     ; 0<=x<=22: Apartment building next to no. 74
 61260 DEFB 55,132,43,43    ; 23<=x<=54: No. 74
 61264 DEFB 103,148,76,77   ; 55<=x<=102: Hotel
 61268 DEFB 119,164,115,115 ; 103<=x<=118: No. 31
 61272 DEFB 150,100,138,137 ; 119<=x<=149: Police station
 61276 DEFB 159,116,156,155 ; 150<=x<=158: No. 27
 61280 DEFB 207,244,196,197 ; 159<=x<=206: Apartment building next to no. 19
 61284 DEFB 223,180,211,211 ; 207<=x<=222: No. 19
 61288 DEFB 239,196,236,235 ; 223<=x<=238: No. 17
 61292 DEFB 255,228,252,251 ; 238<=x<=254: No. 15
; The next table corresponds to y-coordinates 20-25 (second floor).
@label=REGIDS2
 61296 DEFB 23,86,11,13     ; 0<=x<=22: Apartment building next to no. 74
 61300 DEFB 55,134,43,42    ; 23<=x<=54: No. 74
 61304 DEFB 103,150,81,89   ; 55<=x<=102: Hotel
 61308 DEFB 119,166,115,114 ; 103<=x<=118: No. 31
 61312 DEFB 150,102,137,137 ; 119<=x<=149: Police station
 61316 DEFB 159,118,153,154 ; 150<=x<=158: No. 27
 61320 DEFB 207,246,195,197 ; 159<=x<=206: Apartment building next to no. 19
 61324 DEFB 223,182,211,210 ; 207<=x<=222: No. 19
 61328 DEFB 239,198,233,234 ; 223<=x<=238: No. 17
 61332 DEFB 255,230,249,250 ; 238<=x<=254: No. 15
; The next table corresponds to y-coordinates 14-19 (third floor).
@label=REGIDS3
 61336 DEFB 23,88,11,13     ; 0<=x<=22: Apartment building next to no. 74
                            ; (third floor)
 61340 DEFB 55,136,44,44    ; 23<=x<=54: No. 74 (third floor)
 61344 DEFB 103,152,88,68   ; 55<=x<=102: Hotel (third floor)
 61348 DEFB 119,168,116,116 ; 103<=x<=118: No. 31 (top floor)
 61352 DEFB 150,104,137,137 ; 119<=x<=149: Police station (third floor)
 61356 DEFB 159,120,156,155 ; 150<=x<=158: No. 27 (third floor)
 61360 DEFB 207,248,195,197 ; 159<=x<=206: Apartment building next to no. 19
                            ; (third floor)
 61364 DEFB 223,184,212,212 ; 207<=x<=222: No. 19 (top floor)
 61368 DEFB 239,200,236,235 ; 223<=x<=238: No. 17 (third floor)
 61372 DEFB 255,232,252,251 ; 238<=x<=254: No. 15 (third floor)
; The next table corresponds to y-coordinates 8-13.
@label=REGIDS4
 61376 DEFB 39,90,11,13     ; 0<=x<=38: Apartment building next to no. 74 (top
                            ; floor), through the catwalk, into the room at the
                            ; top left of no. 74
 61380 DEFB 55,138,42,56    ; 39<=x<=54: No. 74 (top floor, right-hand side)
 61384 DEFB 103,154,69,89   ; 55<=x<=102: Hotel (fourth floor)
 61388 DEFB 119,170,114,116 ; 103<=x<=118: No. 31 (roof)
 61392 DEFB 150,106,137,137 ; 119<=x<=149: Police station (top floor)
 61396 DEFB 159,122,153,154 ; 150<=x<=158: No. 27 (top floor)
 61400 DEFB 207,250,195,197 ; 159<=x<=206: Apartment building next to no. 19
                            ; (top floor)
 61404 DEFB 223,186,210,225 ; 207<=x<=222: No. 19 (roof)
 61408 DEFB 239,202,233,234 ; 223<=x<=238: No. 17 (top floor)
 61412 DEFB 255,234,249,250 ; 238<=x<=254: No. 15 (top floor)
; The next table corresponds to y-coordinates 2-7.
@label=REGIDS5
@bfix=DEFB 24,92,11,21      ; 0<=x<=23: Apartment building next to no. 74
 61416 DEFB 23,92,11,20     ; 0<=x<=22: Apartment building next to no. 74
                            ; (roof)
@bfix=                      ; 24<=x<=102: No. 74 (roof) and hotel (top floor)
 61420 DEFB 103,156,88,157  ; 23<=x<=102: No. 74 (roof) and hotel (top floor)
 61424 DEFB 150,108,137,147 ; 103<=x<=149: Police station (roof)
 61428 DEFB 159,124,156,151 ; 150<=x<=158: No. 27 (roof)
 61432 DEFB 207,252,195,182 ; 159<=x<=206: Apartment building next to no. 19
                            ; (roof)
 61436 DEFB 255,204,236,226 ; 207<=x<=254: No. 17 (roof) and no. 15 (roof)

; Perform various main loop tasks
;
; Called from the main loop at #R61483. Closes any doors that need closing,
; decrements and checks the blown fuse delay counters, updates the on-screen
; message if necessary, and increments the score and decrements Sam's cash
; supply at regular intervals.
@label=MNLPTASKS1
c61440 LD HL,32681   ; The main loop task timer is at #R32681
 61443 DEC (HL)      ; Decrement it
 61444 LD A,(HL)     ; Pick up the new value
 61445 AND 7         ; Is the value 0 mod 8?
 61447 JP Z,61764    ; If so, close any doors that need closing
 61450 CP 4          ; Is the value 4 mod 8?
 61452 JP Z,62468    ; If so, decrement and check the blown fuse delay counters
 61455 CP 2          ; Is the value 2 mod 8?
 61457 JP Z,28404    ; If so, update the on-screen message if necessary
 61460 CP 6          ; Is the value 6 mod 8?
 61462 JP Z,31414    ; If so, increment the score and decrement Sam's cash
                     ; supply at regular intervals
 61465 RET           ;

; Unused
s61466 DEFS 17

; Main loop
@label=MAINLOOP
c61483 CALL 61440    ; Close any doors that need closing, decrement and check
                     ; the blown fuse delay counters, update the on-screen
                     ; message if necessary, and increment the score and
                     ; decrement Sam's cash supply at regular intervals
 61486 CALL 61568    ; Update the icon panel, draw the bullets, and scan the
                     ; event table at #R24544
 61489 CALL 61948    ; Move the characters
 61492 LD A,(32764)  ; Pick up Sam's status flags from #R32764
 61495 AND A         ; Is Sam in the middle of an action?
 61496 JR Z,61509    ; Jump if not
 61498 CALL 29912    ; Otherwise deal with Sam
 61501 JR NZ,61549   ; Jump if Sam has not finished the action yet
; This entry point is used by the routines at #R24914 and #R61630.
*61503 LD HL,5       ; {Reset Sam's main action timer and midstride/mid-action
@ssub=LD (58880+8),HL
 61506 LD (58888),HL ; timer (in bytes #b8 and #b9 of his buffer) to 5 and 0
                     ; now that he's finished the action}
@ssub=LD HL,58880+9
*61509 LD HL,58889   ; {Collect Sam's midstride/mid-action timer from byte #b9
 61512 LD A,(HL)     ; of his buffer}
 61513 AND A         ; Is Sam midstride or in the middle of a short action at
                     ; the moment?
 61514 JR NZ,61545   ; Jump if so
 61516 DEC L         ; Point #REGhl at Sam's main action timer in byte #b8 of
                     ; his buffer
 61517 DEC (HL)      ; Decrement it
 61518 JR NZ,61549   ; Jump unless it's time to check the keyboard
 61520 LD (HL),2     ; Reset Sam's main action timer to 2
 61522 CALL 31126    ; Check for keypresses
 61525 JR Z,61549    ; Jump if there haven't been any
 61527 LD (32765),A  ; Store the offset of the last keypress in #R32765
 61530 LD H,237      ; {Point #REGhl at the appropriate entry in the table of
 61532 LD L,A        ; keypress handling routines at #R60672}
@nowarn
 61533 LD DE,61549   ; {Push the address #R61549 (see below) onto the stack so
 61536 PUSH DE       ; we return there after dealing with the keypress}
 61537 LD B,(HL)     ; {Copy the address of the routine for dealing with the
 61538 DEC L         ; keypress into #REGbc
 61539 LD C,(HL)     ; }
 61540 PUSH BC       ; Push this address onto the stack
 61541 LD HL,58880   ; Point #REGhl at byte #b0 of Sam's buffer
 61544 RET           ; Make an indirect jump to the relevant keypress-handling
                     ; routine, and then return to #R61549
; Sam is midstride or in the middle of a short action (which involves raising
; his arm or bending his knees) at the moment.
*61545 DEC (HL)      ; Decrement Sam's midstride/mid-action timer in byte #b9
                     ; of his buffer
 61546 CALL Z,60539  ; If it's now zero, move Sam from the midstride/mid-action
                     ; position, update the SRB, and scroll the screen if
                     ; necessary
; Now that Sam's movements have been dealt with, the main loop continues.
*61549 CALL 60032    ; Update the display
; This next section of code ensures that we don't pass through the main loop
; more than once every 1/50th of a second.
 61552 LD HL,32712   ; #REGhl=#R32712 (which holds the LSB of the system
                     ; variable FRAMES as it was when the last pass through the
                     ; main loop was completed)
@nowarn
*61555 LD A,(23672)  ; #REGa=LSB of the system variable FRAMES, which is
                     ; incremented every 1/50th of a second
 61558 SUB (HL)      ; Now #REGa=0 if FRAMES hasn't been incremented since the
                     ; last pass through the main loop
 61559 CP 1          ; Was FRAMES incremented?
 61561 JR C,61555    ; Jump back if not to check again
 61563 ADD A,(HL)    ; {Store the current value of the LSB of FRAMES at #R32712
 61564 LD (HL),A     ; }
 61565 JR 61483      ; Jump back to the start of the main loop

; Unused
s61567 DEFB 0

; Update the icon panel, draw the bullets, and scan the event table
;
; Called from the main loop at #R61483. Updates the icon panel, draws the
; bullets, scans the event table at #R24544 for events to trigger, and checks
; whether Sam has found the hook, the budgie, a key, some money, or a location
; that requires a message to be displayed.
@label=MNLPTASKS2
c61568 CALL 29668    ; Show or hide the fuse, door, light bulb or phone in the
                     ; icon panel
 61571 LD A,(32750)  ; #REGa=current game mode (0-4)
 61574 AND A         ; Is it demo mode?
 61575 RET Z         ; Return if so
 61576 CALL 26075    ; Move and draw the bullets
 61579 LD A,(32764)  ; Collect Sam's status flags from #R32764
 61582 AND 129       ; Is Sam being carried or falling from a building?
 61584 RET NZ        ; Return if so
 61585 CALL 29952    ; Scan the event table at #R24544 for events to trigger
 61588 LD A,(58880)  ; #REGa=Sam's animatory state
 61591 AND 29        ; Is Sam's animation phase standing/walking phase 1 or 3?
 61593 RET NZ        ; Return if not
 61594 JP 30211      ; Check whether Sam has found something and update the
                     ; icon panel

; Unused
s61597 DEFS 3

; Start (continued)
;
; After the game has loaded, the #R33224@start(startup routine) copies 512
; bytes of message data from the top and bottom lines of the display file to
; #R23904 onwards, pushes #R61668 onto the stack, and then jumps here.
;
@ignoreua
; BC #w512
; DE #w32768
; HL #w32256
@label=PREP128
@ignoreua
c61600 LDIR          ; Copy #w32256-#w32767 to #w32768-#w33279 (overwriting the
                     ; #R33224@start(startup routine))
 61602 RET           ; To #R61668

@ignoreua
; Populate addresses #w32256-#w32767 (unused)
c61603 LD DE,32256   ;
 61606 LD BC,512     ;
 61609 LDIR          ;
 61611 RET           ;

; Start the game (unused)
@label=XSETSP
@ssub=LD (61618+1),HL
c61612 LD (61619),HL ; Set the operand of the '#S/LD SP/' instruction at
                     ; #R61618
 61615 JP 61668      ; Prepare the bottom 4 lines of the screen and enter demo
                     ; mode

; Return to BASIC (unused)
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672, but it is not bound to any key. Perhaps it was used to
; return to BASIC while the game was in development.
@label=XRETBASIC
@nowarn
c61618 LD SP,29965   ; The operand of this instruction is set by the unused
                     ; routine at #R61612
 61621 EXX           ;
 61622 POP DE        ; {Restore the values of the #REGde', #REGbc' and #REGhl'
 61623 POP BC        ; registers
 61624 POP HL        ; }
 61625 EXX           ;
 61626 POP BC        ; {Restore the values of the #REGde, #REGbc and #REGhl
 61627 POP DE        ; registers
 61628 POP HL        ; }
 61629 RET           ;

; End a cutscene
;
; Used by the routine at #R30989. Ends the cutscene by entering demo mode or
; resuming the game in the next mode.
@label=ENDCSCENE
c61630 CALL 60121    ; Check the keyboard (to flush any recent keypress)
 61633 LD HL,(32670) ; #R32670 holds the number of bucks Sam has left
 61636 LD A,H        ; {Has Sam's cash supply run out?
 61637 OR L          ; }
 61638 JR Z,61651    ; Jump if so
@ssub=LD HL,32512+95
 61640 LD HL,32607   ; {Set every bit of the #R32512(screen refresh buffer) so
*61643 LD (HL),255   ; that the entire display will be updated
 61645 DEC L         ;
 61646 JR NZ,61643   ; }
 61648 JP 60032      ; Update the display
; Sam is out of money, so it must be the end of the game. Time to check for a
; new high score and enter demo mode.
*61651 LD HL,(65516) ; Collect the old high score from #R65516
 61654 LD DE,(32668) ; Collect the score from #R32668
 61658 SBC HL,DE     ; Do we have a new high score?
 61660 JR NC,61671   ; Jump if not
 61662 LD (65516),DE ; Otherwise set the new high score
 61666 JR 61671      ; Jump forward to enter demo mode
; This entry point is used by the routine at #R61600 and by the unused routine
; at #R61612.
@keep
*61668 CALL 56576    ; This #R56576@start(startup routine) prepares the bottom
                     ; 4 lines of the screen just after the game has loaded
*61671 XOR A         ; #REGa=0 (demo mode)
 61672 JR 61676      ;
; This entry point is used by the routine at #R31126 to start a new game.
*61674 LD A,1        ; #REGa=1 (new game)
*61676 LD (65518),A  ; Store the game mode (0 or 1) at #R65518, from where it
                     ; will be copied to #R32750
@nowarn
 61679 LD SP,23898   ; Reset the stack pointer
 61682 NOP           ;
 61683 CALL 63662    ; Prepare for demo mode or a new game
 61686 JP 61503      ; Enter the main loop

; Unused
s61689 DEFS 7

; Open or close a door and update the screen refresh buffer
;
; Used by the routines at #R61764 and #R63437. Updates the play area graphics
; for the door being opened or closed, and updates the #R32512(screen refresh
; buffer) (SRB) accordingly.
;
; HL Address of the door status flags (see #R32752)
@label=MOVEDOOR
c61696 LD A,L        ; #REGa=#b240-#b249
 61697 SUB 58        ; #REGa=#b182-#b191
 61699 LD L,A        ; {Point #REGhl at the relevant entry in the door
@ssub=LD H,65462/256
 61700 LD H,255      ; locations table at #R65462}
 61702 LD A,(HL)     ; Pick up the entry from the door locations table
 61703 AND 248       ; Discard bits 0-2 of the x-coordinate
 61705 LD E,A        ; Copy the result to #REGe
 61706 RRCA          ; {Now divide the result by 8
 61707 RRCA          ;
 61708 RRCA          ; }
 61709 LD L,A        ; {Point #REGhl at the entry in the table of Z values at
@ssub=LD H,48384/256
 61710 LD H,189      ; #R48384 that corresponds to the door}
 61712 LD A,(HL)     ; {Flip bit 2 of the Z value for y-coordinates 30-35
 61713 XOR 4         ; (set=closed, reset=open)
 61715 LD (HL),A     ; }
 61716 AND 3         ; Set the zero flag if this is a shop door
 61718 LD BC,8764    ; #REGb=34 (y-coordinate of the base of a house door),
                     ; #REGc=60 (00111100)
 61721 JR NZ,61731   ; Jump unless this is a shop door
 61723 LD BC,9408    ; #REGb=36 (y-coordinate of the base of a shop door),
                     ; #REGc=192 (11000000)
 61726 INC H         ; Point #REGhl at the entry in the table of Z values at
                     ; #R48640 that corresponds to the door
 61727 LD A,(HL)     ; {Flip bits 2, 3 and 4 of the Z value for y-coordinates
 61728 XOR 28        ; 36-41
 61730 LD (HL),A     ; }
; This entry point is used by the routine at #R64549 with #REGb=10
; (y-coordinate of the rope), #REGc=#b255 (11111111), and #REGe=#b208 or #b216.
*61731 LD HL,32766   ; #R32766 holds X, the x-coordinate of the leftmost column
                     ; of the play area on screen
 61734 LD A,E        ; #REGa=x-coordinate of the door or rope (rounded down to
                     ; the nearest multiple of 8)
 61735 SUB (HL)      ; Subtract X
 61736 RRCA          ; {Divide the result by 8
 61737 RRCA          ;
 61738 RRCA          ; }
 61739 CP 4          ; Is the door or rope off-screen to the left or right?
 61741 RET NC        ; Return if so
 61742 LD E,A        ; #REGe=0, 1, 2 or 3, denoting the 8-tile wide column of
                     ; the screen that contains the door or rope
 61743 INC L         ; #REGhl=#R32767, which holds Y, the y-coordinate of the
                     ; topmost row of the play area on screen
 61744 LD A,B        ; #REGa=10 (y-coordinate of the rope), 34 or 36
                     ; (y-coordinate of the base of the door)
 61745 LD B,6        ; Doors are at most 6 tiles high
 61747 SUB (HL)      ; Subtract Y from the y-coordinate of the rope or base of
                     ; the door
 61748 ADD A,A       ; {Multiply by 4
 61749 ADD A,A       ; }
 61750 ADD A,E       ; Add #REGe (0-3)
*61751 LD L,A        ; Point #REGhl at a byte of the #R32512(screen refresh
                     ; buffer) (SRB)
 61752 CP 96         ; Is this part of the door below the visible portion of
                     ; the play area?
 61754 RET NC        ; Return if so
 61755 LD A,(HL)     ; {Set the appropriate bits in the SRB byte for the rope
 61756 OR C          ; or door
 61757 LD (HL),A     ; }
 61758 LD A,L        ; {Compute the LSB of the address of the next SRB byte
 61759 ADD A,4       ; }
 61761 DJNZ 61751    ; Jump back to check whether this SRB byte needs updating
 61763 RET           ;

; Close any doors that need closing
;
; Used by the routine at #R61440. Periodically checks whether any open doors
; need closing, and closes them.
;
; HL #R32681 (main loop task timer)
@label=SHUTDOORS
c61764 LD A,(HL)     ; Collect the current value of the main loop task timer
                     ; from #R32681
 61765 AND 15        ; Is it time to close any currently open doors?
 61767 RET NZ        ; Return if not
@ssub=LD L,32752%256+10
 61768 LD L,250      ; #REGhl will be used to index the door status flags at
                     ; #R32752
*61770 DEC L         ; Point #REGhl at the status flags for the next door
 61771 BIT 4,L       ; Have we checked every door yet?
 61773 RET Z         ; Return if so
 61774 LD A,(HL)     ; Pick up the status flags for this door
 61775 AND 7         ; Is the door currently closed?
 61777 JR Z,61770    ; If so, jump back to check the next door
 61779 DEC (HL)      ; Decrement the door close delay timer in bits 0-2 of the
                     ; status flags
 61780 DEC A         ; Is it time to close the door?
 61781 JR NZ,61770   ; If not, jump back to check the next door
 61783 PUSH HL       ; Save the door status flags pointer
 61784 CALL 61696    ; Close the door and update the screen refresh buffer
 61787 POP HL        ; Restore the door status flags pointer to #REGhl
 61788 JR 61770      ; Jump back to check the next door

; Unused
s61790 DEFB 0

; Collect one byte from a command list
;
; Used by the routine at #R61809. Collects a byte from a character's current
; command list and returns it in #REGa.
;
; H Character number (#b215-#b229)
@label=GETPARAM
c61791 PUSH HL       ; Save the character number
 61792 PUSH DE       ;
 61793 LD L,22       ; Byte #b22 of the character's buffer holds the offset of
                     ; the point reached in the command list (relative to the
                     ; start)
 61795 LD E,(HL)     ; Pick up this offset in #REGe
 61796 INC (HL)      ; Increment the offset
 61797 INC L         ; {Collect the start address of the command list from
 61798 LD A,(HL)     ; bytes #b23 and #b24 of the character's buffer into
 61799 INC L         ; #REGhl
 61800 LD H,(HL)     ;
 61801 LD L,A        ; }
 61802 LD D,0        ; #REGde=offset
 61804 ADD HL,DE     ; Point #REGhl at the byte to collect from the command
                     ; list
 61805 LD A,(HL)     ; Pick up the byte
 61806 POP DE        ;
 61807 POP HL        ; Restore the character number to #REGh
 61808 RET           ;

; Copy two bytes from a command list into a character's buffer
;
; Used by the routines at #R31338, #R31944, #R61948 and #R63304. Copies two
; bytes from a character's current command list into his buffer. Returns with
; #REGhl pointing at the second byte of the pair in the character's buffer.
;
; H Character number (#b215-#b229)
; L Destination for the copied bytes
@label=GETPARAMS
c61809 LD A,2        ; Two bytes will be copied
*61811 PUSH AF       ; Save the byte counter
 61812 CALL 61791    ; Collect one byte from the character's command list
 61815 LD (HL),A     ; Copy it to the character's buffer
 61816 POP AF        ; Restore the byte counter to #REGa
 61817 INC L         ; Point #REGhl at the destination for the second byte
 61818 DEC A         ; Have we copied both bytes yet?
 61819 JR NZ,61811   ; Jump back to copy the second one if not
 61821 DEC L         ; Point #REGhl at the second byte that was copied
 61822 RET           ;

; Get a random number
;
; Used by the routines at #R25039, #R25118, #R25307, #R25420, #R26224, #R28616,
; #R29361, #R30627, #R31126, #R31594, #R62597, #R63209, #R63304, #R63530,
; #R64005 and #R64338. Returns with a random number in #REGa.
@label=GETRANDOM
c61823 PUSH HL       ;
 61824 LD HL,(32734) ; Collect the random number seed from #R32734
 61827 INC HL        ; {Add 257 to it
 61828 INC H         ; }
 61829 LD (32734),HL ; Store the new seed
@nowarn
 61832 LD A,(23672)  ; Collect the LSB of the system variable FRAMES, which is
                     ; incremented every 20ms
 61835 XOR (HL)      ; #REGa=random number
 61836 POP HL        ;
 61837 RET           ;

; Cycle a character buffer group forwards and scroll the screen right 8 columns
;
; Used by the routines at #R30822 and #R60539. Cycles one of the character
; buffer groups in pages #b215-#b221 forwards depending on the current leftmost
; column of the play area that is on screen (X=(#R32766)):
; .
; #TABLE(default,centre,centre)
; { =h X              | =h Character buffer group }
; { 8, 64, 120, 176   | #R55040(#b215) }
; { 16, 72, 128, 184  | #R55296(#b216) }
; { 24, 80, 136, 192  | #R55552(#b217) }
; { 32, 88, 144, 200  | #R55808(#b218) }
; { 40, 96, 152, 208  | #R56064(#b219) }
; { 48, 104, 160, 216 | #R56320(#b220) }
; { 56, 112, 168, 224 | #R56576(#b221) }
; TABLE#
@label=CBUFGFWD
c61838 LD A,(32766)  ; #R32766 holds X, the x-coordinate of the leftmost column
                     ; of the play area on screen
 61841 SUB 8         ; {#REGa=#b0, #b8, #b16, #b24, #b32, #b40 or #b48
*61843 SUB 56        ; (depending on the value of X)
 61845 JR NC,61843   ;
 61847 ADD A,56      ; }
 61849 RRCA          ; {#REGa=#b215-#b221
 61850 RRCA          ;
 61851 RRCA          ;
@ssub=ADD A,55040/256
 61852 ADD A,215     ; }
 61854 LD H,A        ; {Point #REGhl at the last byte of the last buffer in the
 61855 LD L,124      ; group}
@ssub=LD DE,32608+24
 61857 LD DE,32632   ; {Copy the last buffer in the group (buffer 5) to #R32608
 61860 LD BC,25      ; temporarily
 61863 LDDR          ; }
 61865 LD E,124      ; {Point #REGde at the last byte of the last buffer in the
 61867 LD D,H        ; group}
 61868 LD C,100      ; {Move buffers 1-4 up into slots 2-5 (thus overwriting
 61870 LDDR          ; buffer 5)}
@ssub=LD HL,32608+24
 61872 LD HL,32632   ; {Copy buffer 5 from its temporary storage location into
 61875 LD C,25       ; slot 1
 61877 LDDR          ; }
@label=CBUFGFWD_S
 61879 JP 59461      ; Scroll the screen right 8 columns (the routine at
                     ; #R30822 replaces this instruction with a #S/RET/)

; Cycle a character buffer group backwards and scroll the screen left 8 columns
;
; Used by the routines at #R30822 and #R60539. Cycles one of the character
; buffer groups in pages #b215-#b221 backwards depending on the current
; leftmost column of the play area that is on screen (X=(#R32766)):
; .
; #TABLE(default,centre,centre)
; { =h X              | =h Character buffer group }
; { 0, 56, 112, 168   | #R55040(#b215) }
; { 8, 64, 120, 176   | #R55296(#b216) }
; { 16, 72, 128, 184  | #R55552(#b217) }
; { 24, 80, 136, 192  | #R55808(#b218) }
; { 32, 88, 144, 200  | #R56064(#b219) }
; { 40, 96, 152, 208  | #R56320(#b220) }
; { 48, 104, 160, 216 | #R56576(#b221) }
; TABLE#
@label=CBUFGREV
c61882 LD A,(32766)  ; #R32766 holds X, the x-coordinate of the leftmost column
                     ; of the play area on screen
*61885 SUB 56        ; {#REGa=#b0, #b8, #b16, #b24, #b32, #b40 or #b48
 61887 JR NC,61885   ; (depending on the value of X)
 61889 ADD A,56      ; }
 61891 RRCA          ; {#REGa=#b215-#b221
 61892 RRCA          ;
 61893 RRCA          ;
@ssub=ADD A,55040/256
 61894 ADD A,215     ; }
 61896 LD H,A        ; {Point #REGhl at the first byte of the first buffer in
 61897 LD L,0        ; the group}
 61899 LD DE,32608   ; {Copy the first buffer in the group (buffer 1) to
 61902 LD BC,25      ; #R32608 temporarily
 61905 LDIR          ; }
 61907 LD E,B        ; {Point #REGde at the first byte of the first buffer in
 61908 LD D,H        ; the group}
 61909 LD C,100      ; {Move buffers 2-5 down into slots 1-4 (thus overwriting
 61911 LDIR          ; buffer 1)}
 61913 LD HL,32608   ; {Copy buffer 1 from its temporary storage location into
 61916 LD C,25       ; slot 5
 61918 LDIR          ; }
@label=CBUFGREV_S
 61920 JP 59406      ; Scroll the screen left 8 columns (the routine at #R30822
                     ; replaces this instruction with a #S/RET/)

; Check for keypresses when Sam is on the phone
;
; Used by the routines at #R30575 and #R30675. Returns with the zero flag set
; if no key with an ASCII code in the range #b48-#b127 has been pressed.
; Otherwise returns with the ASCII code of the last keypress (converted to
; lower case) in #REGa, or hangs up if 'h' was pressed.
@label=PHONEKEY
@ssub=LD HL,58880+8
c61923 LD HL,58888   ; {Reset Sam's main action timer (in byte #b8 of his
 61926 LD (HL),4     ; buffer) to 4}
 61928 CALL 60121    ; Collect the ASCII code of the last key pressed in #REGa
 61931 RET Z         ; Return if no key with an ASCII code in the range
                     ; #b48-#b127 was pressed
 61932 SET 5,A       ; Convert the ASCII code to lower case
 61934 CP 104        ; Was 'h' (hang up) pressed?
 61936 RET NZ        ; Return if not
 61937 POP BC        ; Drop the return address from the stack
 61938 XOR A         ; #REGa=0
 61939 LD (32764),A  ; Clear all of Sam's status flags at #R32764
 61942 LD (32666),A  ; Clear the ID of the phone that Sam is calling at #R32666
 61945 JP 30506      ; Make a sound effect

; Move the characters
;
; Called from the main loop at #R61483.
@label=MVCHARS
c61948 LD HL,32674   ; The blown fuse delay counters are stored at #R32674
 61951 LD B,5        ; {Set #REGa to a non-zero value if any of the fuses are
 61953 LD A,(HL)     ; currently blown
*61954 INC L         ;
 61955 OR (HL)       ;
 61956 DJNZ 61954    ; }
 61958 LD (32692),A  ; Store this value at #R32692
 61961 CALL 61967    ; Move one character
 61964 CALL 61967    ; Move the next character
*61967 LD HL,32763   ; #R32763 holds the number of the character just moved
 61970 INC (HL)      ; Increment this
 61971 LD A,(HL)     ; #REGa=number of the character to move next
@ssub=CP 58880/256
 61972 CP 230        ; Is it Sam?
 61974 JR NZ,61979   ; Jump if not
@ssub=LD A,55040/256
 61976 LD A,215      ; Rewind to character #b215 (we don't want to move Sam)
 61978 LD (HL),A     ; Store the number of the character to be moved next
*61979 LD H,A        ; #REGh=number of the character to move next (#b215-#b229)
; First check whether the character is immobilised by a blown fuse.
 61980 LD A,(32692)  ; Collect the blown fuse indicator from #R32692
 61983 AND A         ; Are any fuses currently blown?
 61984 CALL NZ,29004 ; If so, check to see whether the character is immobilised
                     ; by a blown fuse
 61987 RET C         ; Return if the character is immobilised
; Now to determine whether to move the character this time round. The answer
; will be yes if bit 7 of byte #b3 of the character's buffer is set (indicating
; that he is running), or if bit 6 of byte #b3 (which is flipped on each pass
; through this routine) is set.
 61988 LD L,3        ; Point #REGhl at byte #b3 of the character's buffer
 61990 BIT 7,(HL)    ; Is the character running?
 61992 JR NZ,62001   ; Jump if so
 61994 LD A,(HL)     ; {Flip bit 6 of byte #b3 of the character's buffer
 61995 XOR 64        ;
 61997 LD (HL),A     ; }
 61998 AND 64        ; Is bit 6 set now?
 62000 RET Z         ; Return if not
; The character will be moved. From this point, the following steps are taken:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Step | =h Action }
; { 1       | If there is an uninterruptible subcommand routine address in
;             bytes #b18 and #b19 of the character's buffer, jump to it }
; { 2       | If there is a continual subcommand routine address in bytes #b27
;             and #b28 of the character's buffer - which there never is - call
;             it (and then return to step 3) }
; { 3       | If there is an interruptible subcommand routine address in bytes
;             #b14 and #b15 of the character's buffer, jump to it }
; { 4       | Restart the command list if bit 4 of byte #b3 of the character's
;             buffer is set (and carry on to step 5) }
; { 5       | If there is a primary command routine address in bytes #b8 and
;             #b9 of the character's buffer, jump to it }
; { 6       | Remove any continual subcommand routine address from bytes #b27
;             and #b28 of the character's buffer }
; { 7       | Collect the next primary command routine address from the command
;             list, place it into bytes #b8 and #b9 of the character's buffer,
;             and jump to it }
; TABLE#
; .
; The address of one of the following uninterruptible subcommand routines (or
; an entry point thereof) may be present in bytes #b18 and #b19 of the
; character's buffer:
; .
; #TABLE(default,centre,:w)
; { =h Address | =h Description }
; { #R31670    | #D31670 }
; { #R64005    | #D64005 }
; { #R64131    | #D64131 }
; { #R64331    | #D64331 }
; TABLE#
; .
; The address of one of the following interruptible subcommand routines (or an
; entry point thereof) may be present in bytes #b14 and #b15 of the character's
; buffer:
; .
; #TABLE(default,centre,:w)
; { =h Address | =h Description }
; { #R25118    | #D25118 }
; { #R31319    | #D31319 }
; { #R62278    | #D62278 }
; { #R62297    | #D62297 }
; { #R62339    | #D62339 }
; { #R62892    | #D62892 }
; { #R62926    | #D62926 }
; { #R62971    | #D62971 }
; { #R63209    | #D63209 }
; { #R63558    | #D63558 }
; TABLE#
; .
; The address of one of the following primary command routines (or an entry
; point thereof) may be present in bytes #b8 and #b9 of the character's buffer:
; .
; #TABLE(default,centre,:w)
; { =h Address | =h Description }
; { #R24925    | #D24925 }
; { #R25081    | #D25081 }
; { #R25307    | #D25307 }
; { #R25385    | #D25385 }
; { #R25420    | #D25420 }
; { #R29354    | #D29354 }
; { #R29361    | #D29361 }
; { #R31338    | #D31338 }
; { #R31594    | #D31594 }
; { #R59147    | Do nothing }
; { #R62976    | #D62976 }
; { #R63198    | #D63198 }
; { #R63281    | #D63281 }
; { #R63304    | #D63304 }
; { #R63423    | #D63423 }
; { #R63520    | #D63520 }
; { #R63530    | #D63530 }
; TABLE#
*62001 LD L,19       ; {Is there an uninterruptible subcommand routine address
 62003 LD A,(HL)     ; in bytes #b18 and #b19 of the character's buffer?
 62004 AND A         ; }
 62005 JR NZ,62075   ; Jump if so
 62007 LD A,H        ; #REGa=number of the character being moved (#b215-#b229)
@ssub=CP 56832/256
 62008 CP 222        ; Does the character belong to one of the character groups
                     ; #b215-#b221?
 62010 JR C,62029    ; Jump if so
; We're dealing with one of the primary characters (#b222-#b229). Here we check
; whether there is a continual subcommand routine address in bytes #b27 and
; #b28 of the character's buffer. The answer is always no.
 62012 LD L,28       ; {Byte #b28 is unused and always holds 0
 62014 LD A,(HL)     ;
 62015 AND A         ; }
 62016 JR Z,62029    ; This jump is always made
 62018 PUSH HL       ; Save the character number
@nowarn
 62019 LD BC,62028   ; {We will return to #R62028 (below) after calling the
 62022 PUSH BC       ; subcommand routine}
 62023 LD B,A        ; {Collect the continual subcommand routine address into
 62024 DEC L         ; #REGbc
 62025 LD C,(HL)     ; }
 62026 PUSH BC       ; Push it onto the stack
 62027 RET           ; Call the continual subcommand routine and then return to
                     ; #R62028 (below)
@label=DONECS
 62028 POP HL        ; Restore the character number to #REGh
; This entry point is used by the routine at #R62080.
*62029 LD L,15       ; {Is there an interruptible subcommand routine address in
 62031 LD A,(HL)     ; bytes #b14 and #b15 of the character's buffer?
 62032 AND A         ; }
 62033 JR NZ,62075   ; Jump if so
; Bit 4 of byte #b3 of the character's buffer is never set, but if it were, it
; would mean that the character's command list should be restarted. Check bit 4
; of byte #b3 now.
 62035 LD L,3        ; {Bit 4 of byte #b3 is unused and always reset
 62037 BIT 4,(HL)    ; }
 62039 JR Z,62055    ; This jump is always made
 62041 RES 4,(HL)    ; Reset bit 4 of byte #b3
 62043 LD L,26       ; {Copy the command list address from bytes #b25 and #b26
 62045 LD D,H        ; of the character's buffer into bytes #b23 and #b24
 62046 LD E,24       ;
 62048 LDD           ;
 62050 LDD           ; }
 62052 LD (DE),A     ; Set byte #b22 of the character's buffer (which holds the
                     ; offset reached in the command list) to 0
 62053 JR 62061      ;
; Now we look for a primary command routine address.
*62055 LD L,9        ; {Is there a primary command routine address in bytes #b8
 62057 LD A,(HL)     ; and #b9 of the character's buffer?
 62058 AND A         ; }
 62059 JR NZ,62075   ; Jump if so
*62061 LD A,H        ; #REGa=number of the character being moved (#b215-#b229)
@ssub=CP 56832/256
 62062 CP 222        ; Does the character belong to one of the character groups
                     ; #b215-#b221?
 62064 JR C,62070    ; Jump if so
 62066 LD L,28       ; {Remove any continual subcommand routine address from
 62068 LD (HL),0     ; bytes #b27 and #b28 of the character's buffer}
*62070 LD L,8        ; {Copy the next primary command routine address from the
 62072 CALL 61809    ; command list into bytes #b8 and #b9 of the character's
                     ; buffer}
*62075 LD B,(HL)     ; {Copy the address of the primary command or subcommand
 62076 DEC L         ; routine into #REGbc
 62077 LD C,(HL)     ; }
 62078 PUSH BC       ; {Make an indirect jump to the routine
 62079 RET           ; }

; Terminate a command
;
; The main entry point is used by the routines at #R31319, #R62976, #R63198,
; #R63304 and #R63423. Removes the primary command routine address from bytes
; #b8 and #b9 of the character's buffer, which has the effect of making the
; routine at #R61948 move immediately to the next command in the command list.
@label=NEXTCMD
c62080 LD L,9        ; Byte #b9 of the buffer contains the MSB of the primary
                     ; command routine address
 62082 JR 62090      ; Jump forward to replace it with 0
; This entry point is used by the routines at #R25118, #R62297, #R62339,
; #R62892, #R62926, #R63209 and #R63558. Removes the interruptible subcommand
; routine address from bytes #b14 and #b15 of the character's buffer, which has
; the effect of making the routine at #R61948 immediately hand control of the
; character back to the primary command.
*62084 LD L,15       ; Byte #b15 of the buffer contains the MSB of the
                     ; interruptible subcommand routine address
 62086 JR 62090      ; Jump forward to replace it with 0
; This entry point is used by the routines at #R64131 and #R64331. Removes the
; uninterruptible subcommand routine address from bytes #b18 and #b19 of the
; character's buffer, which has the effect of making the routine at #R61948
; immediately hand control of the character back to the interruptible
; subcommand or the primary command.
*62088 LD L,19       ; Byte #b19 of the buffer contains the MSB of the
                     ; uninterruptible subcommand routine address
*62090 LD A,(32763)  ; #REGa=number of the character being moved (#b215-#b229)
 62093 LD H,A        ; {Zero out the relevant routine address MSB (in byte #b9,
 62094 LD (HL),0     ; #b15 or #b19) in the character's buffer}
 62096 JP 62029      ; Re-enter the character-moving routine (#R61948) at the
                     ; checkpoint for the interruptible subcommand

; Check whether the door that a character is standing next to is closed
;
; Used by the routines at #R30396, #R62120, #R62216, #R62297 and #R62339.
; Returns with the zero flag set if the door is closed, and with #REGhl
; pointing at the door status flags.
;
; H Character number (#b215-#b230)
@label=CHKDOOR
c62099 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 62101 LD A,(HL)     ; #REGa=character's x-coordinate
@ssub=LD HL,65462-1
 62102 LD HL,65461   ; {Find the first entry in the door location table at
*62105 INC L         ; #R65462 that is greater than the character's
 62106 CP (HL)       ; x-coordinate
 62107 JR NC,62105   ; }
 62109 LD A,L        ; #REGa=LSB of the entry (#b182-#b191)
 62110 ADD A,58      ; {Point #REGhl at one of the 10 door status flag bytes at
 62112 LD L,A        ; at #R32752
@ssub=LD H,32752/256
 62113 LD H,127      ; }
 62115 LD A,(HL)     ; Pick up the door status flags
 62116 AND 7         ; Set the zero flag if the door is closed
 62118 RET           ;

; Unused
s62119 DEFB 0

; Check whether a character can open a door
;
; Used by the routines at #R62216 and #R62278. Returns with the carry flag
; reset if the door is already open, or the character can open the door (either
; because the door requires no key, or because the character has the key);
; otherwise returns with the carry flag set, and the zero flag set if the
; character has no keys. If the door is closed and requires a key, this routine
; will either open it (if the character has the key), or signal that the door
; was knocked on.
;
; H Character number (#b215-#b230)
@label=CANOPEN
c62120 LD D,H        ; #REGd=character number
 62121 CALL 62099    ; Check whether the door is open
 62124 EX DE,HL      ; #REGh=character number
 62125 RET NZ        ; Return (with the carry flag reset) if the door is open
 62126 EX DE,HL      ; Point #REGhl at the door status flags
 62127 LD A,(HL)     ; #REGa=door status flags
 62128 AND A         ; Does the door require a key to unlock it?
 62129 JR NZ,62142   ; Jump if so
; This entry point is used by the routines at #R62216 and #R62339.
*62131 LD A,(HL)     ; {Initialise the door close delay timer (in bits 0-2 of
 62132 ADD A,7       ; the door status flags) to 7
 62134 LD (HL),A     ; }
 62135 PUSH DE       ; Save the character number (in #REGd) briefly
 62136 CALL 63437    ; Open the door
 62139 POP HL        ; Restore the character number to #REGh
 62140 XOR A         ; Reset the carry flag
 62141 RET           ;
; The door requires a key to unlock it.
*62142 LD A,D        ; #REGa=character number (#b215-#b230)
@ssub=CP 58880/256
 62143 CP 230        ; Is this Sam?
 62145 JR NZ,62152   ; Jump if not
 62147 LD A,(32746)  ; Pick up the key inventory flags from #R32746
 62150 JR 62158      ;
*62152 ADD A,10      ; #REGa=character number + #b10 (#b225-#b239)
 62154 LD C,A        ; {Point #REGbc at the entry in the table of key ownership
@ssub=LD B,62177/256
 62155 LD B,242      ; flags at #R62177 that corresponds to this character}
 62157 LD A,(BC)     ; Pick up the key ownership flags
*62158 LD C,A        ; #REGc=character's key ownership flags
 62159 AND (HL)      ; Does the character have the key to this door?
 62160 JR NZ,62131   ; Jump if so
 62162 LD A,L        ; #REGa=LSB of the door status flag byte (#b240-#b249)
 62163 SUB 70        ; #REGa=#b170-#b179
 62165 LD L,A        ; Point #REGhl at the door knock status flags for the door
                     ; (at #R32682)
 62166 SET 7,(HL)    ; Signal: somebody has knocked on the door
 62168 LD A,C        ; #REGa=character's key ownership flags
 62169 AND A         ; Set the zero flag if the character has no keys
 62170 SCF           ; Signal: the character cannot open the door
 62171 EX DE,HL      ; Restore the character number to #REGh
 62172 RET           ;

; Unused
u62173 DEFS 4

; Key ownership flags
;
; Used by the routine at #R62120.
@label=KEYOWNERS
@bfix=DEFB 136       ; Character #R55040(#b215) (bits 3 and 8 set: keys to no.
@bfix=               ; 74 and no. 19)
b62177 DEFB 8        ; Character #R55040(#b215) (bit 3 set: key to no. 74)
@bfix=DEFB 144       ; Character #R55296(#b216) (bits 4 and 8 set: keys to no.
@bfix=               ; 31 and no. 19)
 62178 DEFB 16       ; Character #R55296(#b216) (bit 4 set: key to no. 31)
 62179 DEFB 8        ; Character #R55552(#b217) (bit 3 set: key to no. 74)
 62180 DEFB 16       ; Character #R55808(#b218) (bit 4 set: key to no. 31)
 62181 DEFB 8        ; Character #R56064(#b219) (bit 3 set: key to no. 74)
 62182 DEFB 16       ; Character #R56320(#b220) (bit 4 set: key to no. 31)
 62183 DEFB 8        ; Character #R56576(#b221) (bit 3 set: key to no. 74)
 62184 DEFB 0        ; Character #R56832(#b222): policeman (no keys)
 62185 DEFB 0        ; Character #R57088(#b223): policeman (no keys)
 62186 DEFB 248      ; Character #R57344(#b224): gangster (bits 3-7 set: keys
                     ; to all houses)
 62187 DEFB 248      ; Character #R57600(#b225): Fat Man, Lana (bits 3-7 set:
                     ; keys to all houses)
 62188 DEFB 248      ; Character #R57856(#b226): Daisy (bits 3-7 set: keys to
                     ; all houses)
 62189 DEFB 248      ; Character #R58112(#b227): sniper (bits 3-7 set: keys to
                     ; all houses)
 62190 DEFB 248      ; Character #R58368(#b228): banknote (bits 3-7 set: keys
                     ; to all houses)
 62191 DEFB 248      ; Character #R58624(#b229): banknote, hook (bits 3-7 set:
                     ; keys to all houses)

; 'K' pressed - knock on or open a door
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'K' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=KNOCK
c62192 LD A,64       ; Set bit 6 of #REGa
; This entry point is used by the routine at #R62212 with #REGa=32 (bit 5 set).
*62194 LD (32764),A  ; Set the appropriate status flag at #R32764
@ssub=LD DE,58880+5
 62197 LD DE,58885   ; Point #REGde at byte #b5 of Sam's buffer
 62200 LD BC,3       ; {Copy bytes #b0-#b2 of Sam's buffer (which hold his
 62203 LD L,B        ; current animatory state and location) into bytes #b5-#b7
 62204 LDIR          ; for later retrieval}
 62206 CALL 62268    ; Raise Sam's arm
 62209 JP 60654      ; Make a sound effect

; Make Sam raise his arm
;
; Used by the routines at #R29866, #R30070, #R30092 and #R31713.
;
; H #b230 (Sam)
@label=RAISEARM
c62212 LD A,32       ; Set bit 5 of #REGa
 62214 JR 62194      ; Raise Sam's arm and make a sound effect

; Deal with Sam when he has knocked on or is opening a door
;
; Used by the routine at #R29912 when bit 6 at #R32764 is set (by the routine
; at #R62192), indicating that Sam has knocked on or is opening a door.
;
; H #b230 (Sam)
@refs=29912
@label=SAMBYDOOR
c62216 XOR A         ; {Clear Sam's status flags at #R32764
 62217 LD (32764),A  ; }
 62220 PUSH HL       ; Save Sam's character number (in #REGh) briefly
 62221 CALL 60179    ; Obtain descriptors for Sam's current location
 62224 POP HL        ; Restore Sam's character number to #REGh
 62225 CP 4          ; Is Sam standing behind or in front of a closed door?
 62227 JR NZ,62244   ; Jump if not
 62229 LD L,4        ; Point #REGhl at byte #b4 of Sam's buffer
 62231 BIT 0,(HL)    ; Is Sam indoors?
 62233 JR NZ,62247   ; Jump if so
 62235 CALL 62120    ; Open the door if Sam has the key, or signal that he has
                     ; knocked on the door
 62238 JR 62244      ;
 62240 EX DE,HL      ; {These three instructions are never executed; but if the
 62241 SET 5,(HL)    ; relative jump above were made only when the carry flag
 62243 EX DE,HL      ; is reset (meaning Sam has opened the door), these
                     ; instructions would set bit 5 of the door knock status
                     ; flags for the door (see #R32682)}
*62244 JP 60539      ; Lower Sam's arm and make a sound effect
; Sam is standing behind a closed door.
*62247 CALL 60539    ; Lower Sam's arm and make a sound effect
@ssub=LD H,58880/256
 62250 LD H,230      ; #b230=Sam
; This entry point is used by the routines at #R62976 and #R63423.
*62252 LD D,H        ; #REGd=character number
 62253 CALL 62099    ; Check whether the door is open
 62256 EX DE,HL      ; Restore the character number to #REGh
 62257 RET NZ        ; Return if the door is open
 62258 EX DE,HL      ; Point #REGhl at the door status flags
 62259 JP 62131      ; Open the door

; Unused
s62262 DEFS 2

; Make a character knock on a door or open it with a key
;
; Continues from the routine at #R62976. Raises the character's arm and then
; hands control over to the interruptible subcommand routine at #R62278.
;
; H Character number (#b215-#b229)
@label=CHRKNOCK
c62264 LD L,14       ; {Set the address of the interruptible subcommand routine
@ssub=LD (HL),62278%256
 62266 LD (HL),70    ; in bytes #b14 and #b15 of the character's buffer to
                     ; #R62278}
; This entry point is used by the routines at #R62192, #R62339 and #R63209.
*62268 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 62271 AND 248       ; #REGa=character's base animatory state
 62273 ADD A,4       ; #REGa=animatory state of the character with his arm up
 62275 JP 59861      ; Update the character's animatory state and location and
                     ; update the SRB

; Control a character who is knocking on or opening a door (1)
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R62264. It makes the
; character open the door if he can, or knock and begin waiting for an answer.
;
; H Character number (#b215-#b229)
@refs=61948
@label=BYDOOR1
c62278 CALL 62120    ; Check whether the character can open the door, and open
                     ; it if so
 62281 LD L,16       ; Point #REGhl at byte #b16 of the character's buffer
 62283 JR NC,62325   ; Jump if the character has opened the door
 62285 JR Z,62325    ; Jump if the character has no keys (only policemen have
                     ; no keys)
; This character (who is not a policeman) has knocked on the door.
 62287 LD (HL),E     ; Store the LSB of the address of the door knock status
                     ; flags (see #R32682) for the door in byte #b16 of the
                     ; character's buffer
 62288 INC L         ; {Initialise the counter in byte #b17 of the character's
 62289 LD (HL),30    ; buffer to #b30; this determines how long the character
                     ; will wait for someone to open the door before giving up}
 62291 LD L,14       ; {Change the address of the interruptible subcommand
@ssub=LD (HL),62297%256
 62293 LD (HL),89    ; routine in bytes #b14 and #b15 of the character's buffer
                     ; to #R62297}
 62295 JR 62331      ; Lower the character's arm

; Control a character who has knocked on a door and is waiting for an answer
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R62278. It makes the
; character continue to wait for someone to open the door, or give up and move
; on if he's already waited long enough.
;
; H Character number (#b215-#b229)
@refs=61948
@label=DOORWAIT
c62297 LD D,H        ; #REGd=character number
 62298 CALL 62099    ; Check whether the door is open
 62301 EX DE,HL      ; #REGh=character number
 62302 JP NZ,62084   ; Terminate this subcommand if the door is open
 62305 LD L,17       ; {Decrement the wait counter in byte #b17 of the
 62307 DEC (HL)      ; character's buffer}
 62308 RET NZ        ; Return unless it's now zero
 62309 DEC (HL)      ; Set the wait counter in byte #b17 to #b255; since it
                     ; could just as well be left at 0, this instruction is
                     ; redundant
 62310 DEC L         ; #REGl=#b16
 62311 LD E,(HL)     ; {Point #REGde at the door knock status flags for the
@ssub=LD D,32682/256
 62312 LD D,127      ; door that the character knocked on}
 62314 LD A,(DE)     ; Pick up the flags
 62315 BIT 6,A       ; Is somebody coming to answer the door?
 62317 RET NZ        ; Return if so
; The character has waited long enough for someone to open the door, and will
; now give up and move on.
 62318 LD L,15       ; {Remove the address of this routine from bytes #b14 and
 62320 LD (HL),0     ; #b15 of the character's buffer}
 62322 JP 63198      ; Restart the command list

; Control a character who is knocking on or opening a door (2)
;
; Continues from the routine at #R62278. Lowers the character's arm and then
; hands control over to the interruptible subcommand routine at #R62339.
;
; H Character number (#b215-#b229)
; L #b16
@label=BYDOOR2
c62325 LD (HL),20    ; Initialise the counter in byte #b16 of the character's
                     ; buffer to #b20; this determines how long a policeman
                     ; will keep knocking before busting the door open
 62327 LD L,14       ; {Change the address of the interruptible subcommand
@ssub=LD (HL),62339%256
 62329 LD (HL),131   ; routine in bytes #b14 and #b15 of the character's buffer
                     ; to #R62339}
; This entry point is used by the routines at #R62278, #R62339, #R63118 and
; #R63209 to make a character lower his arm.
*62331 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 62334 AND 248       ; #REGa=character's base animatory state
 62336 JP 59861      ; Update the character's animatory state and location and
                     ; update the SRB

; Control a character who is knocking on or opening a door (3)
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R62325. At this
; point, either the character has opened the door already (in which case this
; routine does nothing more than verify that the door is still open and then
; terminate the subcommand), or he is knocking on the door repeatedly (in which
; case he must be a policeman).
;
; H Character number (#b215-#b229)
@refs=61948
@label=BYDOOR3
c62339 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 62341 BIT 2,(HL)    ; Does the character have his arm raised?
 62343 JR NZ,62331   ; Make the character lower his arm if so
 62345 LD D,H        ; #REGd=character number
 62346 CALL 62099    ; Check whether the door is open
 62349 EX DE,HL      ; #REGh=character number
 62350 JP NZ,62084   ; Terminate this subcommand if the door is open
; This character must be a policeman. In this case, he will knock repeatedly
; for a while, and then open the door by force if there's no answer.
 62353 LD L,16       ; {Decrement the counter in byte #b16 of the policeman's
 62355 DEC (HL)      ; buffer}
 62356 JP NZ,62268   ; Raise the policeman's arm for another knock if the
                     ; counter has not reached zero
 62359 EX DE,HL      ; Point #REGhl at the door status flags
 62360 JP 62131      ; Bust open the door

; Unused
s62363 DEFS 5

; Update the SRB for a window
;
; Used by the routines at #R62468 and #R62597. Updates the #R32512(screen
; refresh buffer) (SRB) for a window (or window-pair) after a light switch has
; been flipped or a blind has been raised or lowered.
;
; H #b185-#b189 (corresponding to the 5th, 4th, 3rd, 2nd or 1st floor)
; L #b0-#b31 or #b64-#b95 (corresponding to the x-coordinate of the window)
@label=WINDOWSRB
c62368 RES 6,L       ; Now #REGl=X'/8 (where X' is the x-coordinate of the left
                     ; edge of the window), and #REGhl points at the Z value
                     ; corresponding to the window
 62370 LD BC,(32766) ; The play area coordinates of the top-left corner of the
                     ; screen are stored at #R32766 and #R32767
 62374 LD A,C        ; #REGa=X (the x-coordinate of the leftmost column of the
                     ; play area on screen)
 62375 RRCA          ; {#REGa=X/8
 62376 RRCA          ;
 62377 RRCA          ; }
 62378 LD E,A        ; #REGe=X/8 (0-31)
 62379 LD A,L        ; #REGa=X'/8 (0-31)
 62380 SUB E         ; #REGa=X'/8-X/8
 62381 CP 4          ; Is the window off screen to the right or left?
 62383 RET NC        ; Return if so
 62384 LD E,A        ; #REGe=0-3 (index of the 8-tile wide column containing
                     ; the window)
 62385 LD A,H        ; {#REGa=1 (5th floor), 2, 3, 4 or 5 (1st floor)
 62386 SUB 184       ; }
 62388 LD D,A        ; {#REGd=6 (5th floor), 12, 18, 24 or 30 (1st floor)
 62389 ADD A,A       ;
 62390 ADD A,D       ;
 62391 ADD A,A       ;
 62392 LD D,A        ; }
 62393 SUB B         ; Subtract Y, the y-coordinate of the topmost row of the
                     ; play area on screen (2, 8, 14 or 20)
 62394 ADD A,4       ; {Is the window off screen?
 62396 CP 21         ; }
 62398 RET NC        ; Return if so
 62399 ADD A,A       ; {#REGa=4*(#REGd-Y+4)+#REGe
 62400 ADD A,A       ;
 62401 ADD A,E       ; }
 62402 LD E,A        ; {Point #REGde at the SRB byte corresponding to the top
@ssub=LD D,32512/256
 62403 LD D,127      ; row of the window}
 62405 LD C,128      ; #REGc=#b128 (10000000)
 62407 LD A,(HL)     ; Pick up the Z value for the window
 62408 LD L,A        ; {Point #REGhl at the Z'' value for the leftmost column
 62409 SET 7,L       ; of tiles in the 8-tile wide segment that contains the
@ssub=LD H,47232/256
 62411 LD H,184      ; window}
 62413 EXX           ;
 62414 LD L,A        ; {Point #REGhl' at the #R48896(Z' value) for the 8x6
@ssub=LD H,48896/256
 62415 LD H,191      ; block of tiles that contains the window}
 62417 LD C,1        ; #REGc'=1 (00000001)
 62419 EXX           ;
; The following loop examines the 8x6 block of tiles that contains the window
; and updates the relevant SRB bytes for the affected window tiles.
*62420 EXX           ;
 62421 RRC C         ; Rotate the set bit in #REGc' one place to the right
 62423 LD A,(HL)     ; #REGa=Z' value
 62424 AND C         ; Set the zero flag if we should use the T values in pages
                     ; #b160, #b162, #b164, #b166, #b168 and #b170
 62425 EXX           ;
 62426 PUSH HL       ; Save the pointer to the Z'' value
 62427 LD L,(HL)     ; #REGl=Z'' value
@ssub=LD H,40988/256
 62428 LD H,160      ; Point #REGhl at the T value in page #b160
 62430 JR Z,62434    ; Jump unless we should use the T values in pages #b172,
                     ; #b174, #b176, #b178, #b180 and #b182
@ssub=LD H,44032/256
 62432 LD H,172      ; Point #REGhl at the T value in page #b172
*62434 LD B,6        ; There are 6 rows of tiles to consider
*62436 LD A,(HL)     ; #REGa=T
 62437 AND 192       ; Keep only bits 6 and 7
 62439 CP 128        ; Is there a window tile here?
 62441 JR NZ,62446   ; Jump if not
 62443 LD A,(DE)     ; {Set the appropriate bit in the SRB byte
 62444 OR C          ;
 62445 LD (DE),A     ; }
*62446 INC H         ; {Point #REGhl at the next T value (in page #b162, #b164,
 62447 INC H         ; #b166, #b168, #b170, #b174, #b176, #b178, #b180 or
                     ; #b182)}
 62448 LD A,E        ; {Point #REGde at the SRB byte for the next row down
 62449 ADD A,4       ;
 62451 LD E,A        ; }
 62452 DJNZ 62436    ; Jump back to consider the tile in the next row down
 62454 LD A,E        ; {Point #REGde back at the SRB byte corresponding to the
 62455 SUB 24        ; top row of the window
 62457 LD E,A        ; }
 62458 POP HL        ; Restore the Z'' value pointer to #REGhl
 62459 INC H         ; Point #REGhl at the Z'' value for the next column of
                     ; tiles to the right (in page #b185-#b191)
 62460 RRC C         ; Rotate the set bit in #REGc one place to the right
 62462 JR NC,62420   ; Jump back until 8 tile columns have been checked
 62464 RET           ;

; Unused
s62465 DEFS 3

; Decrement and check the blown fuse delay counters
;
; Used by the routine at #R61440. Checks each fuse to see whether it was
; recently blown and should now be fixed, and updates the SRB for the windows
; affected by the fuse accordingly.
@label=CHKFUSES
c62468 LD HL,32674   ; Point #REGhl at the first of the blown fuse delay
                     ; counters at #R32674
*62471 LD A,(HL)     ; Pick up a delay counter
 62472 AND A         ; Is it 0?
 62473 JR Z,62478    ; Jump if so to examine the next fuse
 62475 DEC (HL)      ; Otherwise decrement the delay counter (this fuse was
                     ; recently blown)
 62476 JR Z,62484    ; Jump if it's time to fix this fuse
*62478 INC L         ; Move to the next fuse
 62479 BIT 3,L       ; Have we examined all the fuses yet?
 62481 JR Z,62471    ; Jump back if not
 62483 RET           ;
; If we're entering here from the loop above, it's time to fix a fuse that was
; recently blown. This entry point is also used by the routine at #R29866 to
; blow a fuse.
*62484 LD A,L        ; #REGa=#b162-#b167, corresponding to the fuse
@ssub=LD HL,65472-1
@nowarn
 62485 LD HL,65471   ; Prepare #REGhl to scan the table at #R65472
*62488 INC L         ; Point #REGhl at the next byte in the table
 62489 BIT 5,L       ; Have we reached the end of the table yet?
 62491 RET NZ        ; Return if so
 62492 CP (HL)       ; Does this byte correspond to a segment that is affected
                     ; by the fuse?
 62493 JR NZ,62488   ; Jump back to check the next byte if not
 62495 PUSH AF       ; Save the LSB of the address of the blown fuse delay
                     ; counter
 62496 PUSH HL       ; Save the table pointer
 62497 LD A,L        ; {#REGa=x/8 (where x is the x-coordinate of the leftmost
 62498 AND 31        ; column of the 8-tile wide segment that is affected by
                     ; the fuse)}
 62500 LD L,A        ; {Point #REGhl at the Z value for the 5th floor in this
@ssub=LD H,47360/256
 62501 LD H,185      ; segment}
*62503 PUSH HL       ; Save the Z value pointer
 62504 CALL 62368    ; Update the SRB for any windows on this floor
 62507 POP HL        ; Restore the Z value pointer to #REGhl
 62508 INC H         ; Point #REGhl at the Z value for the next floor down in
                     ; this segment
 62509 LD A,H        ; {Have we done every floor down to the first yet?
@ssub=CP 48640/256
 62510 CP 190        ; }
 62512 JR NZ,62503   ; Jump back if not
 62514 POP HL        ; Restore the table pointer to #REGhl
 62515 POP AF        ; Restore the LSB of the address of the blown fuse delay
                     ; counter to #REGa
 62516 JR 62488      ; Check the next byte in the table

; Check whether a character is standing next to a light switch
;
; Used by the routines at #R29052, #R29218, #R29733, #R30070, #R62597, #R62694
; and #R62880. Returns with the zero flag reset if the character is standing
; next to a light switch.
;
; H Character number (#b215-#b230)
@label=BYLIGHT
c62518 LD L,4        ; Point #REGhl at byte #b4 of the character's buffer
 62520 BIT 0,(HL)    ; Is the character indoors?
 62522 RET Z         ; Return if not
 62523 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 62525 LD A,(HL)     ; #REGa=character's animatory state
 62526 RLCA          ; {Set the carry flag if the character is facing left,
 62527 CCF           ; reset it if he's facing right}
 62528 SBC A,A       ; {Now #REGa=0 if the character is facing left, or 2 if
 62529 INC A         ; he's facing right
 62530 ADD A,A       ; }
 62531 INC L         ; Point #REGhl at byte #b1 of the character's buffer
 62532 ADD A,(HL)    ; Add the character's x-coordinate
 62533 LD B,128      ; Bit 7 set: check for a light switch at the left side of
                     ; the room
 62535 LD C,A        ; #REGc=x-coordinate of the front column of the
                     ; character's sprite
 62536 AND 7         ; Is #REGc=0 mod 8?
 62538 JR Z,62548    ; Jump if so (left-hand light switches are at such
                     ; coordinates)
 62540 LD B,64       ; Bit 6 set: check for a light switch at the right side of
                     ; the room
 62542 SUB 7         ; Is #REGc=7 mod 8?
 62544 JR Z,62548    ; Jump if so (right-hand light switches are at such
                     ; coordinates)
*62546 XOR A         ; Set the zero flag (no target object here)
 62547 RET           ;
; This entry point is used by the routines at #R29854 (with #REGb=#b2 to check
; for the presence of a telephone), #R30822 (with #REGb=#b192 to check for a
; light switch) and #R63152 (with #REGb=#b4, #b8, #b16, #b64 or #b128 to check
; for a light switch or window blind).
*62548 LD A,C        ; #REGa=x-coordinate of the front column of the
                     ; character's sprite
 62549 AND 248       ; {#REGc=INT(#REGc/8)
 62551 RRCA          ;
 62552 RRCA          ;
 62553 RRCA          ;
 62554 LD C,A        ; }
 62555 INC L         ; Point #REGhl at byte #b2 of the character's buffer
 62556 LD A,(HL)     ; #REGa=character's y-coordinate
 62557 CP 33         ; This is the y-coordinate of a character who's in a shop
 62559 JR NZ,62563   ; Jump if the character's not in a shop
 62561 SUB 2         ; Adjust a y-coordinate of 33 down to 31
*62563 LD L,254      ; {#REGl=INT(#REGa/6)-1 (0-4)
*62565 INC L         ;
 62566 SUB 6         ;
 62568 JR NC,62565   ; }
 62570 CP 251        ; Is the character's y-coordinate 7, 13, 19, 25, 31 or 33?
 62572 JR NZ,62546   ; Jump if not (he's not on a floor)
 62574 LD A,L        ; #REGa=0-4
 62575 CP 5          ; Is the character's y-coordinate >= 36?
 62577 JR NC,62546   ; Jump if so
 62579 RRCA          ; {#REGa=#b0 (5th floor), #b32 (4th floor), #b64, #b96 or
 62580 RRCA          ; #b128 (1st floor)
 62581 RRCA          ; }
 62582 ADD A,C       ; Add INT(x/8) (where x is the x-coordinate of the front
                     ; column of the character's sprite)
 62583 LD E,A        ; Transfer this to #REGe
@ssub=LD D,62720/256
 62584 LD D,245      ; Point #REGde at an entry in the fixture location table
                     ; at #R62720
 62586 LD A,(DE)     ; Pick up the entry
 62587 AND B         ; Is there an object of the desired type here?
 62588 RET Z         ; Return if not
 62589 LD A,L        ; #REGa=0-4
@ssub=ADD A,47424/256
 62590 ADD A,185     ; {#REGb=#b185-#b189
 62592 LD B,A        ; }
 62593 LD A,(DE)     ; Pick up the entry from the fixture location table at
                     ; #R62720
 62594 SET 6,C       ; Point #REGbc at the window flags for the character's
                     ; location (in one of the data blocks at #R47424, #R47680,
                     ; #R47936, #R48192, or #R48448)
 62596 RET           ; Return with the zero flag reset

; Make a character flip a light switch off or on occasionally
;
; Used by the routines at #R62892 and #R62976. If the character is standing
; next to a light switch, this routine makes him flip the switch on (if it's
; off and affects the lights in more than one window or window-pair), or
; consider flipping the switch off (if it's on and affects the lights in only
; one window or window-pair).
;
; H Character number (#b215-#b229)
@label=LSWITCH1
c62597 CALL 62518    ; Is the character standing next to a light switch?
 62600 RET Z         ; Return if not
 62601 BIT 5,A       ; Does the light switch affect lights in more than one
                     ; window or window-pair?
 62603 JR NZ,62626   ; Jump if so
; This entry point is used by the routine at #R62880.
*62605 LD A,(BC)     ; #REGa=window flags for the character's location
 62606 BIT 5,A       ; Is the light switch here in the 'off' position?
 62608 RET NZ        ; Return if so
; This entry point is used by the routine at #R62694.
*62609 CALL 61823    ; Get a random number in #REGa
 62612 CP 110        ; Is it greater than #b109?
 62614 RET NC        ; Return if so
; This entry point is used by the routines at #R29052 and #R30070.
*62615 LD A,32       ; Bit 5 set: light switch toggle
; This entry point is used by the routines at #R30092 (with #REGa=#b1 or #b64),
; #R30822 (with #REGa=#b0) and #R63209 (with #REGa=#b1, #b32 or #b64).
*62617 PUSH BC       ; Push the address of the window flags onto the stack
 62618 EX (SP),HL    ; Transfer this address into #REGhl
 62619 XOR (HL)      ; {Flip bit 1, 5 or 6 of the window flags, thus flipping
 62620 LD (HL),A     ; the light switch that affects the window, or raising or
                     ; lowering the blind}
 62621 CALL 62368    ; Update the SRB for the window
 62624 POP HL        ; Restore the character number to #REGh
 62625 RET           ;
; The character is standing next to a light switch that affects lights in more
; than one window or window-pair.
*62626 LD A,(BC)     ; #REGa=window flags for the character's location
; This entry point is used by the routine at #R29052.
*62627 BIT 5,A       ; Is the light switch here in the 'on' position?
 62629 RET Z         ; Return if so
; This entry point is used by the routines at #R30070, #R30822 and #R62694.
*62630 PUSH BC       ; Push the address of the window flags onto the stack
 62631 EX (SP),HL    ; Transfer this address into #REGhl
 62632 LD A,C        ; #REGa=LSB of the address of the window flags
 62633 LD BC,1056    ; #REGb=4 (the four central windows on a floor of the
                     ; hotel span four 8-tile wide segments), #REGc=#b32 (bit 5
                     ; set: light switch toggle)
 62636 CP 72         ; Are we dealing with a window that is second from the
                     ; left in the hotel?
 62638 JR NZ,62657   ; Jump if not
; A light switch that affects the lights in the the four central windows on one
; of the floors of the hotel has been flipped.
*62640 LD L,72       ; Point #REGhl at the window flags for the leftmost of the
                     ; four central windows
*62642 PUSH HL       ; Save the window flags pointer
 62643 PUSH BC       ; Save the segment counter
 62644 LD A,(HL)     ; {Flip bit 5 of the window flags, thus flipping the light
 62645 XOR C         ; switch into the 'on' or 'off' position
 62646 LD (HL),A     ; }
 62647 CALL 62368    ; Update the SRB for the window
 62650 POP BC        ; Restore the segment counter
 62651 POP HL        ; Restore the window flags pointer to #REGhl
 62652 INC L         ; Move to the next window along
 62653 DJNZ 62642    ; Jump back until all four windows have been done
 62655 POP HL        ; Restore the character number to #REGh
 62656 RET           ;
*62657 CP 75         ; Are we dealing with a window that is second from the
                     ; right in the hotel?
 62659 JR Z,62640    ; Jump if so
; A light switch that affects the lights in the windows on more than one floor
; of a building other than the hotel has been flipped.
 62661 SUB C         ; Subtract #b32 from the LSB of the window flags address
 62662 DEC B         ; #REGb=3 (there are three floors to consider)
 62663 NOP           ;
 62664 LD E,A        ; Point #REGde at the fixture location flags for the area
                     ; on the fourth floor (if any) above the light switch
@ssub=LD H,47680/256
 62665 LD H,186      ; The fourth floor window flags are in bytes #b64-#b95 of
                     ; page #b186 (at #R47680)
*62667 LD A,(DE)     ; Collect the fixture location flags for the fourth floor
 62668 BIT 5,A       ; Does the light switch affect any windows on this floor?
 62670 JR Z,62685    ; Jump if not
 62672 PUSH HL       ; Save the window flags pointer
 62673 PUSH DE       ; Save the fixture location flags pointer
 62674 PUSH BC       ; Save the floor counter
 62675 LD A,(HL)     ; {Flip bit 5 of the window flags, thus flipping the light
 62676 XOR 32        ; switch into the 'on' or 'off' position
 62678 LD (HL),A     ; }
 62679 CALL 62368    ; Update the SRB for the windows on this floor
 62682 POP BC        ; Restore the floor counter to #REGb
 62683 POP DE        ; Restore the fixture location flags pointer to #REGde
 62684 POP HL        ; Restore the window flags pointer to #REGhl
*62685 INC H         ; Point #REGhl at the window flags for the next floor down
 62686 LD A,E        ; {Point #REGde at the fixture location flags for the next
 62687 ADD A,32      ; floor down
 62689 LD E,A        ; }
 62690 DJNZ 62667    ; Jump back until the windows on the fourth, third and
                     ; second floors have been dealt with
 62692 POP HL        ; Restore the character number to #REGh
 62693 RET           ;

; Make a character flip a light switch on or off occasionally
;
; Used by the routine at #R62926. If the character is standing next to a light
; switch, this routine makes him flip the switch off (if it's on and affects
; the lights in more than one window or window-pair), or consider flipping the
; switch on (if it's off and affects the lights in only one window or
; window-pair).
;
; H Character number (#b215-#b229)
@refs=62926
@label=LSWITCH2
c62694 CALL 62518    ; Is the character standing next to a light switch?
 62697 RET Z         ; Return if not
 62698 BIT 5,A       ; Reset the zero flag if the light switch affects the
                     ; lights in more than one window or window-pair
; This entry point is used by the routine at #R62880.
*62700 LD A,(BC)     ; #REGa=window flags
 62701 JR NZ,62709   ; Jump if the light switch affects the lights in more than
                     ; one window or window-pair
 62703 BIT 5,A       ; Is the light switch in the 'on' position?
 62705 RET Z         ; Return if so
 62706 JP 62609      ; Flip the light switch on 109 times out of 256
*62709 BIT 5,A       ; Is the light switch in the 'off' position?
 62711 RET NZ        ; Return if so
 62712 JP 62630      ; Flip the light switch off

; Unused
s62715 DEFS 5

; Fixture locations
;
; Used by the routine at #R62518. The data here is split into 5 groups of 32
; bytes. Each byte corresponds to a segment of the play area that is eight
; tiles wide, and level with the floor of a building. A bit set in any byte
; indicates the presence of an object in that segment.
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit | =h Meaning if set }
; { 7      | Light switch on the left side of the room }
; { 6      | Light switch on the right side of the room }
; { 5      | Any light switches here affect the lights in more than one window
;            or window-pair }
; { 4      | Blind on the left-hand window }
; { 3      | Blind on the right-hand window }
; { 2      | Blind on a large central window }
; { 1      | Telephone }
; { 0      | Unused }
; TABLE#
; .
; The first group of bytes corresponds to the 5th floor.
@label=FIXTURES
b62720 DEFB 0,0,0,0,0,0,0        ; 0<=x<=55: No fixtures here
 62727 DEFB 70,224,32,32,224,132 ; 56<=x<=103: Hotel
 62733 DEFB 0,0,0,0,0,0,0,0      ; {104<=x<=255: No fixtures here
 62741 DEFB 0,0,0,0,0,0,0,0      ;
 62749 DEFB 0,0,0                ; }
; The next group of bytes corresponds to the 4th floor.
 62752 DEFB 88,0,152             ; 0<=x<=23: Apartment building next to no. 74
 62755 DEFB 0                    ; 24<=x<=31: Catwalk
 62756 DEFB 146,224,128          ; 32<=x<=55: No. 74
 62759 DEFB 68,224,32,32,224,134 ; 56<=x<=103: Hotel
 62765 DEFB 0,0,0                ; 104<=x<=127: No fixtures here
 62768 DEFB 64,0,128             ; 128<=x<=151: Police station
 62771 DEFB 224                  ; 152<=x<=159: No. 27
 62772 DEFB 0,0                  ; 160<=x<=175: No fixtures here
 62774 DEFB 66,216,0,152         ; 176<=x<=207: Apartment building next to no.
                                 ; 19
 62778 DEFB 0,0                  ; 208<=x<=223: No fixtures here
 62780 DEFB 88,144               ; 224<=x<=239: No. 17
 62782 DEFB 88,160               ; 240<=x<=255: No. 15
; The next group of bytes corresponds to the 3rd floor.
 62784 DEFB 64,0,154             ; 0<=x<=23: Apartment building next to no. 74
 62787 DEFB 0                    ; 24<=x<=31: No fixtures here
 62788 DEFB 82,224,128           ; 32<=x<=55: No. 74
 62791 DEFB 70,224,32,32,224,132 ; 56<=x<=103: Hotel
 62797 DEFB 88,184               ; 104<=x<=119: No. 31
 62799 DEFB 0                    ; 120<=x<=127: No fixtures here
 62800 DEFB 68,0,132             ; 128<=x<=151: Police station
 62803 DEFB 32                   ; 152<=x<=159: No. 27
 62804 DEFB 0,0                  ; 160<=x<=175: No fixtures here
 62806 DEFB 64,216,0,136         ; 176<=x<=207: Apartment building next to no.
                                 ; 19
 62810 DEFB 96,130               ; 208<=x<=223: No. 19
 62812 DEFB 90,168               ; 224<=x<=239: No. 17
 62814 DEFB 90,160               ; 240<=x<=255: No. 15
; The next group of bytes corresponds to the 2nd floor.
 62816 DEFB 64,0,152             ; 0<=x<=23: Apartment building next to no. 74
 62819 DEFB 0                    ; 24<=x<=31: No fixtures here
 62820 DEFB 80,224,138           ; 32<=x<=55: No. 74
 62823 DEFB 68,224,32,32,224,132 ; 56<=x<=103: Hotel
 62829 DEFB 66,160               ; 104<=x<=119: No. 31
 62831 DEFB 0                    ; 120<=x<=127: No fixtures here
 62832 DEFB 70,0,132             ; 128<=x<=151: Police station
 62835 DEFB 32                   ; 152<=x<=159: No. 27
 62836 DEFB 0,0                  ; 160<=x<=175: No fixtures here
 62838 DEFB 64,216,0,130         ; 176<=x<=207: Apartment building next to no.
                                 ; 19
 62842 DEFB 96,128               ; 208<=x<=223: No. 19
 62844 DEFB 88,48                ; 224<=x<=239: No. 17
 62846 DEFB 88,32                ; 240<=x<=255: No. 15
; The next group of bytes corresponds to the 1st floor.
 62848 DEFB 192                  ; 0<=x<=7: Left-hand shop under the apartments
                                 ; next to no. 74
 62849 DEFB 0                    ; 8<=x<=15: No fixtures here
 62850 DEFB 192                  ; 16<=x<=23: Right-hand shop under the
                                 ; apartments next to no. 74
 62851 DEFB 0                    ; 24<=x<=31: No fixtures here
 62852 DEFB 66,224,128           ; 32<=x<=55: No. 74
 62855 DEFB 0,0,0,0,0,0          ; 56<=x<=103: Hotel
 62861 DEFB 88,160               ; 104<=x<=119: No. 31
 62863 DEFB 0                    ; 120<=x<=127: No fixtures here
 62864 DEFB 0,0,0                ; 128<=x<=151: Police station
 62867 DEFB 160                  ; 152<=x<=159: No. 27
 62868 DEFB 0,0                  ; 160<=x<=175: No fixtures here
 62870 DEFB 0,218,0,128          ; 176<=x<=207: Apartment building next to no.
                                 ; 19
 62874 DEFB 224,128              ; 208<=x<=223: No. 19
 62876 DEFB 192,160              ; 224<=x<=239: No. 17
 62878 DEFB 192,160              ; 240<=x<=255: No. 15

; Make a character flip a light switch off occasionally
;
; Used by the unused routine at #R62966 and the routine at #R62976. If the
; character is standing next to a light switch, this routine makes him flip the
; switch off (if it's on and affects the lights in more than one window or
; window-pair), or consider flipping the switch off (if it's on and affects the
; lights in only one window or window-pair).
;
; H Character number (#b215-#b229)
@label=LSWITCH3
c62880 CALL 62518    ; Is the character standing next to a light switch?
 62883 RET Z         ; Return if not
 62884 BIT 5,A       ; Does the light switch affect the lights in more than one
                     ; window or window pair?
 62886 JP Z,62605    ; If not, flip the light switch off 109 times out of 256
 62889 JP 62700      ; Flip the light switch off

; Guide a character up or down staircases
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R62976. It guides
; the character down to the first floor of a building (so that he can then
; leave it on the way to his final destination), or up to the floor he is
; heading for.
;
; H Character number (#b215-#b229)
@refs=61948
@label=UPDOWNSC
c62892 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 62894 BIT 0,(HL)    ; Is the character midstride?
 62896 JP NZ,60506   ; If so, move the character from the midstride position
                     ; and update the SRB
 62899 LD L,3        ; {Has this character's command list been marked for a
 62901 BIT 4,(HL)    ; restart?}
 62903 JP NZ,62084   ; Terminate this subcommand if so (this jump is never made
                     ; because bit 4 of byte #b3 is unused)
 62906 DEC L         ; #REGl=2
 62907 LD A,(HL)     ; #REGa=character's y-coordinate
 62908 LD L,16       ; {Compare it with the y-coordinate of the character's
 62910 CP (HL)       ; intermediate or final destination}
 62911 JP Z,62084    ; Terminate this subcommand if they match
 62914 PUSH AF       ; Save the carry flag
 62915 CALL 62597    ; Make the character consider flipping a light switch
 62918 POP AF        ; Restore the carry flag
 62919 JP C,60320    ; Make the character move down if he's above the level of
                     ; his destination
 62922 JP 60315      ; Otherwise make the character move up

; Unused
s62925 DEFB 0

; Guide a character across a floor to his destination
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R62976. It guides
; the character left or right across the floor of a building to his final
; destination.
;
; H Character number (#b215-#b229)
@refs=61948
@label=WALKFLOOR
@nowarn
c62926 LD BC,62694   ; Point #REGbc at the routine at #R62694
; This entry point is used by the unused routine at #R62966 (with
; #REGbc=#R62880) and by the routine at #R62971 (with #REGbc=#R62958: #S/RET/).
*62929 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 62931 BIT 0,(HL)    ; Is the character midstride?
 62933 JP NZ,60506   ; If so, move the character from the midstride position
                     ; and update the SRB
 62936 LD L,3        ; {Has this character's command list been marked for a
 62938 BIT 4,(HL)    ; restart?}
 62940 JP NZ,62084   ; Terminate this subcommand if so (this jump is never made
                     ; because bit 4 of byte #b3 is unused)
 62943 LD L,1        ; {Collect the character's x-coordinate from byte #b1 of
 62945 LD A,(HL)     ; his buffer}
 62946 LD L,16       ; {Compare this with the character's intermediate or final
 62948 CP (HL)       ; destination x-coordinate}
 62949 JP Z,62084    ; Terminate this subcommand if they match
 62952 PUSH AF       ; Save the carry flag
@nowarn
 62953 LD DE,62959   ; {Push the address of the instruction at #R62959 (below)
 62956 PUSH DE       ; onto the stack}
 62957 PUSH BC       ; {Make an indirect jump to the routine whose address is
@label=DONOWT2
 62958 RET           ; in #REGbc, and then return to #R62959 (below)}
@label=DONECMD
 62959 POP AF        ; Restore the carry flag
 62960 JP C,60334    ; Make the character move right if he's to the left of his
                     ; intermediate or final destination
 62963 JP 60347      ; Otherwise make the character move left

; Make a character consider switching a light off (unused)
@label=XFLIPLT
@nowarn
c62966 LD BC,62880   ; Point #REGbc at the routine at #R62880
 62969 JR 62929      ; Move the character left or right towards his destination

; Guide a character from one spot on the sidewalk or road to another
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R62976. It guides
; the character left or right over the sidewalk or road towards his
; destination.
;
; H Character number (#b215-#b229)
@refs=61948
@label=WALKSTREET
@nowarn
c62971 LD BC,62958   ; Point #REGbc at the #S/RET/ instruction at #R62958
 62974 JR 62929      ; Move the character left or right towards his destination

; Make a character go to a location
;
; Used by many command lists to make a character go to a specified place.
;
; H Character number (#b215-#b229)
@refs=61948
@label=GOTO
c62976 CALL 31944    ; Collect the destination coordinates from the command
                     ; list
 62979 JR 62998      ;
; This entry point is used by the command lists at #R25066, #R64756, #R64790,
; #R64816, #R64846, #R64878 and #R64902 to make a character carry Sam to a
; location.
 62981 CALL 31944    ; Collect the destination coordinates from the command
                     ; list
@ssub=LD (HL),62986%256
 62984 LD (HL),10    ; Change the address of the primary command routine in
                     ; bytes #b8 and #b9 of the character's buffer to #R62986
                     ; (below)
@label=CARRYSAM
 62986 CALL 63128    ; Exit now if the character is midstride
 62989 CALL 60812    ; Determine the next move the character should make to
                     ; reach his destination
 62992 AND A         ; Has the character reached his destination?
 62993 JR Z,63007    ; Move to the next command in the command list if so
 62995 JP 29479      ; Move the character one step towards his destination
; The character is not carrying Sam.
@ssub=LD (HL),63000%256
*62998 LD (HL),24    ; Change the address of the primary command routine in
                     ; bytes #b8 and #b9 of the character's buffer to #R63000
                     ; (below)
@label=GOTODEST
 63000 CALL 63128    ; Exit now if the character is midstride
 63003 CALL 60812    ; Determine the next move the character should make to
                     ; reach his destination
 63006 AND A         ; Has the character reached his destination?
*63007 JP Z,62080    ; Move to the next command in the command list if so
 63010 CP 5          ; Is the character standing next to a closed door?
 63012 JR NC,63100   ; Jump if so
 63014 PUSH AF       ; Save the direction indicator
@nowarn
 63015 LD BC,62926   ; Point #REGbc at the interruptible subcommand routine at
                     ; #R62926
 63018 LD L,13       ; {Pick up the location/destination indicator from byte
 63020 LD A,(HL)     ; #b13 of the character's buffer}
 63021 AND A         ; Is the character on the sidewalk or the road (or on the
                     ; front steps of the hotel but heading somewhere other
                     ; than the hotel)?
 63022 JR NZ,63051   ; Jump if not
@nowarn
 63024 LD BC,62971   ; Point #REGbc at the interruptible subcommand routine at
                     ; #R62971
*63027 LD L,16       ; {Place the x- or y-coordinate of the character's
 63029 LD (HL),E     ; intermediate destination into byte #b16 of his buffer}
 63030 LD L,15       ; {Copy the interruptible subcommand routine address in
 63032 LD (HL),B     ; #REGbc (#R62892, #R62926 or #R62971) into bytes #b14 and
 63033 DEC L         ; #b15 of the character's buffer
 63034 LD (HL),C     ; }
*63035 POP AF        ; Restore the direction indicator (1-4) to #REGa
; This entry point is used by the routines at #R29361 and #R31362.
*63036 DEC A         ; Does the character need to move right next to reach his
                     ; destination?
 63037 JP Z,60334    ; Jump if so
 63040 DEC A         ; Does the character need to move left?
 63041 JP Z,60347    ; Jump if so
 63044 DEC A         ; Does the character need to move up?
 63045 JP Z,60315    ; Jump if so
 63048 JP 60320      ; Make the character move down
; The character is not on the sidewalk or road.
*63051 DEC A         ; Is the character's destination in a region other than
                     ; the one he's in at the moment?
 63052 JR NZ,63083   ; Jump if so
 63054 LD L,2        ; {Collect the character's y-coordinate from byte #b2 of
 63056 LD A,(HL)     ; his buffer}
 63057 CP 31         ; Is the character on or below the level of the first
                     ; floor?
 63059 JR NC,63074   ; Jump if so
 63061 LD L,10       ; Point #REGhl at byte #b10 of the character's buffer
 63063 LD E,(HL)     ; #REGe=character's destination x-coordinate
 63064 INC L         ; #REGl=#b11
 63065 CP (HL)       ; Is the character's y-coordinate the same as that of his
                     ; destination?
 63066 JR Z,63027    ; If so, send the character to his destination
                     ; x-coordinate (on the same floor)
 63068 LD E,(HL)     ; #REGe=character's destination y-coordinate
@nowarn
*63069 LD BC,62892   ; Point #REGbc at the interruptible subcommand routine at
                     ; #R62892
 63072 JR 63027      ; Send the character up or down the stairs towards his
                     ; destination
; The character is in the same region as his destination, and on or below the
; level of the first floor.
*63074 LD L,4        ; Byte #b4 of the character's buffer holds his
                     ; z-coordinate
 63076 BIT 0,(HL)    ; Is the character indoors (z=1)?
 63078 CALL NZ,62597 ; If so, make him consider flipping a light switch
 63081 JR 63035      ; Move the character one step closer to his destination
; The character's destination is in a region other than the one he's in at the
; moment.
*63083 LD L,2        ; {Collect the character's y-coordinate from byte #b2 of
 63085 LD A,(HL)     ; his buffer}
 63086 LD E,31       ; This is the y-coordinate of the first floor
 63088 CP E          ; Is the character above the first floor?
 63089 JR C,63069    ; Jump if so to send him down to the first floor
 63091 LD L,4        ; Byte #b4 of the character's buffer holds his
                     ; z-coordinate
 63093 BIT 0,(HL)    ; Is the character indoors (z=1)?
 63095 CALL NZ,62880 ; If so, make him consider flipping a light switch off
                     ; before leaving
 63098 JR 63035      ; Move the character one step closer to his destination
; The character is standing next to a closed door. This entry point is used by
; the routines at #R29361 and #R31362.
*63100 JP Z,62252    ; Jump if the character is standing behind a closed door
 63103 LD L,15       ; {Prepare the MSB of the address of the interruptible
@ssub=LD (HL),62278/256
 63105 LD (HL),243   ; subcommand routine at #R62278 in byte #b15 of the
                     ; character's buffer}
 63107 JP 62264      ; Prepare the LSB and raise the character's arm

; Make a character stop running and restart the command list
;
; Continues from the routine at #R63281.
;
; H Character number (#b215-#b229)
@label=WALKRST
c63110 LD L,3        ; {Reset bit 7 of byte #b3 of the character's buffer (he's
 63112 RES 7,(HL)    ; no longer running)}
 63114 JP 63198      ; Restart the command list

; Unused
s63117 DEFB 0

; Check whether a gangster is midstride or has his arm raised
;
; Used by the routine at #R31319. Returns to the caller unless the gangster is
; midstride or has his arm raised; otherwise moves the gangster from the
; midstride position or lowers his arm, and returns to the routine at #R61948
; to move the next character.
;
; H Gangster's character number (#b215-#b224)
@label=CHKHOOD
c63118 LD L,0        ; Point #REGhl at byte #b0 of the gangster's buffer
 63120 BIT 2,(HL)    ; Is the gangster's arm raised?
 63122 JR Z,63130    ; Jump if not
 63124 POP BC        ; Drop the return address from the stack
 63125 JP 62331      ; Lower the gangster's arm

; Check whether a character is midstride
;
; Used by the routines at #R29361, #R31362, #R62976 and #R63209. Returns to the
; caller unless the character is midstride; otherwise moves the character from
; the midstride position and returns to the routine at #R61948 to move the next
; character.
;
; H Character number (#b215-#b229)
@label=MIDSTRIDE
c63128 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
; This entry point is used by the routine at #R63118.
*63130 BIT 0,(HL)    ; Is the character midstride?
 63132 RET Z         ; Return if not
 63133 POP BC        ; Drop the return address from the stack
 63134 JP 60506      ; Move the character from the midstride position and
                     ; update the SRB

; Unused
s63137 DEFB 0

; Calculate the x-coordinate of the front column of a character's sprite
;
; Used by the routines at #R27892, #R30822 and #R63152. Returns with #REGc
; holding the x-coordinate of the front column of a character's sprite (that
; is, the left column if he's facing left, or the right column if he's facing
; right), #REGa holding the remainder when #REGc is divided by 8, and the zero
; flag set if the remainder is 0.
;
; H Character number (#b215-#b230)
@label=FRONTX
c63138 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 63140 LD A,(HL)     ; #REGa=character's animatory state
 63141 RLCA          ; {Set the carry flag if the character is facing left,
 63142 CCF           ; reset it if he's facing right}
 63143 SBC A,A       ; {Now #REGa=0 if the character is facing left, or 2 if
 63144 INC A         ; he's facing right
 63145 ADD A,A       ; }
 63146 INC L         ; Point #REGhl at byte #b1 of the character's buffer
 63147 ADD A,(HL)    ; Add the character's x-coordinate
 63148 LD C,A        ; #REGc=x-coordinate of the front column of the
                     ; character's sprite
 63149 AND 7         ; #REGa=#REGc%8, with the zero flag if this is 0
 63151 RET           ;

; Check whether a character is standing next to a light switch or window blind
;
; Used by the routines at #R30092 and #R63209. Returns with the zero flag reset
; if the character is standing next to a light switch or a window that has a
; blind, and with the bit set in #REGa identifying the fixture that was found.
;
; H Character number (#b215-#b230)
@label=LIGHTBLIND
c63152 LD L,4        ; Point #REGhl at byte #b4 of the character's buffer
 63154 BIT 0,(HL)    ; Is the character indoors?
 63156 RET Z         ; Return if not
 63157 CALL 63138    ; Collect in #REGc the x-coordinate of the front column of
                     ; the character's sprite
 63160 LD B,128      ; Bit 7 set: check for a light switch at the left side of
                     ; the room
 63162 JR Z,63184    ; Jump if #REGc=0 mod 8
 63164 LD B,16       ; Bit 4 set: check for a blind on the left-hand window
 63166 SUB 3         ; Does #REGc=1 or 2 mod 8?
 63168 JR C,63184    ; Jump if so
 63170 LD B,4        ; Bit 2 set: check for a blind on a large central window
 63172 SUB 2         ; Does #REGc=3 or 4 mod 8?
 63174 JR C,63184    ; Jump if so
 63176 LD B,8        ; Bit 3 set: check for a blind on the right-hand window
 63178 SUB 2         ; Does #REGc=5 or 6 mod 8?
 63180 JR C,63184    ; Jump if so
 63182 LD B,64       ; Bit 6 set: check for a light switch at the right side of
                     ; the room (when #REGc=7 mod 8)
*63184 PUSH BC       ; Save the fixture identifier bit (in #REGb)
 63185 CALL 62548    ; Is the character standing next to a light switch or a
                     ; window that has a blind?
 63188 JR NZ,63193   ; Jump if so
 63190 POP AF        ; Restore the fixture identifier bit to #REGa (though we
                     ; don't need it now)
 63191 XOR A         ; Set the zero flag
 63192 RET           ;
*63193 POP AF        ; Restore the fixture identifier bit to #REGa
 63194 AND A         ; Reset the zero flag
 63195 RET           ;

; Unused
s63196 DEFS 2

; Restart the command list
;
; Used by the routines at #R24925, #R31362, #R62297 and #R63110, and by the
; command lists at #R64764, #R64918, #R64928, #R64948, #R64964, #R64976,
; #R64991, #R65002, #R65016, #R65030, #R65034, #R65044, #R65059, #R65076,
; #R65097, #R65112, #R65143 and #R65184.
;
; H Character number (#b215-#b229)
@refs=61948
@label=RESTART
c63198 LD L,22       ; Byte #b22 of the character's buffer holds the offset of
                     ; the point reached in the command list (relative to the
                     ; start)
 63200 LD (HL),0     ; Set this offset to 0, thus restarting the command list
 63202 JP 62080      ; Remove any existing primary command routine address from
                     ; the character's buffer

; Unused
s63205 DEFS 4

; Make a character walk up or down
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a character's buffer by the routine at #R63304. It makes a
; character start or continue walking up or down towards his walkabout
; destination, stopping occasionally on the way to flip a light switch or raise
; or lower a window blind.
;
; H Character number (#b215-#b229)
@refs=61948
@label=WALK
c63209 CALL 63128    ; Exit now if the character is midstride
 63212 BIT 2,(HL)    ; Is the character's arm raised?
 63214 JP NZ,62331   ; Lower his arm if so
; This entry point is used by the routine at #R31319.
*63217 LD L,17       ; The counter in byte #b17 of the character's buffer
                     ; determines the delay until the character will next
                     ; consider flipping a light switch or raising or lowering
                     ; a window blind
 63219 DEC (HL)      ; Decrement that counter
 63220 JR NZ,63266   ; Jump unless the counter has reached 0
 63222 LD (HL),4     ; Reset the counter to 4 (in case the character is not
                     ; standing next to a light switch or window blind at the
                     ; moment)
 63224 CALL 63152    ; Is the character standing next to a light switch or
                     ; window blind?
 63227 JR Z,63266    ; Jump if not
; The character is standing next to a light switch or window blind.
 63229 CP 64         ; Is the character standing next to a window blind?
 63231 JR C,63242    ; Jump if so
 63233 LD A,(DE)     ; #REGa=fixture location flags
 63234 BIT 5,A       ; Does the light switch affect the lights in more than one
                     ; window or window pair?
 63236 JR NZ,63266   ; Jump if so (the character will not flip the switch)
 63238 LD A,32       ; Bit 5 set: light switch toggle
 63240 JR 63250      ;
*63242 CP 8          ; Set the zero flag if the character standing next to the
                     ; right-hand window of a pair
 63244 LD A,1        ; Bit 0 set: right-hand window blind toggle
 63246 JR Z,63250    ; Jump if the character is standing next to the right-hand
                     ; window of a pair
 63248 LD A,64       ; Bit 6 set: left-hand window blind toggle
*63250 CALL 62617    ; Flip the light switch, or raise or lower the window
                     ; blind
 63253 CALL 61823    ; {Get a random number between #b32 and #b159 in #REGa
 63256 AND 127       ;
 63258 ADD A,32      ; }
 63260 LD L,17       ; {Reset the counter in byte #b17 of the character's
 63262 LD (HL),A     ; buffer to this number}
 63263 JP 62268      ; Raise the character's arm
; The character will not be flipping any light switches or raising or lowering
; any window blinds at this stage of his walkabout.
*63266 LD L,1        ; {Collect the character's x-coordinate from byte #b1 of
 63268 LD A,(HL)     ; his buffer}
 63269 LD L,16       ; Byte #b16 of the character's buffer holds his walkabout
                     ; destination x-coordinate
 63271 CP (HL)       ; Has the character reached his walkabout destination?
 63272 JP Z,62084    ; Terminate this subcommand if so
 63275 JP C,60334    ; Move the character right if he's still to the left of
                     ; his destination
 63278 JP 60347      ; Otherwise move him left

; Make a character drop Sam
;
; Used by the command lists at #R64756, #R64790, #R64816, #R64846 and #R64878.
; Makes the character drop Sam and stop running, and restarts the command list.
;
; H Character number (#b215-#b229)
@refs=61948
@label=DROPSAM
c63281 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 63284 AND 242       ; #REGa=animatory state of the character in phase 1 or 3
                     ; of his walking animation
 63286 CALL 59861    ; Update the character's animatory state and location and
                     ; update the SRB
 63289 LD A,(HL)     ; #REGa=character's animatory state
 63290 AND 112       ; Keep only bits 4-6
 63292 CP 16         ; #AS16: Is this character a policeman?
 63294 JR NZ,63301   ; Jump if not
 63296 LD A,128      ; {Set bit 7 at #R32747: Sam is in jail
 63298 LD (32747),A  ; }
*63301 JP 63110      ; Make the character stop running and restart the command
                     ; list

; Make a character walk up and down until somebody knocks on a door
;
; Used by the command lists at #R64764, #R65059, #R65112, #R65143 and #R65174.
; Makes the character start walking up or down towards his next walkabout
; destination, unless the character is on door duty and someone has knocked on
; the door (in which case this primary command terminates).
;
; H Character number (#b215-#b229)
@refs=61948
@label=DOORDUTY
c63304 LD L,11       ; {Copy the door identifier (#b168, #b172, #b173 or #b179)
 63306 CALL 61809    ; and walkabout duration indicator (#b0 or #b255) from the
                     ; command list into bytes #b11 and #b12 of the character's
                     ; buffer}
; This entry point is used by the routine at #R63520.
*63309 CALL 61823    ; {Get a random number between 32 and 63 in #REGa
 63312 AND 31        ;
 63314 ADD A,32      ; }
 63316 LD L,13       ; {Store this number in byte #b13 of the character's
 63318 LD (HL),A     ; buffer; it is the number of mini-walkabouts the
                     ; character will perform (if the walkabout duration
                     ; indicator in byte #b12 is #b255)}
 63319 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 63321 LD A,(HL)     ; #REGa=character's x-coordinate
 63322 LD L,10       ; {Copy this into byte #b10 of the character's buffer (it
 63324 LD (HL),A     ; will be the walkabout origin)}
 63325 CALL 63409    ; Change the character's primary command routine address
                     ; to #R63328 (below)
@label=DDUTYLOOP
@nowarn
 63328 LD BC,63209   ; Point #REGbc at the interruptible subcommand routine
                     ; address at #R63209
; This entry point is used by the routine at #R31338 with #REGbc=#R31319.
*63331 LD L,11       ; {Collect the door identifier (#b168, #b172, #b173, #b175
 63333 LD E,(HL)     ; or #b179) from byte #b11 of the character's buffer}
 63334 LD D,127      ; {Point #REGhl at #R32680 (always 0) or the door knock
 63336 EX DE,HL      ; status flags for the door in question (see #R32682)}
 63337 BIT 7,(HL)    ; Has somebody knocked at the door?
 63339 JR Z,63349    ; Jump if not
 63341 LD A,192      ; {Reset bit 7 and set bit 6 of the door knock status
 63343 XOR (HL)      ; flags to indicate that someone is going to answer the
 63344 LD (HL),A     ; door}
 63345 EX DE,HL      ; Restore the character number to #REGh
*63346 JP 62080      ; Move to the next command in the command list (which will
                     ; send the character to the door)
; Either nobody has knocked on the door, or the character is not on door duty.
*63349 EX DE,HL      ; Restore the character number to #REGh
 63350 LD L,12       ; {Collect the walkabout duration indicator (#b0 or #b255)
 63352 LD A,(HL)     ; from byte #b12 of the character's buffer}
 63353 INC L         ; #REGl=#b13
 63354 ADD A,(HL)    ; {Decrement the walkabout counter in byte #b13 of the
 63355 LD (HL),A     ; character's buffer, or leave it unchanged}
 63356 LD L,10       ; Point #REGhl at byte #b10 of the character's buffer
 63358 JR NZ,63373   ; Jump unless the walkabout counter is now 0
; The character has finished walking up and down. If the character is not on
; door duty, we move to the next command in the command list; if the character
; is on door duty, we move six bytes ahead in the command list (past the
; door-opening commands).
 63360 INC L         ; {Collect the door identifier (#b168, #b172, #b173, #b175
 63361 LD A,(HL)     ; or #b179) from byte #b11 of the character's buffer}
 63362 ADD A,87      ; Set the carry flag if it's > #b168 (meaning the
                     ; character was on door duty)
 63364 SBC A,A       ; {#REGa=6 if the character was on door duty, 0 otherwise
 63365 AND 6         ; }
 63367 LD L,22       ; {Add 0 or 6 to the character's command list offset (in
 63369 ADD A,(HL)    ; byte #b22 of his buffer)
 63370 LD (HL),A     ; }
 63371 JR 63346      ; Terminate this primary command
; It's time to set another walkabout destination for this character.
*63373 CALL 61823    ; Get a random number in #REGa
 63376 OR 249        ; {#REGa=-6, -4, -2 or 0
 63378 INC A         ; }
 63379 ADD A,(HL)    ; Add the walkabout origin x-coordinate
 63380 LD L,16       ; {Store this x-coordinate in byte #b16 of the character's
 63382 LD (HL),A     ; buffer}
 63383 JP 63403      ; Copy the interruptible subcommand routine address
                     ; (#R31319 or #R63209) from #REGbc into bytes #b14 and
                     ; #b15 of the character's buffer, and then jump to it

; Initialise a cat's interruptible subcommand
;
; Used by the routine at #R63530. Places the address of the interruptible
; subcommand routine at #R63558 into bytes #b14 and #b15 of the cat's buffer,
; and then jumps to it.
;
; BC #R63558
; H #b218 (Cat)
@label=INITISC
c63386 LD L,14       ; {Copy the address of the interruptible subcommand
 63388 LD (HL),C     ; routine at #R63558 into bytes #b14 and #b15 of the cat's
 63389 INC L         ; buffer
 63390 LD (HL),B     ; }
 63391 LD A,H        ; Save the character number in #REGa briefly
 63392 POP HL        ; Drop the return address from the stack
 63393 PUSH BC       ; Push the address of the interruptible subcommand routine
                     ; onto the stack
 63394 LD C,L        ; {Set #REGbc to the original return address, and point
 63395 LD L,8        ; #REGhl at byte #b8 of the cat's buffer
 63397 LD B,H        ;
 63398 LD H,A        ; }
; This entry point is used by the routine at #R63403 with an interruptible
; subcommand routine address in #REGbc, and #REGhl pointing at byte #b14 of the
; character's buffer.
*63399 LD (HL),C     ; {Set the address of the character's primary command
 63400 INC L         ; routine or interruptible subcommand routine
 63401 LD (HL),B     ; }
 63402 RET           ;

; Initialise and execute an interruptible subcommand
;
; Used by the routines at #R25307 (to activate the sniper) and #R63304 (to make
; a character start walking up or down to his next walkabout destination).
;
; BC Interruptible subcommand routine address (#R25118, #R31319 or #R63209)
; H Character number (#b215-#b229)
@label=EXECISC
c63403 PUSH BC       ; Push the interruptible subcommand routine address onto
                     ; the stack in preparation for an indirect jump
 63404 LD L,14       ; {Copy the interruptible subcommand routine address from
 63406 JR 63399      ; #REGbc into bytes #b14 and #b15 of the character's
                     ; buffer, and then jump to it}

; Unused
s63408 DEFB 0

; Change the primary command routine address
;
; Used by the routines at #R25420, #R31338 and #R63304. Places the address of
; the instruction following the #S/CALL/ to this routine into bytes #b8 and #b9
; of the character's buffer, thus making it the address of the character's
; primary command routine.
;
; H Character number (#b215-#b229)
@label=CHGPRICMD
c63409 EX DE,HL      ; {Collect the return address from the stack into #REGde
 63410 EX (SP),HL    ;
 63411 EX DE,HL      ; }
 63412 LD A,L        ; Save #REGl in #REGa briefly
 63413 LD L,8        ; {Copy the return address into bytes #b8 and #b9 of the
 63415 LD (HL),E     ; character's buffer
 63416 INC L         ;
 63417 LD (HL),D     ; }
 63418 LD L,A        ; Restore the original contents of #REGl
 63419 EX DE,HL      ; {Restore the return address to the stack
 63420 EX (SP),HL    ;
 63421 EX DE,HL      ; }
 63422 RET           ;

; Make a character open a door that has been knocked on
;
; Used by the command lists at #R64846, #R65059, #R65112 and #R65143. Opens the
; door that the character is standing behind, and then rewinds the command list
; such that the character returns to the spot where he was walking up and down
; before going to answer the door.
;
; H Character number (#b215-#b229)
@refs=61948
@label=ANSWERDOOR
c63423 PUSH HL       ; Save the character number briefly
 63424 CALL 62252    ; Open the door
 63427 POP HL        ; Restore the character number to #REGh
 63428 LD L,22       ; Byte #b22 of the character's buffer holds the offset of
                     ; the point reached in the command list
 63430 LD A,(HL)     ; {Subtract #b14 from this offset; this has the effect of
 63431 SUB 14        ; sending the character back to the spot where he was
 63433 LD (HL),A     ; walking up and down before answering the door}
 63434 JP 62080      ; Terminate this primary command

; Open a door
;
; Used by the routine at #R62120. Updates the play area graphics and
; #R32512(screen refresh buffer) (SRB) for a door so that it appears open.
;
; HL Address of the door status flags (see #R32752)
@label=OPENDOOR
c63437 PUSH HL       ; Save the address of the door status flags
 63438 LD A,L        ; #REGa=#b240-#b249
 63439 SUB 70        ; {Point #REGhl at the door knock status flags for the
 63441 LD L,A        ; door (see #R32682)}
 63442 LD A,(HL)     ; {Reset the door knock status flags
 63443 AND 63        ;
 63445 LD (HL),A     ; }
 63446 POP HL        ; Restore the address of the door status flags to #REGhl
 63447 JP 61696      ; Update the play area graphics and the SRB for the door

; Collect the window flags for a play area location
;
; Used by the routine at #R59148. On entry, #REGa holds the #R59148#tValue(T
; value) (rotated left once), and #REGde points at the window flags for the
; play area location under consideration at (X,Y) (in one of the data blocks at
; #R47168, #R47424, #R47680, #R47936, #R48192, #R48448 and #R48704). The window
; flags have the following meanings:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit(s) | =h Meaning }
; { 6,7       | Decorations for the only window, or the left-hand window of a
;               pair: 11=blind is down; 10=blind is up; 01=other; 00=none }
; { 5         | If set, the light switch is in the 'off' position; reset='on' }
; { 2-4       | Unused }
; { 0,1       | Decorations for the right-hand window of a pair (used when bit
;               2 of T is set) }
; TABLE#
; .
; The window flags are also relevant for play area locations (41,33), (113,33),
; (154,33), (209,33), (234,33) and (250,33), where house number signs are
; displayed. In this case, bits 6 and 7 of the window flags determine which
; sign to display.
; .
; On exit, #REGa holds the window flags (with bit 5 set if the lights are out,
; reset otherwise), and the zero flag is reset if the play area location
; contains part of the right-hand window of a pair.
;
; A T value, rotated left once
; DE Address of the window flags
@label=WINFLAGS
c63450 BIT 3,A       ; Reset the zero flag if we're dealing with a tile for the
                     ; right-hand window of a pair
 63452 LD A,(DE)     ; #REGa=window flags
 63453 PUSH AF       ; Save the window flags briefly
 63454 SET 7,E       ; {Point #REGde at the entry in the table at #R65472 that
@ssub=LD D,65472/256
 63456 LD D,255      ; corresponds to the window's location}
 63458 LD A,(DE)     ; Pick up the entry from the table
 63459 LD E,A        ; {Point #REGde at the blown fuse delay counter for the
 63460 LD D,127      ; fuse that affects the window (if any; see #R32674)}
 63462 LD A,(DE)     ; Pick up the blown fuse delay counter
 63463 AND A         ; Is the fuse currently blown?
 63464 JR Z,63470    ; Jump if not
 63466 POP AF        ; Restore the window flags to #REGa
 63467 SET 5,A       ; Signal: the lights are out (because the fuse is blown)
 63469 RET           ;
*63470 POP AF        ; Restore the window flags to #REGa
 63471 RET           ;

; Initialise the character buffers for character groups #b215-#b221
;
; Used by the routine at #R63662. Initialises the animatory state, location and
; command list address for every character in character groups #b215-#b221.
@label=INITCBUFS1
c63472 LD HL,65198   ; The initialisation parameters for character groups
                     ; #b215-#b221 are located at #R65198 onwards
@ssub=LD D,55040/256
 63475 LD D,215      ; Begin with the buffers for character group
                     ; #R55040(#b215)
*63477 LD E,0        ; Point #REGde at the first byte of the first buffer in
                     ; the group
 63479 LD C,5        ; There are 5 characters in the group
*63481 LD B,3        ; {Initialise a character's animatory state and location
*63483 LD A,(HL)     ;
 63484 INC HL        ;
 63485 LD (DE),A     ;
 63486 INC E         ;
 63487 DJNZ 63483    ; }
 63489 XOR A         ; {Reset the flags in byte #b3 of the character's buffer
 63490 LD (DE),A     ; }
 63491 INC C         ; Increment #REGc to compensate for the #S/LDI/
                     ; instruction that follows
 63492 INC E         ; {Initialise the character's z-coordinate
 63493 LDI           ; }
 63495 LD B,18       ; {Zero out bytes #b5-#b22 of the character's buffer
*63497 LD (DE),A     ;
 63498 INC E         ;
 63499 DJNZ 63497    ; }
 63501 LD B,2        ; {Copy the command list address into bytes #b23 and #b24
*63503 LD A,(HL)     ; of the character's buffer
 63504 INC HL        ;
 63505 LD (DE),A     ;
 63506 INC E         ;
 63507 DJNZ 63503    ; }
 63509 DEC C         ; Have we initialised the buffers of all 5 characters in
                     ; the group yet?
 63510 JR NZ,63481   ; Jump back if not
 63512 INC D         ; Point #REGde at the next character group
 63513 LD A,D        ; {Have we initialised the buffers in every character
@ssub=CP 56832/256
 63514 CP 222        ; group yet?}
 63516 JR NZ,63477   ; Jump back if not
 63518 RET           ;

; Unused
s63519 DEFB 0

; Make a character walk up and down for a while
;
; Used by the command lists at #R64928, #R64948, #R64964, #R64976, #R65002,
; #R65016, #R65044, #R65076, #R65097, #R65178 and #R65184.
;
; H Character number (#b215-#b229)
@refs=61948
@label=WALKABOUT
c63520 LD L,11       ; {Set the door identifier in byte #b11 of the character's
 63522 LD (HL),168   ; buffer to #b168 (which corresponds to no door, meaning
                     ; the character will not be on door duty)}
 63524 INC L         ; {Set the walkabout duration counter in byte #b12 of the
 63525 LD (HL),255   ; character's buffer to #b255 (meaning the character will
                     ; walk up and down for a finite period instead of
                     ; indefinitely)}
 63527 JP 63309      ; Make the character begin walking up and down

; Control a cat
;
; Used by the command list at #R65170. Makes the cat run up and down for ever.
;
; H #b218 (Cat)
@refs=61948
@label=MVCAT
c63530 LD L,1        ; Point #REGhl at byte #b1 of the cat's buffer
 63532 LD A,(HL)     ; #REGa=cat's initial x-coordinate
 63533 LD L,3        ; {Set bit 7 of byte #b3 of the cat's buffer (cats always
 63535 LD (HL),128   ; run)}
 63537 LD L,10       ; {The cat's initial x-coordinate will be its walkabout
 63539 LD (HL),A     ; origin; store it in byte #b10 of the cat's buffer}
; The following loop controls the cat from now on.
*63540 CALL 61823    ; {Get a random number between 0 and 15 in #REGa
 63543 AND 15        ; }
 63545 LD L,10       ; {Add the x-coordinate of the cat's walkabout origin to
 63547 ADD A,(HL)    ; get the next walkabout destination x-coordinate}
 63548 INC L         ; {Store this in byte #b11 of the cat's buffer
 63549 LD (HL),A     ; }
@nowarn
 63550 LD BC,63558   ; {Copy the address of the interruptible subcommand
 63553 CALL 63386    ; routine at #R63558 into bytes #b14 and #b15 of the cat's
                     ; buffer, and change the address of the primary command
                     ; routine to #R63556 (below)}
@label=MVCATLOOP
 63556 JR 63540      ;

; Make a cat run up or down
;
; The address of this interruptible subcommand routine is placed into bytes
; #b14 and #b15 of a cat's buffer by the routine at #R63530. It makes a cat run
; up or down to his next walkabout destination, and then terminates.
;
; H #b218 (Cat)
@refs=61948
@label=CATRUN
c63558 LD L,0        ; Point #REGhl at byte #b0 of the cat's buffer
 63560 BIT 0,(HL)    ; Is the cat in running phase 2 (animatory state
                     ; #AS118(#b118/#b246))?
; The cat's animatory state is #AS117(#b117 or #b245) (running phase 1). Move
; him forward and advance his animatory state.
 63562 JR Z,63580    ; Jump if so
 63564 CALL 59848    ; Update the SRB for the cat's current animatory state and
                     ; location
 63567 INC A         ; #REGa=#AS118(#b118/#b246) (cat running phase 2)
 63568 PUSH AF       ; Save this animatory state briefly
 63569 RLCA          ; {#REGa=-1 if the cat is facing left, 1 if he's facing
 63570 CCF           ; right
 63571 SBC A,A       ;
 63572 ADD A,A       ;
 63573 INC A         ; }
 63574 ADD A,E       ; {Adjust the cat's x-coordinate appropriately
 63575 LD E,A        ; }
 63576 POP AF        ; Restore the cat's next animatory state to #REGa
 63577 JP 59861      ; Update the cat's animatory state and location and update
                     ; the SRB
; The cat's animatory state is #AS118(#b118 or #b246) (running phase 2). Either
; advance his animatory state, or turn him round.
*63580 LD L,1        ; Point #REGhl at byte #b1 of the cat's buffer
 63582 LD A,(HL)     ; #REGa=cat's current x-coordinate
 63583 LD L,11       ; The cat's walkabout destination x-coordinate is stored
                     ; in byte #b11 of the cat's buffer
 63585 CP (HL)       ; Has the cat reached his walkabout destination?
 63586 JP Z,62084    ; Terminate this subcommand if so
 63589 LD B,255      ; #REGb=-1 (which will set the cat's animatory state to
                     ; running phase 1)
 63591 LD L,0        ; Point #REGhl at byte #b0 of the cat's buffer
 63593 BIT 7,(HL)    ; Set the zero flag if the cat is facing left
 63595 JR C,63610    ; Jump if the cat is to the left of his walkabout
                     ; destination
 63597 JR Z,63601    ; Jump if the cat is facing left
*63599 LD B,128      ; #REGb=#b128 (which will turn the cat round)
*63601 PUSH BC       ; Save the animatory state adjustment
 63602 CALL 59848    ; Update the SRB for the cat's current animatory state and
                     ; location
 63605 POP BC        ; Restore the animatory state adjustment to #REGb
 63606 ADD A,B       ; #REGa=cat's next animatory state (running phase 1, or
                     ; turned round)
 63607 JP 59861      ; Update the cat's animatory state and location and update
                     ; the SRB
*63610 JR NZ,63601   ; Jump if the cat is facing right
 63612 JR 63599      ; Turn the cat round

; Initialise the character buffers for characters #b222-#b230
;
; Used by the routine at #R63662. Initialises the animatory states, locations
; and command list addresses for characters #b222-#b230 for the next game mode.
;
; A Game mode (0-4)
@label=INITCBUFS2
c63614 LD C,A        ; {Point #REGhl at the last byte in the set of
 63615 ADD A,A       ; initialisation parameters for the current game mode for
 63616 ADD A,C       ; character #b222 (see #R56864)
 63617 ADD A,A       ;
@ssub=ADD A,56864%256+5
 63618 ADD A,37      ;
 63620 LD L,A        ;
@ssub=LD H,56864/256
 63621 LD H,222      ; }
*63623 LD D,H        ; {Point #REGde at byte #b31 of the character's buffer
 63624 LD E,31       ; }
 63626 LD A,(HL)     ; Pick up the last byte in the set of initialisation
                     ; parameters (the MSB of a command list address, or 1 if
                     ; we're dealing with Sam)
 63627 AND A         ; Is there a command list address (or 1) here?
 63628 JR Z,63655    ; Jump if not
 63630 XOR A         ; Prepare #REGa for filling parts of the character's
                     ; buffer with zeroes
 63631 PUSH HL       ; Save the pointer to the initialisation parameters
 63632 LD BC,1794    ; #REGb=7, #REGc=2
*63635 LD (DE),A     ; {Fill bytes #b25-#b31 of the character's buffer with
 63636 DEC E         ; zeroes
 63637 DJNZ 63635    ; }
 63639 LDDR          ; Copy the command list address (or message number and 1
                     ; if dealing with Sam) into bytes #b23 and #b24 of the
                     ; character's buffer
 63641 LD BC,4612    ; #REGb=18, #REGc=4
*63644 LD (DE),A     ; {Fill bytes #b5-#b22 of the character's buffer with
 63645 DEC E         ; zeroes
 63646 DJNZ 63644    ; }
 63648 LDD           ; Copy the z-coordinate (or y-coordinate of the topmost
                     ; row of the play area on screen if dealing with Sam) into
                     ; byte #b4 of the character's buffer
 63650 LD (DE),A     ; Reset all flags in byte #b3 of the character's buffer
 63651 DEC E         ; Point #REGde at byte #b2 of the character's buffer
 63652 LDDR          ; Copy the x- and y-coordinates and animatory state  (or,
                     ; if dealing with Sam, the x-coordinate of the leftmost
                     ; column of the play area on screen, 32 or 34, and 0) into
                     ; bytes #b0-#b2 of the character's buffer
 63654 POP HL        ; Restore the pointer to the initialisation parameters to
                     ; #REGhl
*63655 INC H         ; Next character
 63656 LD A,H        ; {Have we initialised all the character buffers yet?
@ssub=CP 58880/256+1
 63657 CP 231        ; }
 63659 JR NZ,63623   ; Jump back if not
 63661 RET           ;

; Prepare for demo mode or a new game
;
; Used by the routine at #R61630. Prepares everything for demo mode or a new
; game and then displays the introductory cutscene.
@label=PREPGAME
c63662 CALL 64582    ; Generate the table of mirrored values of #b0-#b255 at
                     ; #R32256
; Now we initialise the game status buffer.
 63665 INC H         ; #REGhl=#w32512
 63666 LD (HL),B     ; {Zero out the first 222 bytes of the game status buffer
 63667 LD C,221      ;
@ssub=LD DE,32512+1
 63669 LD DE,32513   ;
 63672 LDIR          ; }
@ssub=LD E,32736%256
 63674 LD E,224      ; #REGde=#w32736
 63676 LD HL,65504   ; {Copy the data at #R65504 into the last 32 bytes of the
 63679 LD C,32       ; game status buffer
 63681 LDIR          ; }
; Next we ensure that all the shop and house doors are closed.
 63683 LD B,32       ; There are 32 Z values to check (one for each 8-tile wide
                     ; segment of the play area)
 63685 LD HL,48384   ; Point #REGhl at the first Z value for y-coordinates
                     ; 30-35 at #R48384
*63688 LD A,(HL)     ; Pick up the Z value
 63689 CP 83         ; {Jump unless the Z value corresponds to the open door of
 63691 JR NC,63705   ; a shop (#b80) or house (#b81 or #b82)
 63693 CP 80         ;
 63695 JR C,63705    ; }
 63697 SET 2,(HL)    ; Set bit 2 of the Z value, thus closing the door
 63699 JR NZ,63705   ; Jump unless we are dealing with a shop door
 63701 INC H         ; {Update the Z value in the block at #R48640 if we are
 63702 LD (HL),83    ; dealing with a shop door}
 63704 DEC H         ; Point #REGhl back at the block of Z values at #R48384
*63705 INC L         ; Point #REGhl at the next Z value
 63706 DJNZ 63688    ; Jump back until we've checked every Z value
; Next we initialise characters #b215-#b221, the icon panel, the score box, the
; message line, the phone messages, the event table at #R24544 and the object
; table at #R32028.
 63708 CALL 63472    ; Initialise the character buffers for character groups
                     ; #b215-#b221
 63711 CALL 28760    ; Initialise the icon panel, score box and message line
 63714 CALL 31458    ; Prepare the phone messages, events and objects
; Let's not forget about the rope that may be above the roof of no. 19.
 63717 LD HL,2827    ; {Set the appropriate Z values in the block at #R47360 to
@nowarn
 63720 LD (47386),HL ; 11, thus removing the rope (if any) from above the roof
                     ; of no. 19}
; And finally we initialise the main characters (#b222-#b230) before displaying
; the introductory cutscene.
 63723 LD A,(32750)  ; #REGa=current game mode (0 or 1)
 63726 JR 63733      ;
; This entry point is used by the routine at #R24832.
*63728 LD HL,32750   ; #R32750 holds the current game mode (0-4)
 63731 INC (HL)      ; Move to the next game mode
 63732 LD A,(HL)     ; #REGa=next game mode
*63733 CALL 63614    ; Initialise the character buffers for characters
                     ; #b222-#b230
 63736 DEC H         ; {Point #REGhl at the message number in the set of
 63737 DEC L         ; initialisation parameters for the current game mode for
                     ; Sam (see #R58912)}
 63738 LD A,(HL)     ; Pick up the message number in #REGa
 63739 PUSH AF       ;
 63740 DEC L         ; {Pick up the new y-coordinate for the topmost row of the
 63741 LD D,(HL)     ; play area on screen in #REGd}
 63742 DEC L         ; {Pick up the new x-coordinate for the topmost row of the
 63743 LD E,(HL)     ; play area on screen in #REGe}
 63744 DEC L         ; {Pick up the LSB of the address of the screen refresh
 63745 LD A,(HL)     ; buffer byte that corresponds to the top row of the
                     ; cutscene window}
 63746 JP 31451      ; Display the cutscene

; Check whether a character is in the correct spot to enter a building
;
; Used by the routine at #R60812. The character in question is standing outside
; the entrance to a shop or other building, and his destination is somewhere
; inside. This routine returns with the zero flag set if the character is
; standing in the correct spot (and facing the right way) to enter the building
; or knock on the door; otherwise it returns with the zero flag reset, and the
; carry flag reset if the character should move left, or set if he should move
; right in order to reach the correct spot.
;
; D x-coordinate of the right edge of the doorway
; H Character number (#b215-#b230)
@label=BYENTRY
c63749 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 63751 LD A,D        ; #REGa=x-coordinate of the right edge of the doorway
 63752 CP (HL)       ; Compare this with the character's x-coordinate
 63753 JR NZ,63763   ; Jump unless they match
 63755 AND A         ; Is the character's x-coordinate 0 (meaning he is
                     ; standing at the doorway of the shop at the far left of
                     ; town)?
 63756 JR Z,63767    ; Jump if so
 63758 DEC L         ; #REGl=#b0
 63759 BIT 7,(HL)    ; Set the zero flag if the character is facing left
 63761 INC HL        ; Point #REGhl at byte #b1 of the character's buffer
 63762 RET           ; Return with the zero flag set if the character is facing
                     ; left (he can enter or knock now); otherwise return with
                     ; the zero flag reset and the carry flag reset (he should
                     ; turn round first)
; The character is not standing at the right edge of the doorway. Is he
; standing at the left edge?
*63763 DEC A         ; #REGa=#REGd-1 (x-coordinate of the left edge of the
                     ; doorway)
 63764 CP (HL)       ; Compare this with the character's x-coordinate
 63765 CCF           ; Set the carry flag if the character's x-coordinate is
                     ; less than #REGd
 63766 RET NZ        ; Return with the zero flag reset (and the carry flag
                     ; reset if the character's x-coordinate is at least #REGd,
                     ; set if it's less than #REGd-1) if the character is not
                     ; standing at the left edge of the doorway
; The character is either standing at the doorway of the shop at the far left
; of town (at x-coordinate 0), or standing at the left edge of some other
; doorway.
*63767 DEC L         ; #REGl=#b0
 63768 LD A,(HL)     ; #REGa=character's animatory state
 63769 INC L         ; #REGl=#b1
 63770 RLCA          ; {Set the zero flag if the character is facing right;
 63771 CCF           ; otherwise reset the zero flag and set the carry flag
 63772 SBC A,A       ; (the character should turn round first)}
 63773 RET           ;

; Check whether a character should enter a building or knock first
;
; Used by the routine at #R60812. The character in question is standing at the
; entrance to a shop or other building, and his destination is somewhere
; inside. On entry, the zero flag is set if the entrance is open. Returns with
; #REGa=3 (go up) if the entrance is open, or #REGa=6 (knock or use a key) if
; it's closed.
;
; A Location type indicator (see #R60179)
; H Character number (#b215-#b230)
@label=CHKENTRY
c63774 JR NZ,63781   ; Jump unless the entrance is open
 63776 LD L,4        ; {Set the character's z-coordinate to 1 (he's indoors
 63778 LD (HL),1     ; now)}
 63780 RET           ; Return to the caller of #R60812 with #REGa=3 (go up)
*63781 LD A,6        ; {Return to the caller of #R60812 with #REGa=6 (knock on
 63783 RET           ; the door or use a key)}

; Prepare the sprite tiles used by a character when lying down
;
; Used by the routine at #R63954. Builds rotated copies of the sprite tiles in
; the bottom four rows of the leftmost and middle columns of the character's
; base animatory state and places them in the slots for sprite tiles
; #b248-#b255 (which are used by the animatory state of the character lying
; down).
;
; A Character's base animatory state
@label=KOTILES
c63784 OR 130        ; {Point #REGhl at the reference for tile 0 of the
 63786 LD L,A        ; character's base animatory state
 63787 LD H,215      ; }
 63789 LD E,247      ; The animatory states of the characters lying down use
                     ; sprite tiles #b248-#b255; initialise the tile reference
                     ; counter now
*63791 INC H         ; Point #REGhl at the next source sprite tile reference
 63792 INC E         ; Increment the tile reference counter
 63793 RET Z         ; Return if we've rotated all 8 sprite tiles
 63794 LD A,E        ; #REGa=target sprite tile reference (#b248-#b255)
 63795 CP 252        ; Have we just finished rotating the tiles in the leftmost
                     ; column of the source sprite?
 63797 JR NZ,63800   ; Jump if not
 63799 INC H         ; #REGh=#b221 (where the reference for sprite tile 6 is
                     ; located)
*63800 PUSH HL       ; Save the source sprite tile reference pointer
 63801 LD D,199      ; Point #REGde at where we will place the graphic data for
                     ; the rotated sprite tile
 63803 LD L,(HL)     ; #REGl=source sprite tile reference
 63804 LD B,8        ; There are 8 pairs of graphic and mask bytes to rotate
*63806 LD H,197      ; Initialise the source sprite tile pointer for rotating
                     ; graphic data
 63808 LD A,128      ; Set bit 7 of #REGa
*63810 INC H         ; {Collect a pixel column from the source sprite tile's
 63811 INC H         ; graphic data
 63812 RLC (HL)      ;
 63814 RRA           ;
 63815 JR NC,63810   ; }
 63817 LD (DE),A     ; Insert the pixel column of graphic data as a pixel row
                     ; into the target sprite tile
 63818 INC D         ; Point #REGde at the corresponding pixel row of mask data
                     ; in the target sprite tile
 63819 LD H,198      ; Initialise the source sprite tile pointer for rotating
                     ; mask data
 63821 LD A,128      ; Set bit 7 of #REGa
*63823 INC H         ; {Collect a pixel column from the source sprite tile's
 63824 INC H         ; mask data
 63825 RLC (HL)      ;
 63827 RRA           ;
 63828 JR NC,63823   ; }
 63830 LD (DE),A     ; Insert the pixel column of mask data as a pixel row into
                     ; the target sprite tile
 63831 INC D         ; Point #REGde at the next pixel row of graphic data in
                     ; the target sprite tile
 63832 DJNZ 63806    ; Jump back until we've done all 8 pairs of graphic and
                     ; mask bytes
 63834 POP HL        ; Restore the source sprite tile reference pointer to
                     ; #REGhl
 63835 JR 63791      ; Jump back to build the next rotated sprite tile

; Unused
s63837 DEFB 0

; Change Sam's disguise
;
; Continues from the routine at #R64218. Replaces certain sprite tiles that are
; used by Sam's animatory states (thus changing his appearance), and then draws
; Sam's new disguise in the bottom right corner of the screen.
;
; H #b230 (Sam)
@label=CHGGUISE
c63838 LD L,8        ; {Set Sam's main action timer (in byte #b8 of his buffer)
 63840 LD (HL),L     ; to 8}
 63841 LD HL,32713   ; #R32713 holds Sam's current disguise ID
 63844 LD A,(HL)     ; Pick this up in #REGa
 63845 INC A         ; {#REGa=next disguise ID (0-7)
 63846 AND 7         ; }
 63848 LD (HL),A     ; Store the new disguise ID
; This entry point is used by the routine at #R30989.
*63849 CALL 32010    ; Set the attribute bytes for Sam's current disguise
 63852 LD A,(32713)  ; #REGa=Sam's disguise ID (0-7)
@ssub=ADD A,57150/256
 63855 ADD A,223     ; {Point #REGbc at the reference for the first replacement
 63857 LD B,A        ; tile (in the data table at #R57150, #R57406, #R57662,
@ssub=LD C,57150%256
 63858 LD C,62       ; #R57918, #R58174, #R58430, #R58686 or #R58942)}
 63860 EXX           ;
@ssub=LD HL,56894-1
 63861 LD HL,56893   ; #REGhl' will index the sprite tile reference data table
                     ; at #R56894
 63864 EXX           ;
*63865 EXX           ;
 63866 INC L         ; Point #REGhl' at the next sprite tile reference
 63867 LD A,(HL)     ; Collect the tile reference in #REGa
 63868 EXX           ;
 63869 AND A         ; Have we reached the end of the table?
 63870 JR Z,63914    ; Jump if so
 63872 LD E,A        ; {Point #REGde at the first byte of graphic data for this
 63873 LD D,199      ; sprite tile}
 63875 LD A,(BC)     ; #REGa=reference for the replacement tile
 63876 INC C         ; Point #REGbc at the reference for the next replacement
                     ; tile
 63877 CP 126        ; Set the carry flag if the tile reference is < #b126
 63879 LD L,A        ; #REGl=reference for the replacement tile
 63880 JR NC,63900   ; Jump if we're dealing with a tile reference >= #b126
; We're dealing with a replacement tile (of Sam in disguise) whose reference is
; < #b126. The graphic data for such tiles is arranged in 8 pairs (graphic
; byte, mask byte) in bytes #b80-#b125 across pages #b223-#b230.
@ssub=LD H,57168/256
 63882 LD H,223      ; Point #REGhl at the graphic data for the replacement
                     ; tile
*63884 LD A,(HL)     ; {Copy a byte of graphic data from the replacement tile
 63885 LD (DE),A     ; into the target sprite tile}
 63886 INC D         ; Point #REGde at the next byte of mask data for the
                     ; target sprite tile
 63887 INC L         ; Point #REGhl at the next byte of mask data for the
                     ; replacement tile
 63888 LD A,(HL)     ; {Copy a byte of mask data from the replacement tile into
 63889 LD (DE),A     ; the target sprite tile}
 63890 INC D         ; Point #REGde at the next byte of graphic data for the
                     ; target sprite tile
 63891 DEC L         ; {Point #REGhl at the next byte of graphic data for the
 63892 INC H         ; replacement tile}
 63893 LD A,H        ; {Have we copied the replacement tile over the target
@ssub=CP 57168/256+8
 63894 CP 231        ; sprite tile yet?}
 63896 JR NZ,63884   ; Jump back if not
 63898 JR 63865      ; Jump back to deal with the next replacement tile
; We're dealing with a replacement tile whose reference is >= #b126. The
; graphic data for such tiles is arranged in groups of 16 (8 pairs of graphic
; bytes and mask bytes) across pages #b215-#b230.
*63900 LD H,215      ; Point #REGhl at the graphic data for the replacement
                     ; tile
 63902 PUSH BC       ; Save the replacement tile reference pointer
 63903 LD B,16       ; There are 16 bytes of graphic and mask data to copy
*63905 LD A,(HL)     ; {Copy the replacement tile over the target sprite tile
 63906 LD (DE),A     ;
 63907 INC D         ;
 63908 INC H         ;
 63909 DJNZ 63905    ; }
 63911 POP BC        ; Restore the replacement tile reference pointer to #REGbc
 63912 JR 63865      ; Jump back to deal with the next replacement tile
; Now we can draw Sam's disguise in the bottom right of the screen.
@nowarn
*63914 LD HL,55170   ; This is the address of the tile reference for the
                     ; top-left tile in Sam's sprite (animatory state #AS0)
@nowarn
 63917 LD DE,20669   ; #w20669 is the display file address for the leftmost
                     ; byte in the top row of pixels of Sam's disguise in the
                     ; bottom right of the screen
*63920 PUSH HL       ; Save the sprite tile reference pointer
 63921 LD L,(HL)     ; {Point #REGhl at the first byte of graphic data for this
 63922 LD H,199      ; tile}
*63924 LD A,(HL)     ; {Copy the tile to the screen
 63925 LD (DE),A     ;
 63926 INC H         ;
 63927 INC H         ;
 63928 INC D         ;
 63929 BIT 3,D       ;
 63931 JR Z,63924    ; }
 63933 POP HL        ; Restore the sprite tile reference pointer to #REGhl
 63934 INC H         ; Point #REGhl at the next tile reference
 63935 LD D,80       ; {Set #REGde to the display file address for the next
 63937 LD A,E        ; tile
 63938 ADD A,32      ;
 63940 LD E,A        ; }
 63941 JR NC,63920   ; Jump back unless we've finished a column of three tiles
 63943 CP 31         ; Have we just finished the third column?
 63945 RET Z         ; Return if so
 63946 SUB 95        ; {Set #REGde to the display file address for the first
 63948 LD E,A        ; tile in the next column}
 63949 INC H         ; {Point #REGhl at the reference for the first tile in
 63950 INC H         ; this column}
 63951 JR 63920      ; Jump back to draw this column of tiles

; Unused
s63953 DEFB 0

; Knock a character over
;
; Used by the routines at #R64005 and #R64227. Knocks the character to the
; ground and updates the SRB accordingly.
;
; H Character number (#b215-#b230)
@label=KNOCKOVER
c63954 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 63957 BIT 7,A       ; Is the character facing left?
 63959 JR Z,63963    ; Jump if so
 63961 DEC E         ; {Subtract 2 from the character's x-coordinate if he's
 63962 DEC E         ; facing right}
*63963 INC D         ; {Add 2 to the character's y-coordinate
 63964 INC D         ; }
 63965 PUSH DE       ; Save the character's new coordinates
 63966 AND 248       ; #REGa=character's base animatory state
 63968 PUSH HL       ; Save the character number briefly
 63969 PUSH AF       ; Save the character's base animatory state briefly
 63970 CALL 63784    ; Prepare the sprite tiles used by the character when
                     ; lying down
 63973 POP AF        ; Restore the character's base animatory state to #REGa
 63974 POP HL        ; Restore the character number to #REGh
 63975 ADD A,7       ; #REGa=animatory state of the character lying down
 63977 POP DE        ; Restore the character's new coordinates to #REGde
 63978 JP 59861      ; Update the character's animatory state and location and
                     ; update the SRB

; Initialise an uninterruptible subcommand if possible
;
; Used by the routines at #R64162 and #R64338. Places the address of an
; uninterruptible subcommand routine into bytes #b18 and #b19 of a character's
; buffer if there's not one there already, and returns with the zero flag set
; in that case.
;
; A Character number (#b215-#b229)
; BC Uninterruptible subcommand routine address
@label=TRYINITUSC
c63981 PUSH HL       ;
 63982 LD H,A        ; {Point #REGhl at byte #b19 of the character's buffer
 63983 LD L,19       ; }
 63985 LD A,(HL)     ; {Is there already an uninterruptible subcommand routine
 63986 AND A         ; address MSB there?}
 63987 JR NZ,63992   ; Jump if so
 63989 LD (HL),B     ; {Otherwise copy the routine address from #REGbc into
 63990 DEC HL        ; bytes #b18 and #b19 of the character's buffer, thus
 63991 LD (HL),C     ; setting his uninterruptible subcommand}
*63992 POP HL        ;
 63993 RET           ;

; Initialise an uninterruptible subcommand
;
; Used by the routine at #R64131. Places the return address into bytes #b18 and
; #b19 of the character's buffer, thus making it the address of the character's
; uninterruptible subcommand routine.
;
; H Character number (#b215-#b229)
@label=INITUSC
c63994 POP BC        ; Drop the return address from the stack into #REGbc
 63995 PUSH BC       ; Push the return address back onto the stack
 63996 PUSH BC       ; Push the return address onto the stack again in
                     ; preparation for the '#S/POP BC/' below
; This entry point is used by the routine at #R64005.
*63997 LD L,19       ; Point #REGhl at byte #b19 of the character's buffer
 63999 POP BC        ; Drop the return address from the stack into #REGbc
 64000 LD (HL),B     ; {Copy the address from #REGbc into bytes #b18 and #b19
 64001 DEC L         ; of the character's buffer, thus setting his
 64002 LD (HL),C     ; uninterruptible subcommand}
 64003 RET           ;

; Unused
s64004 DEFB 0

; Deal with a character who has been knocked over
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b18 and #b19 of a character's buffer (by the routine at #R64162) when he's
; been hit on the head by a falling character with an x-coordinate that differs
; from his by 1. It controls the character from the moment he is knocked over
; until he has finished staggering from being dazed by the collision.
;
; H Character number (#b215-#b229)
@refs=61948
@label=KNOCKED1
c64005 LD A,138      ; #REGa=#b10 (short knockout delay) + #b128 (quick
                     ; recovery)
 64007 JR 64011      ;
; The address of this entry point is placed into bytes #b18 and #b19 of a
; character's buffer (by the routine at #R64162) when he's been hit on the head
; by a falling character with the same x-coordinate.
@label=KNOCKED1L
 64009 LD A,20       ; #REGa=#b20 (long knockout delay) + #b0 (slow recovery)
*64011 LD L,20       ; {Initialise the character's knockout delay counter in
 64013 LD (HL),A     ; byte #b20 of his buffer}
 64014 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 64016 LD E,(HL)     ; #REGe=character's animatory state
 64017 INC L         ; #REGl=#b1
 64018 LD D,(HL)     ; #REGd=character's x-coordinate
 64019 LD L,13       ; {Store the character's pre-knockout animatory state in
 64021 LD (HL),E     ; byte #b13 of his buffer}
 64022 LD L,21       ; {Store the character's current x-coordinate in byte #b21
 64024 LD (HL),D     ; of his buffer}
 64025 CALL 63954    ; Knock the character over
 64028 CALL 63997    ; Place the address of the following instruction into
                     ; bytes #b18 and #b19 of the character's buffer
; This entry point is used after the character has been knocked over and until
; he stands up again.
 64031 LD L,20       ; Byte #b20 of the character's buffer holds the knockout
                     ; delay counter
 64033 DEC (HL)      ; Decrement it
 64034 LD A,(HL)     ; Pick up the current value in #REGa
 64035 AND 127       ; Is it time for the character to stand up?
 64037 RET NZ        ; Return if not
 64038 LD A,L        ; #REGa=20
 64039 BIT 7,(HL)    ; Is bit 7 of the knockout delay counter set?
 64041 JR NZ,64044   ; Jump if so
 64043 ADD A,A       ; #REGa=40
*64044 LD (HL),A     ; Initialise the recovery delay counter (in byte #b20 of
                     ; the character's buffer) to 40 (if the character was hit
                     ; by another with the same x-coordinate) or 20
 64045 CALL 60300    ; Make the character stand up
 64048 CALL 63997    ; Place the address of the following instruction into
                     ; bytes #b18 and #b19 of the character's buffer
; This entry point is used after the character has stood up again and while he
; is still dazed from the collision.
 64051 LD L,20       ; {Decrement the recovery delay counter
 64053 DEC (HL)      ; }
 64054 JR Z,64131    ; Jump if it has reached 0
 64056 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 64058 BIT 0,(HL)    ; Is the character facing right?
 64060 JR NZ,64075   ; Jump if so
 64062 PUSH HL       ; Save the character number briefly
 64063 CALL 60179    ; Obtain descriptors for the character's current location
 64066 POP HL        ; Restore the character number to #REGh
 64067 BIT 7,C       ; Can the character move left?
 64069 JR Z,64080    ; Jump if not
 64071 BIT 6,C       ; Can the character move right?
 64073 JR Z,64080    ; Jump if not
*64075 CALL 61823    ; Get a random number in #REGa
 64078 RRCA          ; Rotate bit 0 into bit 7 for no apparent reason
 64079 LD C,A        ; Bit 7 of #REGc will be used to decide whether the
                     ; character should move left next
; This entry point is used by the routine at #R64131.
@nowarn
*64080 LD DE,59861   ; {Load the address of the routine at #R59861 onto the
 64083 PUSH DE       ; stack}
 64084 PUSH BC       ; Save the direction descriptor (in #REGc)
 64085 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 64088 POP BC        ; Restore the direction descriptor to #REGc
 64089 RLC C         ; Set the carry flag if the character is going to move
                     ; left
 64091 BIT 7,A       ; Is the character facing right?
 64093 JR NZ,64109   ; Jump if so
; The character is facing left.
 64095 JR NC,64111   ; Jump if the character is going to move right (take a
                     ; step backwards)
; The character is going to take a step forwards.
*64097 INC A         ; #REGa=character's next animatory state
 64098 BIT 0,A       ; Is it midstride?
 64100 RET NZ        ; Return (to #R59861) if so
; The character has just moved from the midstride position. Adjust his
; x-coordinate as appropriate.
*64101 DEC E         ; #REGe=x-1 (where x is the character's x-coordinate)
 64102 JR C,64106    ; Jump if the character is moving left
 64104 INC E         ; {#REGe=x+1 (the character is moving right)
 64105 INC E         ; }
*64106 AND 251       ; Make sure that bit 2 of the character's animatory state
                     ; is reset
 64108 RET           ; To #R59861, to update the character's animatory state
                     ; and location and update the SRB
; The character is facing right.
*64109 JR NC,64097   ; Jump if the character is going to move right (take a
                     ; step forwards)
; The character is going to take a step backwards.
*64111 DEC A         ; #REGa=character's next animatory state
 64112 BIT 0,A       ; Is it midstride?
 64114 RET Z         ; Return (to #R59861) if not
 64115 INC A         ; {Add 4 to #REGa (without affecting the carry flag) to
 64116 INC A         ; obtain the correct midstride animatory state (though bit
 64117 INC A         ; 2 may need to be reset)
 64118 INC A         ; }
 64119 JR 64101      ;

; Check whether there are any messages remaining in the message queue
;
; Used by the routine at #R28357. Returns with the zero flag set if there are
; no messages remaining in the message queue.
;
; HL Address of the current message in the message queue (see #R32696)
@label=CHKQUEUE
c64121 LD A,L        ; {Point #REGhl at the next message in the message queue
 64122 SUB 7         ;
 64124 OR 8          ;
 64126 LD L,A        ; }
 64127 LD A,(HL)     ; Pick up the number of the next message in the queue
 64128 AND A         ; Set the zero flag if it's zero (no message)
 64129 RET           ;

; Unused
s64130 DEFB 0

; Deal with a character who has nearly recovered from being knocked over
;
; Used by the routine at #R64005. Controls a character from the point where he
; has almost recovered from the daze of being knocked over.
;
; H Character number (#b215-#b229)
@label=KNOCKED2
c64131 CALL 63994    ; Place the address of the next instruction into bytes
                     ; #b18 and #b19 of the character's buffer
; #IF({fix}<2)||The apparent intention of the remainder of this routine is to
; make the character return (by walking backwards or forwards as required) to
; the spot where he was hit, but this fails to happen because of the faulty
; '#S/JR NZ/' instruction below, which should be a '#S/JR Z/' instead.|The
; remainder of this routine makes the character return (by walking backwards or
; forwards as required) to the spot where he was hit.||
@refs=61948
*64134 LD L,21       ; {Collect the character's pre-knockout x-coordinate from
 64136 LD A,(HL)     ; byte #b21 of his buffer}
 64137 LD L,1        ; {Does it match the character's current x-coordinate?
 64139 CP (HL)       ; }
@bfix=JR Z,64150     ; Jump if so
 64140 JR NZ,64150   ; Jump if not (this is a #BUG#pttd(bug))
 64142 LD C,128      ; Bit 7 set, bit 6 reset: the character will move left
@bfix=               ; Jump if the character's current x-coordinate is greater
@bfix=/              ; than his pre-knockout x-coordinate
 64144 JR C,64080    ; This jump is never made, but the intention was to make
                     ; it if the character's current x-coordinate is greater
                     ; than his pre-knockout x-coordinate
 64146 LD C,64       ; Bit 7 reset, bit 6 set: the character will move right
 64148 JR 64080      ; Move the character right
; Restore the character's pre-knockout animatory state and terminate this
; subcommand.
*64150 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 64153 LD L,13       ; {Collect the character's pre-knockout animatory state
 64155 LD A,(HL)     ; from byte #b13 of his buffer}
 64156 CALL 59861    ; Update the character's animatory state and update the
                     ; SRB
 64159 JP 62088      ; Terminate this uninterruptible subcommand

; Check whether a falling character has hit anyone on the head
;
; Used by the routine at #R64227. Returns with the zero flag set if the falling
; character has struck another character, and knocks that other character over.
;
; H Character number (#b215-#b230)
@label=CHKHIT
c64162 LD L,1        ; Point #REGhl at byte #b1 of the falling character's
                     ; buffer
 64164 LD E,(HL)     ; #REGe=falling character's x-coordinate
 64165 DEC E         ; Decrement this
 64166 INC L         ; #REGl=#b2
 64167 LD D,(HL)     ; #REGd=falling character's y-coordinate
 64168 INC D         ; {Add 3 to this
 64169 INC D         ;
 64170 INC D         ; }
@ssub=LD HL,55040+2
 64171 LD HL,55042   ; #REGh=#b215 (first potential target character to check),
                     ; #REGl=#b2
; The following loop compares the falling character's coordinates with those of
; every other character to see if there was a collision.
*64174 LD A,D        ; #REGa=3+falling character's y-coordinate
 64175 CP (HL)       ; Does it match the potential target's y-coordinate?
 64176 JR NZ,64208   ; Jump if not to check the next potential target
 64178 DEC L         ; #REGl=#b1
 64179 LD A,(HL)     ; #REGa=T (potential target character's x-coordinate)
 64180 SUB E         ; #REGa=T-x+1 (where x is the falling character's
                     ; x-coordinate)
 64181 CP 3          ; Is this less than 3?
 64183 JR NC,64206   ; Jump if not to check the next potential target
@nowarn
 64185 LD BC,64005   ; Point #REGbc at the uninterruptible subcommand routine
                     ; at #R64005
 64188 RRCA          ; Does T=x?
 64189 JR NC,64193   ; Jump if not
@ssub=LD C,64009%256
 64191 LD C,9        ; #REGbc=#R64009
*64193 DEC L         ; #REGl=#b0
 64194 LD A,(HL)     ; #REGa=target character's animatory state
 64195 AND 7         ; Keep only bits 0-2
 64197 CP 4          ; Is the target character in standing/walking animation
                     ; phase 1-4?
 64199 JR NC,64206   ; Jump if not to check the next potential target
 64201 LD A,H        ; #REGa=target character's character number
 64202 CALL 63981    ; Attempt to place the address of the uninterruptible
                     ; subcommand routine at #R64005 (if T=x-1 or x+1) or
                     ; #R64009 (if T=x) into bytes #b18 and #b19 of the target
                     ; character's buffer
 64205 RET Z         ; Return with the zero flag set if the attempt was
                     ; successful (the target character was not already
                     ; occupied by some other uninterruptible subcommand)
*64206 LD L,2        ; Point #REGhl at byte #b2 of the target character's
                     ; buffer
*64208 INC H         ; Next potential target character to check
 64209 LD A,H        ; #REGa=next target character number
@ssub=CP 58880/256+1
 64210 CP 231        ; Have we checked every potential target?
 64212 JR NZ,64174   ; Jump back if not
 64214 ADD A,A       ; Reset the zero flag (no one was struck by the falling
                     ; character)
 64215 RET           ;

; Unused
s64216 DEFS 2

; 'D' pressed - change disguise
;
; The address of this routine is found in the table of keypress handling
; routines at #R60672. It is called from the main loop at #R61483 when 'D' is
; pressed.
;
; H #b230 (Sam)
@refs=61483
@label=DISGUISE
c64218 CALL 59848    ; Update the SRB for Sam's current animatory state and
                     ; location
 64221 CALL 60521    ; Make a sound effect
 64224 JP 63838      ; Change Sam's disguise

; Move a falling character to the next point in his descent
;
; Used by the routines at #R64331 and #R64338. Moves the character to the next
; point in his descent from the roof of a building. Returns with the carry flag
; reset if the character has landed, and then with the zero flag reset if he
; was knocked out by the landing.
;
; H Character number (#b215-#b230)
@label=DESCEND
c64227 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 64229 LD A,(HL)     ; #REGa=character's y-coordinate
 64230 LD L,21       ; Byte #b21 of the character's buffer holds his landing
                     ; y-coordinate
 64232 CP (HL)       ; Has the character landed yet?
 64233 JR NZ,64246   ; Jump if not
 64235 LD L,13       ; {Is the character Sam, and should he be knocked out upon
 64237 BIT 0,(HL)    ; landing?}
 64239 RET Z         ; Return with the carry flag reset (the character has
                     ; landed) and the zero flag set (he was not knocked out)
                     ; if not
 64240 CALL 63954    ; Knock Sam out
 64243 LD A,H        ; {Reset the carry flag (Sam has landed) and the zero flag
 64244 AND A         ; (he was knocked out upon landing)}
 64245 RET           ;
; The character has not landed yet.
*64246 ADD A,3       ; {Set the zero flag if the character is at the right
 64248 CP (HL)       ; height above the roof or ground to hit another character
                     ; }
 64249 PUSH HL       ; Save the character number briefly
 64250 CALL Z,64162  ; Check whether the character has landed on someone
 64253 POP HL        ; Restore the character number to #REGh
 64254 JR NZ,64260   ; Jump unless the character has landed on someone
 64256 LD L,13       ; {Set byte #b13 of the character's buffer to 0: he will
 64258 LD (HL),0     ; not be knocked out upon landing}
*64260 LD L,13       ; {Is the character Sam, and was he dropped from a great
 64262 BIT 0,(HL)    ; enough height that he could be knocked out upon landing?
                     ; }
 64264 JR Z,64269    ; Jump if not
 64266 LD L,4        ; {Set Sam's z-coordinate to 4 (outside)
 64268 LD (HL),L     ; }
*64269 LD L,20       ; {Pick up byte #b20 of the character's buffer; this will
 64271 LD A,(HL)     ; be non-zero if the character is still moving to the left
                     ; or right just after stepping off the roof of a building}
 64272 AND A         ; Set the zero flag if byte #b20 is zero
 64273 LD DE,256     ; #REGd=1 (default y-coordinate increment), #REGe=0
                     ; (default x-coordinate increment)
 64276 JR Z,64302    ; Jump if the character is falling straight downwards now
 64278 DEC (HL)      ; Decrement byte #b20 of the character's buffer
 64279 DEC A         ; {Set the carry flag if byte #b20 is less than 5
 64280 CP 5          ; }
 64282 LD L,E        ; #REGl=0
 64283 JR C,64295    ; Jump if byte #b20 of the character's buffer is less than
                     ; 5
 64285 LD D,0        ; Set the y-coordinate increment to 0
 64287 JR Z,64295    ; Jump if byte #b20 of the character's buffer is 5
 64289 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 64292 INC A         ; #REGa=character's next animatory state (midstride)
 64293 JR 64317      ; Make the character take the first step off the edge of
                     ; the roof
; The character is midstride on the edge of the roof. The next step (to the
; left or right) will place him in mid-air.
*64295 INC E         ; #REGe=1
 64296 BIT 7,(HL)    ; Is the character facing right?
 64298 JR NZ,64302   ; Jump if so
 64300 LD E,255      ; #REGe=-1
; Now #REGd holds the y-coordinate increment (0 or 1), and #REGe holds the
; x-coordinate increment (-1, 0 or 1).
*64302 PUSH DE       ; Save the x- and y-coordinate increments
 64303 CALL 59848    ; Update the SRB for the character's current animatory
                     ; state and location
 64306 AND 248       ; #REGa=character's base animatory state
 64308 LD L,A        ; Copy this to #REGl
 64309 POP BC        ; Restore the x- and y-coordinate increments to #REGc and
                     ; #REGb
 64310 LD A,B        ; {#REGd=character's next y-coordinate
 64311 ADD A,D       ;
 64312 LD D,A        ; }
 64313 LD A,C        ; {#REGe=character's next x-coordinate
 64314 ADD A,E       ;
 64315 LD E,A        ; }
 64316 LD A,L        ; #REGa=character's base animatory state
; Now #REGa, #REGe and #REGd hold the character's new animatory state and x-
; and y-coordinates.
*64317 CALL 59861    ; Update the character's animatory state and location and
                     ; update the SRB
 64320 LD A,H        ; #REGa=character number (#b215-#b230)
 64321 ADD A,A       ; Set the carry flag (the character has not landed yet)
 64322 RET           ;

; Unused
s64323 DEFS 3

; Landing y-coordinates
;
; Used by the routine at #R64338.
@label=LANDINGY
b64326 DEFB 13       ; Landing y-coordinate when stepping off the right edge of
                     ; the roof of the apartment building next to no. 74, the
                     ; right edge of the roof of the apartment building next
                     ; next to no. 19, or the left edge of the roof of no. 17
 64327 DEFB 35       ; Landing y-coordinate (road) when stepping off the left
                     ; edge of the roof of the apartment building next to no.
                     ; 19, or off the fire escape on that building from the
                     ; 2nd, 3rd or top floor
 64328 DEFB 11       ; Landing y-coordinate when stepping off the left edge of
                     ; the roof of the police station (on to the roof of no.
                     ; 31)
 64329 DEFB 34       ; Landing y-coordinate (sidewalk) when stepping off the
                     ; right edge of the roof of no. 31
 64330 DEFB 35       ; Landing y-coordinate (road) when stepping off the fire
                     ; escape from the 1st floor of the apartment building next
                     ; to no. 19

; Control a character who has stepped off the roof of a building
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b18 and #b19 of a character's buffer by the routine at #R64338. It controls
; the character throughout his descent from the roof until he lands.
;
; H Character number (#b215-#b229)
@refs=61948
@label=OFFROOF
c64331 CALL 64227    ; Move the character to the next point in his descent
 64334 RET C         ; Return if the character has not landed yet
 64335 JP 62088      ; Terminate this uninterruptible subcommand

; Deal with a character who is about to step off the roof of a building
;
; Used by the routine at #R60347. On entry, #REGb holds the value of the third
; byte of the character's location descriptor (see #R60179), which indicates
; the set of locations the character's current location belongs to:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h #REGb | =h Location(s) (x,y,z) }
; { =r3 2    | (23,6,1)=right edge of the roof of the apartment building next
;              to no. 74 (see #R50165) }
; {            (206,6,1)=right edge of the roof of the apartment building next
;              to no. 19 (see #R50165) }
; {            (223,6,1)=left edge of the roof of no. 17 (see #R50048) }
; { =r4 3    | (175,6,1)=left edge of the roof of the apartment building next
;              to no. 19 (see #R49876) }
; {            (175,11,2)=left edge of the fire escape on the top floor of the
;              apartment building next to no. 19 (see #R49876) }
; {            (175,17,2)=left edge of the fire escape on the 3rd floor of the
;              apartment building next to no. 19 (see #R49876) }
; {            (175,23,2)=left edge of the fire escape on the 2nd floor of the
;              apartment building next to no. 19 (see #R49876) }
; { 4        | (124,5,1)=left edge of the roof of the police station (see
;              #R48507) }
; { 5        | (118,11,1)=right edge of the roof of no. 31 (see #R48501) }
; { 6        | (177,28,2)=left edge of the fire escape on the 1st floor of the
;              apartment building next to no. 19 (see #R49898) }
; TABLE#
;
; B Location indicator (2-6)
; H Character number (#b215-#b230)
@refs=60347
@label=ROOFEDGE
c64338 CALL 64512    ; Deal with the case where #REGb=2 and the character is
                     ; standing on the edge of the roof of no. 17 or the
                     ; apartment building next to no. 19
; This entry point is used by the routine at #R31476 with #REGh=#b230 (Sam) and
; #REGb=1.
*64341 LD L,13       ; {Initialise byte #b13 of the character's buffer to 0 on
 64343 LD (HL),0     ; the assumption that he will land safely}
 64345 BIT 0,B       ; Does #REGb=2, 4 or 6 (in which case the character will
                     ; definitely land safely)?
 64347 JR Z,64354    ; Jump if so
 64349 LD A,H        ; #REGa=character number
@ssub=CP 58880/256
 64350 CP 230        ; Are we dealing with Sam?
 64352 RET NZ        ; Return if not (characters other than Sam don't attempt
                     ; dangerous leaps from the roofs of tall buildings)
 64353 INC (HL)      ; Set byte #b13 of Sam's buffer to 1 to indicate that he's
                     ; stepping off or being dropped off the roof of a building
                     ; from a great enough height that he could be knocked out
                     ; when he lands (#REGb=1, 3 or 5)
*64354 DEC B         ; Are we dealing with Sam being dropped off the roof of a
                     ; building?
 64355 JR Z,64368    ; Jump if so
 64357 LD A,B        ; {Point #REGde at the appropriate landing y-coordinate in
@ssub=ADD A,64326%256-1
 64358 ADD A,69      ; the data table at #R64326
 64360 LD E,A        ;
@ssub=LD D,64326/256
 64361 LD D,251      ; }
 64363 LD A,(DE)     ; Collect the landing y-coordinate in #REGa
 64364 LD B,7        ; Prepare to initialise byte #b20 of the character's
                     ; buffer to 7
 64366 JR 64377      ;
; We are dealing with Sam being dropped off the roof of a building.
*64368 LD L,1        ; {#REGa=Sam's x-coordinate
 64370 LD A,(HL)     ; }
 64371 CALL 60165    ; Set the carry flag if there is no sidewalk beneath Sam
 64374 LD A,34       ; {#REGa=34 if Sam is above the sidewalk, 35 if he's above
 64376 ADC A,B       ; the road}
; At this point #REGa holds the character's landing y-coordinate, and #REGb
; holds 0 (if the character is Sam and he's been dropped from the roof of a
; building) or 7 (if the character is voluntarily stepping off the roof).
*64377 LD L,20       ; {Set byte #b20 of the character's buffer to 0 or 7
 64379 LD (HL),B     ; }
 64380 INC L         ; {Store the character's landing y-coordinate in byte #b21
 64381 LD (HL),A     ; of his buffer}
 64382 LD A,H        ; #REGa=character number
@ssub=CP 58880/256
 64383 CP 230        ; Are we dealing with Sam?
 64385 JR Z,64398    ; Jump if so
 64387 LD L,15       ; {Remove the address of any interruptible subcommand
 64389 LD (HL),0     ; routine from bytes #b14 and #b15 of the character's
                     ; buffer}
@nowarn
 64391 LD BC,64331   ; {Set the character's uninterruptible subcommand routine
 64394 PUSH BC       ; to #R64331 and jump to it now
 64395 JP 63981      ; }
; The remainder of this routine deals with Sam's descent from the roof of the
; building (either to the ground or to the roof of the neighbouring building).
*64398 LD A,128      ; {Set bit 7 of Sam's status flags at #R32764, indicating
 64400 LD (32764),A  ; that he's falling from the roof of a building}
; This entry point is used by the routine at #R29912 when bit 7 at #R32764 is
; set (by this routine - see above).
@refs=29912
*64403 CALL 60521    ; Make a sound effect
 64406 LD L,20       ; {Collect byte #b20 of Sam's buffer
 64408 LD A,(HL)     ; }
 64409 AND A         ; Is Sam falling straight downwards now?
 64410 JR NZ,64413   ; Jump if not
 64412 INC A         ; #REGa=1
*64413 LD L,8        ; {Set Sam's main action timer (in byte #b8 of his buffer)
 64415 LD (HL),A     ; to 1 if he's falling straight downwards now, or to the
                     ; value of byte #b20 of his buffer (1-7) if he's still
                     ; moving left or right at the beginning of his descent}
 64416 CALL 64227    ; Move Sam to the next point in his descent
 64419 JP C,60547    ; Scroll the screen if necessary if Sam is still falling
 64422 LD HL,0       ; {Set Sam's post-midstride y-coordinate (in byte #b7 of
@ssub=LD (58880+7),HL
 64425 LD (58887),HL ; his buffer) to 0 to indicate that he is neither
                     ; midstride nor mid-action, and his main action timer (in
                     ; byte #b8) to 0 to indicate to the routine at #R29912
                     ; that Sam has finished falling}
 64428 RET Z         ; Return if Sam landed safely (without being knocked out)
; Sam has landed, and been knocked out by the fall.
 64429 CALL 60032    ; Update the display
 64432 CALL 64618    ; Scroll the screen up and down a row 7 times (with
                     ; accompanying sound effects)
@ssub=LD H,58880/256
 64435 LD H,230      ; #b230=Sam
 64437 CALL 60300    ; Make Sam stand up
 64440 CALL 64599    ; Hide the play area and clear the SRB
 64443 CALL 61823    ; {Get a random number between #b50 and #b57 (ASCII codes
 64446 AND 7         ; for the digits 2-9) in #REGa
 64448 ADD A,50      ; }
 64450 LD (32720),A  ; Store this at #R32720
 64453 SUB 48        ; #REGa=N/10 (where N is the number of bucks Sam lost)
 64455 CALL 28295    ; Adjust Sam's cash supply and print the new amount
 64458 LD A,35       ; Message #R27041(#b35): ' WHEN I CAME TO MY WALLET WAS
                     ; GONE...'
 64460 JP Z,31445    ; Queue this message and show the ending cutscene if Sam
                     ; has run out of money
 64463 INC A         ; #REGa=#R27057(#b36): ' WHEN I CAME TO SOMEONE HAD TAKEN
                     ; ${tens digit}0'
 64464 CALL 28357    ; Queue this message
 64467 CALL 31960    ; Take the hook and budgie from Sam (if he has them)
; Now we reveal the play area one row of tiles at a time from the bottom up,
; with accompanying sound effects.
; .
; #AUDIO2(wake.wav)(#INCLUDE(WakeUp))
@ssub=LD HL,32512+96
 64470 LD HL,32608   ; Point #REGhl at one byte past the end of the
                     ; #R32512(screen refresh buffer) (SRB), which is currently
                     ; clear
 64473 LD C,20       ; There are 20 rows of the screen to reveal
*64475 LD B,4        ; {Set every bit in a group of 4 bytes of the SRB,
*64477 DEC L         ; corresponding to one row of the screen
 64478 LD (HL),255   ;
 64480 DJNZ 64477    ; }
 64482 PUSH BC       ; Save the screen row counter (in #REGc)
 64483 PUSH HL       ; Save the SRB pointer
 64484 LD A,100      ; {#REGe=#b100-#REGl (where #REGl is the LSB of the SRB
 64486 SUB L         ; address); this value determines the pitch of the sound
 64487 LD E,A        ; effect}
 64488 LD A,C        ; {Multiply #REGc (the screen row counter) by 8; this
 64489 ADD A,A       ; value determines the duration of the sound effect, and
 64490 ADD A,A       ; the border colour (0=black)
 64491 ADD A,A       ;
 64492 LD C,A        ; }
*64493 XOR 16        ; {Make a sound effect with pitch and duration determined
 64495 OUT (254),A   ; by the row of the screen that is being revealed
 64497 LD B,E        ;
*64498 DJNZ 64498    ;
 64500 DEC C         ;
 64501 JR NZ,64493   ; }
 64503 CALL 60032    ; Reveal a row of the play area
 64506 POP HL        ; Restore the SRB pointer to #REGhl
 64507 POP BC        ; Restore the screen row counter to #REGc
 64508 DEC C         ; Have we revealed all 20 rows yet?
 64509 JR NZ,64475   ; Jump back to reveal the next row if not
 64511 RET           ;

; Deal with a character who is stepping onto or over the roof of no. 19
;
; Used by the routine at #R64338. If the character is about to step off the
; edge of the roof of no. 17 or the apartment building next to no. 19 towards
; no. 19, this routine checks whether there is a rope above the roof of no. 19
; and moves the character accordingly. Otherwise, if the character is about to
; move left onto the roof of no. 17 (having just crossed the roof of no. 19 by
; means of the rope), this routine removes the rope.
;
; B Location indicator (2-6; see #R64338)
; H Character number (#b215-#b230)
@label=ROOFNO19
c64512 LD A,B        ; #REGa=location indicator
 64513 CP 2          ; Is the character standing on the right edge of the roof
                     ; of one of the apartment buildings (next to no. 74 and
                     ; no. 19), or on the left edge of the roof of no. 17?
 64515 RET NZ        ; Return if not
 64516 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 64518 LD A,(HL)     ; #REGa=character's x-coordinate
 64519 CP 206        ; Is it less than 206 (meaning the character is standing
                     ; on the right edge of the roof of the apartment building
                     ; next to no. 74)?
 64521 RET C         ; Return if so
 64522 JR NZ,64534   ; Jump unless the character's x-coordinate is 206
; The character is standing on the right edge of the roof the apartment
; building next to no. 19, or the left edge of the roof of no. 17.
@nowarn
*64524 LD A,(47386)  ; Collect the Z value for 208<=x<=215, 6<=y<=11 from the
                     ; block at #R47360
 64527 CP 11         ; Is there a rope connecting the roofs of no. 17 and the
                     ; apartment building next to no. 19 (in which case
                     ; #REGa=9)?
 64529 RET Z         ; Return if not
*64530 POP BC        ; Drop the return address (#R64341) from the stack
 64531 JP 60423      ; Move the character midstride
; The character is standing on the left edge of the roof of no. 17.
*64534 DEC L         ; #REGl=#b0
 64535 BIT 7,(HL)    ; Is the character facing left?
 64537 JR Z,64524    ; Jump if so
; The character is about to move right, away from the left edge of the roof of
; no. 17.
@nowarn
 64539 LD A,(47386)  ; Collect the Z value for 208<=x<=215, 6<=y<=11 from the
                     ; block at #R47360
 64542 CP 11         ; Is there a rope connecting the roofs of no. 17 and the
                     ; apartment building next to no. 19 (in which case
                     ; #REGa=9)?
 64544 CALL NZ,64549 ; Remove it if so
 64547 JR 64530      ; Move the character midstride

; Add or remove the rope above the roof of no. 19
;
; Used by the routines at #R31670 (to add the rope) and #R64512 (to remove it).
; Also updates the #R32512(screen refresh buffer) (SRB) once the rope has been
; added or removed.
@label=TOGGLEROPE
c64549 PUSH HL       ;
 64550 PUSH DE       ;
@nowarn
 64551 LD HL,47386   ; {Flip bit 1 of the Z values in the block at #R47360 that
 64554 LD A,(HL)     ; correspond to the rope (reset=rope, set=no rope)
 64555 XOR 2         ;
 64557 LD (HL),A     ;
 64558 INC L         ;
 64559 LD (HL),A     ; }
 64560 LD E,208      ; This is the x-coordinate of the left end of the rope
 64562 LD BC,2815    ; #REGb=10 (y-coordinate of the rope), #REGc=#b255
                     ; (11111111)
 64565 CALL 61731    ; Update the SRB for the left half of the rope
 64568 LD E,216      ; This is the x-coordinate of the middle of the rope
 64570 LD BC,2815    ; #REGb=10 (y-coordinate of the rope), #REGc=#b255
                     ; (11111111)
 64573 CALL 61731    ; Update the SRB for the right half of the rope
 64576 POP DE        ;
 64577 POP HL        ;
 64578 RET           ;

; Unused
s64579 DEFS 3

; Generate the table of mirrored values of #b0-#b255
;
; Used by the routines at #R63662 and #R64618. Generates the table of mirrored
; values of #b0-#b255 at #R32256.
@label=GENMIRROR
c64582 LD HL,32256   ; Point #REGhl at the first slot in the table
*64585 LD A,L        ; #REGa=byte that will be mirrored
 64586 LD BC,2048    ; #REGb=8, #REGc=0
*64589 RLCA          ; {Generate the mirror byte in #REGc
 64590 RR C          ;
 64592 DJNZ 64589    ; }
 64594 LD (HL),C     ; Store the mirror byte
 64595 INC L         ; Point #REGhl at the next slot in the table
 64596 JR NZ,64585   ; Jump back until the table is complete
 64598 RET           ;

; Hide the play area
;
; Used by the routines at #R30822 and #R64338. Hides the play area and clears
; the #R32512(screen refresh buffer) (SRB).
@label=HIDEPA
@nowarn
c64599 LD HL,23167   ; {Set the attribute bytes for the top 20 rows of the
*64602 LD (HL),9     ; screen to 9 (INK 1: PAPER 1)
 64604 DEC HL        ;
 64605 BIT 3,H       ;
 64607 JR NZ,64602   ; }
@ssub=LD HL,32512+95
 64609 LD HL,32607   ; {Set every byte in the SRB to 0
*64612 LD (HL),0     ;
 64614 DEC L         ;
 64615 JR NZ,64612   ; }
 64617 RET           ;

; Scroll the screen up and down 7 times
;
; Used by the routine at #R64338 to scroll the screen up and down a row 7 times
; when Sam hits the ground after being dropped from the roof of a building by a
; gangster.
; .
; #AUDIO2(dropped.wav)(#FOR(1,7,,3)//h/[2529]*127,141511,[1281]*255/141511//)
@label=SCRUPDOWN7
@nowarn
c64618 LD HL,59552   ; {Change the instruction at #R59552 to #S/RET/
 64621 LD (HL),201   ; }
@ssub=LD L,59612%256
 64623 LD L,220      ; {Change the instruction at #R59612 to #S/RET/
 64625 LD (HL),201   ; }
@ssub=LD HL,59371+1
 64627 LD HL,59372   ; {Set the instruction at #R59371 to '#S/LD BC/,#nn32'
 64630 LD (HL),32    ; }
@ssub=LD L,59374%256+1
 64632 LD L,239      ; {Set the instruction at #R59374 to '#S/LDIR/'
 64634 LD (HL),176   ; }
 64636 LD H,7        ; We will scroll the screen up and down a row 7 times
*64638 PUSH HL       ; Save the scroll counter
 64639 LD HL,16384   ; {Save the top 8 rows of pixels on the screen in
 64642 LD DE,32256   ; #R32256(page #b126)
 64645 LD BC,32      ;
 64648 LD A,8        ;
*64650 LDIR          ;
 64652 INC H         ;
 64653 LD L,B        ;
 64654 LD C,32       ;
 64656 DEC A         ;
 64657 JR NZ,64650   ; }
 64659 LD H,88       ; {Save the top row of attribute bytes (#w22528-#w22559)
 64661 LDIR          ; in the first 32 bytes of the screen refresh buffer at
                     ; #R32512}
 64663 CALL 59528    ; Scroll the screen up a row
@bfix=LD HL,23136    ; {Fill the 20th row of the screen with solid blue squares
 64666 LD HL,20576   ; {Fill the top line of bytes on the 20th row of the
@bfix=               ;
 64669 LD B,32       ; screen with 9s; this is a #BUG#missingBlueLine(bug)
*64671 LD (HL),9     ;
 64673 INC L         ;
 64674 DJNZ 64671    ; }
 64676 POP HL        ; Restore the scroll counter (1-7) to #REGh
 64677 PUSH HL       ; Save the scroll counter again
 64678 LD A,H        ; {Prepare the sound effect parameters
 64679 LD DE,384     ;
 64682 LD C,192      ; }
 64684 CALL 64740    ; Make a sound effect
 64687 CALL 59587    ; Scroll the screen down a row
 64690 LD HL,32256   ; {Restore the top 8 rows of pixels on the screen from
 64693 LD DE,16384   ; #R32256(page #b126)
 64696 LD A,8        ;
 64698 LD C,32       ;
*64700 LDIR          ;
 64702 INC D         ;
 64703 LD E,B        ;
 64704 LD C,32       ;
 64706 DEC A         ;
 64707 JR NZ,64700   ; }
 64709 LD D,88       ; {Restore the top row of attribute bytes
 64711 LDIR          ; (#w22528-#w22559) from where they were saved earlier}
 64713 POP HL        ; Restore the scroll counter (1-7) to #REGh
 64714 LD DE,256     ; {Prepare the sound effect parameters
 64717 LD C,96       ;
 64719 LD A,H        ; }
 64720 CALL 64740    ; Make a sound effect
 64723 DEC H         ; Decrement the scroll counter
 64724 JR NZ,64638   ; Jump back until we've scrolled the screen up and down 7
                     ; times
@nowarn
 64726 LD HL,59552   ; {Change the instruction at #R59552 back to '#S/LD
 64729 LD (HL),33    ; HL/,#n32767'}
@ssub=LD L,59612%256
 64731 LD L,220      ; {Change the instruction at #R59612 back to '#S/LD
 64733 LD (HL),33    ; HL/,#n32767'}
 64735 JP 64582      ; Regenerate the table of mirrored values of #b0-#b255 at
                     ; #R32256

; Unused
s64738 DEFS 2

; Make a sound effect
;
; Used by the routines at #R30053 (to make the cash bonus/key sound effect) and
; #R64618 (to make the sound effect for when Sam hits the ground after being
; dropped by a gangster).
;
; A Border colour
; C Pitch
; DE Duration
@label=SNDEFFECT3
c64740 XOR 16        ; Flip bit 4 of #REGa (the speaker bit)
 64742 OUT (254),A   ; Set the border colour and change the speaker state
 64744 LD B,C        ; {Perform the pitch delay
*64745 DJNZ 64745    ; }
 64747 DEC E         ; {Jump back until the sound effect is finished
 64748 JR NZ,64740   ;
 64750 DEC D         ;
 64751 JR NZ,64740   ; }
 64753 RET           ;

; Unused
s64754 DEFS 2

; Command list: Patrol duty
;
; Used by policemen (see #R56870, #R56876, #R56882, #R57126, #R57132 and
; #R57138).
@label=CLIST02
w64756 DEFW 29354    ; Do patrol duty, and chase and pick up Sam when
                     ; appropriate
 64758 DEFW 62981    ; Carry Sam to...
 64760 DEFB 128,31   ; ...the jail cell
 64762 DEFW 63281    ; Drop Sam and restart the command list

; Command list: Jail cell duty
;
; Used by the jailer (see #R65330).
@label=CLIST03
w64764 DEFW 62976    ; Go to...
 64766 DEFB 131,31   ; ...the jail cell
 64768 DEFW 31594    ; Let Sam out of jail if necessary
 64770 DEFW 62976    ; Go to...
 64772 DEFB 132,25   ; ...the room above the cell
 64774 DEFW 63304    ; {Walk up and down for a while
 64776 DEFB 168,255  ; }
 64778 DEFW 63198    ; Restart the command list

; Region definitions used by the gangster on the catwalk
;
; Used by the routine at #R29578. Defines the regions watched by the gangster
; on the catwalk (who uses the command list that follows at #R64790).
@label=HOODREG1
b64780 DEFB 8,38     ; {8<=x<38, 10<=y<17 (the gangster will give up the chase
 64782 DEFB 10,17    ; if Sam leaves this region)}
 64784 DEFB 20,37    ; {20<=x<37, 13<=y<14 (the gangster will remain inside
 64786 DEFB 13,14    ; this region, and start chasing Sam if he enters it)}
 64788 DEFB 255      ; Disguise ID (matches none of Sam's)
 64789 DEFB 8        ; Command list offset

; Command list: Keep guard on the catwalk
;
; Used by the gangster on the catwalk (see #R65318).
@label=CLIST04
w64790 DEFW 62976    ; Go to...
 64792 DEFB 30,13    ; ...the catwalk
 64794 DEFW 31338    ; {Walk up and down until Sam arrives
 64796 DEFB 168,0    ; }
 64798 DEFW 25385    ; Chase and pick up Sam
 64800 DEFW 62981    ; Carry Sam to...
 64802 DEFB 16,7     ; ...the drop-off point on the roof of the apartment
                     ; building next to no. 74
 64804 DEFW 63281    ; Drop Sam and restart the command list

; Region definitions used by Al at no. 74
;
; Used by the routine at #R29578. Defines the regions watched by Al at no. 74
; (who uses the command list that follows at #R64816).
@label=HOODREG2
b64806 DEFB 32,55    ; {32<=x<55, 14<=y<33 (Al will give up the chase if Sam
 64808 DEFB 14,33    ; leaves this region)}
 64810 DEFB 32,55    ; {32<=x<55, 22<=y<28 (Al will remain inside this region,
 64812 DEFB 22,28    ; and start chasing Sam if he enters it)}
 64814 DEFB 255      ; Disguise ID (matches none of Sam's)
 64815 DEFB 12       ; Command list offset

; Command list: Guard the hook at no. 74
;
; Used by Al at no. 74 (see #R65378).
@label=CLIST05
w64816 DEFW 62976    ; Go to...
 64818 DEFB 52,25    ; ...the right-hand side of the second floor of no. 74
 64820 DEFW 62976    ; Go to...
 64822 DEFB 45,25    ; ...the centre of the second floor of no. 74
 64824 DEFW 31338    ; {Walk up and down until Sam arrives
 64826 DEFB 168,0    ; }
 64828 DEFW 25385    ; Chase and pick up Sam
 64830 DEFW 62981    ; Carry Sam to...
 64832 DEFB 16,7     ; ...the drop-off point on the roof of the apartment
                     ; building next to no. 74
 64834 DEFW 63281    ; Drop Sam and restart the command list

; Region definitions used by the gangster at no. 19
;
; Used by the routine at #R29578. Defines the regions watched by the gangsters
; at no. 19 (who use the command list that follows at #R64846).
@label=HOODREG3
@bfix=               ; {207<=x<222, 13<=y<33 (the gangster will give up the
b64836 DEFB 207,222  ; {207<=x<222, 13<=y<32 (the gangster will give up the
@bfix=DEFB 13,33
 64838 DEFB 13,32    ; chase if Sam leaves this region)}
@bfix=               ; {207<=x<222, 15<=y<33 (the gangster will remain inside
 64840 DEFB 207,222  ; {207<=x<222, 15<=y<32 (the gangster will remain inside
@bfix=DEFB 15,33
 64842 DEFB 15,32    ; this region, and start chasing Sam if he enters it)}
@label=DISGUISE19
 64844 DEFB 7        ; Disguise ID (oil man); this is set by the routine at
                     ; #R29952: to #b7 (using the event entry at #R24544), and
                     ; later to #b255 (using the event entry at #R24558) when
                     ; Sam walks over the roof of no. 19 using the hook
 64845 DEFB 14       ; Command list offset

; Command list: Keep guard at no. 19
;
; Used by the gangsters at no. 19 (see #R65222 and #R65252).
@label=CLIST06
w64846 DEFW 62976    ; Go to...
 64848 DEFB 214,25   ; ...the second floor of no. 19
 64850 DEFW 31338    ; {Walk up and down while watching for Sam until somebody
 64852 DEFB 175,0    ; knocks on the door to no. 19}
 64854 DEFW 62976    ; Go to...
 64856 DEFB 211,31   ; ...the door to no. 19
 64858 DEFW 63423    ; Open the door
 64860 DEFW 25385    ; Chase and pick up Sam if he's nearby, or restart the
                     ; command list
 64862 DEFW 62981    ; Carry Sam to...
 64864 DEFB 216,13   ; ...the drop-off point on the roof of no. 19
 64866 DEFW 63281    ; Drop Sam and restart the command list

; Region definitions used by the gangster in game mode 4
;
; Used by the routine at #R29578. Defines the regions watched by the gangster
; in game mode 4 (who uses the command list that follows at #R64878).
@label=HOODREG4
b64868 DEFB 0,255    ; {0<=x<255, 0<=y<50 (the gangster will give up the chase
 64870 DEFB 0,50     ; if Sam leaves this region)}
 64872 DEFB 0,255    ; {0<=x<255, 0<=y<50 (the gangster will remain inside this
 64874 DEFB 0,50     ; region, and start chasing Sam if he enters it)}
 64876 DEFB 255      ; Disguise ID (matches none of Sam's)
 64877 DEFB 0        ; Command list offset

; Command list: Chase Sam for ever
;
; Used by the gangster in game mode 4 (see #R57400).
@label=CLIST07
w64878 DEFW 25385    ; Chase and pick up Sam
 64880 DEFW 62981    ; Carry Sam to...
 64882 DEFB 186,7    ; ...the drop-off point on the roof of the apartment
                     ; building next to no. 19
 64884 DEFW 63281    ; Drop Sam and restart the command list

; Command list: Control a banknote
;
; Used by banknotes (see #R58400, #R58406, #R58412, #R58418).
@label=CLIST08
w64886 DEFW 25434    ; Control a banknote

; Command list: Control a banknote (unless Sam's got the hook)
;
; Used by banknotes (see #R58424, #R58656, #R58662, #R58668, #R58674 and
; #R58680).
@label=CLIST09
w64888 DEFW 25420    ; Control a banknote (unless Sam's got the hook)

; Command list: Control the sniper
;
; Used by the sniper (see #R58150, #R58156, #R58162 and #R58168).
@label=CLIST10
w64890 DEFW 25307    ; Control the sniper

; Region definitions used by the gangster outside the police station
;
; Used by the routine at #R29578. Defines the regions watched by the gangster
; outside the police station (who uses the command list that follows at
; #R64902).
@label=HOODREG5
b64892 DEFB 0,255    ; {0<=x<255, 10<=y<36 (the gangster will give up the chase
 64894 DEFB 10,36    ; if Sam leaves this region)}
 64896 DEFB 125,148  ; {125<=x<148, 34<=y<35 (the gangster will remain inside
 64898 DEFB 34,35    ; this region, and start chasing Sam if he enters it)}
 64900 DEFB 255      ; Disguise ID (matches none of Sam's)
 64901 DEFB 8        ; Command list offset

; Command list: Keep guard outside the police station
;
; Used by the gangster outside the police station (see #R57388 and #R57394).
@label=CLIST11
w64902 DEFW 62976    ; Go to...
 64904 DEFB 136,34   ; ...the sidewalk outside the police station
 64906 DEFW 31338    ; {Walk up and down until Sam arrives
 64908 DEFB 168,0    ; }
 64910 DEFW 25385    ; Chase and pick up Sam
 64912 DEFW 62981    ; Carry Sam to...
 64914 DEFB 216,13   ; ...the drop-off point on the roof of no. 19
 64916 DEFW 24932    ; Return to the sidewalk outside the police station and
                     ; restart the command list

; Command list: Patrol duty (demo mode)
;
; Used by character #b222 (policeman) in demo mode (see #R56864).
@label=CLIST12
w64918 DEFW 62976    ; Go to...
 64920 DEFB 253,34   ; ...the steps outside no. 15
 64922 DEFW 62976    ; Go to...
 64924 DEFB 200,34   ; ...the end of the sidewalk to the left of the door to
                     ; no. 19
 64926 DEFW 63198    ; Restart the command list

; Command list: Control the fat man
;
; Used by the fat man (see #R57644).
@label=CLIST13
w64928 DEFW 62976    ; Go to...
 64930 DEFB 160,34   ; ...the sidewalk between the door to no. 27 and the
                     ; traffic lights
 64932 DEFW 63520    ; Walk up and down for a while
 64934 DEFW 62976    ; Go to...
 64936 DEFB 184,35   ; ...the spot under the leftmost window on the first floor
                     ; of the apartment building next to no. 19
 64938 DEFW 63198    ; Restart the command list

; Command list: Go to Sam's office
;
; Used by Lana (see #R57650).
@label=CLIST14
w64940 DEFW 59147    ; Do nothing; this command is terminated by the routine at
                     ; #R29952 (using the event entry at #R24774) when Sam
                     ; phones Lana while in possession of the budgie
 64942 DEFW 62976    ; Go to...
 64944 DEFB 228,19   ; ...Sam's office
 64946 DEFW 59147    ; Do nothing

; Command list: No. 31 walkabout
;
; Used by character #b217 (see #R65270).
@label=CLIST15
w64948 DEFW 62976    ; Go to...
 64950 DEFB 104,34   ; ...the sidewalk at the left edge of no. 31
 64952 DEFW 62976    ; Go to...
 64954 DEFB 130,34   ; ...the sidewalk outside the jail cell
 64956 DEFW 62976    ; Go to...
 64958 DEFB 110,19   ; ...the top floor of no. 31
 64960 DEFW 63520    ; Walk up and down for a while
 64962 DEFW 63198    ; Restart the command list

; Command list: No. 15 walkabout
;
; Used by character #b217 (see #R65282).
@label=CLIST16
w64964 DEFW 62976    ; Go to...
 64966 DEFB 218,34   ; ...the sidewalk outside the first-floor window of no. 19
 64968 DEFW 62976    ; Go to...
 64970 DEFB 247,19   ; ...the third floor of no. 15
 64972 DEFW 63520    ; Walk up and down for a while
 64974 DEFW 63198    ; Restart the command list

; Command list: Shops walkabout
;
; Used by character #b218 (see #R65312).
@label=CLIST17
w64976 DEFW 62976    ; Go to...
 64978 DEFB 230,33   ; ...the shop underneath no. 17
 64980 DEFW 63520    ; Walk up and down for a while
 64982 DEFW 62976    ; Go to...
 64984 DEFB 246,33   ; ...the shop underneath no. 15
 64986 DEFW 63520    ; Walk up and down for a while
 64988 DEFW 63198    ; Restart the command list

; Unused
s64990 DEFB 0

; Command list: Hotel walkabout
;
; Used by character #b219 (see #R65324).
@label=CLIST18
w64991 DEFW 62976    ; Go to...
 64993 DEFB 66,7     ; ...the top floor of the hotel (between the two leftmost
                     ; windows)
 64995 DEFW 62976    ; Go to...
 64997 DEFB 93,25    ; ...the second floor of the hotel (between the two
                     ; rightmost windows)
 64999 DEFW 63198    ; Restart the command list

; Unused
s65001 DEFB 0

; Command list: No. 15 walkabout
;
; Used by character #b219 (see #R65342).
@label=CLIST19
w65002 DEFW 62976    ; Go to...
 65004 DEFB 246,33   ; ...the shop underneath no. 15
 65006 DEFW 63520    ; Walk up and down for a while
 65008 DEFW 62976    ; Go to...
 65010 DEFB 247,13   ; ...the top floor of no. 15
 65012 DEFW 63520    ; Walk up and down for a while
 65014 DEFW 63198    ; Restart the command list

; Command list: No. 74 walkabout
;
; Used by character #b220 (see #R65348).
@label=CLIST20
w65016 DEFW 62976    ; Go to...
 65018 DEFB 22,33    ; ...the right-hand shop under the apartments next to no.
                     ; 74
 65020 DEFW 63520    ; Walk up and down for a while
 65022 DEFW 62976    ; Go to...
 65024 DEFB 40,19    ; ...the third floor of no. 74
 65026 DEFW 63520    ; Walk up and down for a while
 65028 DEFW 63198    ; Restart the command list

; Command list: Hotel walkabout
;
; Used by character #b220 (see #R65354).
@label=CLIST21
w65030 DEFW 62976    ; Go to...
 65032 DEFB 81,31    ; ...the door of the hotel
; This command list continues at #R65034.

; Command list: Hotel walkabout
;
; Used by character #b224 (a gangster) in demo mode (see #R57376). The command
; list at #R65030 also continues here.
@label=CLIST22
w65034 DEFW 62976    ; Go to...
 65036 DEFB 102,34   ; ...the sidewalk at the right edge of the hotel
 65038 DEFW 62976    ; Go to...
 65040 DEFB 100,19   ; ...the right-hand magenta room on the third floor of the
                     ; hotel
 65042 DEFW 63198    ; Restart the command list

; Command list: Apartment building walkabout
;
; Used by character #b220 (see #R65366).
@label=CLIST23
w65044 DEFW 62976    ; Go to...
 65046 DEFB 184,13   ; ...the top floor of the apartment building next to no.
                     ; 19 (near the second window from the left)
 65048 DEFW 63520    ; Walk up and down for a while
 65050 DEFW 62976    ; Go to...
 65052 DEFB 190,31   ; ...the first floor of the apartment building next to no.
                     ; 19 (near the third window from the left)
 65054 DEFW 63520    ; Walk up and down for a while
 65056 DEFW 63198    ; Restart the command list

; Unused
s65058 DEFB 0

; Command list: Front door duty at no. 15
;
; Used by character #b220 (see #R65372).
@label=CLIST24
w65059 DEFW 62976    ; Go to...
 65061 DEFB 247,25   ; ...the second floor of no. 15 (near the middle window)
 65063 DEFW 63304    ; {Walk up and down until somebody knocks on the door to
 65065 DEFB 179,0    ; no. 15}
 65067 DEFW 62976    ; Go to...
 65069 DEFB 252,31   ; ...the door to no. 15
 65071 DEFW 63423    ; Open the door
 65073 DEFW 63198    ; Restart the command list

; Unused
s65075 DEFB 0

; Command list: Control Daisy
;
; Used by Daisy (see #R57894, #R57900 and #R57906).
@label=CLIST25
w65076 DEFW 62976    ; Go to...
 65078 DEFB 235,19   ; ...Sam's office
 65080 DEFW 63520    ; Walk up and down for a while
 65082 DEFW 62976    ; Go to...
 65084 DEFB 234,19   ; ...Sam's office
 65086 DEFW 63520    ; Walk up and down for a while
 65088 DEFW 62976    ; Go to...
 65090 DEFB 203,13   ; ...the top floor of the apartment building next to no.
                     ; 19 (right-hand side)
 65092 DEFW 63198    ; Restart the command list

; Unused
;
; Command list remnants, perhaps from the command list at #R65076.
u65094 DEFW 63198    ; Restart the command list
 65096 DEFB 0

; Command list: Apartment building walkabout
;
; Used by character #b221 (see #R65396).
@label=CLIST26
w65097 DEFW 62976    ; Go to...
 65099 DEFB 187,25   ; ...the second floor of the apartment building next to
                     ; no. 19 (left-hand side)
 65101 DEFW 63520    ; Walk up and down for a while
 65103 DEFW 62976    ; Go to...
 65105 DEFB 205,19   ; ...the third floor of the apartment building next to no.
                     ; 19 (right-hand side)
 65107 DEFW 63520    ; Walk up and down for a while
 65109 DEFW 63198    ; Restart the command list

; Unused
s65111 DEFB 0

; Command list: Front door duty at no. 74
;
; Used by character #b215 (see #R65204).
@label=CLIST27
w65112 DEFW 62976    ; Go to...
 65114 DEFB 53,13    ; ...the top floor of no. 74
 65116 DEFW 63304    ; {Walk up and down for a while and then skip over the
 65118 DEFB 172,255  ; next two commands unless somebody knocks on the door to
                     ; no. 74}
 65120 DEFW 62976    ; Go to...
 65122 DEFB 43,31    ; ...the door to no. 74
 65124 DEFW 63423    ; Open the door
 65126 DEFW 62976    ; Go to...
 65128 DEFB 40,31    ; ...the first floor of no. 74 (just left of the door)
 65130 DEFW 63304    ; {Walk up and down for a while and then skip over the
 65132 DEFB 172,255  ; next two commands unless somebody knocks on the door to
                     ; no. 74}
 65134 DEFW 62976    ; Go to...
 65136 DEFB 43,31    ; ...the door to no. 74
 65138 DEFW 63423    ; Open the door
 65140 DEFW 63198    ; Restart the command list

; Unused
s65142 DEFB 0

; Command list: Front door duty at no. 31
;
; Used by character #b216 (see #R65240).
@label=CLIST28
w65143 DEFW 62976    ; Go to...
 65145 DEFB 114,25   ; ...the second floor of no. 31
 65147 DEFW 63304    ; {Walk up and down until somebody knocks on the door to
 65149 DEFB 173,0    ; no. 31}
 65151 DEFW 62976    ; Go to...
 65153 DEFB 114,31   ; ...the door to no. 31
 65155 DEFW 63423    ; Open the door
 65157 DEFW 63198    ; Restart the command list

; Unused
s65159 DEFS 11

; Command list: Control a cat
;
; Used by cats (see #R65288 and #R65306).
@label=CLIST29
w65170 DEFW 63530    ; Control a cat

; Command list: Do nothing
;
; See #R56888, #R57120, #R57144, #R57632, #R57638, #R57656, #R57912, #R58144,
; #R65216, #R65234, #R65246, #R65264, #R65276, #R65300, #R65360, #R65390 and
; #R65402.
@label=CLIST30
w65172 DEFW 59147    ; Do nothing

; Command list: Walk up and down for ever
;
; Used by various characters (see #R57888, #R65198, #R65210, #R65294, #R65336
; and #R65384).
@label=CLIST31
w65174 DEFW 63304    ; {Walk up and down for ever
 65176 DEFB 168,0    ; }

; Command list: Apartment building walkabout
;
; Used by character #b217 (see #R65258).
@label=CLIST32
w65178 DEFW 62976    ; Go to...
 65180 DEFB 21,25    ; ...the second floor of the apartment building next to
                     ; no. 74 (right-hand side)
 65182 DEFW 63520    ; Walk up and down for a while
; This command list continues at #R65184.

; Command list: Apartment building walkabout
;
; Used by character #b216 (see #R65228). The command list at #R65178 also
; continues here.
@label=CLIST33
w65184 DEFW 62976    ; Go to...
 65186 DEFB 6,33     ; ...the shop at the far left of town
 65188 DEFW 63520    ; Walk up and down for a while
 65190 DEFW 62976    ; Go to...
 65192 DEFB 7,19     ; ...the third floor of the apartment building next to no.
                     ; 74 (left-hand side)
 65194 DEFW 63520    ; Walk up and down for a while
 65196 DEFW 63198    ; Restart the command list

; Initialisation parameters for character group #b215
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R55040(#b215) when X=0 (where X is the
; leftmost column of the play area on screen).
@label=C215INITP1
b65198 DEFB 80       ; Animatory state (#AS80: lady in a hat)
 65199 DEFB 7,19     ; Location (third floor of the apartment building next to
                     ; no. 74, left-hand side)
 65201 DEFB 1        ; z-coordinate (indoors)
 65202 DEFW 65174    ; Command list: Walk up and down for ever
; The next set of parameters belongs to the character who owns character buffer
; #R55040(#b215) when 8<=X<=56.
@label=C215INITP2
 65204 DEFB 224      ; Animatory state (#AS224: girl with a pony tail)
 65205 DEFB 48,19    ; Location (third floor of no. 74, right-hand side)
 65207 DEFB 1        ; z-coordinate (indoors)
 65208 DEFW 65112    ; Command list: Front door duty at no. 74
; The next set of parameters belongs to the character who owns character buffer
; #R55040(#b215) when 64<=X<=112.
@label=C215INITP3
 65210 DEFB 104      ; Animatory state (#AS104: man in a bowler hat)
 65211 DEFB 100,7    ; Location (top floor of the hotel, right-hand room)
 65213 DEFB 1        ; z-coordinate (indoors)
 65214 DEFW 65174    ; Command list: Walk up and down for ever
; The next set of parameters belongs to the character who owns character buffer
; #R55040(#b215) when 120<=X<=168.
@label=C215INITP4
 65216 DEFB 118      ; Animatory state (#AS118: cat)
 65217 DEFB 0,45     ; Location (out of sight)
 65219 DEFB 8        ; z-coordinate (invisible)
 65220 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R55040(#b215) when X>=176.
@label=C215INITP5
 65222 DEFB 32       ; Animatory state (#AS32: gangster)
 65223 DEFB 220,19   ; Location (top floor of no. 19, right-hand side)
 65225 DEFB 1        ; z-coordinate (indoors)
 65226 DEFW 64846    ; Command list: Keep guard at no. 19

; Initialisation parameters for character group #b216
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R55296(#b216) when X<=8 (where X is the
; leftmost column of the play area on screen).
@label=C216INITP1
b65228 DEFB 224      ; Animatory state (#AS224: girl with a pony tail)
 65229 DEFB 3,19     ; Location (third floor of the apartment building next to
                     ; no. 74, left-hand side)
 65231 DEFB 1        ; z-coordinate (indoors)
 65232 DEFW 65184    ; Command list: Apartment building walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R55296(#b216) when 16<=X<=64.
@label=C216INITP2
 65234 DEFB 118      ; Animatory state (#AS118: cat)
 65235 DEFB 0,45     ; Location (out of sight)
 65237 DEFB 8        ; z-coordinate (invisible)
 65238 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R55296(#b216) when 72<=X<=120.
@label=C216INITP3
 65240 DEFB 88       ; Animatory state (#AS88: lady with big hair)
 65241 DEFB 114,31   ; Location (first floor of no. 31, near the door)
 65243 DEFB 1        ; z-coordinate (indoors)
 65244 DEFW 65143    ; Command list: Front door duty at no. 31
; The next set of parameters belongs to the character who owns character buffer
; #R55296(#b216) when 128<=X<=176.
@label=C216INITP4
 65246 DEFB 118      ; Animatory state (#AS118: cat)
 65247 DEFB 0,45     ; Location (out of sight)
 65249 DEFB 8        ; z-coordinate (invisible)
 65250 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R55296(#b216) when X>=184.
@label=C216INITP5
 65252 DEFB 160      ; Animatory state (#AS160: gangster)
 65253 DEFB 220,19   ; Location (top floor of no. 19, right-hand side)
 65255 DEFB 1        ; z-coordinate (indoors)
 65256 DEFW 64846    ; Command list: Keep guard at no. 19

; Initialisation parameters for character group #b217
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R55552(#b217) when X<=16 (where X is the
; leftmost column of the play area on screen).
@label=C217INITP1
b65258 DEFB 112      ; Animatory state (#AS112: man in a baseball cap)
 65259 DEFB 6,33     ; Location (in the shop at the far left of town)
 65261 DEFB 1        ; z-coordinate (indoors)
 65262 DEFW 65178    ; Command list: Apartment building walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R55552(#b217) when 24<=X<=72.
@label=C217INITP2
 65264 DEFB 118      ; Animatory state (#AS118: cat)
 65265 DEFB 0,45     ; Location (out of sight)
 65267 DEFB 8        ; z-coordinate (invisible)
 65268 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R55552(#b217) when 80<=X<=128.
@label=C217INITP3
 65270 DEFB 224      ; Animatory state (#AS224: girl with a pony tail)
 65271 DEFB 114,19   ; Location (top floor of no. 31, right-hand side)
 65273 DEFB 1        ; z-coordinate (indoors)
 65274 DEFW 64948    ; Command list: No. 31 walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R55552(#b217) when 136<=X<=184.
@label=C217INITP4
 65276 DEFB 118      ; Animatory state (#AS118: cat)
 65277 DEFB 0,45     ; Location (out of sight)
 65279 DEFB 8        ; z-coordinate (invisible)
 65280 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R55552(#b217) when X>=192.
@label=C217INITP5
 65282 DEFB 232      ; Animatory state (#AS232: man in a bowler hat)
 65283 DEFB 250,34   ; Location (sidewalk outside no. 15)
 65285 DEFB 4        ; z-coordinate (outside)
 65286 DEFW 64964    ; Command list: No. 15 walkabout

; Initialisation parameters for character group #b218
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R55808(#b218) when X<=24 (where X is the
; leftmost column of the play area on screen).
@label=C218INITP1
b65288 DEFB 118      ; Animatory state (#AS118: cat)
 65289 DEFB 15,34    ; Location (sidewalk outside the right-hand shop under the
                     ; apartments next to no. 74)
 65291 DEFB 4        ; z-coordinate (outside)
 65292 DEFW 65170    ; Command list: Control a cat
; The next set of parameters belongs to the character who owns character buffer
; #R55808(#b218) when 32<=X<=80.
@label=C218INITP2
 65294 DEFB 208      ; Animatory state (#AS208: lady in a hat)
 65295 DEFB 64,25    ; Location (second floor of the hotel, left-hand side)
 65297 DEFB 1        ; z-coordinate (indoors)
 65298 DEFW 65174    ; Command list: Walk up and down for ever
; The next set of parameters belongs to the character who owns character buffer
; #R55808(#b218) when 88<=X<=136.
@label=C218INITP3
 65300 DEFB 118      ; Animatory state (#AS118: cat)
 65301 DEFB 0,45     ; Location (out of sight)
 65303 DEFB 8        ; z-coordinate (invisible)
 65304 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R55808(#b218) when 144<=X<=192.
@label=C218INITP4
 65306 DEFB 118      ; Animatory state (#AS118: cat)
 65307 DEFB 176,35   ; Location (by the left edge of the apartment building
                     ; next to no. 19)
 65309 DEFB 4        ; z-coordinate (outside)
 65310 DEFW 65170    ; Command list: Control a cat
; The next set of parameters belongs to the character who owns character buffer
; #R55808(#b218) when X>=200.
@label=C218INITP5
 65312 DEFB 80       ; Animatory state (#AS80: lady in a hat)
 65313 DEFB 232,34   ; Location (sidewalk outside no. 17)
 65315 DEFB 4        ; z-coordinate (outside)
 65316 DEFW 64976    ; Command list: Shops walkabout

; Initialisation parameters for character group #b219
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R56064(#b219) when X<=32 (where X is the
; leftmost column of the play area on screen).
@label=C219INITP1
b65318 DEFB 32       ; Animatory state (#AS32: gangster)
 65319 DEFB 20,13    ; Location (top floor of the apartment building next to
                     ; no. 74, right-hand side)
 65321 DEFB 1        ; z-coordinate (indoors)
 65322 DEFW 64790    ; Command list: Keep guard on the catwalk
; The next set of parameters belongs to the character who owns character buffer
; #R56064(#b219) when 40<=X<=88.
@label=C219INITP2
 65324 DEFB 112      ; Animatory state (#AS112: man in a baseball cap)
 65325 DEFB 72,19    ; Location (third floor of the hotel, left-hand side)
 65327 DEFB 1        ; z-coordinate (indoors)
 65328 DEFW 64991    ; Command list: Hotel walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R56064(#b219) when 96<=X<=144.
@label=C219INITP3
 65330 DEFB 16       ; Animatory state (#AS16: policeman)
 65331 DEFB 135,19   ; Location (third floor of the police station, left-hand
                     ; side)
 65333 DEFB 1        ; z-coordinate (indoors)
 65334 DEFW 64764    ; Command list: Jail cell duty
; The next set of parameters belongs to the character who owns character buffer
; #R56064(#b219) when 152<=X<=200.
@label=C219INITP4
 65336 DEFB 88       ; Animatory state (#AS88: lady with big hair)
 65337 DEFB 187,19   ; Location (third floor of the apartment building next to
                     ; no. 19, left-hand side)
 65339 DEFB 1        ; z-coordinate (indoors)
 65340 DEFW 65174    ; Command list: Walk up and down for ever
; The next set of parameters belongs to the character who owns character buffer
; #R56064(#b219) when X>=208.
@label=C219INITP5
 65342 DEFB 80       ; Animatory state (#AS80: lady in a hat)
 65343 DEFB 248,19   ; Location (third floor of no. 15)
 65345 DEFB 1        ; z-coordinate (indoors)
 65346 DEFW 65002    ; Command list: No. 15 walkabout

; Initialisation parameters for character group #b220
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R56320(#b220) when X<=40 (where X is the
; leftmost column of the play area on screen).
@label=C220INITP1
b65348 DEFB 88       ; Animatory state (#AS88: lady with big hair)
 65349 DEFB 32,34    ; Location (sidewalk by the left edge of no. 74)
 65351 DEFB 4        ; z-coordinate (outside)
 65352 DEFW 65016    ; Command list: No. 74 walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R56320(#b220) when 48<=X<=96.
@label=C220INITP2
 65354 DEFB 88       ; Animatory state (#AS88: lady with big hair)
 65355 DEFB 100,19   ; Location (third floor of the hotel, right-hand magenta
                     ; room)
 65357 DEFB 1        ; z-coordinate (indoors)
 65358 DEFW 65030    ; Command list: Hotel walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R56320(#b220) when 104<=X<=152.
@label=C220INITP3
 65360 DEFB 118      ; Animatory state (#AS118: cat)
 65361 DEFB 0,45     ; Location (out of sight)
 65363 DEFB 8        ; z-coordinate (invisible)
 65364 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R56320(#b220) when 160<=X<=208.
@label=C220INITP4
 65366 DEFB 112      ; Animatory state (#AS112: man in a baseball cap)
 65367 DEFB 194,19   ; Location (third floor of the apartment building next to
                     ; no. 19, by the stairs)
 65369 DEFB 1        ; z-coordinate (indoors)
 65370 DEFW 65044    ; Command list: Apartment building walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R56320(#b220) when X>=216.
@label=C220INITP5
 65372 DEFB 88       ; Animatory state (#AS88: lady with big hair)
 65373 DEFB 248,25   ; Location (second floor of no. 15)
 65375 DEFB 1        ; z-coordinate (indoors)
 65376 DEFW 65059    ; Command list: Front door duty at no. 15

; Initialisation parameters for character group #b221
;
; Used by the routine at #R63472. The first set of parameters belongs to the
; character who owns character buffer #R56576(#b221) when X<=48 (where X is the
; leftmost column of the play area on screen).
@label=C221INITP1
b65378 DEFB 160      ; Animatory state (#AS160: gangster)
 65379 DEFB 50,25    ; Location (second floor of no. 74, right-hand side)
 65381 DEFB 1        ; z-coordinate (indoors)
 65382 DEFW 64816    ; Command list: Guard the hook at no. 74
; The next set of parameters belongs to the character who owns character buffer
; #R56576(#b221) when 56<=X<=104.
@label=C221INITP2
 65384 DEFB 104      ; Animatory state (#AS104: man in a bowler hat)
 65385 DEFB 100,25   ; Location (second floor of the hotel, right-hand yellow
                     ; room)
 65387 DEFB 1        ; z-coordinate (indoors)
 65388 DEFW 65174    ; Command list: Walk up and down for ever
; The next set of parameters belongs to the character who owns character buffer
; #R56576(#b221) when 112<=X<=160.
@label=C221INITP3
 65390 DEFB 118      ; Animatory state (#AS118: cat)
 65391 DEFB 0,45     ; Location (out of sight)
 65393 DEFB 8        ; z-coordinate (invisible)
 65394 DEFW 65172    ; Command list: Do nothing
; The next set of parameters belongs to the character who owns character buffer
; #R56576(#b221) when 168<=X<=216.
@label=C221INITP4
 65396 DEFB 104      ; Animatory state (#AS104: man in a bowler hat)
 65397 DEFB 200,25   ; Location (second floor of the apartment building next to
                     ; no. 19, right-hand side)
 65399 DEFB 1        ; z-coordinate (indoors)
 65400 DEFW 65097    ; Command list: Apartment building walkabout
; The next set of parameters belongs to the character who owns character buffer
; #R56576(#b221) when X>=224.
@label=C221INITP5
 65402 DEFB 118      ; Animatory state (#AS118: cat)
 65403 DEFB 0,45     ; Location (out of sight)
 65405 DEFB 8        ; z-coordinate (invisible)
 65406 DEFW 65172    ; Command list: Do nothing

; Location descriptors (x-coordinate 176)
;
; Used by the routine at #R60179.
; .
; The first descriptor corresponds to the spot just to the right of the
; top-left edge of the roof of the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(176,6,1,0) }
; TABLE#
@label=LOCDESCS176
b65408 DEFB 4,132    ; y=6, z=1; left, down/right
; The next descriptor corresponds to the spot just to the right of the left
; edge of the roof of the apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(176,7,1,0) }
; TABLE#
 65410 DEFB 6,64     ; y=7, z=1; right
; The next three descriptors correspond to the fire escape on the apartment
; building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(176,11,2,0) | #CALL:ld_img(176,17,2,0) |
; #CALL:ld_img(176,23,2,0) }
; TABLE#
 65412 DEFB 78,208   ; y=11, z=2; left, right, up/right (top floor)
 65414 DEFB 90,208   ; y=17, z=2; left, right, up/right (third floor)
 65416 DEFB 102,208  ; y=23, z=2; left, right, up/right (second floor)
; The next four descriptors correspond to the far left wall inside the
; apartment building next to no. 19.
; .
; #UDGTABLE(locdesc)
; { #CALL:ld_img(176,13,1,0) | #CALL:ld_img(176,19,1,0) |
; #CALL:ld_img(176,25,1,0) | #CALL:ld_img(176,31,4,0) }
; TABLE#
 65418 DEFB 18,64    ; y=13, z=1; right (top floor)
 65420 DEFB 30,64    ; y=19, z=1; right (third floor)
 65422 DEFB 42,64    ; y=25, z=1; right (second floor)
 65424 DEFB 54,64    ; y=31, z=1; right (first floor)
 65426 DEFB 255      ; End marker

; Unused
;
; These bytes are probably remnants of location descriptor tables.
u65427 DEFB 64,255
 65429 DEFB 120,224  ; y=32, z=2; left, right, up/left
 65431 DEFB 255      ; End marker

; Building entrance x-coordinates
;
; Used by the routine at #R60812.
@label=ENTRANCEX
b65432 DEFB 0,1      ; Left-hand shop under the apartments next to no. 74
 65434 DEFB 15,17    ; Right-hand shop under the apartments next to no. 74
 65436 DEFB 222,224  ; Shop under no. 17
 65438 DEFB 238,240  ; Shop under no. 15
 65440 DEFB 8,8      ; Apartment building next to no. 74
 65442 DEFB 134,140  ; Police station
 65444 DEFB 154,158  ; No. 27
 65446 DEFB 39,46    ; No. 74
 65448 DEFB 67,90    ; Hotel (changed by the routine at #R31808)
 65450 DEFB 111,118  ; No. 31
 65452 DEFB 207,214  ; No. 19
 65454 DEFB 234,238  ; No. 17
 65456 DEFB 0,0      ; Unused
 65458 DEFB 250,254  ; No. 15
 65460 DEFB 192,192  ; Apartment building next to no. 19

; Door locations
;
; Used by the routines at #R61696 and #R62099. Each entry in this table is the
; x-coordinate of the rightmost column in an 8-tile wide segment of the play
; area that contains a door to a shop or house.
@label=DOORSEGX
b65462 DEFB 7        ; Shop at the far left of town
 65463 DEFB 23       ; Right-hand shop under the apartments next to no. 74
 65464 DEFB 47       ; No. 74
 65465 DEFB 119      ; No. 31
 65466 DEFB 159      ; No. 27
 65467 DEFB 215      ; No. 19
 65468 DEFB 231      ; Shop under no. 17
 65469 DEFB 239      ; No. 17
 65470 DEFB 247      ; Shop under no. 15
 65471 DEFB 255      ; No. 15

; Locations affected by blown fuses
;
; Used by the routines at #R29004, #R62468 and #R63450. Each of the 32 bytes in
; this data table corresponds to an 8-column-wide segment of the play area: the
; first byte to x-coordinates 0-7, the second byte to x-coordinates 8-15 and so
; on. Each value is the LSB of the address of the game status buffer variable
; that holds the delay counter for the fuse (if any) that affects the segment
; (see #R32674).
@label=BFUSELOCS
b65472 DEFB 168,168,168,168                             ; 0<=x<32: no fuses
                                                        ; here
 65476 DEFB 162,162,162                                 ; 32<=x<56: no. 74
 65479 DEFB 163,163,163,163,163,163                     ; 56<=x<104: hotel
 65485 DEFB 164,164                                     ; 104<=x<120: no. 31
 65487 DEFB 168,168,168,168,168,168,168,168,168,168,168 ; 120<=x<208: no fuses
                                                        ; here
 65498 DEFB 165,165                                     ; 208<=x<224: no. 19
 65500 DEFB 166,166                                     ; 224<=x<240: no. 17
 65502 DEFB 167,167                                     ; 240<=x<256: no. 15

; Game status buffer template
;
; Before demo mode or a new game starts, the data here is copied into the last
; 32 bytes of the game status buffer by the routine at #R63662.
@label=GSBTEMPLT
b65504 DEFB 0,0,8,16,16,48,0    ; #R32736 (unused)
 65511 DEFB 10                  ; Bullet timer (#R32743)
 65512 DEFB 128                 ; Disguise status flags (#R32744)
 65513 DEFB 0                   ; Object inventory (#R32745)
 65514 DEFB 0                   ; Key inventory (#R32746)
 65515 DEFB 0                   ; Police flags (#R32747)
@label=HISCORE
 65516 DEFW 0                   ; High score (#R32748); this is set by the
                                ; routine at #R61630
@label=T_GAMEMODE
 65518 DEFB 0                   ; Game mode indicator (#R32750); this is set by
                                ; the routine at #R61630
 65519 DEFB 255                 ; First aid (#R32751)
 65520 DEFB 0,0,8,16,32,128,0,0 ; {Door status flags (#R32752)
 65528 DEFB 0,64                ; }
@label=T_KEMPSTON
 65530 DEFB 0                   ; Input device indicator (#R32762); this value
                                ; is changed by the routine at #R24951
 65531 DEFB 215                 ; Number of the character just moved (#R32763)
 65532 DEFB 0                   ; Sam's status flags (#R32764)
 65533 DEFB 0                   ; Last key pressed (#R32765)
 65534 DEFB 0                   ; x-coordinate of the leftmost column of the
                                ; play area on screen (#R32766); this value is
                                ; not used
 65535 DEFB 20                  ; y-coordinate of the topmost row of the play
                                ; area on screen (#R32767); this value is not
                                ; used
